#ifndef __RTL_WLAN_BITDEF_H__
#define __RTL_WLAN_BITDEF_H__

//#include "halmac_hw_cfg.h"

//#define CPU_OPT_WIDTH 0x1F

#if (MAC_AX_8730E_SUPPORT)

/* 2 REG_SYS_PWC_ISO_CTRL			(Offset 0x0000) */

#define BIT_ISO_AFE					BIT(12)
#define BIT_ISO_MAC					BIT(8)
#define BIT_WL_SWR_REQ_1P1V				BIT(4)
#define BIT_WL_PWM_EN					BIT(3)
#define BIT_WL_SAVE_EN					BIT(2)
#define BIT_LPC_MAC_EN					BIT(1)
#define BIT_SPC_MAC_EN					BIT(0)

/* 2 REG_WL_CLK_CTRL				(Offset 0x0002) */

#define BIT_WLON_SWITCH_TSF_EN				BIT(12)
#define BIT_WLOFF_SWITCH_TSF_EN			BIT(11)
#define BIT_IS_PMC_CLK_INSLP				BIT(11)
#define BIT_WL_CKEN_IQDUMP				BIT(10)
#define BIT_IS_SCH_CLK_INSLP_V2			BIT(9)
#define BIT_TSF_CKSLP_SEL				BIT(8)
#define BIT_WL_CKTSF_EN				BIT(6)
#define BIT_WL_FQSEL_CK32K				BIT(5)
#define BIT_CKSL_CK32K					BIT(4)
#define BIT_WL_CK32K_EN				BIT(3)
#define BIT_WL_CKMCU_EN				BIT(2)
#define BIT_WL_CKSEC_EN				BIT(1)
#define BIT_WL_CKMAC_EN				BIT(0)

/* 2 REG_WL_FUNC_EN				(Offset 0x0004) */

#define BIT_DAI_RW_EN					BIT(31)
#define BIT_DAI_REG00_WREN				BIT(30)
#define BIT_RF_RSTB_V1					BIT(25)
#define BIT_WL_SEL_SW_SI				BIT(24)
#define BIT_BB_SAVE_EN					BIT(18)
#define BIT_FEN_BBRSTB_V2				BIT(17)
#define BIT_FEN_BB_GLB_RSTN_V2				BIT(16)
#define BIT_WLON_TRIG_HIOE_EN				BIT(11)
#define BIT_WLOFF_TRIG_HIOE_EN				BIT(10)
#define BIT_FEN_MLPLT					BIT(9)
#define BIT_RFAFE_HW33PDB				BIT(8)
#define BIT_WLON_TRIG_HIOE_REQ				BIT(6)
#define BIT_WLOFF_TRIG_HIOE_REQ			BIT(5)
#define BIT_FEN_WLON					BIT(4)
#define BIT_FEN_WLMCU					BIT(3)
#define BIT_FEN_MACREG					BIT(2)
#define BIT_FEN_WLOFF					BIT(1)
#define BIT_FEN_MAC_PMC				BIT(0)

/* 2 REG_CLKDIV_CKSEL			(Offset 0x0008) */

#define BIT_WL_CKRFC_EN				BIT(24)

#define BIT_SHIFT_RFC_CLK_SEL				22
#define BIT_MASK_RFC_CLK_SEL				0x3
#define BIT_RFC_CLK_SEL(x)				(((x) & BIT_MASK_RFC_CLK_SEL) << BIT_SHIFT_RFC_CLK_SEL)
#define BITS_RFC_CLK_SEL				(BIT_MASK_RFC_CLK_SEL << BIT_SHIFT_RFC_CLK_SEL)
#define BIT_CLEAR_RFC_CLK_SEL(x)			((x) & (~BITS_RFC_CLK_SEL))
#define BIT_GET_RFC_CLK_SEL(x)				(((x) >> BIT_SHIFT_RFC_CLK_SEL) & BIT_MASK_RFC_CLK_SEL)
#define BIT_SET_RFC_CLK_SEL(x, v)			(BIT_CLEAR_RFC_CLK_SEL(x) | BIT_RFC_CLK_SEL(v))

#define BIT_SHIFT_SEC_CLK_SEL				20
#define BIT_MASK_SEC_CLK_SEL				0x3
#define BIT_SEC_CLK_SEL(x)				(((x) & BIT_MASK_SEC_CLK_SEL) << BIT_SHIFT_SEC_CLK_SEL)
#define BITS_SEC_CLK_SEL				(BIT_MASK_SEC_CLK_SEL << BIT_SHIFT_SEC_CLK_SEL)
#define BIT_CLEAR_SEC_CLK_SEL(x)			((x) & (~BITS_SEC_CLK_SEL))
#define BIT_GET_SEC_CLK_SEL(x)				(((x) >> BIT_SHIFT_SEC_CLK_SEL) & BIT_MASK_SEC_CLK_SEL)
#define BIT_SET_SEC_CLK_SEL(x, v)			(BIT_CLEAR_SEC_CLK_SEL(x) | BIT_SEC_CLK_SEL(v))

#define BIT_SHIFT_MAC_CLK_SEL				18
#define BIT_MASK_MAC_CLK_SEL				0x3
#define BIT_MAC_CLK_SEL(x)				(((x) & BIT_MASK_MAC_CLK_SEL) << BIT_SHIFT_MAC_CLK_SEL)
#define BITS_MAC_CLK_SEL				(BIT_MASK_MAC_CLK_SEL << BIT_SHIFT_MAC_CLK_SEL)
#define BIT_CLEAR_MAC_CLK_SEL(x)			((x) & (~BITS_MAC_CLK_SEL))
#define BIT_GET_MAC_CLK_SEL(x)				(((x) >> BIT_SHIFT_MAC_CLK_SEL) & BIT_MASK_MAC_CLK_SEL)
#define BIT_SET_MAC_CLK_SEL(x, v)			(BIT_CLEAR_MAC_CLK_SEL(x) | BIT_MAC_CLK_SEL(v))

#define BIT_SHIFT_CPU_CLK_SEL				16
#define BIT_MASK_CPU_CLK_SEL				0x3
#define BIT_CPU_CLK_SEL(x)				(((x) & BIT_MASK_CPU_CLK_SEL) << BIT_SHIFT_CPU_CLK_SEL)
#define BITS_CPU_CLK_SEL				(BIT_MASK_CPU_CLK_SEL << BIT_SHIFT_CPU_CLK_SEL)
#define BIT_CLEAR_CPU_CLK_SEL(x)			((x) & (~BITS_CPU_CLK_SEL))
#define BIT_GET_CPU_CLK_SEL(x)				(((x) >> BIT_SHIFT_CPU_CLK_SEL) & BIT_MASK_CPU_CLK_SEL)
#define BIT_SET_CPU_CLK_SEL(x, v)			(BIT_CLEAR_CPU_CLK_SEL(x) | BIT_CPU_CLK_SEL(v))

#define BIT_WL_CLK_SYNC				BIT(15)

#define BIT_SHIFT_WL_RFC_PHASE				8
#define BIT_MASK_WL_RFC_PHASE				0xf
#define BIT_WL_RFC_PHASE(x)				(((x) & BIT_MASK_WL_RFC_PHASE) << BIT_SHIFT_WL_RFC_PHASE)
#define BITS_WL_RFC_PHASE				(BIT_MASK_WL_RFC_PHASE << BIT_SHIFT_WL_RFC_PHASE)
#define BIT_CLEAR_WL_RFC_PHASE(x)			((x) & (~BITS_WL_RFC_PHASE))
#define BIT_GET_WL_RFC_PHASE(x)			(((x) >> BIT_SHIFT_WL_RFC_PHASE) & BIT_MASK_WL_RFC_PHASE)
#define BIT_SET_WL_RFC_PHASE(x, v)			(BIT_CLEAR_WL_RFC_PHASE(x) | BIT_WL_RFC_PHASE(v))

#define BIT_SHIFT_WL_40M_PHASE				4
#define BIT_MASK_WL_40M_PHASE				0xf
#define BIT_WL_40M_PHASE(x)				(((x) & BIT_MASK_WL_40M_PHASE) << BIT_SHIFT_WL_40M_PHASE)
#define BITS_WL_40M_PHASE				(BIT_MASK_WL_40M_PHASE << BIT_SHIFT_WL_40M_PHASE)
#define BIT_CLEAR_WL_40M_PHASE(x)			((x) & (~BITS_WL_40M_PHASE))
#define BIT_GET_WL_40M_PHASE(x)			(((x) >> BIT_SHIFT_WL_40M_PHASE) & BIT_MASK_WL_40M_PHASE)
#define BIT_SET_WL_40M_PHASE(x, v)			(BIT_CLEAR_WL_40M_PHASE(x) | BIT_WL_40M_PHASE(v))

#define BIT_SHIFT_WL_80M_PHASE				0
#define BIT_MASK_WL_80M_PHASE				0xf
#define BIT_WL_80M_PHASE(x)				(((x) & BIT_MASK_WL_80M_PHASE) << BIT_SHIFT_WL_80M_PHASE)
#define BITS_WL_80M_PHASE				(BIT_MASK_WL_80M_PHASE << BIT_SHIFT_WL_80M_PHASE)
#define BIT_CLEAR_WL_80M_PHASE(x)			((x) & (~BITS_WL_80M_PHASE))
#define BIT_GET_WL_80M_PHASE(x)			(((x) >> BIT_SHIFT_WL_80M_PHASE) & BIT_MASK_WL_80M_PHASE)
#define BIT_SET_WL_80M_PHASE(x, v)			(BIT_CLEAR_WL_80M_PHASE(x) | BIT_WL_80M_PHASE(v))

/* 2 REG_CPWM				(Offset 0x000C) */

#define BIT_CPWM_TOGGLING				BIT(15)

#define BIT_SHIFT_CPWM_MOD				0
#define BIT_MASK_CPWM_MOD				0x7fff
#define BIT_CPWM_MOD(x)				(((x) & BIT_MASK_CPWM_MOD) << BIT_SHIFT_CPWM_MOD)
#define BITS_CPWM_MOD					(BIT_MASK_CPWM_MOD << BIT_SHIFT_CPWM_MOD)
#define BIT_CLEAR_CPWM_MOD(x)				((x) & (~BITS_CPWM_MOD))
#define BIT_GET_CPWM_MOD(x)				(((x) >> BIT_SHIFT_CPWM_MOD) & BIT_MASK_CPWM_MOD)
#define BIT_SET_CPWM_MOD(x, v)				(BIT_CLEAR_CPWM_MOD(x) | BIT_CPWM_MOD(v))

/* 2 REG_CPWM2				(Offset 0x0010) */

#define BIT_SHIFT_L0S_TO_RCVY_NUM			16
#define BIT_MASK_L0S_TO_RCVY_NUM			0xff
#define BIT_L0S_TO_RCVY_NUM(x)				(((x) & BIT_MASK_L0S_TO_RCVY_NUM) << BIT_SHIFT_L0S_TO_RCVY_NUM)
#define BITS_L0S_TO_RCVY_NUM				(BIT_MASK_L0S_TO_RCVY_NUM << BIT_SHIFT_L0S_TO_RCVY_NUM)
#define BIT_CLEAR_L0S_TO_RCVY_NUM(x)			((x) & (~BITS_L0S_TO_RCVY_NUM))
#define BIT_GET_L0S_TO_RCVY_NUM(x)			(((x) >> BIT_SHIFT_L0S_TO_RCVY_NUM) & BIT_MASK_L0S_TO_RCVY_NUM)
#define BIT_SET_L0S_TO_RCVY_NUM(x, v)			(BIT_CLEAR_L0S_TO_RCVY_NUM(x) | BIT_L0S_TO_RCVY_NUM(v))

#define BIT_CPWM2_TOGGLING				BIT(15)

#define BIT_SHIFT_CPWM2_MOD				0
#define BIT_MASK_CPWM2_MOD				0x7fff
#define BIT_CPWM2_MOD(x)				(((x) & BIT_MASK_CPWM2_MOD) << BIT_SHIFT_CPWM2_MOD)
#define BITS_CPWM2_MOD					(BIT_MASK_CPWM2_MOD << BIT_SHIFT_CPWM2_MOD)
#define BIT_CLEAR_CPWM2_MOD(x)				((x) & (~BITS_CPWM2_MOD))
#define BIT_GET_CPWM2_MOD(x)				(((x) >> BIT_SHIFT_CPWM2_MOD) & BIT_MASK_CPWM2_MOD)
#define BIT_SET_CPWM2_MOD(x, v)			(BIT_CLEAR_CPWM2_MOD(x) | BIT_CPWM2_MOD(v))

/* 2 REG_RPWM				(Offset 0x0014) */

#define BIT_RPWM_TOGGLING				BIT(15)

#define BIT_SHIFT_RPWM_MOD				0
#define BIT_MASK_RPWM_MOD				0x7fff
#define BIT_RPWM_MOD(x)				(((x) & BIT_MASK_RPWM_MOD) << BIT_SHIFT_RPWM_MOD)
#define BITS_RPWM_MOD					(BIT_MASK_RPWM_MOD << BIT_SHIFT_RPWM_MOD)
#define BIT_CLEAR_RPWM_MOD(x)				((x) & (~BITS_RPWM_MOD))
#define BIT_GET_RPWM_MOD(x)				(((x) >> BIT_SHIFT_RPWM_MOD) & BIT_MASK_RPWM_MOD)
#define BIT_SET_RPWM_MOD(x, v)				(BIT_CLEAR_RPWM_MOD(x) | BIT_RPWM_MOD(v))

/* 2 REG_WL_PMC_CTRL				(Offset 0x0020) */

#define BIT_WLPON_OPT_EXCKN2A				BIT(25)
#define BIT_WLPON_OPT_EXCKP2A				BIT(24)

#define BIT_SHIFT_WL_PMC_CNT_PAR			8
#define BIT_MASK_WL_PMC_CNT_PAR			0x3f
#define BIT_WL_PMC_CNT_PAR(x)				(((x) & BIT_MASK_WL_PMC_CNT_PAR) << BIT_SHIFT_WL_PMC_CNT_PAR)
#define BITS_WL_PMC_CNT_PAR				(BIT_MASK_WL_PMC_CNT_PAR << BIT_SHIFT_WL_PMC_CNT_PAR)
#define BIT_CLEAR_WL_PMC_CNT_PAR(x)			((x) & (~BITS_WL_PMC_CNT_PAR))
#define BIT_GET_WL_PMC_CNT_PAR(x)			(((x) >> BIT_SHIFT_WL_PMC_CNT_PAR) & BIT_MASK_WL_PMC_CNT_PAR)
#define BIT_SET_WL_PMC_CNT_PAR(x, v)			(BIT_CLEAR_WL_PMC_CNT_PAR(x) | BIT_WL_PMC_CNT_PAR(v))

#define BIT_CUR_PST_IS_LPS				BIT(4)
#define BIT_WL_PMC_LPS_EN				BIT(2)
#define BIT_WL_PMC_OFFMAC				BIT(1)
#define BIT_WL_PMC_ONMAC				BIT(0)

/* 2 REG_WL_SYSCONFIG			(Offset 0x0024) */

#define BIT_DIS_TIMEOUT_IO				BIT(24)
#define BIT_MCU_WDT_MODE				BIT(21)
#define BIT_PLT_WDT_EN					BIT(20)
#define BIT_MCU_WDT_EN					BIT(19)
#define BIT_WDT_OPT_IOWRAPPER_V1			BIT(18)
#define BIT_WLCPU_ANA_PORT_IDLE			BIT(17)
#define BIT_WLCPU_MAC_PORT_IDLE			BIT(16)

#define BIT_SHIFT_TSFT_SEL				8
#define BIT_MASK_TSFT_SEL				0x7
#define BIT_TSFT_SEL(x)				(((x) & BIT_MASK_TSFT_SEL) << BIT_SHIFT_TSFT_SEL)
#define BITS_TSFT_SEL					(BIT_MASK_TSFT_SEL << BIT_SHIFT_TSFT_SEL)
#define BIT_CLEAR_TSFT_SEL(x)				((x) & (~BITS_TSFT_SEL))
#define BIT_GET_TSFT_SEL(x)				(((x) >> BIT_SHIFT_TSFT_SEL) & BIT_MASK_TSFT_SEL)
#define BIT_SET_TSFT_SEL(x, v)				(BIT_CLEAR_TSFT_SEL(x) | BIT_TSFT_SEL(v))

/* 2 REG_P0_TBTT_TIMER			(Offset 0x0028) */

#define BIT_SHIFT_P0_ELY_BCNINT_CNT			24
#define BIT_MASK_P0_ELY_BCNINT_CNT			0x7f
#define BIT_P0_ELY_BCNINT_CNT(x)			(((x) & BIT_MASK_P0_ELY_BCNINT_CNT) << BIT_SHIFT_P0_ELY_BCNINT_CNT)
#define BITS_P0_ELY_BCNINT_CNT				(BIT_MASK_P0_ELY_BCNINT_CNT << BIT_SHIFT_P0_ELY_BCNINT_CNT)
#define BIT_CLEAR_P0_ELY_BCNINT_CNT(x)			((x) & (~BITS_P0_ELY_BCNINT_CNT))
#define BIT_GET_P0_ELY_BCNINT_CNT(x)			(((x) >> BIT_SHIFT_P0_ELY_BCNINT_CNT) & BIT_MASK_P0_ELY_BCNINT_CNT)
#define BIT_SET_P0_ELY_BCNINT_CNT(x, v)		(BIT_CLEAR_P0_ELY_BCNINT_CNT(x) | BIT_P0_ELY_BCNINT_CNT(v))

#define BIT_SHIFT_P0_BCN_CNT_DOWN			3
#define BIT_MASK_P0_BCN_CNT_DOWN			0xffff
#define BIT_P0_BCN_CNT_DOWN(x)				(((x) & BIT_MASK_P0_BCN_CNT_DOWN) << BIT_SHIFT_P0_BCN_CNT_DOWN)
#define BITS_P0_BCN_CNT_DOWN				(BIT_MASK_P0_BCN_CNT_DOWN << BIT_SHIFT_P0_BCN_CNT_DOWN)
#define BIT_CLEAR_P0_BCN_CNT_DOWN(x)			((x) & (~BITS_P0_BCN_CNT_DOWN))
#define BIT_GET_P0_BCN_CNT_DOWN(x)			(((x) >> BIT_SHIFT_P0_BCN_CNT_DOWN) & BIT_MASK_P0_BCN_CNT_DOWN)
#define BIT_SET_P0_BCN_CNT_DOWN(x, v)			(BIT_CLEAR_P0_BCN_CNT_DOWN(x) | BIT_P0_BCN_CNT_DOWN(v))

#define BIT_SHIFT_P0_128US_CNT				0
#define BIT_MASK_P0_128US_CNT				0x7
#define BIT_P0_128US_CNT(x)				(((x) & BIT_MASK_P0_128US_CNT) << BIT_SHIFT_P0_128US_CNT)
#define BITS_P0_128US_CNT				(BIT_MASK_P0_128US_CNT << BIT_SHIFT_P0_128US_CNT)
#define BIT_CLEAR_P0_128US_CNT(x)			((x) & (~BITS_P0_128US_CNT))
#define BIT_GET_P0_128US_CNT(x)			(((x) >> BIT_SHIFT_P0_128US_CNT) & BIT_MASK_P0_128US_CNT)
#define BIT_SET_P0_128US_CNT(x, v)			(BIT_CLEAR_P0_128US_CNT(x) | BIT_P0_128US_CNT(v))

/* 2 REG_AFC_CTRL0				(Offset 0x0030) */

#define BIT_CK40M_EN					BIT(31)
#define BIT_CK80M_EN					BIT(30)

#define BIT_SHIFT_REG_CP_BIA				27
#define BIT_MASK_REG_CP_BIA				0x7
#define BIT_REG_CP_BIA(x)				(((x) & BIT_MASK_REG_CP_BIA) << BIT_SHIFT_REG_CP_BIA)
#define BITS_REG_CP_BIA				(BIT_MASK_REG_CP_BIA << BIT_SHIFT_REG_CP_BIA)
#define BIT_CLEAR_REG_CP_BIA(x)			((x) & (~BITS_REG_CP_BIA))
#define BIT_GET_REG_CP_BIA(x)				(((x) >> BIT_SHIFT_REG_CP_BIA) & BIT_MASK_REG_CP_BIA)
#define BIT_SET_REG_CP_BIA(x, v)			(BIT_CLEAR_REG_CP_BIA(x) | BIT_REG_CP_BIA(v))

#define BIT_REG_EN_MON					BIT(26)
#define BIT_REG_TESTEN					BIT(25)

#define BIT_SHIFT_BB_DBG_SEL_AFE_SDM			25
#define BIT_MASK_BB_DBG_SEL_AFE_SDM			0xf
#define BIT_BB_DBG_SEL_AFE_SDM(x)			(((x) & BIT_MASK_BB_DBG_SEL_AFE_SDM) << BIT_SHIFT_BB_DBG_SEL_AFE_SDM)
#define BITS_BB_DBG_SEL_AFE_SDM			(BIT_MASK_BB_DBG_SEL_AFE_SDM << BIT_SHIFT_BB_DBG_SEL_AFE_SDM)
#define BIT_CLEAR_BB_DBG_SEL_AFE_SDM(x)		((x) & (~BITS_BB_DBG_SEL_AFE_SDM))
#define BIT_GET_BB_DBG_SEL_AFE_SDM(x)			(((x) >> BIT_SHIFT_BB_DBG_SEL_AFE_SDM) & BIT_MASK_BB_DBG_SEL_AFE_SDM)
#define BIT_SET_BB_DBG_SEL_AFE_SDM(x, v)		(BIT_CLEAR_BB_DBG_SEL_AFE_SDM(x) | BIT_BB_DBG_SEL_AFE_SDM(v))

#define BIT_BTCK320M_PS				BIT(24)
#define BIT_RFE_SEL_SDM				BIT(24)
#define BIT_BTCK320M_EN				BIT(23)

#define BIT_SHIFT_REG_PS				20
#define BIT_MASK_REG_PS				0x7
#define BIT_REG_PS(x)					(((x) & BIT_MASK_REG_PS) << BIT_SHIFT_REG_PS)
#define BITS_REG_PS					(BIT_MASK_REG_PS << BIT_SHIFT_REG_PS)
#define BIT_CLEAR_REG_PS(x)				((x) & (~BITS_REG_PS))
#define BIT_GET_REG_PS(x)				(((x) >> BIT_SHIFT_REG_PS) & BIT_MASK_REG_PS)
#define BIT_SET_REG_PS(x, v)				(BIT_CLEAR_REG_PS(x) | BIT_REG_PS(v))

#define BIT_SHIFT_BB_RFE_SEL_AFE_SDM			20
#define BIT_MASK_BB_RFE_SEL_AFE_SDM			0xf
#define BIT_BB_RFE_SEL_AFE_SDM(x)			(((x) & BIT_MASK_BB_RFE_SEL_AFE_SDM) << BIT_SHIFT_BB_RFE_SEL_AFE_SDM)
#define BITS_BB_RFE_SEL_AFE_SDM			(BIT_MASK_BB_RFE_SEL_AFE_SDM << BIT_SHIFT_BB_RFE_SEL_AFE_SDM)
#define BIT_CLEAR_BB_RFE_SEL_AFE_SDM(x)		((x) & (~BITS_BB_RFE_SEL_AFE_SDM))
#define BIT_GET_BB_RFE_SEL_AFE_SDM(x)			(((x) >> BIT_SHIFT_BB_RFE_SEL_AFE_SDM) & BIT_MASK_BB_RFE_SEL_AFE_SDM)
#define BIT_SET_BB_RFE_SEL_AFE_SDM(x, v)		(BIT_CLEAR_BB_RFE_SEL_AFE_SDM(x) | BIT_BB_RFE_SEL_AFE_SDM(v))

#define BIT_REG_PS_EN					BIT(19)
#define BIT_CK320M_AFE_EN				BIT(19)
#define BIT_EN_SYN					BIT(18)
#define BIT_CK320M_EN					BIT(17)

#define BIT_SHIFT_REG_MONCKSELH			16
#define BIT_MASK_REG_MONCKSELH				0x7
#define BIT_REG_MONCKSELH(x)				(((x) & BIT_MASK_REG_MONCKSELH) << BIT_SHIFT_REG_MONCKSELH)
#define BITS_REG_MONCKSELH				(BIT_MASK_REG_MONCKSELH << BIT_SHIFT_REG_MONCKSELH)
#define BIT_CLEAR_REG_MONCKSELH(x)			((x) & (~BITS_REG_MONCKSELH))
#define BIT_GET_REG_MONCKSELH(x)			(((x) >> BIT_SHIFT_REG_MONCKSELH) & BIT_MASK_REG_MONCKSELH)
#define BIT_SET_REG_MONCKSELH(x, v)			(BIT_CLEAR_REG_MONCKSELH(x) | BIT_REG_MONCKSELH(v))

#define BIT_REG_FREF_EDGE				BIT(16)
#define BIT_RF_PDN11					BIT(15)
#define BIT_CK5M_EN					BIT(15)
#define BIT_REG_CP_OFFSET				BIT(14)
#define BIT_POW_AFE_REQ				BIT(13)
#define BIT_POW_LDO_RSSI_ADC				BIT(12)
#define BIT_POW_LDO_ADC				BIT(11)

#define BIT_SHIFT_REG_RS_SET				11
#define BIT_MASK_REG_RS_SET				0x7
#define BIT_REG_RS_SET(x)				(((x) & BIT_MASK_REG_RS_SET) << BIT_SHIFT_REG_RS_SET)
#define BITS_REG_RS_SET				(BIT_MASK_REG_RS_SET << BIT_SHIFT_REG_RS_SET)
#define BIT_CLEAR_REG_RS_SET(x)			((x) & (~BITS_REG_RS_SET))
#define BIT_GET_REG_RS_SET(x)				(((x) >> BIT_SHIFT_REG_RS_SET) & BIT_MASK_REG_RS_SET)
#define BIT_SET_REG_RS_SET(x, v)			(BIT_CLEAR_REG_RS_SET(x) | BIT_REG_RS_SET(v))

#define BIT_POW_LDO_DAC				BIT(10)
#define BIT_POW_PLL_V2					BIT(9)
#define BIT_POW_AFE_LDO				BIT(8)

#define BIT_SHIFT_REG_R3_SET				8
#define BIT_MASK_REG_R3_SET				0x7
#define BIT_REG_R3_SET(x)				(((x) & BIT_MASK_REG_R3_SET) << BIT_SHIFT_REG_R3_SET)
#define BITS_REG_R3_SET				(BIT_MASK_REG_R3_SET << BIT_SHIFT_REG_R3_SET)
#define BIT_CLEAR_REG_R3_SET(x)			((x) & (~BITS_REG_R3_SET))
#define BIT_GET_REG_R3_SET(x)				(((x) >> BIT_SHIFT_REG_R3_SET) & BIT_MASK_REG_R3_SET)
#define BIT_SET_REG_R3_SET(x, v)			(BIT_CLEAR_REG_R3_SET(x) | BIT_REG_R3_SET(v))

#define BIT_WL_XTAL_ACTIVE_MODE			BIT(7)
#define BIT_WL_XTAL_EN					BIT(6)

#define BIT_SHIFT_REG_CS_SET				6
#define BIT_MASK_REG_CS_SET				0x3
#define BIT_REG_CS_SET(x)				(((x) & BIT_MASK_REG_CS_SET) << BIT_SHIFT_REG_CS_SET)
#define BITS_REG_CS_SET				(BIT_MASK_REG_CS_SET << BIT_SHIFT_REG_CS_SET)
#define BIT_CLEAR_REG_CS_SET(x)			((x) & (~BITS_REG_CS_SET))
#define BIT_GET_REG_CS_SET(x)				(((x) >> BIT_SHIFT_REG_CS_SET) & BIT_MASK_REG_CS_SET)
#define BIT_SET_REG_CS_SET(x, v)			(BIT_CLEAR_REG_CS_SET(x) | BIT_REG_CS_SET(v))

#define BIT_XTAL_GATE_RF2				BIT(4)

#define BIT_SHIFT_REG_CP_SET				4
#define BIT_MASK_REG_CP_SET				0x3
#define BIT_REG_CP_SET(x)				(((x) & BIT_MASK_REG_CP_SET) << BIT_SHIFT_REG_CP_SET)
#define BITS_REG_CP_SET				(BIT_MASK_REG_CP_SET << BIT_SHIFT_REG_CP_SET)
#define BIT_CLEAR_REG_CP_SET(x)			((x) & (~BITS_REG_CP_SET))
#define BIT_GET_REG_CP_SET(x)				(((x) >> BIT_SHIFT_REG_CP_SET) & BIT_MASK_REG_CP_SET)
#define BIT_SET_REG_CP_SET(x, v)			(BIT_CLEAR_REG_CP_SET(x) | BIT_REG_CP_SET(v))

#define BIT_XTAL_GATE_RF1				BIT(2)

#define BIT_SHIFT_REG_C3_SET				2
#define BIT_MASK_REG_C3_SET				0x3
#define BIT_REG_C3_SET(x)				(((x) & BIT_MASK_REG_C3_SET) << BIT_SHIFT_REG_C3_SET)
#define BITS_REG_C3_SET				(BIT_MASK_REG_C3_SET << BIT_SHIFT_REG_C3_SET)
#define BIT_CLEAR_REG_C3_SET(x)			((x) & (~BITS_REG_C3_SET))
#define BIT_GET_REG_C3_SET(x)				(((x) >> BIT_SHIFT_REG_C3_SET) & BIT_MASK_REG_C3_SET)
#define BIT_SET_REG_C3_SET(x, v)			(BIT_CLEAR_REG_C3_SET(x) | BIT_REG_C3_SET(v))

#define BIT_REG_CK320_SEL				BIT(1)
#define BIT_XTAL_GATE_AFE_V1				BIT(0)
#define BIT_REG_DOGENB					BIT(0)

/* 2 REG_AFE_CTRL2_V1			(Offset 0x0038) */

#define BIT_SHIFT_REG_CP_IOFFSET			25
#define BIT_MASK_REG_CP_IOFFSET			0x1f
#define BIT_REG_CP_IOFFSET(x)				(((x) & BIT_MASK_REG_CP_IOFFSET) << BIT_SHIFT_REG_CP_IOFFSET)
#define BITS_REG_CP_IOFFSET				(BIT_MASK_REG_CP_IOFFSET << BIT_SHIFT_REG_CP_IOFFSET)
#define BIT_CLEAR_REG_CP_IOFFSET(x)			((x) & (~BITS_REG_CP_IOFFSET))
#define BIT_GET_REG_CP_IOFFSET(x)			(((x) >> BIT_SHIFT_REG_CP_IOFFSET) & BIT_MASK_REG_CP_IOFFSET)
#define BIT_SET_REG_CP_IOFFSET(x, v)			(BIT_CLEAR_REG_CP_IOFFSET(x) | BIT_REG_CP_IOFFSET(v))

#define BIT_SHIFT_DIV_SBRB				23
#define BIT_MASK_DIV_SBRB				0x3
#define BIT_DIV_SBRB(x)				(((x) & BIT_MASK_DIV_SBRB) << BIT_SHIFT_DIV_SBRB)
#define BITS_DIV_SBRB					(BIT_MASK_DIV_SBRB << BIT_SHIFT_DIV_SBRB)
#define BIT_CLEAR_DIV_SBRB(x)				((x) & (~BITS_DIV_SBRB))
#define BIT_GET_DIV_SBRB(x)				(((x) >> BIT_SHIFT_DIV_SBRB) & BIT_MASK_DIV_SBRB)
#define BIT_SET_DIV_SBRB(x, v)				(BIT_CLEAR_DIV_SBRB(x) | BIT_DIV_SBRB(v))

#define BIT_SHIFT_CK320M_PS				20
#define BIT_MASK_CK320M_PS				0xfff
#define BIT_CK320M_PS(x)				(((x) & BIT_MASK_CK320M_PS) << BIT_SHIFT_CK320M_PS)
#define BITS_CK320M_PS					(BIT_MASK_CK320M_PS << BIT_SHIFT_CK320M_PS)
#define BIT_CLEAR_CK320M_PS(x)				((x) & (~BITS_CK320M_PS))
#define BIT_GET_CK320M_PS(x)				(((x) >> BIT_SHIFT_CK320M_PS) & BIT_MASK_CK320M_PS)
#define BIT_SET_CK320M_PS(x, v)			(BIT_CLEAR_CK320M_PS(x) | BIT_CK320M_PS(v))

#define BIT_SHIFT_DITHER				19
#define BIT_MASK_DITHER				0xf
#define BIT_DITHER(x)					(((x) & BIT_MASK_DITHER) << BIT_SHIFT_DITHER)
#define BITS_DITHER					(BIT_MASK_DITHER << BIT_SHIFT_DITHER)
#define BIT_CLEAR_DITHER(x)				((x) & (~BITS_DITHER))
#define BIT_GET_DITHER(x)				(((x) >> BIT_SHIFT_DITHER) & BIT_MASK_DITHER)
#define BIT_SET_DITHER(x, v)				(BIT_CLEAR_DITHER(x) | BIT_DITHER(v))

#define BIT_SHIFT_F0N					16
#define BIT_MASK_F0N					0x7
#define BIT_F0N(x)					(((x) & BIT_MASK_F0N) << BIT_SHIFT_F0N)
#define BITS_F0N					(BIT_MASK_F0N << BIT_SHIFT_F0N)
#define BIT_CLEAR_F0N(x)				((x) & (~BITS_F0N))
#define BIT_GET_F0N(x)					(((x) >> BIT_SHIFT_F0N) & BIT_MASK_F0N)
#define BIT_SET_F0N(x, v)				(BIT_CLEAR_F0N(x) | BIT_F0N(v))

#define BIT_SHIFT_F0F					3
#define BIT_MASK_F0F					0x1fff
#define BIT_F0F(x)					(((x) & BIT_MASK_F0F) << BIT_SHIFT_F0F)
#define BITS_F0F					(BIT_MASK_F0F << BIT_SHIFT_F0F)
#define BIT_CLEAR_F0F(x)				((x) & (~BITS_F0F))
#define BIT_GET_F0F(x)					(((x) >> BIT_SHIFT_F0F) & BIT_MASK_F0F)
#define BIT_SET_F0F(x, v)				(BIT_CLEAR_F0F(x) | BIT_F0F(v))

#define BIT_SHIFT_DIVN					0
#define BIT_MASK_DIVN					0x7
#define BIT_DIVN(x)					(((x) & BIT_MASK_DIVN) << BIT_SHIFT_DIVN)
#define BITS_DIVN					(BIT_MASK_DIVN << BIT_SHIFT_DIVN)
#define BIT_CLEAR_DIVN(x)				((x) & (~BITS_DIVN))
#define BIT_GET_DIVN(x)				(((x) >> BIT_SHIFT_DIVN) & BIT_MASK_DIVN)
#define BIT_SET_DIVN(x, v)				(BIT_CLEAR_DIVN(x) | BIT_DIVN(v))

/* 2 REG_AFE_CTRL3_V1			(Offset 0x003C) */

#define BIT_SEL_8715_LUT				BIT(6)
#define BIT_ORDER_SDM					BIT(5)

#define BIT_SHIFT_S					3
#define BIT_MASK_S					0x3
#define BIT_S(x)					(((x) & BIT_MASK_S) << BIT_SHIFT_S)
#define BITS_S						(BIT_MASK_S << BIT_SHIFT_S)
#define BIT_CLEAR_S(x)					((x) & (~BITS_S))
#define BIT_GET_S(x)					(((x) >> BIT_SHIFT_S) & BIT_MASK_S)
#define BIT_SET_S(x, v)				(BIT_CLEAR_S(x) | BIT_S(v))

#define BIT_GPO					BIT(2)
#define BIT_GPE					BIT(1)
#define BIT_FS_PWMERR_INT_EN_V1			BIT(1)
#define BIT_FS_PWMERR_INT_V1				BIT(1)
#define BIT_REG_CP_IDOUBLE				BIT(0)
#define BIT_FS_BTON_STS_UPDATE_INT_EN			BIT(0)
#define BIT_FS_BTON_STS_UPDATE_INT			BIT(0)

#define BIT_SHIFT_TDE_H2C_RD_ADDR			0
#define BIT_MASK_TDE_H2C_RD_ADDR			0x3ffff
#define BIT_TDE_H2C_RD_ADDR(x)				(((x) & BIT_MASK_TDE_H2C_RD_ADDR) << BIT_SHIFT_TDE_H2C_RD_ADDR)
#define BITS_TDE_H2C_RD_ADDR				(BIT_MASK_TDE_H2C_RD_ADDR << BIT_SHIFT_TDE_H2C_RD_ADDR)
#define BIT_CLEAR_TDE_H2C_RD_ADDR(x)			((x) & (~BITS_TDE_H2C_RD_ADDR))
#define BIT_GET_TDE_H2C_RD_ADDR(x)			(((x) >> BIT_SHIFT_TDE_H2C_RD_ADDR) & BIT_MASK_TDE_H2C_RD_ADDR)
#define BIT_SET_TDE_H2C_RD_ADDR(x, v)			(BIT_CLEAR_TDE_H2C_RD_ADDR(x) | BIT_TDE_H2C_RD_ADDR(v))

#define BIT_SHIFT_TDE_H2C_WR_ADDR			0
#define BIT_MASK_TDE_H2C_WR_ADDR			0x3ffff
#define BIT_TDE_H2C_WR_ADDR(x)				(((x) & BIT_MASK_TDE_H2C_WR_ADDR) << BIT_SHIFT_TDE_H2C_WR_ADDR)
#define BITS_TDE_H2C_WR_ADDR				(BIT_MASK_TDE_H2C_WR_ADDR << BIT_SHIFT_TDE_H2C_WR_ADDR)
#define BIT_CLEAR_TDE_H2C_WR_ADDR(x)			((x) & (~BITS_TDE_H2C_WR_ADDR))
#define BIT_GET_TDE_H2C_WR_ADDR(x)			(((x) >> BIT_SHIFT_TDE_H2C_WR_ADDR) & BIT_MASK_TDE_H2C_WR_ADDR)
#define BIT_SET_TDE_H2C_WR_ADDR(x, v)			(BIT_CLEAR_TDE_H2C_WR_ADDR(x) | BIT_TDE_H2C_WR_ADDR(v))

/* 2 REG_FW_DBG0_V1				(Offset 0x0050) */

#define BIT_SHIFT_FW_DBG0				0
#define BIT_MASK_FW_DBG0				0xffffffffL
#define BIT_FW_DBG0(x)					(((x) & BIT_MASK_FW_DBG0) << BIT_SHIFT_FW_DBG0)
#define BITS_FW_DBG0					(BIT_MASK_FW_DBG0 << BIT_SHIFT_FW_DBG0)
#define BIT_CLEAR_FW_DBG0(x)				((x) & (~BITS_FW_DBG0))
#define BIT_GET_FW_DBG0(x)				(((x) >> BIT_SHIFT_FW_DBG0) & BIT_MASK_FW_DBG0)
#define BIT_SET_FW_DBG0(x, v)				(BIT_CLEAR_FW_DBG0(x) | BIT_FW_DBG0(v))

/* 2 REG_FW_DBG1_V1				(Offset 0x0054) */

#define BIT_SHIFT_FW_DBG1				0
#define BIT_MASK_FW_DBG1				0xffffffffL
#define BIT_FW_DBG1(x)					(((x) & BIT_MASK_FW_DBG1) << BIT_SHIFT_FW_DBG1)
#define BITS_FW_DBG1					(BIT_MASK_FW_DBG1 << BIT_SHIFT_FW_DBG1)
#define BIT_CLEAR_FW_DBG1(x)				((x) & (~BITS_FW_DBG1))
#define BIT_GET_FW_DBG1(x)				(((x) >> BIT_SHIFT_FW_DBG1) & BIT_MASK_FW_DBG1)
#define BIT_SET_FW_DBG1(x, v)				(BIT_CLEAR_FW_DBG1(x) | BIT_FW_DBG1(v))

/* 2 REG_FW_DBG2_V1				(Offset 0x0058) */

#define BIT_SHIFT_FW_DBG2				0
#define BIT_MASK_FW_DBG2				0xffffffffL
#define BIT_FW_DBG2(x)					(((x) & BIT_MASK_FW_DBG2) << BIT_SHIFT_FW_DBG2)
#define BITS_FW_DBG2					(BIT_MASK_FW_DBG2 << BIT_SHIFT_FW_DBG2)
#define BIT_CLEAR_FW_DBG2(x)				((x) & (~BITS_FW_DBG2))
#define BIT_GET_FW_DBG2(x)				(((x) >> BIT_SHIFT_FW_DBG2) & BIT_MASK_FW_DBG2)
#define BIT_SET_FW_DBG2(x, v)				(BIT_CLEAR_FW_DBG2(x) | BIT_FW_DBG2(v))

/* 2 REG_FW_DBG3_V1				(Offset 0x005C) */

#define BIT_SHIFT_FW_DBG3				0
#define BIT_MASK_FW_DBG3				0xffffffffL
#define BIT_FW_DBG3(x)					(((x) & BIT_MASK_FW_DBG3) << BIT_SHIFT_FW_DBG3)
#define BITS_FW_DBG3					(BIT_MASK_FW_DBG3 << BIT_SHIFT_FW_DBG3)
#define BIT_CLEAR_FW_DBG3(x)				((x) & (~BITS_FW_DBG3))
#define BIT_GET_FW_DBG3(x)				(((x) >> BIT_SHIFT_FW_DBG3) & BIT_MASK_FW_DBG3)
#define BIT_SET_FW_DBG3(x, v)				(BIT_CLEAR_FW_DBG3(x) | BIT_FW_DBG3(v))

/* 2 REG_FW_DBG4_V1				(Offset 0x0060) */

#define BIT_SHIFT_FW_DBG4				0
#define BIT_MASK_FW_DBG4				0xffffffffL
#define BIT_FW_DBG4(x)					(((x) & BIT_MASK_FW_DBG4) << BIT_SHIFT_FW_DBG4)
#define BITS_FW_DBG4					(BIT_MASK_FW_DBG4 << BIT_SHIFT_FW_DBG4)
#define BIT_CLEAR_FW_DBG4(x)				((x) & (~BITS_FW_DBG4))
#define BIT_GET_FW_DBG4(x)				(((x) >> BIT_SHIFT_FW_DBG4) & BIT_MASK_FW_DBG4)
#define BIT_SET_FW_DBG4(x, v)				(BIT_CLEAR_FW_DBG4(x) | BIT_FW_DBG4(v))

/* 2 REG_FW_DBG5_V1				(Offset 0x0064) */

#define BIT_SHIFT_FW_DBG5				0
#define BIT_MASK_FW_DBG5				0xffffffffL
#define BIT_FW_DBG5(x)					(((x) & BIT_MASK_FW_DBG5) << BIT_SHIFT_FW_DBG5)
#define BITS_FW_DBG5					(BIT_MASK_FW_DBG5 << BIT_SHIFT_FW_DBG5)
#define BIT_CLEAR_FW_DBG5(x)				((x) & (~BITS_FW_DBG5))
#define BIT_GET_FW_DBG5(x)				(((x) >> BIT_SHIFT_FW_DBG5) & BIT_MASK_FW_DBG5)
#define BIT_SET_FW_DBG5(x, v)				(BIT_CLEAR_FW_DBG5(x) | BIT_FW_DBG5(v))

/* 2 REG_FW_DBG6_V1				(Offset 0x0068) */

#define BIT_SHIFT_FW_DBG6				0
#define BIT_MASK_FW_DBG6				0xffffffffL
#define BIT_FW_DBG6(x)					(((x) & BIT_MASK_FW_DBG6) << BIT_SHIFT_FW_DBG6)
#define BITS_FW_DBG6					(BIT_MASK_FW_DBG6 << BIT_SHIFT_FW_DBG6)
#define BIT_CLEAR_FW_DBG6(x)				((x) & (~BITS_FW_DBG6))
#define BIT_GET_FW_DBG6(x)				(((x) >> BIT_SHIFT_FW_DBG6) & BIT_MASK_FW_DBG6)
#define BIT_SET_FW_DBG6(x, v)				(BIT_CLEAR_FW_DBG6(x) | BIT_FW_DBG6(v))

/* 2 REG_FW_DBG7_V1				(Offset 0x006C) */

#define BIT_SHIFT_FW_DBG7				0
#define BIT_MASK_FW_DBG7				0xffffffffL
#define BIT_FW_DBG7(x)					(((x) & BIT_MASK_FW_DBG7) << BIT_SHIFT_FW_DBG7)
#define BITS_FW_DBG7					(BIT_MASK_FW_DBG7 << BIT_SHIFT_FW_DBG7)
#define BIT_CLEAR_FW_DBG7(x)				((x) & (~BITS_FW_DBG7))
#define BIT_GET_FW_DBG7(x)				(((x) >> BIT_SHIFT_FW_DBG7) & BIT_MASK_FW_DBG7)
#define BIT_SET_FW_DBG7(x, v)				(BIT_CLEAR_FW_DBG7(x) | BIT_FW_DBG7(v))

/* 2 REG_WL_PIN_FUNC_CTRL0			(Offset 0x0070) */

#define BIT_SHIFT_WL_DBG_SEL				24
#define BIT_MASK_WL_DBG_SEL				0xff
#define BIT_WL_DBG_SEL(x)				(((x) & BIT_MASK_WL_DBG_SEL) << BIT_SHIFT_WL_DBG_SEL)
#define BITS_WL_DBG_SEL				(BIT_MASK_WL_DBG_SEL << BIT_SHIFT_WL_DBG_SEL)
#define BIT_CLEAR_WL_DBG_SEL(x)			((x) & (~BITS_WL_DBG_SEL))
#define BIT_GET_WL_DBG_SEL(x)				(((x) >> BIT_SHIFT_WL_DBG_SEL) & BIT_MASK_WL_DBG_SEL)
#define BIT_SET_WL_DBG_SEL(x, v)			(BIT_CLEAR_WL_DBG_SEL(x) | BIT_WL_DBG_SEL(v))

/* 2 REG_WL_BTCOEX_CTRL			(Offset 0x0074) */

#define BIT_LTECOEX_DBGEN				BIT(20)
#define BIT_SYM_WLGP_COEXFEN				BIT(19)

#define BIT_SHIFT_BTMODE_V1				17
#define BIT_MASK_BTMODE_V1				0x3
#define BIT_BTMODE_V1(x)				(((x) & BIT_MASK_BTMODE_V1) << BIT_SHIFT_BTMODE_V1)
#define BITS_BTMODE_V1					(BIT_MASK_BTMODE_V1 << BIT_SHIFT_BTMODE_V1)
#define BIT_CLEAR_BTMODE_V1(x)				((x) & (~BITS_BTMODE_V1))
#define BIT_GET_BTMODE_V1(x)				(((x) >> BIT_SHIFT_BTMODE_V1) & BIT_MASK_BTMODE_V1)
#define BIT_SET_BTMODE_V1(x, v)			(BIT_CLEAR_BTMODE_V1(x) | BIT_BTMODE_V1(v))

#define BIT_ENBT_V1					BIT(16)
#define BIT_WL_DPDT1_IDV				BIT(3)
#define BIT_WL_DPDT1_MUX				BIT(2)
#define BIT_WL_DPDT0_IDV				BIT(1)
#define BIT_WL_DPDT0_MUX				BIT(0)

/* 2 REG_SCOREBOARD_RD_BT2WL			(Offset 0x0078) */

#define BIT_SHIFT_RD_BT2WL_INFO			0
#define BIT_MASK_RD_BT2WL_INFO				0x7fffffffL
#define BIT_RD_BT2WL_INFO(x)				(((x) & BIT_MASK_RD_BT2WL_INFO) << BIT_SHIFT_RD_BT2WL_INFO)
#define BITS_RD_BT2WL_INFO				(BIT_MASK_RD_BT2WL_INFO << BIT_SHIFT_RD_BT2WL_INFO)
#define BIT_CLEAR_RD_BT2WL_INFO(x)			((x) & (~BITS_RD_BT2WL_INFO))
#define BIT_GET_RD_BT2WL_INFO(x)			(((x) >> BIT_SHIFT_RD_BT2WL_INFO) & BIT_MASK_RD_BT2WL_INFO)
#define BIT_SET_RD_BT2WL_INFO(x, v)			(BIT_CLEAR_RD_BT2WL_INFO(x) | BIT_RD_BT2WL_INFO(v))

/* 2 REG_DBG_PORT_REG			(Offset 0x007C) */

#define BIT_SHIFT_DEBUG_ST				0
#define BIT_MASK_DEBUG_ST				0xffffffffL
#define BIT_DEBUG_ST(x)				(((x) & BIT_MASK_DEBUG_ST) << BIT_SHIFT_DEBUG_ST)
#define BITS_DEBUG_ST					(BIT_MASK_DEBUG_ST << BIT_SHIFT_DEBUG_ST)
#define BIT_CLEAR_DEBUG_ST(x)				((x) & (~BITS_DEBUG_ST))
#define BIT_GET_DEBUG_ST(x)				(((x) >> BIT_SHIFT_DEBUG_ST) & BIT_MASK_DEBUG_ST)
#define BIT_SET_DEBUG_ST(x, v)				(BIT_CLEAR_DEBUG_ST(x) | BIT_DEBUG_ST(v))

/* 2 REG_WL_MCUFW_CTRL			(Offset 0x0080) */

#define BIT_SYM_WLCPU_SPDUP				BIT(23)
#define BIT_SYM_WLCPU_ANAPORT_EN			BIT(22)
#define BIT_SYM_WLCPU_MACPORT_EN			BIT(21)
#define BIT_SYM_WLCPU_BOOTSEL				BIT(20)
#define BIT_FW_INIT_RDY				BIT(15)
#define BIT_SYM_MCUFEDL_EN				BIT(0)

/* 2 REG_BLK_TST				(Offset 0x0084) */

#define BIT_SHIFT_BLK_TST				0
#define BIT_MASK_BLK_TST				0xffffffffL
#define BIT_BLK_TST(x)					(((x) & BIT_MASK_BLK_TST) << BIT_SHIFT_BLK_TST)
#define BITS_BLK_TST					(BIT_MASK_BLK_TST << BIT_SHIFT_BLK_TST)
#define BIT_CLEAR_BLK_TST(x)				((x) & (~BITS_BLK_TST))
#define BIT_GET_BLK_TST(x)				(((x) >> BIT_SHIFT_BLK_TST) & BIT_MASK_BLK_TST)
#define BIT_SET_BLK_TST(x, v)				(BIT_CLEAR_BLK_TST(x) | BIT_BLK_TST(v))

/* 2 REG_HOST_MSG0				(Offset 0x0088) */

#define BIT_SHIFT_HOST_MSG_E1				16
#define BIT_MASK_HOST_MSG_E1				0xffff
#define BIT_HOST_MSG_E1(x)				(((x) & BIT_MASK_HOST_MSG_E1) << BIT_SHIFT_HOST_MSG_E1)
#define BITS_HOST_MSG_E1				(BIT_MASK_HOST_MSG_E1 << BIT_SHIFT_HOST_MSG_E1)
#define BIT_CLEAR_HOST_MSG_E1(x)			((x) & (~BITS_HOST_MSG_E1))
#define BIT_GET_HOST_MSG_E1(x)				(((x) >> BIT_SHIFT_HOST_MSG_E1) & BIT_MASK_HOST_MSG_E1)
#define BIT_SET_HOST_MSG_E1(x, v)			(BIT_CLEAR_HOST_MSG_E1(x) | BIT_HOST_MSG_E1(v))

#define BIT_SHIFT_HOST_MSG_E0				0
#define BIT_MASK_HOST_MSG_E0				0xffff
#define BIT_HOST_MSG_E0(x)				(((x) & BIT_MASK_HOST_MSG_E0) << BIT_SHIFT_HOST_MSG_E0)
#define BITS_HOST_MSG_E0				(BIT_MASK_HOST_MSG_E0 << BIT_SHIFT_HOST_MSG_E0)
#define BIT_CLEAR_HOST_MSG_E0(x)			((x) & (~BITS_HOST_MSG_E0))
#define BIT_GET_HOST_MSG_E0(x)				(((x) >> BIT_SHIFT_HOST_MSG_E0) & BIT_MASK_HOST_MSG_E0)
#define BIT_SET_HOST_MSG_E0(x, v)			(BIT_CLEAR_HOST_MSG_E0(x) | BIT_HOST_MSG_E0(v))

/* 2 REG_HOST_MSG1				(Offset 0x008C) */

#define BIT_SHIFT_HOST_MSG_E3				16
#define BIT_MASK_HOST_MSG_E3				0xffff
#define BIT_HOST_MSG_E3(x)				(((x) & BIT_MASK_HOST_MSG_E3) << BIT_SHIFT_HOST_MSG_E3)
#define BITS_HOST_MSG_E3				(BIT_MASK_HOST_MSG_E3 << BIT_SHIFT_HOST_MSG_E3)
#define BIT_CLEAR_HOST_MSG_E3(x)			((x) & (~BITS_HOST_MSG_E3))
#define BIT_GET_HOST_MSG_E3(x)				(((x) >> BIT_SHIFT_HOST_MSG_E3) & BIT_MASK_HOST_MSG_E3)
#define BIT_SET_HOST_MSG_E3(x, v)			(BIT_CLEAR_HOST_MSG_E3(x) | BIT_HOST_MSG_E3(v))

#define BIT_SHIFT_HOST_MSG_E2				0
#define BIT_MASK_HOST_MSG_E2				0xffff
#define BIT_HOST_MSG_E2(x)				(((x) & BIT_MASK_HOST_MSG_E2) << BIT_SHIFT_HOST_MSG_E2)
#define BITS_HOST_MSG_E2				(BIT_MASK_HOST_MSG_E2 << BIT_SHIFT_HOST_MSG_E2)
#define BIT_CLEAR_HOST_MSG_E2(x)			((x) & (~BITS_HOST_MSG_E2))
#define BIT_GET_HOST_MSG_E2(x)				(((x) >> BIT_SHIFT_HOST_MSG_E2) & BIT_MASK_HOST_MSG_E2)
#define BIT_SET_HOST_MSG_E2(x, v)			(BIT_CLEAR_HOST_MSG_E2(x) | BIT_HOST_MSG_E2(v))

/* 2 REG_LPS_CTRL				(Offset 0x0090) */

#define BIT_WL_LPS_OPT_SAVE_REG			BIT(29)
#define BIT_LPS_MEMPM_PHYON				BIT(28)

#define BIT_SHIFT_LPS_MEMPM_MACOFF_FTC_SHR		23
#define BIT_MASK_LPS_MEMPM_MACOFF_FTC_SHR		0x3
#define BIT_LPS_MEMPM_MACOFF_FTC_SHR(x)		(((x) & BIT_MASK_LPS_MEMPM_MACOFF_FTC_SHR) << BIT_SHIFT_LPS_MEMPM_MACOFF_FTC_SHR)
#define BITS_LPS_MEMPM_MACOFF_FTC_SHR			(BIT_MASK_LPS_MEMPM_MACOFF_FTC_SHR << BIT_SHIFT_LPS_MEMPM_MACOFF_FTC_SHR)
#define BIT_CLEAR_LPS_MEMPM_MACOFF_FTC_SHR(x)		((x) & (~BITS_LPS_MEMPM_MACOFF_FTC_SHR))
#define BIT_GET_LPS_MEMPM_MACOFF_FTC_SHR(x)		(((x) >> BIT_SHIFT_LPS_MEMPM_MACOFF_FTC_SHR) & BIT_MASK_LPS_MEMPM_MACOFF_FTC_SHR)
#define BIT_SET_LPS_MEMPM_MACOFF_FTC_SHR(x, v)	(BIT_CLEAR_LPS_MEMPM_MACOFF_FTC_SHR(x) | BIT_LPS_MEMPM_MACOFF_FTC_SHR(v))

#define BIT_SHIFT_LPS_MEMPM_MACOFF_FTC_TXRPT		21
#define BIT_MASK_LPS_MEMPM_MACOFF_FTC_TXRPT		0x3
#define BIT_LPS_MEMPM_MACOFF_FTC_TXRPT(x)		(((x) & BIT_MASK_LPS_MEMPM_MACOFF_FTC_TXRPT) << BIT_SHIFT_LPS_MEMPM_MACOFF_FTC_TXRPT)
#define BITS_LPS_MEMPM_MACOFF_FTC_TXRPT		(BIT_MASK_LPS_MEMPM_MACOFF_FTC_TXRPT << BIT_SHIFT_LPS_MEMPM_MACOFF_FTC_TXRPT)
#define BIT_CLEAR_LPS_MEMPM_MACOFF_FTC_TXRPT(x)	((x) & (~BITS_LPS_MEMPM_MACOFF_FTC_TXRPT))
#define BIT_GET_LPS_MEMPM_MACOFF_FTC_TXRPT(x)		(((x) >> BIT_SHIFT_LPS_MEMPM_MACOFF_FTC_TXRPT) & BIT_MASK_LPS_MEMPM_MACOFF_FTC_TXRPT)
#define BIT_SET_LPS_MEMPM_MACOFF_FTC_TXRPT(x, v)	(BIT_CLEAR_LPS_MEMPM_MACOFF_FTC_TXRPT(x) | BIT_LPS_MEMPM_MACOFF_FTC_TXRPT(v))

#define BIT_SHIFT_LPS_MEMPM_MACON_FTC_TXPKT		19
#define BIT_MASK_LPS_MEMPM_MACON_FTC_TXPKT		0x3
#define BIT_LPS_MEMPM_MACON_FTC_TXPKT(x)		(((x) & BIT_MASK_LPS_MEMPM_MACON_FTC_TXPKT) << BIT_SHIFT_LPS_MEMPM_MACON_FTC_TXPKT)
#define BITS_LPS_MEMPM_MACON_FTC_TXPKT			(BIT_MASK_LPS_MEMPM_MACON_FTC_TXPKT << BIT_SHIFT_LPS_MEMPM_MACON_FTC_TXPKT)
#define BIT_CLEAR_LPS_MEMPM_MACON_FTC_TXPKT(x)	((x) & (~BITS_LPS_MEMPM_MACON_FTC_TXPKT))
#define BIT_GET_LPS_MEMPM_MACON_FTC_TXPKT(x)		(((x) >> BIT_SHIFT_LPS_MEMPM_MACON_FTC_TXPKT) & BIT_MASK_LPS_MEMPM_MACON_FTC_TXPKT)
#define BIT_SET_LPS_MEMPM_MACON_FTC_TXPKT(x, v)	(BIT_CLEAR_LPS_MEMPM_MACON_FTC_TXPKT(x) | BIT_LPS_MEMPM_MACON_FTC_TXPKT(v))

#define BIT_LPS_MEMPM_MACOFF_FTC			BIT(18)
#define BIT_LPS_MEMPM_MACON_FTC			BIT(17)

#define BIT_SHIFT_LPS_MEMPM_MACOFF_PG_FTC		15
#define BIT_MASK_LPS_MEMPM_MACOFF_PG_FTC		0x3
#define BIT_LPS_MEMPM_MACOFF_PG_FTC(x)			(((x) & BIT_MASK_LPS_MEMPM_MACOFF_PG_FTC) << BIT_SHIFT_LPS_MEMPM_MACOFF_PG_FTC)
#define BITS_LPS_MEMPM_MACOFF_PG_FTC			(BIT_MASK_LPS_MEMPM_MACOFF_PG_FTC << BIT_SHIFT_LPS_MEMPM_MACOFF_PG_FTC)
#define BIT_CLEAR_LPS_MEMPM_MACOFF_PG_FTC(x)		((x) & (~BITS_LPS_MEMPM_MACOFF_PG_FTC))
#define BIT_GET_LPS_MEMPM_MACOFF_PG_FTC(x)		(((x) >> BIT_SHIFT_LPS_MEMPM_MACOFF_PG_FTC) & BIT_MASK_LPS_MEMPM_MACOFF_PG_FTC)
#define BIT_SET_LPS_MEMPM_MACOFF_PG_FTC(x, v)		(BIT_CLEAR_LPS_MEMPM_MACOFF_PG_FTC(x) | BIT_LPS_MEMPM_MACOFF_PG_FTC(v))

#define BIT_WL_LPS_OPT_PFM_EN				BIT(14)
#define BIT_WL_LPS_OPT_SWR_0P9				BIT(13)
#define BIT_WL_LPS_OPT_LP_XTAL				BIT(12)
#define BIT_WL_LPS_OPT_DIS_XTAL			BIT(11)
#define BIT_WL_LPS_OPT_EMACFUN				BIT(10)
#define BIT_WL_LPS_OPT_EPHYPWR				BIT(9)
#define BIT_WL_LPS_OPT_EMACPWR				BIT(8)
#define BIT_WL_LPS_MEMPM_EN				BIT(1)
#define BIT_WL_NRM_MEMPM_SL				BIT(0)

/* 2 REG_BOOT_REASON				(Offset 0x0098) */

#define BIT_BT_INT_EN					BIT(31)

#define BIT_SHIFT_RPWM2				16
#define BIT_MASK_RPWM2					0xffff
#define BIT_RPWM2(x)					(((x) & BIT_MASK_RPWM2) << BIT_SHIFT_RPWM2)
#define BITS_RPWM2					(BIT_MASK_RPWM2 << BIT_SHIFT_RPWM2)
#define BIT_CLEAR_RPWM2(x)				((x) & (~BITS_RPWM2))
#define BIT_GET_RPWM2(x)				(((x) >> BIT_SHIFT_RPWM2) & BIT_MASK_RPWM2)
#define BIT_SET_RPWM2(x, v)				(BIT_CLEAR_RPWM2(x) | BIT_RPWM2(v))

#define BIT_WL_WDT_PLFM				BIT(1)
#define BIT_WL_WDT_MCU					BIT(0)

#define BIT_SHIFT_RPWM_V1				0
#define BIT_MASK_RPWM_V1				0xff
#define BIT_RPWM_V1(x)					(((x) & BIT_MASK_RPWM_V1) << BIT_SHIFT_RPWM_V1)
#define BITS_RPWM_V1					(BIT_MASK_RPWM_V1 << BIT_SHIFT_RPWM_V1)
#define BIT_CLEAR_RPWM_V1(x)				((x) & (~BITS_RPWM_V1))
#define BIT_GET_RPWM_V1(x)				(((x) >> BIT_SHIFT_RPWM_V1) & BIT_MASK_RPWM_V1)
#define BIT_SET_RPWM_V1(x, v)				(BIT_CLEAR_RPWM_V1(x) | BIT_RPWM_V1(v))

/* 2 REG_SCOREBOARD_CTRL			(Offset 0x00A0) */

#define BIT_SHIFT_WL2BT_INFO				0
#define BIT_MASK_WL2BT_INFO				0x7fffffffL
#define BIT_WL2BT_INFO(x)				(((x) & BIT_MASK_WL2BT_INFO) << BIT_SHIFT_WL2BT_INFO)
#define BITS_WL2BT_INFO				(BIT_MASK_WL2BT_INFO << BIT_SHIFT_WL2BT_INFO)
#define BIT_CLEAR_WL2BT_INFO(x)			((x) & (~BITS_WL2BT_INFO))
#define BIT_GET_WL2BT_INFO(x)				(((x) >> BIT_SHIFT_WL2BT_INFO) & BIT_MASK_WL2BT_INFO)
#define BIT_SET_WL2BT_INFO(x, v)			(BIT_CLEAR_WL2BT_INFO(x) | BIT_WL2BT_INFO(v))

/* 2 REG_SYSON_FSM_MON_V1			(Offset 0x00A4) */

#define BIT_SHIFT_WLPMC_DEBUG_SEL			24
#define BIT_MASK_WLPMC_DEBUG_SEL			0xf
#define BIT_WLPMC_DEBUG_SEL(x)				(((x) & BIT_MASK_WLPMC_DEBUG_SEL) << BIT_SHIFT_WLPMC_DEBUG_SEL)
#define BITS_WLPMC_DEBUG_SEL				(BIT_MASK_WLPMC_DEBUG_SEL << BIT_SHIFT_WLPMC_DEBUG_SEL)
#define BIT_CLEAR_WLPMC_DEBUG_SEL(x)			((x) & (~BITS_WLPMC_DEBUG_SEL))
#define BIT_GET_WLPMC_DEBUG_SEL(x)			(((x) >> BIT_SHIFT_WLPMC_DEBUG_SEL) & BIT_MASK_WLPMC_DEBUG_SEL)
#define BIT_SET_WLPMC_DEBUG_SEL(x, v)			(BIT_CLEAR_WLPMC_DEBUG_SEL(x) | BIT_WLPMC_DEBUG_SEL(v))

#define BIT_SHIFT_WLPMC_DEBUG				0
#define BIT_MASK_WLPMC_DEBUG				0xffff
#define BIT_WLPMC_DEBUG(x)				(((x) & BIT_MASK_WLPMC_DEBUG) << BIT_SHIFT_WLPMC_DEBUG)
#define BITS_WLPMC_DEBUG				(BIT_MASK_WLPMC_DEBUG << BIT_SHIFT_WLPMC_DEBUG)
#define BIT_CLEAR_WLPMC_DEBUG(x)			((x) & (~BITS_WLPMC_DEBUG))
#define BIT_GET_WLPMC_DEBUG(x)				(((x) >> BIT_SHIFT_WLPMC_DEBUG) & BIT_MASK_WLPMC_DEBUG)
#define BIT_SET_WLPMC_DEBUG(x, v)			(BIT_CLEAR_WLPMC_DEBUG(x) | BIT_WLPMC_DEBUG(v))

/* 2 REG_PMC_DBG_CTRL1			(Offset 0x00A8) */

#define BIT_SHIFT_RD_WR_WIFI_BT_INFO_V1		24
#define BIT_MASK_RD_WR_WIFI_BT_INFO_V1			0x7f
#define BIT_RD_WR_WIFI_BT_INFO_V1(x)			(((x) & BIT_MASK_RD_WR_WIFI_BT_INFO_V1) << BIT_SHIFT_RD_WR_WIFI_BT_INFO_V1)
#define BITS_RD_WR_WIFI_BT_INFO_V1			(BIT_MASK_RD_WR_WIFI_BT_INFO_V1 << BIT_SHIFT_RD_WR_WIFI_BT_INFO_V1)
#define BIT_CLEAR_RD_WR_WIFI_BT_INFO_V1(x)		((x) & (~BITS_RD_WR_WIFI_BT_INFO_V1))
#define BIT_GET_RD_WR_WIFI_BT_INFO_V1(x)		(((x) >> BIT_SHIFT_RD_WR_WIFI_BT_INFO_V1) & BIT_MASK_RD_WR_WIFI_BT_INFO_V1)
#define BIT_SET_RD_WR_WIFI_BT_INFO_V1(x, v)		(BIT_CLEAR_RD_WR_WIFI_BT_INFO_V1(x) | BIT_RD_WR_WIFI_BT_INFO_V1(v))

#define BIT_BT2WL_STS_IMR				BIT(16)
#define BIT_BT2WL_STS_ISR				BIT(15)
#define BIT_PMC_WR_OVF					BIT(8)

#define BIT_SHIFT_WLPMC_ERRINT				0
#define BIT_MASK_WLPMC_ERRINT				0xff
#define BIT_WLPMC_ERRINT(x)				(((x) & BIT_MASK_WLPMC_ERRINT) << BIT_SHIFT_WLPMC_ERRINT)
#define BITS_WLPMC_ERRINT				(BIT_MASK_WLPMC_ERRINT << BIT_SHIFT_WLPMC_ERRINT)
#define BIT_CLEAR_WLPMC_ERRINT(x)			((x) & (~BITS_WLPMC_ERRINT))
#define BIT_GET_WLPMC_ERRINT(x)			(((x) >> BIT_SHIFT_WLPMC_ERRINT) & BIT_MASK_WLPMC_ERRINT)
#define BIT_SET_WLPMC_ERRINT(x, v)			(BIT_CLEAR_WLPMC_ERRINT(x) | BIT_WLPMC_ERRINT(v))

/* 2 REG_PMC_DBG_CTRL2_V1			(Offset 0x00AC) */

#define BIT_SHIFT_SYSON_REG_ARB			0
#define BIT_MASK_SYSON_REG_ARB				0x3
#define BIT_SYSON_REG_ARB(x)				(((x) & BIT_MASK_SYSON_REG_ARB) << BIT_SHIFT_SYSON_REG_ARB)
#define BITS_SYSON_REG_ARB				(BIT_MASK_SYSON_REG_ARB << BIT_SHIFT_SYSON_REG_ARB)
#define BIT_CLEAR_SYSON_REG_ARB(x)			((x) & (~BITS_SYSON_REG_ARB))
#define BIT_GET_SYSON_REG_ARB(x)			(((x) >> BIT_SHIFT_SYSON_REG_ARB) & BIT_MASK_SYSON_REG_ARB)
#define BIT_SET_SYSON_REG_ARB(x, v)			(BIT_CLEAR_SYSON_REG_ARB(x) | BIT_SYSON_REG_ARB(v))

/* 2 REG_HIMR0				(Offset 0x00B0) */

#define BIT_HISR1_INT_EN				BIT(31)
#define BIT_RXDES_UNAVAIL_INT_EN			BIT(30)
#define BIT_HISR2_INT_EN				BIT(29)
#define BIT_EVTQ_DONE_INT_EN				BIT(28)
#define BIT_EVTQ_START_INT_EN_V1			BIT(27)
#define BIT_FWMSG_INT_EN				BIT(26)
#define BIT_HCPWM2_INT_EN				BIT(25)
#define BIT_HCPWM_INT_EN				BIT(24)
#define BIT_RXFF_FULL_INT_EN				BIT(23)
#define BIT_RDE_ERR_INT_EN				BIT(22)
#define BIT_TDE_ERR_INT_EN				BIT(21)
#define BIT_TXFF_FIFO_INT_EN				BIT(20)
#define BIT_TXBCN8_ERR_INT_EN				BIT(19)
#define BIT_TXBCN7_ERR_INT_EN				BIT(18)
#define BIT_TXBCN6_ERR_INT_EN				BIT(17)
#define BIT_TXBCN5_ERR_INT_EN				BIT(16)
#define BIT_TXBCN4_ERR_INT_EN				BIT(15)
#define BIT_TXBCN3_ERR_INT_EN				BIT(14)
#define BIT_TXBCN2_ERR_INT_EN				BIT(13)
#define BIT_TXBCN1_ERR_INT_EN				BIT(12)
#define BIT_TXBCN8_OK_INT_EN				BIT(11)
#define BIT_TXBCN7_OK_INT_EN				BIT(10)
#define BIT_TXBCN6_OK_INT_EN				BIT(9)
#define BIT_TXBCN5_OK_INT_EN				BIT(8)
#define BIT_TXBCN4_OK_INT_EN				BIT(7)
#define BIT_TXBCN3_OK_INT_EN				BIT(6)
#define BIT_TXBCN2_OK_INT_EN				BIT(5)
#define BIT_TXBCN1_OK_INT_EN				BIT(4)
#define BIT_TSF_BIT32_TOGGLE_INT_EN			BIT(3)
#define BIT_TIMEOUT2_INT_EN				BIT(2)
#define BIT_TIMEOUT1_V1_INT_EN				BIT(1)
#define BIT_TIMEOUT0_V1_INT_EN				BIT(0)

/* 2 REG_HISR0				(Offset 0x00B4) */

#define BIT_HISR1_INT					BIT(31)
#define BIT_RXDES_UNAVAIL_INT				BIT(30)
#define BIT_HISR2_INT					BIT(29)
#define BIT_EVTQ_DONE_INT				BIT(28)
#define BIT_EVTQ_START_INT_V1				BIT(27)
#define BIT_FWMSG_INT					BIT(26)
#define BIT_HCPWM2_INT					BIT(25)
#define BIT_HCPWM_INT					BIT(24)
#define BIT_RXFF_FULL_INT				BIT(23)
#define BIT_RDE_ERR_INT				BIT(22)
#define BIT_TDE_ERR_INT				BIT(21)
#define BIT_TXFF_FIFO_INT				BIT(20)
#define BIT_TXBCN8_ERR_INT				BIT(19)
#define BIT_TXBCN7_ERR_INT				BIT(18)
#define BIT_TXBCN6_ERR_INT				BIT(17)
#define BIT_TXBCN5_ERR_INT				BIT(16)
#define BIT_TXBCN4_ERR_INT				BIT(15)
#define BIT_TXBCN3_ERR_INT				BIT(14)
#define BIT_TXBCN2_ERR_INT				BIT(13)
#define BIT_TXBCN1_ERR_INT				BIT(12)
#define BIT_TXBCN8_OK_INT				BIT(11)
#define BIT_TXBCN7_OK_INT				BIT(10)
#define BIT_TXBCN6_OK_INT				BIT(9)
#define BIT_TXBCN5_OK_INT				BIT(8)
#define BIT_TXBCN4_OK_INT				BIT(7)
#define BIT_TXBCN3_OK_INT				BIT(6)
#define BIT_TXBCN2_OK_INT				BIT(5)
#define BIT_TXBCN1_OK_INT				BIT(4)
#define BIT_TSF_BIT32_TOGGLE_INT			BIT(3)
#define BIT_TIMEOUT2_INT				BIT(2)
#define BIT_TIMEOUT1_INT_V1				BIT(1)
#define BIT_TIMEOUT0_INT_V1				BIT(0)

/* 2 REG_HEMR				(Offset 0x00B8) */

#define BIT_CTWEND1_INT_EN				BIT(31)
#define BIT_CTWEND0_INT_EN				BIT(30)
#define BIT_DWWIN_END_INT_EN_V1			BIT(29)
#define BIT_ATIMEND8_INT_EN				BIT(28)
#define BIT_HS_TXRPT_INT_EN				BIT(27)
#define BIT_HS_TXCCX_INT_EN				BIT(26)
#define BIT_ATIMEND5_INT_EN				BIT(25)
#define BIT_ATIMEND4_INT_EN				BIT(24)
#define BIT_ATIMEND3_INT_EN				BIT(23)
#define BIT_ATIMEND2_INT_EN				BIT(22)
#define BIT_ATIMEND1_INT_EN				BIT(21)
#define BIT_ATIMEND0_INT_EN				BIT(20)
#define BIT_BCNERLY8_INT_EN				BIT(19)
#define BIT_BCNERLY7_INT_EN				BIT(18)
#define BIT_BCNERLY6_INT_EN				BIT(17)
#define BIT_BCNERLY5_INT_EN				BIT(16)
#define BIT_BCNERLY4_INT_EN				BIT(15)
#define BIT_BCNERLY3_INT_EN				BIT(14)
#define BIT_BCNERLY2_INT_EN				BIT(13)
#define BIT_BCNERLY1_INT_EN				BIT(12)
#define BIT_BCNERLY0_INT_EN				BIT(11)
#define BIT_HS_BCNELY1_AGGR_INT_EN			BIT(10)
#define BIT_CPU_MGQ_TXDONE_INT_EN			BIT(9)
#define BIT_PS_TIMER_C_INT_EN				BIT(8)
#define BIT_PS_TIMER_B_INT_EN				BIT(7)
#define BIT_PS_TIMER_A_INT_EN				BIT(6)
#define BIT_HS_BCNELY0_AGGR_INT_EN			BIT(5)
#define BIT_GTINT4_EN					BIT(4)
#define BIT_GTINT3_EN					BIT(3)
#define BIT_TXBCNOK9_INT_EN				BIT(2)
#define BIT_TXBCNERE9_INT_EN				BIT(1)
#define BIT_RXBCN_NAN_RPT_OK_EN			BIT(0)

/* 2 REG_HESR				(Offset 0x00BC) */

#define BIT_CTWEND1_INT				BIT(31)
#define BIT_CTWEND0_INT				BIT(30)
#define BIT_DWWIN_END_INT_V1				BIT(29)
#define BIT_ATIMEND8_INT				BIT(28)
#define BIT_HS_TXRPT_INT				BIT(27)
#define BIT_HS_TXCCX_INT				BIT(26)
#define BIT_ATIMEND5_INT				BIT(25)
#define BIT_ATIMEND4_INT				BIT(24)
#define BIT_ATIMEND3_INT				BIT(23)
#define BIT_ATIMEND2_INT				BIT(22)
#define BIT_ATIMEND1_INT				BIT(21)
#define BIT_ATIMEND0_INT				BIT(20)
#define BIT_BCNERLY8_INT				BIT(19)
#define BIT_BCNERLY7_INT				BIT(18)
#define BIT_BCNERLY6_INT				BIT(17)
#define BIT_BCNERLY5_INT				BIT(16)
#define BIT_BCNERLY4_INT				BIT(15)
#define BIT_BCNERLY3_INT				BIT(14)
#define BIT_BCNERLY2_INT				BIT(13)
#define BIT_BCNERLY1_INT				BIT(12)
#define BIT_BCNERLY0_INT				BIT(11)
#define BIT_HS_BCNELY1_AGGR_INT			BIT(10)
#define BIT_CPU_MGQ_TXDONE_INT				BIT(9)
#define BIT_PS_TIMER_C_INT				BIT(8)
#define BIT_PS_TIMER_B_INT				BIT(7)
#define BIT_PS_TIMER_A_INT				BIT(6)
#define BIT_HS_BCNELY0_AGGR_INT			BIT(5)
#define BIT_GTINT4					BIT(4)
#define BIT_GTINT3					BIT(3)
#define BIT_TXBCNOK9_INT				BIT(2)
#define BIT_TXBCNERR9_INT				BIT(1)
#define BIT_RXBCN_NAN_RPT_OK				BIT(0)

/* 2 REG_HIMR2				(Offset 0x00C0) */

#define BIT_KM0_INT_EN					BIT(31)
#define BIT_KM0_INT					BIT(31)
#define BIT_PS_TIMER_E_INT_EN				BIT(25)
#define BIT_PS_TIMER_E_INT				BIT(25)
#define BIT_PS_TIMER_D_INT_EN				BIT(24)
#define BIT_PS_TIMER_D_INT				BIT(24)
#define BIT_PS_TIMER_E_EARLY_INT_EN			BIT(23)
#define BIT_PS_TIMER_E_EARLY_INT			BIT(23)
#define BIT_PS_TIMER_D_EARLY_INT_EN			BIT(22)
#define BIT_PS_TIMER_D_EARLY_INT			BIT(22)
#define BIT_PS_TIMER_C_EARLY_INT_EN			BIT(21)
#define BIT_PS_TIMER_C_EARLY_INT			BIT(21)
#define BIT_PS_TIMER_B_EARLY_INT_EN			BIT(20)
#define BIT_PS_TIMER_B_EARLY_INT			BIT(20)
#define BIT_PS_TIMER_A_EARLY_INT_EN			BIT(19)
#define BIT_PS_TIMER_A_EARLY_INT			BIT(19)
#define BIT_TXBCNOK_NAN_INT_EN				BIT(18)
#define BIT_TXBCNOK_NAN_INT				BIT(18)
#define BIT_TXBCNERR_NAN_INT_EN			BIT(17)
#define BIT_TXBCNERR_NAN_INT				BIT(17)
#define BIT_RXTMREQ_INT_EN				BIT(16)
#define BIT_RXTMREQ_INT				BIT(16)
#define BIT_RXTM_INT_EN				BIT(15)
#define BIT_RXTM_INT					BIT(15)
#define BIT_TXTM_INT_EN				BIT(14)
#define BIT_TXTM_INT					BIT(14)
#define BIT_RX_PAYLOAD_MATCH_INT_EN			BIT(13)
#define BIT_RX_PAYLOAD_MATCH_INT			BIT(13)
#define BIT_CHINFO_SEG_DONE_INT_EN			BIT(12)
#define BIT_CHINFO_SEG_DONE_INT			BIT(12)
#define BIT_CSI_BUF_FULL_INT_EN			BIT(11)
#define BIT_CSI_BUF_FULL_INT				BIT(11)
#define BIT_HS_RX_PHYSTS_DONE_INT_EN			BIT(6)
#define BIT_HS_RX_PHYSTS_DONE_INT			BIT(6)
#define BIT_HS_TIM_HIT_INT_EN				BIT(5)
#define BIT_HS_TIM_HIT_INT				BIT(5)
#define BIT_HS_DFS_PKT_INT_EN				BIT(4)
#define BIT_HS_DFS_PKT_INT				BIT(4)
#define BIT_HS_BC_TWT_PARA_CHG_INT_EN			BIT(3)
#define BIT_HS_BC_TWT_PARA_CHG_INT			BIT(3)
#define BIT_HS_BCN_IE_0_HIT_INT_EN			BIT(2)
#define BIT_HS_BCN_IE_0_HIT_INT			BIT(2)
#define BIT_HS_BCN_IE_1_HIT_INT_EN			BIT(1)
#define BIT_HS_BCN_IE_1_HIT_INT			BIT(1)
#define BIT_HS_TIM_NO_HIT_INT_EN			BIT(0)
#define BIT_HS_TIM_NO_HIT_INT				BIT(0)

/* 2 REG_SDM_IDR_CTRL0			(Offset 0x00E8) */

#define BIT_SHIFT_SDM_ADDR				0
#define BIT_MASK_SDM_ADDR				0x3f
#define BIT_SDM_ADDR(x)				(((x) & BIT_MASK_SDM_ADDR) << BIT_SHIFT_SDM_ADDR)
#define BITS_SDM_ADDR					(BIT_MASK_SDM_ADDR << BIT_SHIFT_SDM_ADDR)
#define BIT_CLEAR_SDM_ADDR(x)				((x) & (~BITS_SDM_ADDR))
#define BIT_GET_SDM_ADDR(x)				(((x) >> BIT_SHIFT_SDM_ADDR) & BIT_MASK_SDM_ADDR)
#define BIT_SET_SDM_ADDR(x, v)				(BIT_CLEAR_SDM_ADDR(x) | BIT_SDM_ADDR(v))

/* 2 REG_WL_CK32KGEN_RWD			(Offset 0x00EC) */

#define BIT_SHIFT_CK32GEN_RD				0
#define BIT_MASK_CK32GEN_RD				0xffffffffL
#define BIT_CK32GEN_RD(x)				(((x) & BIT_MASK_CK32GEN_RD) << BIT_SHIFT_CK32GEN_RD)
#define BITS_CK32GEN_RD				(BIT_MASK_CK32GEN_RD << BIT_SHIFT_CK32GEN_RD)
#define BIT_CLEAR_CK32GEN_RD(x)			((x) & (~BITS_CK32GEN_RD))
#define BIT_GET_CK32GEN_RD(x)				(((x) >> BIT_SHIFT_CK32GEN_RD) & BIT_MASK_CK32GEN_RD)
#define BIT_SET_CK32GEN_RD(x, v)			(BIT_CLEAR_CK32GEN_RD(x) | BIT_CK32GEN_RD(v))

/* 2 REG_SYS_CONFIG0				(Offset 0x00F0) */

#define BIT_IS_SCH_CLK_INSLP_V1			BIT(8)

#define BIT_SHIFT_VENDOR_ID_V1				4
#define BIT_MASK_VENDOR_ID_V1				0xf
#define BIT_VENDOR_ID_V1(x)				(((x) & BIT_MASK_VENDOR_ID_V1) << BIT_SHIFT_VENDOR_ID_V1)
#define BITS_VENDOR_ID_V1				(BIT_MASK_VENDOR_ID_V1 << BIT_SHIFT_VENDOR_ID_V1)
#define BIT_CLEAR_VENDOR_ID_V1(x)			((x) & (~BITS_VENDOR_ID_V1))
#define BIT_GET_VENDOR_ID_V1(x)			(((x) >> BIT_SHIFT_VENDOR_ID_V1) & BIT_MASK_VENDOR_ID_V1)
#define BIT_SET_VENDOR_ID_V1(x, v)			(BIT_CLEAR_VENDOR_ID_V1(x) | BIT_VENDOR_ID_V1(v))

#define BIT_PLL_CK_RDY					BIT(0)

/* 2 REG_CR					(Offset 0x0100) */

#define BIT_BIST_H32BIT_SEL				BIT(29)
#define BIT_DMACLBK					BIT(28)
#define BIT_NO_TBUF					BIT(27)
#define BIT_DMALBK					BIT(26)
#define BIT_NO_TXPHY					BIT(25)
#define BIT_DIGLBK					BIT(24)

#define BIT_SHIFT_NETYPE1				18
#define BIT_MASK_NETYPE1				0x3
#define BIT_NETYPE1(x)					(((x) & BIT_MASK_NETYPE1) << BIT_SHIFT_NETYPE1)
#define BITS_NETYPE1					(BIT_MASK_NETYPE1 << BIT_SHIFT_NETYPE1)
#define BIT_CLEAR_NETYPE1(x)				((x) & (~BITS_NETYPE1))
#define BIT_GET_NETYPE1(x)				(((x) >> BIT_SHIFT_NETYPE1) & BIT_MASK_NETYPE1)
#define BIT_SET_NETYPE1(x, v)				(BIT_CLEAR_NETYPE1(x) | BIT_NETYPE1(v))

#define BIT_SHIFT_NETYPE0				16
#define BIT_MASK_NETYPE0				0x3
#define BIT_NETYPE0(x)					(((x) & BIT_MASK_NETYPE0) << BIT_SHIFT_NETYPE0)
#define BITS_NETYPE0					(BIT_MASK_NETYPE0 << BIT_SHIFT_NETYPE0)
#define BIT_CLEAR_NETYPE0(x)				((x) & (~BITS_NETYPE0))
#define BIT_GET_NETYPE0(x)				(((x) >> BIT_SHIFT_NETYPE0) & BIT_MASK_NETYPE0)
#define BIT_SET_NETYPE0(x, v)				(BIT_CLEAR_NETYPE0(x) | BIT_NETYPE0(v))

#define BIT_I2C_MAILBOX_EN				BIT(12)
#define BIT_CAL32TM_EN					BIT(10)
#define BIT_MAC_SEC_EN					BIT(9)
#define BIT_ENSWBCN					BIT(8)
#define BIT_MACRXEN					BIT(7)
#define BIT_MACTXEN					BIT(6)
#define BIT_SCHEDULE_EN				BIT(5)
#define BIT_PROTOCOL_EN				BIT(4)
#define BIT_RXDMA_EN					BIT(3)
#define BIT_TXDMA_EN					BIT(2)
#define BIT_HCI_RXDMA_EN				BIT(1)
#define BIT_HCI_TXDMA_EN				BIT(0)

/* 2 REG_PG_SIZE				(Offset 0x0104) */

#define BIT_SHIFT_PKT_BUFF_ACCESS_CTRL			16
#define BIT_MASK_PKT_BUFF_ACCESS_CTRL			0xff
#define BIT_PKT_BUFF_ACCESS_CTRL(x)			(((x) & BIT_MASK_PKT_BUFF_ACCESS_CTRL) << BIT_SHIFT_PKT_BUFF_ACCESS_CTRL)
#define BITS_PKT_BUFF_ACCESS_CTRL			(BIT_MASK_PKT_BUFF_ACCESS_CTRL << BIT_SHIFT_PKT_BUFF_ACCESS_CTRL)
#define BIT_CLEAR_PKT_BUFF_ACCESS_CTRL(x)		((x) & (~BITS_PKT_BUFF_ACCESS_CTRL))
#define BIT_GET_PKT_BUFF_ACCESS_CTRL(x)		(((x) >> BIT_SHIFT_PKT_BUFF_ACCESS_CTRL) & BIT_MASK_PKT_BUFF_ACCESS_CTRL)
#define BIT_SET_PKT_BUFF_ACCESS_CTRL(x, v)		(BIT_CLEAR_PKT_BUFF_ACCESS_CTRL(x) | BIT_PKT_BUFF_ACCESS_CTRL(v))

#define BIT_IRAM_DIS					BIT(8)

#define BIT_SHIFT_TXPKT_PGSZ				4
#define BIT_MASK_TXPKT_PGSZ				0xf
#define BIT_TXPKT_PGSZ(x)				(((x) & BIT_MASK_TXPKT_PGSZ) << BIT_SHIFT_TXPKT_PGSZ)
#define BITS_TXPKT_PGSZ				(BIT_MASK_TXPKT_PGSZ << BIT_SHIFT_TXPKT_PGSZ)
#define BIT_CLEAR_TXPKT_PGSZ(x)			((x) & (~BITS_TXPKT_PGSZ))
#define BIT_GET_TXPKT_PGSZ(x)				(((x) >> BIT_SHIFT_TXPKT_PGSZ) & BIT_MASK_TXPKT_PGSZ)
#define BIT_SET_TXPKT_PGSZ(x, v)			(BIT_CLEAR_TXPKT_PGSZ(x) | BIT_TXPKT_PGSZ(v))

#define BIT_SHIFT_RXPKT_PGSZ				0
#define BIT_MASK_RXPKT_PGSZ				0xf
#define BIT_RXPKT_PGSZ(x)				(((x) & BIT_MASK_RXPKT_PGSZ) << BIT_SHIFT_RXPKT_PGSZ)
#define BITS_RXPKT_PGSZ				(BIT_MASK_RXPKT_PGSZ << BIT_SHIFT_RXPKT_PGSZ)
#define BIT_CLEAR_RXPKT_PGSZ(x)			((x) & (~BITS_RXPKT_PGSZ))
#define BIT_GET_RXPKT_PGSZ(x)				(((x) >> BIT_SHIFT_RXPKT_PGSZ) & BIT_MASK_RXPKT_PGSZ)
#define BIT_SET_RXPKT_PGSZ(x, v)			(BIT_CLEAR_RXPKT_PGSZ(x) | BIT_RXPKT_PGSZ(v))

/* 2 REG_TSF_CLK_STATE			(Offset 0x0108) */

#define BIT_CLK_TSF_IS32K				BIT(15)

/* 2 REG_TXDMA_PQ_MAP			(Offset 0x010C) */

#define BIT_SHIFT_TXDMA_CMQ_MAP			16
#define BIT_MASK_TXDMA_CMQ_MAP				0x3
#define BIT_TXDMA_CMQ_MAP(x)				(((x) & BIT_MASK_TXDMA_CMQ_MAP) << BIT_SHIFT_TXDMA_CMQ_MAP)
#define BITS_TXDMA_CMQ_MAP				(BIT_MASK_TXDMA_CMQ_MAP << BIT_SHIFT_TXDMA_CMQ_MAP)
#define BIT_CLEAR_TXDMA_CMQ_MAP(x)			((x) & (~BITS_TXDMA_CMQ_MAP))
#define BIT_GET_TXDMA_CMQ_MAP(x)			(((x) >> BIT_SHIFT_TXDMA_CMQ_MAP) & BIT_MASK_TXDMA_CMQ_MAP)
#define BIT_SET_TXDMA_CMQ_MAP(x, v)			(BIT_CLEAR_TXDMA_CMQ_MAP(x) | BIT_TXDMA_CMQ_MAP(v))

#define BIT_SHIFT_TXDMA_HIQ_MAP			14
#define BIT_MASK_TXDMA_HIQ_MAP				0x3
#define BIT_TXDMA_HIQ_MAP(x)				(((x) & BIT_MASK_TXDMA_HIQ_MAP) << BIT_SHIFT_TXDMA_HIQ_MAP)
#define BITS_TXDMA_HIQ_MAP				(BIT_MASK_TXDMA_HIQ_MAP << BIT_SHIFT_TXDMA_HIQ_MAP)
#define BIT_CLEAR_TXDMA_HIQ_MAP(x)			((x) & (~BITS_TXDMA_HIQ_MAP))
#define BIT_GET_TXDMA_HIQ_MAP(x)			(((x) >> BIT_SHIFT_TXDMA_HIQ_MAP) & BIT_MASK_TXDMA_HIQ_MAP)
#define BIT_SET_TXDMA_HIQ_MAP(x, v)			(BIT_CLEAR_TXDMA_HIQ_MAP(x) | BIT_TXDMA_HIQ_MAP(v))

#define BIT_SHIFT_TXDMA_MGQ_MAP			12
#define BIT_MASK_TXDMA_MGQ_MAP				0x3
#define BIT_TXDMA_MGQ_MAP(x)				(((x) & BIT_MASK_TXDMA_MGQ_MAP) << BIT_SHIFT_TXDMA_MGQ_MAP)
#define BITS_TXDMA_MGQ_MAP				(BIT_MASK_TXDMA_MGQ_MAP << BIT_SHIFT_TXDMA_MGQ_MAP)
#define BIT_CLEAR_TXDMA_MGQ_MAP(x)			((x) & (~BITS_TXDMA_MGQ_MAP))
#define BIT_GET_TXDMA_MGQ_MAP(x)			(((x) >> BIT_SHIFT_TXDMA_MGQ_MAP) & BIT_MASK_TXDMA_MGQ_MAP)
#define BIT_SET_TXDMA_MGQ_MAP(x, v)			(BIT_CLEAR_TXDMA_MGQ_MAP(x) | BIT_TXDMA_MGQ_MAP(v))

#define BIT_SHIFT_TXDMA_BKQ_MAP			10
#define BIT_MASK_TXDMA_BKQ_MAP				0x3
#define BIT_TXDMA_BKQ_MAP(x)				(((x) & BIT_MASK_TXDMA_BKQ_MAP) << BIT_SHIFT_TXDMA_BKQ_MAP)
#define BITS_TXDMA_BKQ_MAP				(BIT_MASK_TXDMA_BKQ_MAP << BIT_SHIFT_TXDMA_BKQ_MAP)
#define BIT_CLEAR_TXDMA_BKQ_MAP(x)			((x) & (~BITS_TXDMA_BKQ_MAP))
#define BIT_GET_TXDMA_BKQ_MAP(x)			(((x) >> BIT_SHIFT_TXDMA_BKQ_MAP) & BIT_MASK_TXDMA_BKQ_MAP)
#define BIT_SET_TXDMA_BKQ_MAP(x, v)			(BIT_CLEAR_TXDMA_BKQ_MAP(x) | BIT_TXDMA_BKQ_MAP(v))

#define BIT_SHIFT_TXDMA_BEQ_MAP			8
#define BIT_MASK_TXDMA_BEQ_MAP				0x3
#define BIT_TXDMA_BEQ_MAP(x)				(((x) & BIT_MASK_TXDMA_BEQ_MAP) << BIT_SHIFT_TXDMA_BEQ_MAP)
#define BITS_TXDMA_BEQ_MAP				(BIT_MASK_TXDMA_BEQ_MAP << BIT_SHIFT_TXDMA_BEQ_MAP)
#define BIT_CLEAR_TXDMA_BEQ_MAP(x)			((x) & (~BITS_TXDMA_BEQ_MAP))
#define BIT_GET_TXDMA_BEQ_MAP(x)			(((x) >> BIT_SHIFT_TXDMA_BEQ_MAP) & BIT_MASK_TXDMA_BEQ_MAP)
#define BIT_SET_TXDMA_BEQ_MAP(x, v)			(BIT_CLEAR_TXDMA_BEQ_MAP(x) | BIT_TXDMA_BEQ_MAP(v))

#define BIT_SHIFT_TXDMA_VIQ_MAP			6
#define BIT_MASK_TXDMA_VIQ_MAP				0x3
#define BIT_TXDMA_VIQ_MAP(x)				(((x) & BIT_MASK_TXDMA_VIQ_MAP) << BIT_SHIFT_TXDMA_VIQ_MAP)
#define BITS_TXDMA_VIQ_MAP				(BIT_MASK_TXDMA_VIQ_MAP << BIT_SHIFT_TXDMA_VIQ_MAP)
#define BIT_CLEAR_TXDMA_VIQ_MAP(x)			((x) & (~BITS_TXDMA_VIQ_MAP))
#define BIT_GET_TXDMA_VIQ_MAP(x)			(((x) >> BIT_SHIFT_TXDMA_VIQ_MAP) & BIT_MASK_TXDMA_VIQ_MAP)
#define BIT_SET_TXDMA_VIQ_MAP(x, v)			(BIT_CLEAR_TXDMA_VIQ_MAP(x) | BIT_TXDMA_VIQ_MAP(v))

#define BIT_SHIFT_TXDMA_VOQ_MAP			4
#define BIT_MASK_TXDMA_VOQ_MAP				0x3
#define BIT_TXDMA_VOQ_MAP(x)				(((x) & BIT_MASK_TXDMA_VOQ_MAP) << BIT_SHIFT_TXDMA_VOQ_MAP)
#define BITS_TXDMA_VOQ_MAP				(BIT_MASK_TXDMA_VOQ_MAP << BIT_SHIFT_TXDMA_VOQ_MAP)
#define BIT_CLEAR_TXDMA_VOQ_MAP(x)			((x) & (~BITS_TXDMA_VOQ_MAP))
#define BIT_GET_TXDMA_VOQ_MAP(x)			(((x) >> BIT_SHIFT_TXDMA_VOQ_MAP) & BIT_MASK_TXDMA_VOQ_MAP)
#define BIT_SET_TXDMA_VOQ_MAP(x, v)			(BIT_CLEAR_TXDMA_VOQ_MAP(x) | BIT_TXDMA_VOQ_MAP(v))

#define BIT_RXDMA_AGG_EN				BIT(2)
#define BIT_ENSHFT					BIT(1)
#define BIT_RXDMA_BW_EN				BIT(0)

/* 2 REG_TRXFF_BNDY				(Offset 0x0114) */

#define BIT_SHIFT_RXPKT0ENDADDR			16
#define BIT_MASK_RXPKT0ENDADDR				0xffff
#define BIT_RXPKT0ENDADDR(x)				(((x) & BIT_MASK_RXPKT0ENDADDR) << BIT_SHIFT_RXPKT0ENDADDR)
#define BITS_RXPKT0ENDADDR				(BIT_MASK_RXPKT0ENDADDR << BIT_SHIFT_RXPKT0ENDADDR)
#define BIT_CLEAR_RXPKT0ENDADDR(x)			((x) & (~BITS_RXPKT0ENDADDR))
#define BIT_GET_RXPKT0ENDADDR(x)			(((x) >> BIT_SHIFT_RXPKT0ENDADDR) & BIT_MASK_RXPKT0ENDADDR)
#define BIT_SET_RXPKT0ENDADDR(x, v)			(BIT_CLEAR_RXPKT0ENDADDR(x) | BIT_RXPKT0ENDADDR(v))

#define BIT_SHIFT_RXFFOVFL_RSV				8
#define BIT_MASK_RXFFOVFL_RSV				0xf
#define BIT_RXFFOVFL_RSV(x)				(((x) & BIT_MASK_RXFFOVFL_RSV) << BIT_SHIFT_RXFFOVFL_RSV)
#define BITS_RXFFOVFL_RSV				(BIT_MASK_RXFFOVFL_RSV << BIT_SHIFT_RXFFOVFL_RSV)
#define BIT_CLEAR_RXFFOVFL_RSV(x)			((x) & (~BITS_RXFFOVFL_RSV))
#define BIT_GET_RXFFOVFL_RSV(x)			(((x) >> BIT_SHIFT_RXFFOVFL_RSV) & BIT_MASK_RXFFOVFL_RSV)
#define BIT_SET_RXFFOVFL_RSV(x, v)			(BIT_CLEAR_RXFFOVFL_RSV(x) | BIT_RXFFOVFL_RSV(v))

#define BIT_SHIFT_TXPKT_PGBNDY				0
#define BIT_MASK_TXPKT_PGBNDY				0xff
#define BIT_TXPKT_PGBNDY(x)				(((x) & BIT_MASK_TXPKT_PGBNDY) << BIT_SHIFT_TXPKT_PGBNDY)
#define BITS_TXPKT_PGBNDY				(BIT_MASK_TXPKT_PGBNDY << BIT_SHIFT_TXPKT_PGBNDY)
#define BIT_CLEAR_TXPKT_PGBNDY(x)			((x) & (~BITS_TXPKT_PGBNDY))
#define BIT_GET_TXPKT_PGBNDY(x)			(((x) >> BIT_SHIFT_TXPKT_PGBNDY) & BIT_MASK_TXPKT_PGBNDY)
#define BIT_SET_TXPKT_PGBNDY(x, v)			(BIT_CLEAR_TXPKT_PGBNDY(x) | BIT_TXPKT_PGBNDY(v))

/* 2 REG_PTA_I2C_MBOX			(Offset 0x0118) */

#define BIT_SHIFT_I2C_M_STATUS				8
#define BIT_MASK_I2C_M_STATUS				0xf
#define BIT_I2C_M_STATUS(x)				(((x) & BIT_MASK_I2C_M_STATUS) << BIT_SHIFT_I2C_M_STATUS)
#define BITS_I2C_M_STATUS				(BIT_MASK_I2C_M_STATUS << BIT_SHIFT_I2C_M_STATUS)
#define BIT_CLEAR_I2C_M_STATUS(x)			((x) & (~BITS_I2C_M_STATUS))
#define BIT_GET_I2C_M_STATUS(x)			(((x) >> BIT_SHIFT_I2C_M_STATUS) & BIT_MASK_I2C_M_STATUS)
#define BIT_SET_I2C_M_STATUS(x, v)			(BIT_CLEAR_I2C_M_STATUS(x) | BIT_I2C_M_STATUS(v))

#define BIT_SHIFT_I2C_M_BUS_GNT_FW			4
#define BIT_MASK_I2C_M_BUS_GNT_FW			0x7
#define BIT_I2C_M_BUS_GNT_FW(x)			(((x) & BIT_MASK_I2C_M_BUS_GNT_FW) << BIT_SHIFT_I2C_M_BUS_GNT_FW)
#define BITS_I2C_M_BUS_GNT_FW				(BIT_MASK_I2C_M_BUS_GNT_FW << BIT_SHIFT_I2C_M_BUS_GNT_FW)
#define BIT_CLEAR_I2C_M_BUS_GNT_FW(x)			((x) & (~BITS_I2C_M_BUS_GNT_FW))
#define BIT_GET_I2C_M_BUS_GNT_FW(x)			(((x) >> BIT_SHIFT_I2C_M_BUS_GNT_FW) & BIT_MASK_I2C_M_BUS_GNT_FW)
#define BIT_SET_I2C_M_BUS_GNT_FW(x, v)			(BIT_CLEAR_I2C_M_BUS_GNT_FW(x) | BIT_I2C_M_BUS_GNT_FW(v))

#define BIT_I2C_GNT_FW					BIT(3)

#define BIT_SHIFT_I2C_M_SPEED				1
#define BIT_MASK_I2C_M_SPEED				0x3
#define BIT_I2C_M_SPEED(x)				(((x) & BIT_MASK_I2C_M_SPEED) << BIT_SHIFT_I2C_M_SPEED)
#define BITS_I2C_M_SPEED				(BIT_MASK_I2C_M_SPEED << BIT_SHIFT_I2C_M_SPEED)
#define BIT_CLEAR_I2C_M_SPEED(x)			((x) & (~BITS_I2C_M_SPEED))
#define BIT_GET_I2C_M_SPEED(x)				(((x) >> BIT_SHIFT_I2C_M_SPEED) & BIT_MASK_I2C_M_SPEED)
#define BIT_SET_I2C_M_SPEED(x, v)			(BIT_CLEAR_I2C_M_SPEED(x) | BIT_I2C_M_SPEED(v))

#define BIT_I2C_M_UNLOCK				BIT(0)

/* 2 REG_RXFF_PTR				(Offset 0x011C) */

#define BIT_SHIFT_RXFF0_RDPTR				16
#define BIT_MASK_RXFF0_RDPTR				0xffff
#define BIT_RXFF0_RDPTR(x)				(((x) & BIT_MASK_RXFF0_RDPTR) << BIT_SHIFT_RXFF0_RDPTR)
#define BITS_RXFF0_RDPTR				(BIT_MASK_RXFF0_RDPTR << BIT_SHIFT_RXFF0_RDPTR)
#define BIT_CLEAR_RXFF0_RDPTR(x)			((x) & (~BITS_RXFF0_RDPTR))
#define BIT_GET_RXFF0_RDPTR(x)				(((x) >> BIT_SHIFT_RXFF0_RDPTR) & BIT_MASK_RXFF0_RDPTR)
#define BIT_SET_RXFF0_RDPTR(x, v)			(BIT_CLEAR_RXFF0_RDPTR(x) | BIT_RXFF0_RDPTR(v))

#define BIT_SHIFT_RXFF0_WTPTR				0
#define BIT_MASK_RXFF0_WTPTR				0xffff
#define BIT_RXFF0_WTPTR(x)				(((x) & BIT_MASK_RXFF0_WTPTR) << BIT_SHIFT_RXFF0_WTPTR)
#define BITS_RXFF0_WTPTR				(BIT_MASK_RXFF0_WTPTR << BIT_SHIFT_RXFF0_WTPTR)
#define BIT_CLEAR_RXFF0_WTPTR(x)			((x) & (~BITS_RXFF0_WTPTR))
#define BIT_GET_RXFF0_WTPTR(x)				(((x) >> BIT_SHIFT_RXFF0_WTPTR) & BIT_MASK_RXFF0_WTPTR)
#define BIT_SET_RXFF0_WTPTR(x, v)			(BIT_CLEAR_RXFF0_WTPTR(x) | BIT_RXFF0_WTPTR(v))

/* 2 REG_FE1IMR				(Offset 0x0120) */

#define BIT_FS_NOT_BEACON_INT_EN			BIT(31)
#define BIT_FS_FWFF_FULL_INT_EN			BIT(30)
#define BIT_FS_BB_STOP_RX_INT_EN			BIT(29)
#define BIT_FS_TSF_GT_THRES_INT_EN			BIT(28)
#define BIT_FS_RXPLCP_CHKOK_INT_EN			BIT(27)
#define BIT_FS_RXBCN_TIMEOUT_CNT_INT_EN		BIT(26)
#define BIT_FS_RXBCN_TIMEUP_INT_EN			BIT(25)
#define BIT_FS_RX_BCN_ERR_P1_INT_EN			BIT(24)
#define BIT_FS_RX_BCN_ERR_P0_INT_EN			BIT(23)
#define BIT_FS_RX_BCN_P1_INT_EN			BIT(22)
#define BIT_FS_RX_BCN_P0_INT_EN			BIT(21)
#define BIT_FS_RX_UMD0_INT_EN				BIT(20)
#define BIT_FS_RX_UMD1_INT_EN				BIT(19)
#define BIT_FS_RX_BMD0_INT_EN				BIT(18)
#define BIT_FS_RX_BMD1_INT_EN				BIT(17)
#define BIT_FS_RXDONE0_INT_EN				BIT(16)
#define BIT_FS_WWLAN_INT_EN				BIT(15)
#define BIT_FS_SOUND_DONE_INT_EN			BIT(14)
#define BIT_FS_LP_STBY_INT_EN				BIT(13)
#define BIT_FS_TRL_MTR_INT_EN				BIT(12)
#define BIT_FS_BF1_PRETO_INT_EN			BIT(11)
#define BIT_FS_BF0_PRETO_INT_EN			BIT(10)
#define BIT_FS_PTCL_RELEASE_MACID_INT_EN		BIT(9)
#define BIT_FS_PRETXERR_HANDLE_FSISR_INT_EN		BIT(8)
#define BIT_FS_WLBB_LOW_PRI_INT_EN			BIT(7)
#define BIT_FS_WLBB_HIGH_PRI_INT_EN			BIT(6)
#define BIT_FS_WLACTOFF_INT_EN				BIT(5)
#define BIT_FS_WLACTON_INT_EN				BIT(4)
#define BIT_FS_BTCMD_INT_EN				BIT(3)
#define BIT_FS_REG_MAILBOX_TO_I2C_INT_EN		BIT(2)
#define BIT_FS_TRPC_TO_INT_EN				BIT(1)
#define BIT_FS_RPC_O_T_INT_EN				BIT(0)

/* 2 REG_FE1ISR				(Offset 0x0124) */

#define BIT_NOT_BEACON_INT				BIT(31)
#define BIT_FS_FWFF_FULL_INT				BIT(30)
#define BIT_FS_BB_STOP_RX_INT				BIT(29)
#define BIT_FS_TSF_GT_THRES_INT			BIT(28)
#define BIT_FS_RXPLCP_CHKOK_INT			BIT(27)
#define BIT_FS_RXBCN_TIMEOUT_CNT_INT			BIT(26)
#define BIT_FS_RXBCN_TIMEUP_INT			BIT(25)
#define BIT_FS_RX_BCN_ERR_P1_INT			BIT(24)
#define BIT_FS_RX_BCN_ERR_P0_INT			BIT(23)
#define BIT_FS_RX_BCN_P1_INT				BIT(22)
#define BIT_FS_RX_BCN_P0_INT				BIT(21)
#define BIT_FS_RX_UMD0_INT				BIT(20)
#define BIT_FS_RX_UMD1_INT				BIT(19)
#define BIT_FS_RX_BMD0_INT				BIT(18)
#define BIT_FS_RX_BMD1_INT				BIT(17)
#define BIT_FS_RXDONE0_INT				BIT(16)
#define BIT_FS_WWLAN_INT				BIT(15)
#define BIT_FS_SOUND_DONE_INT				BIT(14)
#define BIT_FS_LP_STBY_INT				BIT(13)
#define BIT_FS_TRL_MTR_INT				BIT(12)
#define BIT_FS_BF1_PRETO_INT				BIT(11)
#define BIT_FS_BF0_PRETO_INT				BIT(10)
#define BIT_FS_PTCL_RELEASE_MACID_INT			BIT(9)
#define BIT_FS_PRETXERR_HANDLE_FSISR_INT		BIT(8)
#define BIT_FS_WLBB_LOW_PRI_INT			BIT(7)
#define BIT_FS_WLBB_HIGH_PRI_INT			BIT(6)
#define BIT_FS_WLACTOFF_INT				BIT(5)
#define BIT_FS_WLACTON_INT				BIT(4)
#define BIT_FS_BTCMD_INT				BIT(3)
#define BIT_FS_REG_MAILBOX_TO_I2C_INT			BIT(2)
#define BIT_FS_TRPC_TO_INT				BIT(1)
#define BIT_FS_RPC_O_T_INT				BIT(0)

/* 2 REG_FWIMR				(Offset 0x0130) */

#define BIT_FS_TXBCNOK_MB7_INT_EN			BIT(31)
#define BIT_FS_TXBCNOK_MB6_INT_EN			BIT(30)
#define BIT_FS_TXBCNOK_MB5_INT_EN			BIT(29)
#define BIT_FS_TXBCNOK_MB4_INT_EN			BIT(28)
#define BIT_FS_TXBCNOK_MB3_INT_EN			BIT(27)
#define BIT_FS_TXBCNOK_MB2_INT_EN			BIT(26)
#define BIT_FS_TXBCNOK_MB1_INT_EN			BIT(25)
#define BIT_FS_TXBCNOK_MB0_INT_EN			BIT(24)
#define BIT_FS_TXBCNERR_MB7_INT_EN			BIT(23)
#define BIT_FS_TXBCNERR_MB6_INT_EN			BIT(22)
#define BIT_FS_TXBCNERR_MB5_INT_EN			BIT(21)
#define BIT_FS_TXBCNERR_MB4_INT_EN			BIT(20)
#define BIT_FS_TXBCNERR_MB3_INT_EN			BIT(19)
#define BIT_FS_TXBCNERR_MB2_INT_EN			BIT(18)
#define BIT_FS_TXBCNERR_MB1_INT_EN			BIT(17)
#define BIT_FS_TXBCNERR_MB0_INT_EN			BIT(16)
#define BIT_FS_CPUMGN_POLLED_PKT_DONE_INT_EN		BIT(15)
#define BIT_FS_INT_EN_IPSEC				BIT(14)
#define BIT_FS_MGNTQ_FF_RELEASE_INT_EN			BIT(13)
#define BIT_FS_MGNTQFF_TO_INT_EN			BIT(12)
#define BIT_FS_CPUMGQ_ERR_INT_EN			BIT(11)
#define BIT_FS_DDMA0_LP_INT_EN				BIT(9)
#define BIT_FS_DDMA0_HP_INT_EN				BIT(8)
#define BIT_FS_TXRPT_INT_EN				BIT(7)
#define BIT_FS_C2H_W_READY_INT_EN			BIT(6)
#define BIT_FS_HRCV_INT_EN				BIT(5)
#define BIT_FS_H2CCMD_INT_EN				BIT(4)
#define BIT_FS_TX_CLOSE_INT_EN				BIT(3)
#define BIT_FS_ERRORHDL_INT_EN				BIT(2)
#define BIT_FS_TXCCX_INT_EN				BIT(1)
#define BIT_FS_PTCL_HANDLE_OK_INT_EN			BIT(0)

/* 2 REG_FWISR				(Offset 0x0134) */

#define BIT_FS_TXBCNOK_MB7_INT				BIT(31)
#define BIT_FS_TXBCNOK_MB6_INT				BIT(30)
#define BIT_FS_TXBCNOK_MB5_INT				BIT(29)
#define BIT_FS_TXBCNOK_MB4_INT				BIT(28)
#define BIT_FS_TXBCNOK_MB3_INT				BIT(27)
#define BIT_FS_TXBCNOK_MB2_INT				BIT(26)
#define BIT_FS_TXBCNOK_MB1_INT				BIT(25)
#define BIT_FS_TXBCNOK_MB0_INT				BIT(24)
#define BIT_FS_TXBCNERR_MB7_INT			BIT(23)
#define BIT_FS_TXBCNERR_MB6_INT			BIT(22)
#define BIT_FS_TXBCNERR_MB5_INT			BIT(21)
#define BIT_FS_TXBCNERR_MB4_INT			BIT(20)
#define BIT_FS_TXBCNERR_MB3_INT			BIT(19)
#define BIT_FS_TXBCNERR_MB2_INT			BIT(18)
#define BIT_FS_TXBCNERR_MB1_INT			BIT(17)
#define BIT_FS_TXBCNERR_MB0_INT			BIT(16)
#define BIT_FS_CPUMGN_POLLED_PKT_DONE_INT		BIT(15)
#define BIT_FS_INT_IPSEC				BIT(14)
#define BIT_FS_MGNTQ_FF_RELEASE_INT			BIT(13)
#define BIT_FS_MGNTQFF_TO_INT				BIT(12)
#define BIT_FS_CPUMGQ_ERR_INT				BIT(11)
#define BIT_FS_DDMA0_LP_INT				BIT(9)
#define BIT_FS_DDMA0_HP_INT				BIT(8)
#define BIT_FS_TXRPT_INT				BIT(7)
#define BIT_FS_C2H_W_READY_INT				BIT(6)
#define BIT_FS_HRCV_INT				BIT(5)
#define BIT_FS_H2CCMD_INT				BIT(4)
#define BIT_FS_TX_CLOSE_INT				BIT(3)
#define BIT_FS_ERRORHDL_INT				BIT(2)
#define BIT_FS_TXCCX_INT				BIT(1)
#define BIT_FS_PTCL_HANDLE_OK_INT			BIT(0)

/* 2 REG_FTIMR				(Offset 0x0138) */

#define BIT_FTSR1_INT_EN				BIT(31)
#define BIT_FTSR2_INT_EN				BIT(30)
#define BIT_FS_RPWM2_INT_EN				BIT(29)
#define BIT_FS_RPWM_INT_EN				BIT(28)
#define BIT_FS_PS_TIMER_E_INT_EN			BIT(27)
#define BIT_FS_PS_TIMER_D_INT_EN			BIT(26)
#define BIT_FS_PS_TIMER_E_EARLY_INT_EN			BIT(25)
#define BIT_FS_PS_TIMER_D_EARLY_INT_EN			BIT(24)
#define BIT_FS_PS_TIMER_C_EARLY_INT_EN			BIT(23)
#define BIT_FS_PS_TIMER_B_EARLY_INT_EN			BIT(22)
#define BIT_FS_PS_TIMER_A_EARLY_INT_EN			BIT(21)
#define BIT_FS_CPUMGQ_TX_TIMER_EARLY_INT_EN		BIT(20)
#define BIT_FS_PS_TIMER_C_INT_EN			BIT(19)
#define BIT_FS_PS_TIMER_B_INT_EN			BIT(18)
#define BIT_FS_PS_TIMER_A_INT_EN			BIT(17)
#define BIT_FS_CPUMGQ_TX_TIMER_INT_EN			BIT(16)
#define BIT_FS_PS_TIMEOUT2_INT_EN			BIT(15)
#define BIT_FS_PS_TIMEOUT1_INT_EN			BIT(14)
#define BIT_FS_PS_TIMEOUT0_INT_EN			BIT(13)
#define BIT_FS_FTM_PTT_INT_EN				BIT(7)
#define BIT_FS_GTINT6_INT_EN				BIT(6)
#define BIT_FS_GTINT5_INT_EN				BIT(5)
#define BIT_FS_GTINT4_INT_EN				BIT(4)
#define BIT_FS_GTINT3_INT_EN				BIT(3)
#define BIT_FS_GTINT2_INT_EN				BIT(2)
#define BIT_FS_GTINT1_INT_EN				BIT(1)
#define BIT_FS_GTINT0_INT_EN				BIT(0)

/* 2 REG_FTISR				(Offset 0x013C) */

#define BIT_FTSR1_INT					BIT(31)
#define BIT_FTSR2_INT					BIT(30)
#define BIT_FS_RPWM_INT				BIT(28)
#define BIT_FS_PS_TIMER_E_INT				BIT(27)
#define BIT_FS_PS_TIMER_D_INT				BIT(26)
#define BIT_FS_PS_TIMER_E_EARLY_INT			BIT(25)
#define BIT_FS_PS_TIMER_D_EARLY_INT			BIT(24)
#define BIT_FS_PS_TIMER_C_EARLY_INT			BIT(23)
#define BIT_FS_PS_TIMER_B_EARLY_INT			BIT(22)
#define BIT_FS_PS_TIMER_A_EARLY_INT			BIT(21)
#define BIT_FS_CPUMGQ_TX_TIMER_EARLY_INT		BIT(20)
#define BIT_FS_PS_TIMER_C_INT				BIT(19)
#define BIT_FS_PS_TIMER_B_INT				BIT(18)
#define BIT_FS_PS_TIMER_A_INT				BIT(17)
#define BIT_FS_CPUMGQ_TX_TIMER_INT			BIT(16)
#define BIT_FS_PS_TIMEOUT2_INT				BIT(15)
#define BIT_FS_PS_TIMEOUT1_INT				BIT(14)
#define BIT_FS_PS_TIMEOUT0_INT				BIT(13)
#define BIT_FS_FTM_PTT_INT				BIT(7)
#define BIT_FS_GTINT6_INT				BIT(6)
#define BIT_FS_GTINT5_INT				BIT(5)
#define BIT_FS_GTINT4_INT				BIT(4)
#define BIT_FS_GTINT3_INT				BIT(3)
#define BIT_FS_GTINT2_INT				BIT(2)
#define BIT_FS_GTINT1_INT				BIT(1)
#define BIT_FS_GTINT0_INT				BIT(0)

/* 2 REG_PKTBUF_DBG_CTRL			(Offset 0x0140) */

#define BIT_SHIFT_PKTBUF_WRITE_EN			24
#define BIT_MASK_PKTBUF_WRITE_EN			0xff
#define BIT_PKTBUF_WRITE_EN(x)				(((x) & BIT_MASK_PKTBUF_WRITE_EN) << BIT_SHIFT_PKTBUF_WRITE_EN)
#define BITS_PKTBUF_WRITE_EN				(BIT_MASK_PKTBUF_WRITE_EN << BIT_SHIFT_PKTBUF_WRITE_EN)
#define BIT_CLEAR_PKTBUF_WRITE_EN(x)			((x) & (~BITS_PKTBUF_WRITE_EN))
#define BIT_GET_PKTBUF_WRITE_EN(x)			(((x) >> BIT_SHIFT_PKTBUF_WRITE_EN) & BIT_MASK_PKTBUF_WRITE_EN)
#define BIT_SET_PKTBUF_WRITE_EN(x, v)			(BIT_CLEAR_PKTBUF_WRITE_EN(x) | BIT_PKTBUF_WRITE_EN(v))

#define BIT_TXPKT_BUF_READ_EN				BIT(23)
#define BIT_TXRPT_BUF_READ_EN				BIT(20)
#define BIT_RXPKT_BUF_READ_EN				BIT(16)
#define BIT_FIFO_DBG_EXT				BIT(13)

#define BIT_SHIFT_FIFO_DBG_AD				0
#define BIT_MASK_FIFO_DBG_AD				0x1fff
#define BIT_FIFO_DBG_AD(x)				(((x) & BIT_MASK_FIFO_DBG_AD) << BIT_SHIFT_FIFO_DBG_AD)
#define BITS_FIFO_DBG_AD				(BIT_MASK_FIFO_DBG_AD << BIT_SHIFT_FIFO_DBG_AD)
#define BIT_CLEAR_FIFO_DBG_AD(x)			((x) & (~BITS_FIFO_DBG_AD))
#define BIT_GET_FIFO_DBG_AD(x)				(((x) >> BIT_SHIFT_FIFO_DBG_AD) & BIT_MASK_FIFO_DBG_AD)
#define BIT_SET_FIFO_DBG_AD(x, v)			(BIT_CLEAR_FIFO_DBG_AD(x) | BIT_FIFO_DBG_AD(v))

/* 2 REG_PKTBUF_DBG_DATA_L			(Offset 0x0144) */

#define BIT_SHIFT_PKTBUF_DBG_DATA_L			0
#define BIT_MASK_PKTBUF_DBG_DATA_L			0xffffffffL
#define BIT_PKTBUF_DBG_DATA_L(x)			(((x) & BIT_MASK_PKTBUF_DBG_DATA_L) << BIT_SHIFT_PKTBUF_DBG_DATA_L)
#define BITS_PKTBUF_DBG_DATA_L				(BIT_MASK_PKTBUF_DBG_DATA_L << BIT_SHIFT_PKTBUF_DBG_DATA_L)
#define BIT_CLEAR_PKTBUF_DBG_DATA_L(x)			((x) & (~BITS_PKTBUF_DBG_DATA_L))
#define BIT_GET_PKTBUF_DBG_DATA_L(x)			(((x) >> BIT_SHIFT_PKTBUF_DBG_DATA_L) & BIT_MASK_PKTBUF_DBG_DATA_L)
#define BIT_SET_PKTBUF_DBG_DATA_L(x, v)		(BIT_CLEAR_PKTBUF_DBG_DATA_L(x) | BIT_PKTBUF_DBG_DATA_L(v))

/* 2 REG_PKTBUF_DBG_DATA_H			(Offset 0x0148) */

#define BIT_SHIFT_PKTBUF_DBG_DATA_H			0
#define BIT_MASK_PKTBUF_DBG_DATA_H			0xffffffffL
#define BIT_PKTBUF_DBG_DATA_H(x)			(((x) & BIT_MASK_PKTBUF_DBG_DATA_H) << BIT_SHIFT_PKTBUF_DBG_DATA_H)
#define BITS_PKTBUF_DBG_DATA_H				(BIT_MASK_PKTBUF_DBG_DATA_H << BIT_SHIFT_PKTBUF_DBG_DATA_H)
#define BIT_CLEAR_PKTBUF_DBG_DATA_H(x)			((x) & (~BITS_PKTBUF_DBG_DATA_H))
#define BIT_GET_PKTBUF_DBG_DATA_H(x)			(((x) >> BIT_SHIFT_PKTBUF_DBG_DATA_H) & BIT_MASK_PKTBUF_DBG_DATA_H)
#define BIT_SET_PKTBUF_DBG_DATA_H(x, v)		(BIT_CLEAR_PKTBUF_DBG_DATA_H(x) | BIT_PKTBUF_DBG_DATA_H(v))

/* 2 REG_TC0_CTRL				(Offset 0x0150) */

#define BIT_TC0INT_EN					BIT(26)
#define BIT_TC0MODE					BIT(25)
#define BIT_TC0EN					BIT(24)

#define BIT_SHIFT_TC0DATA				0
#define BIT_MASK_TC0DATA				0xffffff
#define BIT_TC0DATA(x)					(((x) & BIT_MASK_TC0DATA) << BIT_SHIFT_TC0DATA)
#define BITS_TC0DATA					(BIT_MASK_TC0DATA << BIT_SHIFT_TC0DATA)
#define BIT_CLEAR_TC0DATA(x)				((x) & (~BITS_TC0DATA))
#define BIT_GET_TC0DATA(x)				(((x) >> BIT_SHIFT_TC0DATA) & BIT_MASK_TC0DATA)
#define BIT_SET_TC0DATA(x, v)				(BIT_CLEAR_TC0DATA(x) | BIT_TC0DATA(v))

/* 2 REG_TC1_CTRL				(Offset 0x0154) */

#define BIT_TC1INT_EN					BIT(26)
#define BIT_TC1MODE					BIT(25)
#define BIT_TC1EN					BIT(24)

#define BIT_SHIFT_TC1DATA				0
#define BIT_MASK_TC1DATA				0xffffff
#define BIT_TC1DATA(x)					(((x) & BIT_MASK_TC1DATA) << BIT_SHIFT_TC1DATA)
#define BITS_TC1DATA					(BIT_MASK_TC1DATA << BIT_SHIFT_TC1DATA)
#define BIT_CLEAR_TC1DATA(x)				((x) & (~BITS_TC1DATA))
#define BIT_GET_TC1DATA(x)				(((x) >> BIT_SHIFT_TC1DATA) & BIT_MASK_TC1DATA)
#define BIT_SET_TC1DATA(x, v)				(BIT_CLEAR_TC1DATA(x) | BIT_TC1DATA(v))

/* 2 REG_TC2_CTRL				(Offset 0x0158) */

#define BIT_TC2INT_EN					BIT(26)
#define BIT_TC2MODE					BIT(25)
#define BIT_TC2EN					BIT(24)

#define BIT_SHIFT_TC2DATA				0
#define BIT_MASK_TC2DATA				0xffffff
#define BIT_TC2DATA(x)					(((x) & BIT_MASK_TC2DATA) << BIT_SHIFT_TC2DATA)
#define BITS_TC2DATA					(BIT_MASK_TC2DATA << BIT_SHIFT_TC2DATA)
#define BIT_CLEAR_TC2DATA(x)				((x) & (~BITS_TC2DATA))
#define BIT_GET_TC2DATA(x)				(((x) >> BIT_SHIFT_TC2DATA) & BIT_MASK_TC2DATA)
#define BIT_SET_TC2DATA(x, v)				(BIT_CLEAR_TC2DATA(x) | BIT_TC2DATA(v))

/* 2 REG_TC3_CTRL				(Offset 0x015C) */

#define BIT_TC3INT_EN					BIT(26)
#define BIT_TC3MODE					BIT(25)
#define BIT_TC3EN					BIT(24)

#define BIT_SHIFT_TC3DATA				0
#define BIT_MASK_TC3DATA				0xffffff
#define BIT_TC3DATA(x)					(((x) & BIT_MASK_TC3DATA) << BIT_SHIFT_TC3DATA)
#define BITS_TC3DATA					(BIT_MASK_TC3DATA << BIT_SHIFT_TC3DATA)
#define BIT_CLEAR_TC3DATA(x)				((x) & (~BITS_TC3DATA))
#define BIT_GET_TC3DATA(x)				(((x) >> BIT_SHIFT_TC3DATA) & BIT_MASK_TC3DATA)
#define BIT_SET_TC3DATA(x, v)				(BIT_CLEAR_TC3DATA(x) | BIT_TC3DATA(v))

/* 2 REG_TC4_CTRL				(Offset 0x0160) */

#define BIT_TC4INT_EN					BIT(26)
#define BIT_TC4MODE					BIT(25)
#define BIT_TC4EN					BIT(24)

#define BIT_SHIFT_TC4DATA				0
#define BIT_MASK_TC4DATA				0xffffff
#define BIT_TC4DATA(x)					(((x) & BIT_MASK_TC4DATA) << BIT_SHIFT_TC4DATA)
#define BITS_TC4DATA					(BIT_MASK_TC4DATA << BIT_SHIFT_TC4DATA)
#define BIT_CLEAR_TC4DATA(x)				((x) & (~BITS_TC4DATA))
#define BIT_GET_TC4DATA(x)				(((x) >> BIT_SHIFT_TC4DATA) & BIT_MASK_TC4DATA)
#define BIT_SET_TC4DATA(x, v)				(BIT_CLEAR_TC4DATA(x) | BIT_TC4DATA(v))

/* 2 REG_TCUNIT_BASE				(Offset 0x0164) */

#define BIT_SHIFT_TC_UNIT_BASE				0
#define BIT_MASK_TC_UNIT_BASE				0x3fff
#define BIT_TC_UNIT_BASE(x)				(((x) & BIT_MASK_TC_UNIT_BASE) << BIT_SHIFT_TC_UNIT_BASE)
#define BITS_TC_UNIT_BASE				(BIT_MASK_TC_UNIT_BASE << BIT_SHIFT_TC_UNIT_BASE)
#define BIT_CLEAR_TC_UNIT_BASE(x)			((x) & (~BITS_TC_UNIT_BASE))
#define BIT_GET_TC_UNIT_BASE(x)			(((x) >> BIT_SHIFT_TC_UNIT_BASE) & BIT_MASK_TC_UNIT_BASE)
#define BIT_SET_TC_UNIT_BASE(x, v)			(BIT_CLEAR_TC_UNIT_BASE(x) | BIT_TC_UNIT_BASE(v))

/* 2 REG_TC5_CTRL				(Offset 0x0168) */

#define BIT_TC50INT_EN					BIT(26)
#define BIT_TC5MODE					BIT(25)
#define BIT_TC5EN					BIT(24)

#define BIT_SHIFT_TC5DATA				0
#define BIT_MASK_TC5DATA				0xffffff
#define BIT_TC5DATA(x)					(((x) & BIT_MASK_TC5DATA) << BIT_SHIFT_TC5DATA)
#define BITS_TC5DATA					(BIT_MASK_TC5DATA << BIT_SHIFT_TC5DATA)
#define BIT_CLEAR_TC5DATA(x)				((x) & (~BITS_TC5DATA))
#define BIT_GET_TC5DATA(x)				(((x) >> BIT_SHIFT_TC5DATA) & BIT_MASK_TC5DATA)
#define BIT_SET_TC5DATA(x, v)				(BIT_CLEAR_TC5DATA(x) | BIT_TC5DATA(v))

/* 2 REG_TC6_CTRL				(Offset 0x016C) */

#define BIT_TC60INT_EN					BIT(26)
#define BIT_TC6MODE					BIT(25)
#define BIT_TC6EN					BIT(24)

#define BIT_SHIFT_TC6DATA				0
#define BIT_MASK_TC6DATA				0xffffff
#define BIT_TC6DATA(x)					(((x) & BIT_MASK_TC6DATA) << BIT_SHIFT_TC6DATA)
#define BITS_TC6DATA					(BIT_MASK_TC6DATA << BIT_SHIFT_TC6DATA)
#define BIT_CLEAR_TC6DATA(x)				((x) & (~BITS_TC6DATA))
#define BIT_GET_TC6DATA(x)				(((x) >> BIT_SHIFT_TC6DATA) & BIT_MASK_TC6DATA)
#define BIT_SET_TC6DATA(x, v)				(BIT_CLEAR_TC6DATA(x) | BIT_TC6DATA(v))

/* 2 REG_HW_IOE_CR_CHN1			(Offset 0x0170) */

#define BIT_HIOE_ACTIVE_CHN1				BIT(31)
#define BIT_HIOE_RESTORE_REQ_CHN1			BIT(25)
#define BIT_HIOE_BACKUP_REQ_CHN1			BIT(24)

#define BIT_SHIFT_HIOE_END_ADDR_CHN1			12
#define BIT_MASK_HIOE_END_ADDR_CHN1			0xfff
#define BIT_HIOE_END_ADDR_CHN1(x)			(((x) & BIT_MASK_HIOE_END_ADDR_CHN1) << BIT_SHIFT_HIOE_END_ADDR_CHN1)
#define BITS_HIOE_END_ADDR_CHN1			(BIT_MASK_HIOE_END_ADDR_CHN1 << BIT_SHIFT_HIOE_END_ADDR_CHN1)
#define BIT_CLEAR_HIOE_END_ADDR_CHN1(x)		((x) & (~BITS_HIOE_END_ADDR_CHN1))
#define BIT_GET_HIOE_END_ADDR_CHN1(x)			(((x) >> BIT_SHIFT_HIOE_END_ADDR_CHN1) & BIT_MASK_HIOE_END_ADDR_CHN1)
#define BIT_SET_HIOE_END_ADDR_CHN1(x, v)		(BIT_CLEAR_HIOE_END_ADDR_CHN1(x) | BIT_HIOE_END_ADDR_CHN1(v))

#define BIT_SHIFT_HIOE_STR_ADDR_CHN1			0
#define BIT_MASK_HIOE_STR_ADDR_CHN1			0xfff
#define BIT_HIOE_STR_ADDR_CHN1(x)			(((x) & BIT_MASK_HIOE_STR_ADDR_CHN1) << BIT_SHIFT_HIOE_STR_ADDR_CHN1)
#define BITS_HIOE_STR_ADDR_CHN1			(BIT_MASK_HIOE_STR_ADDR_CHN1 << BIT_SHIFT_HIOE_STR_ADDR_CHN1)
#define BIT_CLEAR_HIOE_STR_ADDR_CHN1(x)		((x) & (~BITS_HIOE_STR_ADDR_CHN1))
#define BIT_GET_HIOE_STR_ADDR_CHN1(x)			(((x) >> BIT_SHIFT_HIOE_STR_ADDR_CHN1) & BIT_MASK_HIOE_STR_ADDR_CHN1)
#define BIT_SET_HIOE_STR_ADDR_CHN1(x, v)		(BIT_CLEAR_HIOE_STR_ADDR_CHN1(x) | BIT_HIOE_STR_ADDR_CHN1(v))

/* 2 REG_HW_IOE_CR_CHN_ON			(Offset 0x0174) */

#define BIT_HIOE_ACTIVE_CHN_ON				BIT(31)
#define BIT_HIOE_BYPASS_CHN_ON				BIT(26)
#define BIT_HIOE_RESTORE_REQ_CHN_ON			BIT(25)
#define BIT_HIOE_BACKUP_REQ_CHN_ON			BIT(24)

#define BIT_SHIFT_HIOE_END_ADDR_CHN_ON			12
#define BIT_MASK_HIOE_END_ADDR_CHN_ON			0xfff
#define BIT_HIOE_END_ADDR_CHN_ON(x)			(((x) & BIT_MASK_HIOE_END_ADDR_CHN_ON) << BIT_SHIFT_HIOE_END_ADDR_CHN_ON)
#define BITS_HIOE_END_ADDR_CHN_ON			(BIT_MASK_HIOE_END_ADDR_CHN_ON << BIT_SHIFT_HIOE_END_ADDR_CHN_ON)
#define BIT_CLEAR_HIOE_END_ADDR_CHN_ON(x)		((x) & (~BITS_HIOE_END_ADDR_CHN_ON))
#define BIT_GET_HIOE_END_ADDR_CHN_ON(x)		(((x) >> BIT_SHIFT_HIOE_END_ADDR_CHN_ON) & BIT_MASK_HIOE_END_ADDR_CHN_ON)
#define BIT_SET_HIOE_END_ADDR_CHN_ON(x, v)		(BIT_CLEAR_HIOE_END_ADDR_CHN_ON(x) | BIT_HIOE_END_ADDR_CHN_ON(v))

#define BIT_SHIFT_HIOE_STR_ADDR_CHN_ON			0
#define BIT_MASK_HIOE_STR_ADDR_CHN_ON			0xfff
#define BIT_HIOE_STR_ADDR_CHN_ON(x)			(((x) & BIT_MASK_HIOE_STR_ADDR_CHN_ON) << BIT_SHIFT_HIOE_STR_ADDR_CHN_ON)
#define BITS_HIOE_STR_ADDR_CHN_ON			(BIT_MASK_HIOE_STR_ADDR_CHN_ON << BIT_SHIFT_HIOE_STR_ADDR_CHN_ON)
#define BIT_CLEAR_HIOE_STR_ADDR_CHN_ON(x)		((x) & (~BITS_HIOE_STR_ADDR_CHN_ON))
#define BIT_GET_HIOE_STR_ADDR_CHN_ON(x)		(((x) >> BIT_SHIFT_HIOE_STR_ADDR_CHN_ON) & BIT_MASK_HIOE_STR_ADDR_CHN_ON)
#define BIT_SET_HIOE_STR_ADDR_CHN_ON(x, v)		(BIT_CLEAR_HIOE_STR_ADDR_CHN_ON(x) | BIT_HIOE_STR_ADDR_CHN_ON(v))

/* 2 REG_HW_IOE_CR_CHN_OFF			(Offset 0x0178) */

#define BIT_HIOE_ACTIVE_CHN_OFF			BIT(31)
#define BIT_HIOE_BYPASS_CHN_OFF			BIT(26)
#define BIT_HIOE_RESTORE_REQ_CHN_OFF			BIT(25)
#define BIT_HIOE_BACKUP_REQ_CHN_OFF			BIT(24)

#define BIT_SHIFT_HIOE_END_ADDR_CHN_OFF		12
#define BIT_MASK_HIOE_END_ADDR_CHN_OFF			0xfff
#define BIT_HIOE_END_ADDR_CHN_OFF(x)			(((x) & BIT_MASK_HIOE_END_ADDR_CHN_OFF) << BIT_SHIFT_HIOE_END_ADDR_CHN_OFF)
#define BITS_HIOE_END_ADDR_CHN_OFF			(BIT_MASK_HIOE_END_ADDR_CHN_OFF << BIT_SHIFT_HIOE_END_ADDR_CHN_OFF)
#define BIT_CLEAR_HIOE_END_ADDR_CHN_OFF(x)		((x) & (~BITS_HIOE_END_ADDR_CHN_OFF))
#define BIT_GET_HIOE_END_ADDR_CHN_OFF(x)		(((x) >> BIT_SHIFT_HIOE_END_ADDR_CHN_OFF) & BIT_MASK_HIOE_END_ADDR_CHN_OFF)
#define BIT_SET_HIOE_END_ADDR_CHN_OFF(x, v)		(BIT_CLEAR_HIOE_END_ADDR_CHN_OFF(x) | BIT_HIOE_END_ADDR_CHN_OFF(v))

#define BIT_SHIFT_HIOE_STR_ADDR_CHN_OFF		0
#define BIT_MASK_HIOE_STR_ADDR_CHN_OFF			0xfff
#define BIT_HIOE_STR_ADDR_CHN_OFF(x)			(((x) & BIT_MASK_HIOE_STR_ADDR_CHN_OFF) << BIT_SHIFT_HIOE_STR_ADDR_CHN_OFF)
#define BITS_HIOE_STR_ADDR_CHN_OFF			(BIT_MASK_HIOE_STR_ADDR_CHN_OFF << BIT_SHIFT_HIOE_STR_ADDR_CHN_OFF)
#define BIT_CLEAR_HIOE_STR_ADDR_CHN_OFF(x)		((x) & (~BITS_HIOE_STR_ADDR_CHN_OFF))
#define BIT_GET_HIOE_STR_ADDR_CHN_OFF(x)		(((x) >> BIT_SHIFT_HIOE_STR_ADDR_CHN_OFF) & BIT_MASK_HIOE_STR_ADDR_CHN_OFF)
#define BIT_SET_HIOE_STR_ADDR_CHN_OFF(x, v)		(BIT_CLEAR_HIOE_STR_ADDR_CHN_OFF(x) | BIT_HIOE_STR_ADDR_CHN_OFF(v))

/* 2 REG_RXBCN_TIMER				(Offset 0x017C) */

#define BIT_FS_HW_LPS_EN				BIT(31)

#define BIT_SHIFT_RXBCN_TIMEOUT_COUNT			27
#define BIT_MASK_RXBCN_TIMEOUT_COUNT			0xf
#define BIT_RXBCN_TIMEOUT_COUNT(x)			(((x) & BIT_MASK_RXBCN_TIMEOUT_COUNT) << BIT_SHIFT_RXBCN_TIMEOUT_COUNT)
#define BITS_RXBCN_TIMEOUT_COUNT			(BIT_MASK_RXBCN_TIMEOUT_COUNT << BIT_SHIFT_RXBCN_TIMEOUT_COUNT)
#define BIT_CLEAR_RXBCN_TIMEOUT_COUNT(x)		((x) & (~BITS_RXBCN_TIMEOUT_COUNT))
#define BIT_GET_RXBCN_TIMEOUT_COUNT(x)			(((x) >> BIT_SHIFT_RXBCN_TIMEOUT_COUNT) & BIT_MASK_RXBCN_TIMEOUT_COUNT)
#define BIT_SET_RXBCN_TIMEOUT_COUNT(x, v)		(BIT_CLEAR_RXBCN_TIMEOUT_COUNT(x) | BIT_RXBCN_TIMEOUT_COUNT(v))

#define BIT_FS_RXBCN_LPS_EN				BIT(26)
#define BIT_FS_WAIT_RXBCN_FINISH			BIT(25)
#define BIT_RXBCN_TIMEOUT_COUNT_CLR			BIT(24)

#define BIT_SHIFT_RXBCN_TIMEOUT_COUNT_THRES		20
#define BIT_MASK_RXBCN_TIMEOUT_COUNT_THRES		0xf
#define BIT_RXBCN_TIMEOUT_COUNT_THRES(x)		(((x) & BIT_MASK_RXBCN_TIMEOUT_COUNT_THRES) << BIT_SHIFT_RXBCN_TIMEOUT_COUNT_THRES)
#define BITS_RXBCN_TIMEOUT_COUNT_THRES			(BIT_MASK_RXBCN_TIMEOUT_COUNT_THRES << BIT_SHIFT_RXBCN_TIMEOUT_COUNT_THRES)
#define BIT_CLEAR_RXBCN_TIMEOUT_COUNT_THRES(x)	((x) & (~BITS_RXBCN_TIMEOUT_COUNT_THRES))
#define BIT_GET_RXBCN_TIMEOUT_COUNT_THRES(x)		(((x) >> BIT_SHIFT_RXBCN_TIMEOUT_COUNT_THRES) & BIT_MASK_RXBCN_TIMEOUT_COUNT_THRES)
#define BIT_SET_RXBCN_TIMEOUT_COUNT_THRES(x, v)	(BIT_CLEAR_RXBCN_TIMEOUT_COUNT_THRES(x) | BIT_RXBCN_TIMEOUT_COUNT_THRES(v))

#define BIT_SHIFT_RXBCN_TIMEOUT_THRES			0
#define BIT_MASK_RXBCN_TIMEOUT_THRES			0xfffff
#define BIT_RXBCN_TIMEOUT_THRES(x)			(((x) & BIT_MASK_RXBCN_TIMEOUT_THRES) << BIT_SHIFT_RXBCN_TIMEOUT_THRES)
#define BITS_RXBCN_TIMEOUT_THRES			(BIT_MASK_RXBCN_TIMEOUT_THRES << BIT_SHIFT_RXBCN_TIMEOUT_THRES)
#define BIT_CLEAR_RXBCN_TIMEOUT_THRES(x)		((x) & (~BITS_RXBCN_TIMEOUT_THRES))
#define BIT_GET_RXBCN_TIMEOUT_THRES(x)			(((x) >> BIT_SHIFT_RXBCN_TIMEOUT_THRES) & BIT_MASK_RXBCN_TIMEOUT_THRES)
#define BIT_SET_RXBCN_TIMEOUT_THRES(x, v)		(BIT_CLEAR_RXBCN_TIMEOUT_THRES(x) | BIT_RXBCN_TIMEOUT_THRES(v))

/* 2 REG_AES_DECRPT_DATA			(Offset 0x0180) */

#define BIT_SHIFT_IPS_CFG_ADDR				0
#define BIT_MASK_IPS_CFG_ADDR				0xff
#define BIT_IPS_CFG_ADDR(x)				(((x) & BIT_MASK_IPS_CFG_ADDR) << BIT_SHIFT_IPS_CFG_ADDR)
#define BITS_IPS_CFG_ADDR				(BIT_MASK_IPS_CFG_ADDR << BIT_SHIFT_IPS_CFG_ADDR)
#define BIT_CLEAR_IPS_CFG_ADDR(x)			((x) & (~BITS_IPS_CFG_ADDR))
#define BIT_GET_IPS_CFG_ADDR(x)			(((x) >> BIT_SHIFT_IPS_CFG_ADDR) & BIT_MASK_IPS_CFG_ADDR)
#define BIT_SET_IPS_CFG_ADDR(x, v)			(BIT_CLEAR_IPS_CFG_ADDR(x) | BIT_IPS_CFG_ADDR(v))

/* 2 REG_AES_DECRPT_CFG			(Offset 0x0184) */

#define BIT_SHIFT_IPS_CFGWD				0
#define BIT_MASK_IPS_CFGWD				0xffffffffL
#define BIT_IPS_CFGWD(x)				(((x) & BIT_MASK_IPS_CFGWD) << BIT_SHIFT_IPS_CFGWD)
#define BITS_IPS_CFGWD					(BIT_MASK_IPS_CFGWD << BIT_SHIFT_IPS_CFGWD)
#define BIT_CLEAR_IPS_CFGWD(x)				((x) & (~BITS_IPS_CFGWD))
#define BIT_GET_IPS_CFGWD(x)				(((x) >> BIT_SHIFT_IPS_CFGWD) & BIT_MASK_IPS_CFGWD)
#define BIT_SET_IPS_CFGWD(x, v)			(BIT_CLEAR_IPS_CFGWD(x) | BIT_IPS_CFGWD(v))

#define BIT_SHIFT_MACREG_READ_BIST_RPT			0
#define BIT_MASK_MACREG_READ_BIST_RPT			0xffffffffL
#define BIT_MACREG_READ_BIST_RPT(x)			(((x) & BIT_MASK_MACREG_READ_BIST_RPT) << BIT_SHIFT_MACREG_READ_BIST_RPT)
#define BITS_MACREG_READ_BIST_RPT			(BIT_MASK_MACREG_READ_BIST_RPT << BIT_SHIFT_MACREG_READ_BIST_RPT)
#define BIT_CLEAR_MACREG_READ_BIST_RPT(x)		((x) & (~BITS_MACREG_READ_BIST_RPT))
#define BIT_GET_MACREG_READ_BIST_RPT(x)		(((x) >> BIT_SHIFT_MACREG_READ_BIST_RPT) & BIT_MASK_MACREG_READ_BIST_RPT)
#define BIT_SET_MACREG_READ_BIST_RPT(x, v)		(BIT_CLEAR_MACREG_READ_BIST_RPT(x) | BIT_MACREG_READ_BIST_RPT(v))

/* 2 REG_MACCLKFRQ				(Offset 0x018C) */

#define BIT_SHIFT_MACCLK_FREQ_L32			0
#define BIT_MASK_MACCLK_FREQ_L32			0xffffffffL
#define BIT_MACCLK_FREQ_L32(x)				(((x) & BIT_MASK_MACCLK_FREQ_L32) << BIT_SHIFT_MACCLK_FREQ_L32)
#define BITS_MACCLK_FREQ_L32				(BIT_MASK_MACCLK_FREQ_L32 << BIT_SHIFT_MACCLK_FREQ_L32)
#define BIT_CLEAR_MACCLK_FREQ_L32(x)			((x) & (~BITS_MACCLK_FREQ_L32))
#define BIT_GET_MACCLK_FREQ_L32(x)			(((x) >> BIT_SHIFT_MACCLK_FREQ_L32) & BIT_MASK_MACCLK_FREQ_L32)
#define BIT_SET_MACCLK_FREQ_L32(x, v)			(BIT_CLEAR_MACCLK_FREQ_L32(x) | BIT_MACCLK_FREQ_L32(v))

/* 2 REG_TMETER				(Offset 0x0190) */

#define BIT_SHIFT_NCO_OUTCLK_FREQ			12
#define BIT_MASK_NCO_OUTCLK_FREQ			0xfffff
#define BIT_NCO_OUTCLK_FREQ(x)				(((x) & BIT_MASK_NCO_OUTCLK_FREQ) << BIT_SHIFT_NCO_OUTCLK_FREQ)
#define BITS_NCO_OUTCLK_FREQ				(BIT_MASK_NCO_OUTCLK_FREQ << BIT_SHIFT_NCO_OUTCLK_FREQ)
#define BIT_CLEAR_NCO_OUTCLK_FREQ(x)			((x) & (~BITS_NCO_OUTCLK_FREQ))
#define BIT_GET_NCO_OUTCLK_FREQ(x)			(((x) >> BIT_SHIFT_NCO_OUTCLK_FREQ) & BIT_MASK_NCO_OUTCLK_FREQ)
#define BIT_SET_NCO_OUTCLK_FREQ(x, v)			(BIT_CLEAR_NCO_OUTCLK_FREQ(x) | BIT_NCO_OUTCLK_FREQ(v))

#define BIT_SHIFT_MACCLK_FREQ_HIGH10			0
#define BIT_MASK_MACCLK_FREQ_HIGH10			0x3ff
#define BIT_MACCLK_FREQ_HIGH10(x)			(((x) & BIT_MASK_MACCLK_FREQ_HIGH10) << BIT_SHIFT_MACCLK_FREQ_HIGH10)
#define BITS_MACCLK_FREQ_HIGH10			(BIT_MASK_MACCLK_FREQ_HIGH10 << BIT_SHIFT_MACCLK_FREQ_HIGH10)
#define BIT_CLEAR_MACCLK_FREQ_HIGH10(x)		((x) & (~BITS_MACCLK_FREQ_HIGH10))
#define BIT_GET_MACCLK_FREQ_HIGH10(x)			(((x) >> BIT_SHIFT_MACCLK_FREQ_HIGH10) & BIT_MASK_MACCLK_FREQ_HIGH10)
#define BIT_SET_MACCLK_FREQ_HIGH10(x, v)		(BIT_CLEAR_MACCLK_FREQ_HIGH10(x) | BIT_MACCLK_FREQ_HIGH10(v))

/* 2 REG_OSC_32K_CTRL			(Offset 0x0194) */

#define BIT_32K_CLK_OUT_RDY				BIT(12)

#define BIT_SHIFT_MONITOR_CYCLE_LOG2			8
#define BIT_MASK_MONITOR_CYCLE_LOG2			0xf
#define BIT_MONITOR_CYCLE_LOG2(x)			(((x) & BIT_MASK_MONITOR_CYCLE_LOG2) << BIT_SHIFT_MONITOR_CYCLE_LOG2)
#define BITS_MONITOR_CYCLE_LOG2			(BIT_MASK_MONITOR_CYCLE_LOG2 << BIT_SHIFT_MONITOR_CYCLE_LOG2)
#define BIT_CLEAR_MONITOR_CYCLE_LOG2(x)		((x) & (~BITS_MONITOR_CYCLE_LOG2))
#define BIT_GET_MONITOR_CYCLE_LOG2(x)			(((x) >> BIT_SHIFT_MONITOR_CYCLE_LOG2) & BIT_MASK_MONITOR_CYCLE_LOG2)
#define BIT_SET_MONITOR_CYCLE_LOG2(x, v)		(BIT_CLEAR_MONITOR_CYCLE_LOG2(x) | BIT_MONITOR_CYCLE_LOG2(v))

/* 2 REG_32K_CAL_REG0			(Offset 0x0198) */

#define BIT_SHIFT_FREQVALUE_UNREGCLK			8
#define BIT_MASK_FREQVALUE_UNREGCLK			0xffffff
#define BIT_FREQVALUE_UNREGCLK(x)			(((x) & BIT_MASK_FREQVALUE_UNREGCLK) << BIT_SHIFT_FREQVALUE_UNREGCLK)
#define BITS_FREQVALUE_UNREGCLK			(BIT_MASK_FREQVALUE_UNREGCLK << BIT_SHIFT_FREQVALUE_UNREGCLK)
#define BIT_CLEAR_FREQVALUE_UNREGCLK(x)		((x) & (~BITS_FREQVALUE_UNREGCLK))
#define BIT_GET_FREQVALUE_UNREGCLK(x)			(((x) >> BIT_SHIFT_FREQVALUE_UNREGCLK) & BIT_MASK_FREQVALUE_UNREGCLK)
#define BIT_SET_FREQVALUE_UNREGCLK(x, v)		(BIT_CLEAR_FREQVALUE_UNREGCLK(x) | BIT_FREQVALUE_UNREGCLK(v))

#define BIT_CAL32K_DBGMOD				BIT(7)

#define BIT_SHIFT_NCO_THRS				0
#define BIT_MASK_NCO_THRS				0x7f
#define BIT_NCO_THRS(x)				(((x) & BIT_MASK_NCO_THRS) << BIT_SHIFT_NCO_THRS)
#define BITS_NCO_THRS					(BIT_MASK_NCO_THRS << BIT_SHIFT_NCO_THRS)
#define BIT_CLEAR_NCO_THRS(x)				((x) & (~BITS_NCO_THRS))
#define BIT_GET_NCO_THRS(x)				(((x) >> BIT_SHIFT_NCO_THRS) & BIT_MASK_NCO_THRS)
#define BIT_SET_NCO_THRS(x, v)				(BIT_CLEAR_NCO_THRS(x) | BIT_NCO_THRS(v))

/* 2 REG_32K_XTAL_CR				(Offset 0x019C) */

#define BIT_SHIFT_XTAL_DIV_FREQ			0
#define BIT_MASK_XTAL_DIV_FREQ				0xffff
#define BIT_XTAL_DIV_FREQ(x)				(((x) & BIT_MASK_XTAL_DIV_FREQ) << BIT_SHIFT_XTAL_DIV_FREQ)
#define BITS_XTAL_DIV_FREQ				(BIT_MASK_XTAL_DIV_FREQ << BIT_SHIFT_XTAL_DIV_FREQ)
#define BIT_CLEAR_XTAL_DIV_FREQ(x)			((x) & (~BITS_XTAL_DIV_FREQ))
#define BIT_GET_XTAL_DIV_FREQ(x)			(((x) >> BIT_SHIFT_XTAL_DIV_FREQ) & BIT_MASK_XTAL_DIV_FREQ)
#define BIT_SET_XTAL_DIV_FREQ(x, v)			(BIT_CLEAR_XTAL_DIV_FREQ(x) | BIT_XTAL_DIV_FREQ(v))

/* 2 REG_C2HEVT				(Offset 0x01A0) */

#define BIT_SHIFT_C2HEVT_MSG_V1			0
#define BIT_MASK_C2HEVT_MSG_V1				0xffffffffL
#define BIT_C2HEVT_MSG_V1(x)				(((x) & BIT_MASK_C2HEVT_MSG_V1) << BIT_SHIFT_C2HEVT_MSG_V1)
#define BITS_C2HEVT_MSG_V1				(BIT_MASK_C2HEVT_MSG_V1 << BIT_SHIFT_C2HEVT_MSG_V1)
#define BIT_CLEAR_C2HEVT_MSG_V1(x)			((x) & (~BITS_C2HEVT_MSG_V1))
#define BIT_GET_C2HEVT_MSG_V1(x)			(((x) >> BIT_SHIFT_C2HEVT_MSG_V1) & BIT_MASK_C2HEVT_MSG_V1)
#define BIT_SET_C2HEVT_MSG_V1(x, v)			(BIT_CLEAR_C2HEVT_MSG_V1(x) | BIT_C2HEVT_MSG_V1(v))

/* 2 REG_C2HEVT_1				(Offset 0x01A4) */

#define BIT_SHIFT_C2HEVT_MSG_1				0
#define BIT_MASK_C2HEVT_MSG_1				0xffffffffL
#define BIT_C2HEVT_MSG_1(x)				(((x) & BIT_MASK_C2HEVT_MSG_1) << BIT_SHIFT_C2HEVT_MSG_1)
#define BITS_C2HEVT_MSG_1				(BIT_MASK_C2HEVT_MSG_1 << BIT_SHIFT_C2HEVT_MSG_1)
#define BIT_CLEAR_C2HEVT_MSG_1(x)			((x) & (~BITS_C2HEVT_MSG_1))
#define BIT_GET_C2HEVT_MSG_1(x)			(((x) >> BIT_SHIFT_C2HEVT_MSG_1) & BIT_MASK_C2HEVT_MSG_1)
#define BIT_SET_C2HEVT_MSG_1(x, v)			(BIT_CLEAR_C2HEVT_MSG_1(x) | BIT_C2HEVT_MSG_1(v))

/* 2 REG_C2HEVT_2				(Offset 0x01A8) */

#define BIT_SHIFT_C2HEVT_MSG_2				0
#define BIT_MASK_C2HEVT_MSG_2				0xffffffffL
#define BIT_C2HEVT_MSG_2(x)				(((x) & BIT_MASK_C2HEVT_MSG_2) << BIT_SHIFT_C2HEVT_MSG_2)
#define BITS_C2HEVT_MSG_2				(BIT_MASK_C2HEVT_MSG_2 << BIT_SHIFT_C2HEVT_MSG_2)
#define BIT_CLEAR_C2HEVT_MSG_2(x)			((x) & (~BITS_C2HEVT_MSG_2))
#define BIT_GET_C2HEVT_MSG_2(x)			(((x) >> BIT_SHIFT_C2HEVT_MSG_2) & BIT_MASK_C2HEVT_MSG_2)
#define BIT_SET_C2HEVT_MSG_2(x, v)			(BIT_CLEAR_C2HEVT_MSG_2(x) | BIT_C2HEVT_MSG_2(v))

/* 2 REG_C2HEVT_3				(Offset 0x01AC) */

#define BIT_SHIFT_C2HEVT_MSG_3				0
#define BIT_MASK_C2HEVT_MSG_3				0xffffffffL
#define BIT_C2HEVT_MSG_3(x)				(((x) & BIT_MASK_C2HEVT_MSG_3) << BIT_SHIFT_C2HEVT_MSG_3)
#define BITS_C2HEVT_MSG_3				(BIT_MASK_C2HEVT_MSG_3 << BIT_SHIFT_C2HEVT_MSG_3)
#define BIT_CLEAR_C2HEVT_MSG_3(x)			((x) & (~BITS_C2HEVT_MSG_3))
#define BIT_GET_C2HEVT_MSG_3(x)			(((x) >> BIT_SHIFT_C2HEVT_MSG_3) & BIT_MASK_C2HEVT_MSG_3)
#define BIT_SET_C2HEVT_MSG_3(x, v)			(BIT_CLEAR_C2HEVT_MSG_3(x) | BIT_C2HEVT_MSG_3(v))

/* 2 REG_HW_IOE_CR_CH0			(Offset 0x01B0) */

#define BIT_HIOE_ACTIVE_CH0				BIT(31)
#define BIT_HIOE_RESTORE_REQ_CH0			BIT(25)
#define BIT_HIOE_BACKUP_REQ_CH0			BIT(24)

#define BIT_SHIFT_HIOE_END_ADDR_CH0			12
#define BIT_MASK_HIOE_END_ADDR_CH0			0xfff
#define BIT_HIOE_END_ADDR_CH0(x)			(((x) & BIT_MASK_HIOE_END_ADDR_CH0) << BIT_SHIFT_HIOE_END_ADDR_CH0)
#define BITS_HIOE_END_ADDR_CH0				(BIT_MASK_HIOE_END_ADDR_CH0 << BIT_SHIFT_HIOE_END_ADDR_CH0)
#define BIT_CLEAR_HIOE_END_ADDR_CH0(x)			((x) & (~BITS_HIOE_END_ADDR_CH0))
#define BIT_GET_HIOE_END_ADDR_CH0(x)			(((x) >> BIT_SHIFT_HIOE_END_ADDR_CH0) & BIT_MASK_HIOE_END_ADDR_CH0)
#define BIT_SET_HIOE_END_ADDR_CH0(x, v)		(BIT_CLEAR_HIOE_END_ADDR_CH0(x) | BIT_HIOE_END_ADDR_CH0(v))

#define BIT_SHIFT_HIOE_STR_ADDR_CH0			0
#define BIT_MASK_HIOE_STR_ADDR_CH0			0xfff
#define BIT_HIOE_STR_ADDR_CH0(x)			(((x) & BIT_MASK_HIOE_STR_ADDR_CH0) << BIT_SHIFT_HIOE_STR_ADDR_CH0)
#define BITS_HIOE_STR_ADDR_CH0				(BIT_MASK_HIOE_STR_ADDR_CH0 << BIT_SHIFT_HIOE_STR_ADDR_CH0)
#define BIT_CLEAR_HIOE_STR_ADDR_CH0(x)			((x) & (~BITS_HIOE_STR_ADDR_CH0))
#define BIT_GET_HIOE_STR_ADDR_CH0(x)			(((x) >> BIT_SHIFT_HIOE_STR_ADDR_CH0) & BIT_MASK_HIOE_STR_ADDR_CH0)
#define BIT_SET_HIOE_STR_ADDR_CH0(x, v)		(BIT_CLEAR_HIOE_STR_ADDR_CH0(x) | BIT_HIOE_STR_ADDR_CH0(v))

/* 2 REG_BB_RFC_ATR				(Offset 0x01B4) */

#define BIT_SHIFT_PHYRE_CNT				24
#define BIT_MASK_PHYRE_CNT				0xff
#define BIT_PHYRE_CNT(x)				(((x) & BIT_MASK_PHYRE_CNT) << BIT_SHIFT_PHYRE_CNT)
#define BITS_PHYRE_CNT					(BIT_MASK_PHYRE_CNT << BIT_SHIFT_PHYRE_CNT)
#define BIT_CLEAR_PHYRE_CNT(x)				((x) & (~BITS_PHYRE_CNT))
#define BIT_GET_PHYRE_CNT(x)				(((x) >> BIT_SHIFT_PHYRE_CNT) & BIT_MASK_PHYRE_CNT)
#define BIT_SET_PHYRE_CNT(x, v)			(BIT_CLEAR_PHYRE_CNT(x) | BIT_PHYRE_CNT(v))

#define BIT_SHIFT_PHYWR_SETUP_CNT			16
#define BIT_MASK_PHYWR_SETUP_CNT			0xff
#define BIT_PHYWR_SETUP_CNT(x)				(((x) & BIT_MASK_PHYWR_SETUP_CNT) << BIT_SHIFT_PHYWR_SETUP_CNT)
#define BITS_PHYWR_SETUP_CNT				(BIT_MASK_PHYWR_SETUP_CNT << BIT_SHIFT_PHYWR_SETUP_CNT)
#define BIT_CLEAR_PHYWR_SETUP_CNT(x)			((x) & (~BITS_PHYWR_SETUP_CNT))
#define BIT_GET_PHYWR_SETUP_CNT(x)			(((x) >> BIT_SHIFT_PHYWR_SETUP_CNT) & BIT_MASK_PHYWR_SETUP_CNT)
#define BIT_SET_PHYWR_SETUP_CNT(x, v)			(BIT_CLEAR_PHYWR_SETUP_CNT(x) | BIT_PHYWR_SETUP_CNT(v))

#define BIT_SHIFT_PHYWR_HOLD_CNT			8
#define BIT_MASK_PHYWR_HOLD_CNT			0xff
#define BIT_PHYWR_HOLD_CNT(x)				(((x) & BIT_MASK_PHYWR_HOLD_CNT) << BIT_SHIFT_PHYWR_HOLD_CNT)
#define BITS_PHYWR_HOLD_CNT				(BIT_MASK_PHYWR_HOLD_CNT << BIT_SHIFT_PHYWR_HOLD_CNT)
#define BIT_CLEAR_PHYWR_HOLD_CNT(x)			((x) & (~BITS_PHYWR_HOLD_CNT))
#define BIT_GET_PHYWR_HOLD_CNT(x)			(((x) >> BIT_SHIFT_PHYWR_HOLD_CNT) & BIT_MASK_PHYWR_HOLD_CNT)
#define BIT_SET_PHYWR_HOLD_CNT(x, v)			(BIT_CLEAR_PHYWR_HOLD_CNT(x) | BIT_PHYWR_HOLD_CNT(v))

#define BIT_SHIFT_PHYRD_WAIT_CNT			0
#define BIT_MASK_PHYRD_WAIT_CNT			0xff
#define BIT_PHYRD_WAIT_CNT(x)				(((x) & BIT_MASK_PHYRD_WAIT_CNT) << BIT_SHIFT_PHYRD_WAIT_CNT)
#define BITS_PHYRD_WAIT_CNT				(BIT_MASK_PHYRD_WAIT_CNT << BIT_SHIFT_PHYRD_WAIT_CNT)
#define BIT_CLEAR_PHYRD_WAIT_CNT(x)			((x) & (~BITS_PHYRD_WAIT_CNT))
#define BIT_GET_PHYRD_WAIT_CNT(x)			(((x) >> BIT_SHIFT_PHYRD_WAIT_CNT) & BIT_MASK_PHYRD_WAIT_CNT)
#define BIT_SET_PHYRD_WAIT_CNT(x, v)			(BIT_CLEAR_PHYRD_WAIT_CNT(x) | BIT_PHYRD_WAIT_CNT(v))

/* 2 REG_SW_DEFINED_PAGE1			(Offset 0x01B8) */

#define BIT_SHIFT_SW_DEFINED_PAGE1_V1			0
#define BIT_MASK_SW_DEFINED_PAGE1_V1			0xffffffffL
#define BIT_SW_DEFINED_PAGE1_V1(x)			(((x) & BIT_MASK_SW_DEFINED_PAGE1_V1) << BIT_SHIFT_SW_DEFINED_PAGE1_V1)
#define BITS_SW_DEFINED_PAGE1_V1			(BIT_MASK_SW_DEFINED_PAGE1_V1 << BIT_SHIFT_SW_DEFINED_PAGE1_V1)
#define BIT_CLEAR_SW_DEFINED_PAGE1_V1(x)		((x) & (~BITS_SW_DEFINED_PAGE1_V1))
#define BIT_GET_SW_DEFINED_PAGE1_V1(x)			(((x) >> BIT_SHIFT_SW_DEFINED_PAGE1_V1) & BIT_MASK_SW_DEFINED_PAGE1_V1)
#define BIT_SET_SW_DEFINED_PAGE1_V1(x, v)		(BIT_CLEAR_SW_DEFINED_PAGE1_V1(x) | BIT_SW_DEFINED_PAGE1_V1(v))

/* 2 REG_SW_DEFINED_PAGE2			(Offset 0x01BC) */

#define BIT_SHIFT_SW_DEFINED_PAGE2			0
#define BIT_MASK_SW_DEFINED_PAGE2			0xffffffffL
#define BIT_SW_DEFINED_PAGE2(x)			(((x) & BIT_MASK_SW_DEFINED_PAGE2) << BIT_SHIFT_SW_DEFINED_PAGE2)
#define BITS_SW_DEFINED_PAGE2				(BIT_MASK_SW_DEFINED_PAGE2 << BIT_SHIFT_SW_DEFINED_PAGE2)
#define BIT_CLEAR_SW_DEFINED_PAGE2(x)			((x) & (~BITS_SW_DEFINED_PAGE2))
#define BIT_GET_SW_DEFINED_PAGE2(x)			(((x) >> BIT_SHIFT_SW_DEFINED_PAGE2) & BIT_MASK_SW_DEFINED_PAGE2)
#define BIT_SET_SW_DEFINED_PAGE2(x, v)			(BIT_CLEAR_SW_DEFINED_PAGE2(x) | BIT_SW_DEFINED_PAGE2(v))

/* 2 REG_MCUTST_I				(Offset 0x01C0) */

#define BIT_SHIFT_MCUDMSG_I				0
#define BIT_MASK_MCUDMSG_I				0xffffffffL
#define BIT_MCUDMSG_I(x)				(((x) & BIT_MASK_MCUDMSG_I) << BIT_SHIFT_MCUDMSG_I)
#define BITS_MCUDMSG_I					(BIT_MASK_MCUDMSG_I << BIT_SHIFT_MCUDMSG_I)
#define BIT_CLEAR_MCUDMSG_I(x)				((x) & (~BITS_MCUDMSG_I))
#define BIT_GET_MCUDMSG_I(x)				(((x) >> BIT_SHIFT_MCUDMSG_I) & BIT_MASK_MCUDMSG_I)
#define BIT_SET_MCUDMSG_I(x, v)			(BIT_CLEAR_MCUDMSG_I(x) | BIT_MCUDMSG_I(v))

/* 2 REG_MCUTST_II				(Offset 0x01C4) */

#define BIT_SHIFT_MCUDMSG_II				0
#define BIT_MASK_MCUDMSG_II				0xffffffffL
#define BIT_MCUDMSG_II(x)				(((x) & BIT_MASK_MCUDMSG_II) << BIT_SHIFT_MCUDMSG_II)
#define BITS_MCUDMSG_II				(BIT_MASK_MCUDMSG_II << BIT_SHIFT_MCUDMSG_II)
#define BIT_CLEAR_MCUDMSG_II(x)			((x) & (~BITS_MCUDMSG_II))
#define BIT_GET_MCUDMSG_II(x)				(((x) >> BIT_SHIFT_MCUDMSG_II) & BIT_MASK_MCUDMSG_II)
#define BIT_SET_MCUDMSG_II(x, v)			(BIT_CLEAR_MCUDMSG_II(x) | BIT_MCUDMSG_II(v))

/* 2 REG_FMETHR				(Offset 0x01C8) */

#define BIT_FWMSG_INTPS				BIT(31)

#define BIT_SHIFT_FW_MSG				0
#define BIT_MASK_FW_MSG				0x7fffffffL
#define BIT_FW_MSG(x)					(((x) & BIT_MASK_FW_MSG) << BIT_SHIFT_FW_MSG)
#define BITS_FW_MSG					(BIT_MASK_FW_MSG << BIT_SHIFT_FW_MSG)
#define BIT_CLEAR_FW_MSG(x)				((x) & (~BITS_FW_MSG))
#define BIT_GET_FW_MSG(x)				(((x) >> BIT_SHIFT_FW_MSG) & BIT_MASK_FW_MSG)
#define BIT_SET_FW_MSG(x, v)				(BIT_CLEAR_FW_MSG(x) | BIT_FW_MSG(v))

/* 2 REG_HMETFR				(Offset 0x01CC) */

#define BIT_SHIFT_HRCV_MSG				24
#define BIT_MASK_HRCV_MSG				0xff
#define BIT_HRCV_MSG(x)				(((x) & BIT_MASK_HRCV_MSG) << BIT_SHIFT_HRCV_MSG)
#define BITS_HRCV_MSG					(BIT_MASK_HRCV_MSG << BIT_SHIFT_HRCV_MSG)
#define BIT_CLEAR_HRCV_MSG(x)				((x) & (~BITS_HRCV_MSG))
#define BIT_GET_HRCV_MSG(x)				(((x) >> BIT_SHIFT_HRCV_MSG) & BIT_MASK_HRCV_MSG)
#define BIT_SET_HRCV_MSG(x, v)				(BIT_CLEAR_HRCV_MSG(x) | BIT_HRCV_MSG(v))

#define BIT_H3MSG_VLD					BIT(3)
#define BIT_H2MSG_VLD					BIT(2)
#define BIT_H1MSG_VLD					BIT(1)
#define BIT_H0MSG_VLD					BIT(0)

/* 2 REG_HMEBOX0				(Offset 0x01D0) */

#define BIT_SHIFT_HOST_MSG_0				0
#define BIT_MASK_HOST_MSG_0				0xffffffffL
#define BIT_HOST_MSG_0(x)				(((x) & BIT_MASK_HOST_MSG_0) << BIT_SHIFT_HOST_MSG_0)
#define BITS_HOST_MSG_0				(BIT_MASK_HOST_MSG_0 << BIT_SHIFT_HOST_MSG_0)
#define BIT_CLEAR_HOST_MSG_0(x)			((x) & (~BITS_HOST_MSG_0))
#define BIT_GET_HOST_MSG_0(x)				(((x) >> BIT_SHIFT_HOST_MSG_0) & BIT_MASK_HOST_MSG_0)
#define BIT_SET_HOST_MSG_0(x, v)			(BIT_CLEAR_HOST_MSG_0(x) | BIT_HOST_MSG_0(v))

/* 2 REG_HMEBOX1				(Offset 0x01D4) */

#define BIT_SHIFT_HOST_MSG_1				0
#define BIT_MASK_HOST_MSG_1				0xffffffffL
#define BIT_HOST_MSG_1(x)				(((x) & BIT_MASK_HOST_MSG_1) << BIT_SHIFT_HOST_MSG_1)
#define BITS_HOST_MSG_1				(BIT_MASK_HOST_MSG_1 << BIT_SHIFT_HOST_MSG_1)
#define BIT_CLEAR_HOST_MSG_1(x)			((x) & (~BITS_HOST_MSG_1))
#define BIT_GET_HOST_MSG_1(x)				(((x) >> BIT_SHIFT_HOST_MSG_1) & BIT_MASK_HOST_MSG_1)
#define BIT_SET_HOST_MSG_1(x, v)			(BIT_CLEAR_HOST_MSG_1(x) | BIT_HOST_MSG_1(v))

/* 2 REG_HMEBOX2				(Offset 0x01D8) */

#define BIT_SHIFT_HOST_MSG_2				0
#define BIT_MASK_HOST_MSG_2				0xffffffffL
#define BIT_HOST_MSG_2(x)				(((x) & BIT_MASK_HOST_MSG_2) << BIT_SHIFT_HOST_MSG_2)
#define BITS_HOST_MSG_2				(BIT_MASK_HOST_MSG_2 << BIT_SHIFT_HOST_MSG_2)
#define BIT_CLEAR_HOST_MSG_2(x)			((x) & (~BITS_HOST_MSG_2))
#define BIT_GET_HOST_MSG_2(x)				(((x) >> BIT_SHIFT_HOST_MSG_2) & BIT_MASK_HOST_MSG_2)
#define BIT_SET_HOST_MSG_2(x, v)			(BIT_CLEAR_HOST_MSG_2(x) | BIT_HOST_MSG_2(v))

/* 2 REG_HMEBOX3				(Offset 0x01DC) */

#define BIT_SHIFT_HOST_MSG_3				0
#define BIT_MASK_HOST_MSG_3				0xffffffffL
#define BIT_HOST_MSG_3(x)				(((x) & BIT_MASK_HOST_MSG_3) << BIT_SHIFT_HOST_MSG_3)
#define BITS_HOST_MSG_3				(BIT_MASK_HOST_MSG_3 << BIT_SHIFT_HOST_MSG_3)
#define BIT_CLEAR_HOST_MSG_3(x)			((x) & (~BITS_HOST_MSG_3))
#define BIT_GET_HOST_MSG_3(x)				(((x) >> BIT_SHIFT_HOST_MSG_3) & BIT_MASK_HOST_MSG_3)
#define BIT_SET_HOST_MSG_3(x, v)			(BIT_CLEAR_HOST_MSG_3(x) | BIT_HOST_MSG_3(v))

/* 2 REG_LLT_IND_ACCESS			(Offset 0x01E0) */

#define BIT_SHIFT_LLTE_RWM				30
#define BIT_MASK_LLTE_RWM				0x3
#define BIT_LLTE_RWM(x)				(((x) & BIT_MASK_LLTE_RWM) << BIT_SHIFT_LLTE_RWM)
#define BITS_LLTE_RWM					(BIT_MASK_LLTE_RWM << BIT_SHIFT_LLTE_RWM)
#define BIT_CLEAR_LLTE_RWM(x)				((x) & (~BITS_LLTE_RWM))
#define BIT_GET_LLTE_RWM(x)				(((x) >> BIT_SHIFT_LLTE_RWM) & BIT_MASK_LLTE_RWM)
#define BIT_SET_LLTE_RWM(x, v)				(BIT_CLEAR_LLTE_RWM(x) | BIT_LLTE_RWM(v))

#define BIT_SHIFT_LLTINI_PWM_RDATA			16
#define BIT_MASK_LLTINI_PWM_RDATA			0xff
#define BIT_LLTINI_PWM_RDATA(x)			(((x) & BIT_MASK_LLTINI_PWM_RDATA) << BIT_SHIFT_LLTINI_PWM_RDATA)
#define BITS_LLTINI_PWM_RDATA				(BIT_MASK_LLTINI_PWM_RDATA << BIT_SHIFT_LLTINI_PWM_RDATA)
#define BIT_CLEAR_LLTINI_PWM_RDATA(x)			((x) & (~BITS_LLTINI_PWM_RDATA))
#define BIT_GET_LLTINI_PWM_RDATA(x)			(((x) >> BIT_SHIFT_LLTINI_PWM_RDATA) & BIT_MASK_LLTINI_PWM_RDATA)
#define BIT_SET_LLTINI_PWM_RDATA(x, v)			(BIT_CLEAR_LLTINI_PWM_RDATA(x) | BIT_LLTINI_PWM_RDATA(v))

#define BIT_SHIFT_LLTINI_ADDR				8
#define BIT_MASK_LLTINI_ADDR				0xff
#define BIT_LLTINI_ADDR(x)				(((x) & BIT_MASK_LLTINI_ADDR) << BIT_SHIFT_LLTINI_ADDR)
#define BITS_LLTINI_ADDR				(BIT_MASK_LLTINI_ADDR << BIT_SHIFT_LLTINI_ADDR)
#define BIT_CLEAR_LLTINI_ADDR(x)			((x) & (~BITS_LLTINI_ADDR))
#define BIT_GET_LLTINI_ADDR(x)				(((x) >> BIT_SHIFT_LLTINI_ADDR) & BIT_MASK_LLTINI_ADDR)
#define BIT_SET_LLTINI_ADDR(x, v)			(BIT_CLEAR_LLTINI_ADDR(x) | BIT_LLTINI_ADDR(v))

#define BIT_SHIFT_LLTINI_HCI_RDATA			0
#define BIT_MASK_LLTINI_HCI_RDATA			0xff
#define BIT_LLTINI_HCI_RDATA(x)			(((x) & BIT_MASK_LLTINI_HCI_RDATA) << BIT_SHIFT_LLTINI_HCI_RDATA)
#define BITS_LLTINI_HCI_RDATA				(BIT_MASK_LLTINI_HCI_RDATA << BIT_SHIFT_LLTINI_HCI_RDATA)
#define BIT_CLEAR_LLTINI_HCI_RDATA(x)			((x) & (~BITS_LLTINI_HCI_RDATA))
#define BIT_GET_LLTINI_HCI_RDATA(x)			(((x) >> BIT_SHIFT_LLTINI_HCI_RDATA) & BIT_MASK_LLTINI_HCI_RDATA)
#define BIT_SET_LLTINI_HCI_RDATA(x, v)			(BIT_CLEAR_LLTINI_HCI_RDATA(x) | BIT_LLTINI_HCI_RDATA(v))

/* 2 REG_GENTST				(Offset 0x01E4) */

#define BIT_SHIFT_GENTST				0
#define BIT_MASK_GENTST				0xffffffffL
#define BIT_GENTST(x)					(((x) & BIT_MASK_GENTST) << BIT_SHIFT_GENTST)
#define BITS_GENTST					(BIT_MASK_GENTST << BIT_SHIFT_GENTST)
#define BIT_CLEAR_GENTST(x)				((x) & (~BITS_GENTST))
#define BIT_GET_GENTST(x)				(((x) >> BIT_SHIFT_GENTST) & BIT_MASK_GENTST)
#define BIT_SET_GENTST(x, v)				(BIT_CLEAR_GENTST(x) | BIT_GENTST(v))

/* 2 REG_BB_ACCESS_CTRL			(Offset 0x01E8) */

#define BIT_SHIFT_BB_WRITE_READ			30
#define BIT_MASK_BB_WRITE_READ				0x3
#define BIT_BB_WRITE_READ(x)				(((x) & BIT_MASK_BB_WRITE_READ) << BIT_SHIFT_BB_WRITE_READ)
#define BITS_BB_WRITE_READ				(BIT_MASK_BB_WRITE_READ << BIT_SHIFT_BB_WRITE_READ)
#define BIT_CLEAR_BB_WRITE_READ(x)			((x) & (~BITS_BB_WRITE_READ))
#define BIT_GET_BB_WRITE_READ(x)			(((x) >> BIT_SHIFT_BB_WRITE_READ) & BIT_MASK_BB_WRITE_READ)
#define BIT_SET_BB_WRITE_READ(x, v)			(BIT_CLEAR_BB_WRITE_READ(x) | BIT_BB_WRITE_READ(v))

#define BIT_SHIFT_BB_WRITE_EN_V1			16
#define BIT_MASK_BB_WRITE_EN_V1			0xf
#define BIT_BB_WRITE_EN_V1(x)				(((x) & BIT_MASK_BB_WRITE_EN_V1) << BIT_SHIFT_BB_WRITE_EN_V1)
#define BITS_BB_WRITE_EN_V1				(BIT_MASK_BB_WRITE_EN_V1 << BIT_SHIFT_BB_WRITE_EN_V1)
#define BIT_CLEAR_BB_WRITE_EN_V1(x)			((x) & (~BITS_BB_WRITE_EN_V1))
#define BIT_GET_BB_WRITE_EN_V1(x)			(((x) >> BIT_SHIFT_BB_WRITE_EN_V1) & BIT_MASK_BB_WRITE_EN_V1)
#define BIT_SET_BB_WRITE_EN_V1(x, v)			(BIT_CLEAR_BB_WRITE_EN_V1(x) | BIT_BB_WRITE_EN_V1(v))

#define BIT_SHIFT_BB_ADDR_V1				2
#define BIT_MASK_BB_ADDR_V1				0x3fff
#define BIT_BB_ADDR_V1(x)				(((x) & BIT_MASK_BB_ADDR_V1) << BIT_SHIFT_BB_ADDR_V1)
#define BITS_BB_ADDR_V1				(BIT_MASK_BB_ADDR_V1 << BIT_SHIFT_BB_ADDR_V1)
#define BIT_CLEAR_BB_ADDR_V1(x)			((x) & (~BITS_BB_ADDR_V1))
#define BIT_GET_BB_ADDR_V1(x)				(((x) >> BIT_SHIFT_BB_ADDR_V1) & BIT_MASK_BB_ADDR_V1)
#define BIT_SET_BB_ADDR_V1(x, v)			(BIT_CLEAR_BB_ADDR_V1(x) | BIT_BB_ADDR_V1(v))

#define BIT_BB_ERRACC					BIT(0)

/* 2 REG_BB_ACCESS_DATA			(Offset 0x01EC) */

#define BIT_SHIFT_BB_DATA				0
#define BIT_MASK_BB_DATA				0xffffffffL
#define BIT_BB_DATA(x)					(((x) & BIT_MASK_BB_DATA) << BIT_SHIFT_BB_DATA)
#define BITS_BB_DATA					(BIT_MASK_BB_DATA << BIT_SHIFT_BB_DATA)
#define BIT_CLEAR_BB_DATA(x)				((x) & (~BITS_BB_DATA))
#define BIT_GET_BB_DATA(x)				(((x) >> BIT_SHIFT_BB_DATA) & BIT_MASK_BB_DATA)
#define BIT_SET_BB_DATA(x, v)				(BIT_CLEAR_BB_DATA(x) | BIT_BB_DATA(v))

/* 2 REG_HMEBOX_E0				(Offset 0x01F0) */

#define BIT_SHIFT_HMEBOX_E0				0
#define BIT_MASK_HMEBOX_E0				0xffffffffL
#define BIT_HMEBOX_E0(x)				(((x) & BIT_MASK_HMEBOX_E0) << BIT_SHIFT_HMEBOX_E0)
#define BITS_HMEBOX_E0					(BIT_MASK_HMEBOX_E0 << BIT_SHIFT_HMEBOX_E0)
#define BIT_CLEAR_HMEBOX_E0(x)				((x) & (~BITS_HMEBOX_E0))
#define BIT_GET_HMEBOX_E0(x)				(((x) >> BIT_SHIFT_HMEBOX_E0) & BIT_MASK_HMEBOX_E0)
#define BIT_SET_HMEBOX_E0(x, v)			(BIT_CLEAR_HMEBOX_E0(x) | BIT_HMEBOX_E0(v))

/* 2 REG_HMEBOX_E1				(Offset 0x01F4) */

#define BIT_SHIFT_HMEBOX_E1				0
#define BIT_MASK_HMEBOX_E1				0xffffffffL
#define BIT_HMEBOX_E1(x)				(((x) & BIT_MASK_HMEBOX_E1) << BIT_SHIFT_HMEBOX_E1)
#define BITS_HMEBOX_E1					(BIT_MASK_HMEBOX_E1 << BIT_SHIFT_HMEBOX_E1)
#define BIT_CLEAR_HMEBOX_E1(x)				((x) & (~BITS_HMEBOX_E1))
#define BIT_GET_HMEBOX_E1(x)				(((x) >> BIT_SHIFT_HMEBOX_E1) & BIT_MASK_HMEBOX_E1)
#define BIT_SET_HMEBOX_E1(x, v)			(BIT_CLEAR_HMEBOX_E1(x) | BIT_HMEBOX_E1(v))

/* 2 REG_HMEBOX_E2				(Offset 0x01F8) */

#define BIT_SHIFT_HMEBOX_E2				0
#define BIT_MASK_HMEBOX_E2				0xffffffffL
#define BIT_HMEBOX_E2(x)				(((x) & BIT_MASK_HMEBOX_E2) << BIT_SHIFT_HMEBOX_E2)
#define BITS_HMEBOX_E2					(BIT_MASK_HMEBOX_E2 << BIT_SHIFT_HMEBOX_E2)
#define BIT_CLEAR_HMEBOX_E2(x)				((x) & (~BITS_HMEBOX_E2))
#define BIT_GET_HMEBOX_E2(x)				(((x) >> BIT_SHIFT_HMEBOX_E2) & BIT_MASK_HMEBOX_E2)
#define BIT_SET_HMEBOX_E2(x, v)			(BIT_CLEAR_HMEBOX_E2(x) | BIT_HMEBOX_E2(v))

/* 2 REG_HMEBOX_E3				(Offset 0x01FC) */

#define BIT_SHIFT_HMEBOX_E3				0
#define BIT_MASK_HMEBOX_E3				0xffffffffL
#define BIT_HMEBOX_E3(x)				(((x) & BIT_MASK_HMEBOX_E3) << BIT_SHIFT_HMEBOX_E3)
#define BITS_HMEBOX_E3					(BIT_MASK_HMEBOX_E3 << BIT_SHIFT_HMEBOX_E3)
#define BIT_CLEAR_HMEBOX_E3(x)				((x) & (~BITS_HMEBOX_E3))
#define BIT_GET_HMEBOX_E3(x)				(((x) >> BIT_SHIFT_HMEBOX_E3) & BIT_MASK_HMEBOX_E3)
#define BIT_SET_HMEBOX_E3(x, v)			(BIT_CLEAR_HMEBOX_E3(x) | BIT_HMEBOX_E3(v))

/* 2 REG_RQPN_CTRL_HLPQ			(Offset 0x0200) */

#define BIT_LOAD_R_PGNUM				BIT(31)
#define BIT_EPQ_PUBLIC_DIS				BIT(27)
#define BIT_NPQ_PUBLIC_DIS				BIT(26)
#define BIT_LPQ_PUBLIC_DIS				BIT(25)
#define BIT_HPQ_PUBLIC_DIS				BIT(24)

#define BIT_SHIFT_PUBQ					16
#define BIT_MASK_PUBQ					0xff
#define BIT_PUBQ(x)					(((x) & BIT_MASK_PUBQ) << BIT_SHIFT_PUBQ)
#define BITS_PUBQ					(BIT_MASK_PUBQ << BIT_SHIFT_PUBQ)
#define BIT_CLEAR_PUBQ(x)				((x) & (~BITS_PUBQ))
#define BIT_GET_PUBQ(x)				(((x) >> BIT_SHIFT_PUBQ) & BIT_MASK_PUBQ)
#define BIT_SET_PUBQ(x, v)				(BIT_CLEAR_PUBQ(x) | BIT_PUBQ(v))

#define BIT_SHIFT_LPQ					8
#define BIT_MASK_LPQ					0xff
#define BIT_LPQ(x)					(((x) & BIT_MASK_LPQ) << BIT_SHIFT_LPQ)
#define BITS_LPQ					(BIT_MASK_LPQ << BIT_SHIFT_LPQ)
#define BIT_CLEAR_LPQ(x)				((x) & (~BITS_LPQ))
#define BIT_GET_LPQ(x)					(((x) >> BIT_SHIFT_LPQ) & BIT_MASK_LPQ)
#define BIT_SET_LPQ(x, v)				(BIT_CLEAR_LPQ(x) | BIT_LPQ(v))

#define BIT_SHIFT_HPQ					0
#define BIT_MASK_HPQ					0xff
#define BIT_HPQ(x)					(((x) & BIT_MASK_HPQ) << BIT_SHIFT_HPQ)
#define BITS_HPQ					(BIT_MASK_HPQ << BIT_SHIFT_HPQ)
#define BIT_CLEAR_HPQ(x)				((x) & (~BITS_HPQ))
#define BIT_GET_HPQ(x)					(((x) >> BIT_SHIFT_HPQ) & BIT_MASK_HPQ)
#define BIT_SET_HPQ(x, v)				(BIT_CLEAR_HPQ(x) | BIT_HPQ(v))

/* 2 REG_FIFOPAGE_INFO			(Offset 0x0204) */

#define BIT_SHIFT_TXPKTNUM				24
#define BIT_MASK_TXPKTNUM				0xff
#define BIT_TXPKTNUM(x)				(((x) & BIT_MASK_TXPKTNUM) << BIT_SHIFT_TXPKTNUM)
#define BITS_TXPKTNUM					(BIT_MASK_TXPKTNUM << BIT_SHIFT_TXPKTNUM)
#define BIT_CLEAR_TXPKTNUM(x)				((x) & (~BITS_TXPKTNUM))
#define BIT_GET_TXPKTNUM(x)				(((x) >> BIT_SHIFT_TXPKTNUM) & BIT_MASK_TXPKTNUM)
#define BIT_SET_TXPKTNUM(x, v)				(BIT_CLEAR_TXPKTNUM(x) | BIT_TXPKTNUM(v))

#define BIT_SHIFT_PUBQ_AVAL_PG				16
#define BIT_MASK_PUBQ_AVAL_PG				0xff
#define BIT_PUBQ_AVAL_PG(x)				(((x) & BIT_MASK_PUBQ_AVAL_PG) << BIT_SHIFT_PUBQ_AVAL_PG)
#define BITS_PUBQ_AVAL_PG				(BIT_MASK_PUBQ_AVAL_PG << BIT_SHIFT_PUBQ_AVAL_PG)
#define BIT_CLEAR_PUBQ_AVAL_PG(x)			((x) & (~BITS_PUBQ_AVAL_PG))
#define BIT_GET_PUBQ_AVAL_PG(x)			(((x) >> BIT_SHIFT_PUBQ_AVAL_PG) & BIT_MASK_PUBQ_AVAL_PG)
#define BIT_SET_PUBQ_AVAL_PG(x, v)			(BIT_CLEAR_PUBQ_AVAL_PG(x) | BIT_PUBQ_AVAL_PG(v))

#define BIT_SHIFT_LPQ_AVAL_PG				8
#define BIT_MASK_LPQ_AVAL_PG				0xff
#define BIT_LPQ_AVAL_PG(x)				(((x) & BIT_MASK_LPQ_AVAL_PG) << BIT_SHIFT_LPQ_AVAL_PG)
#define BITS_LPQ_AVAL_PG				(BIT_MASK_LPQ_AVAL_PG << BIT_SHIFT_LPQ_AVAL_PG)
#define BIT_CLEAR_LPQ_AVAL_PG(x)			((x) & (~BITS_LPQ_AVAL_PG))
#define BIT_GET_LPQ_AVAL_PG(x)				(((x) >> BIT_SHIFT_LPQ_AVAL_PG) & BIT_MASK_LPQ_AVAL_PG)
#define BIT_SET_LPQ_AVAL_PG(x, v)			(BIT_CLEAR_LPQ_AVAL_PG(x) | BIT_LPQ_AVAL_PG(v))

#define BIT_SHIFT_HPQ_AVAL_PG				0
#define BIT_MASK_HPQ_AVAL_PG				0xff
#define BIT_HPQ_AVAL_PG(x)				(((x) & BIT_MASK_HPQ_AVAL_PG) << BIT_SHIFT_HPQ_AVAL_PG)
#define BITS_HPQ_AVAL_PG				(BIT_MASK_HPQ_AVAL_PG << BIT_SHIFT_HPQ_AVAL_PG)
#define BIT_CLEAR_HPQ_AVAL_PG(x)			((x) & (~BITS_HPQ_AVAL_PG))
#define BIT_GET_HPQ_AVAL_PG(x)				(((x) >> BIT_SHIFT_HPQ_AVAL_PG) & BIT_MASK_HPQ_AVAL_PG)
#define BIT_SET_HPQ_AVAL_PG(x, v)			(BIT_CLEAR_HPQ_AVAL_PG(x) | BIT_HPQ_AVAL_PG(v))

/* 2 REG_DWBCN0_CTRL				(Offset 0x0208) */

#define BIT_SHIFT_LLT_FREE_PAGE			24
#define BIT_MASK_LLT_FREE_PAGE				0xff
#define BIT_LLT_FREE_PAGE(x)				(((x) & BIT_MASK_LLT_FREE_PAGE) << BIT_SHIFT_LLT_FREE_PAGE)
#define BITS_LLT_FREE_PAGE				(BIT_MASK_LLT_FREE_PAGE << BIT_SHIFT_LLT_FREE_PAGE)
#define BIT_CLEAR_LLT_FREE_PAGE(x)			((x) & (~BITS_LLT_FREE_PAGE))
#define BIT_GET_LLT_FREE_PAGE(x)			(((x) >> BIT_SHIFT_LLT_FREE_PAGE) & BIT_MASK_LLT_FREE_PAGE)
#define BIT_SET_LLT_FREE_PAGE(x, v)			(BIT_CLEAR_LLT_FREE_PAGE(x) | BIT_LLT_FREE_PAGE(v))

#define BIT_SHIFT_RSVD_BYTE1				17
#define BIT_MASK_RSVD_BYTE1				0x7f
#define BIT_RSVD_BYTE1(x)				(((x) & BIT_MASK_RSVD_BYTE1) << BIT_SHIFT_RSVD_BYTE1)
#define BITS_RSVD_BYTE1				(BIT_MASK_RSVD_BYTE1 << BIT_SHIFT_RSVD_BYTE1)
#define BIT_CLEAR_RSVD_BYTE1(x)			((x) & (~BITS_RSVD_BYTE1))
#define BIT_GET_RSVD_BYTE1(x)				(((x) >> BIT_SHIFT_RSVD_BYTE1) & BIT_MASK_RSVD_BYTE1)
#define BIT_SET_RSVD_BYTE1(x, v)			(BIT_CLEAR_RSVD_BYTE1(x) | BIT_RSVD_BYTE1(v))

#define BIT_BCN_VALID					BIT(16)

#define BIT_SHIFT_BCN_HEAD				8
#define BIT_MASK_BCN_HEAD				0xff
#define BIT_BCN_HEAD(x)				(((x) & BIT_MASK_BCN_HEAD) << BIT_SHIFT_BCN_HEAD)
#define BITS_BCN_HEAD					(BIT_MASK_BCN_HEAD << BIT_SHIFT_BCN_HEAD)
#define BIT_CLEAR_BCN_HEAD(x)				((x) & (~BITS_BCN_HEAD))
#define BIT_GET_BCN_HEAD(x)				(((x) >> BIT_SHIFT_BCN_HEAD) & BIT_MASK_BCN_HEAD)
#define BIT_SET_BCN_HEAD(x, v)				(BIT_CLEAR_BCN_HEAD(x) | BIT_BCN_HEAD(v))

#define BIT_SHIFT_BLK_DESC_NUM				4
#define BIT_MASK_BLK_DESC_NUM				0xf
#define BIT_BLK_DESC_NUM(x)				(((x) & BIT_MASK_BLK_DESC_NUM) << BIT_SHIFT_BLK_DESC_NUM)
#define BITS_BLK_DESC_NUM				(BIT_MASK_BLK_DESC_NUM << BIT_SHIFT_BLK_DESC_NUM)
#define BIT_CLEAR_BLK_DESC_NUM(x)			((x) & (~BITS_BLK_DESC_NUM))
#define BIT_GET_BLK_DESC_NUM(x)			(((x) >> BIT_SHIFT_BLK_DESC_NUM) & BIT_MASK_BLK_DESC_NUM)
#define BIT_SET_BLK_DESC_NUM(x, v)			(BIT_CLEAR_BLK_DESC_NUM(x) | BIT_BLK_DESC_NUM(v))

#define BIT_BLK_DESC_OPT				BIT(0)

/* 2 REG_TXDMA_OFFSET_CHK			(Offset 0x020C) */

#define BIT_EN_CHKERR_FINISH				BIT(31)
#define BIT_EN_DMA_PERMU_P				BIT(30)
#define BIT_EN_TXQUE_CLR				BIT(29)
#define BIT_EN_PCIE_FIFO				BIT(28)

#define BIT_SHIFT_PG_UNDER_TH				16
#define BIT_MASK_PG_UNDER_TH				0xff
#define BIT_PG_UNDER_TH(x)				(((x) & BIT_MASK_PG_UNDER_TH) << BIT_SHIFT_PG_UNDER_TH)
#define BITS_PG_UNDER_TH				(BIT_MASK_PG_UNDER_TH << BIT_SHIFT_PG_UNDER_TH)
#define BIT_CLEAR_PG_UNDER_TH(x)			((x) & (~BITS_PG_UNDER_TH))
#define BIT_GET_PG_UNDER_TH(x)				(((x) >> BIT_SHIFT_PG_UNDER_TH) & BIT_MASK_PG_UNDER_TH)
#define BIT_SET_PG_UNDER_TH(x, v)			(BIT_CLEAR_PG_UNDER_TH(x) | BIT_PG_UNDER_TH(v))

#define BIT_DSC_CHKSUM_EN				BIT(13)
#define BIT_RST_RDPTR					BIT(12)
#define BIT_RST_WRPTR					BIT(11)
#define BIT_CHK_PG_TH_EN				BIT(10)
#define BIT_DROP_DATA_EN				BIT(9)
#define BIT_CHECK_OFFSET_EN				BIT(8)

#define BIT_SHIFT_CHK_OFFSET				0
#define BIT_MASK_CHK_OFFSET				0xff
#define BIT_CHK_OFFSET(x)				(((x) & BIT_MASK_CHK_OFFSET) << BIT_SHIFT_CHK_OFFSET)
#define BITS_CHK_OFFSET				(BIT_MASK_CHK_OFFSET << BIT_SHIFT_CHK_OFFSET)
#define BIT_CLEAR_CHK_OFFSET(x)			((x) & (~BITS_CHK_OFFSET))
#define BIT_GET_CHK_OFFSET(x)				(((x) >> BIT_SHIFT_CHK_OFFSET) & BIT_MASK_CHK_OFFSET)
#define BIT_SET_CHK_OFFSET(x, v)			(BIT_CLEAR_CHK_OFFSET(x) | BIT_CHK_OFFSET(v))

/* 2 REG_TXDMA_STATUS			(Offset 0x0210) */

#define BIT_HI_OQT_UDN					BIT(17)
#define BIT_HI_OQT_OVF					BIT(16)
#define BIT_PAYLOAD_CHKSUM_ERR				BIT(15)
#define BIT_PAYLOAD_UDN				BIT(14)
#define BIT_PAYLOAD_OVF				BIT(13)
#define BIT_DSC_CHKSUM_FAIL				BIT(12)
#define BIT_UNKNOWN_QSEL				BIT(11)
#define BIT_EP_QSEL_DIFF				BIT(10)
#define BIT_TX_OFFS_UNMATCH				BIT(9)
#define BIT_TXOQT_UDN					BIT(8)
#define BIT_TXOQT_OVF					BIT(7)
#define BIT_SFF_UDN					BIT(6)
#define BIT_SFF_OVF					BIT(5)
#define BIT_FREE_PG_FF					BIT(4)
#define BIT_PAGE_UNDER					BIT(3)
#define BIT_PAGE_OVER					BIT(2)
#define BIT_PG_UDN					BIT(1)
#define BIT_PG_OVF					BIT(0)

/* 2 REG_RQPN_NPQ				(Offset 0x0214) */

#define BIT_SHIFT_EPQ_PGNUM				24
#define BIT_MASK_EPQ_PGNUM				0xff
#define BIT_EPQ_PGNUM(x)				(((x) & BIT_MASK_EPQ_PGNUM) << BIT_SHIFT_EPQ_PGNUM)
#define BITS_EPQ_PGNUM					(BIT_MASK_EPQ_PGNUM << BIT_SHIFT_EPQ_PGNUM)
#define BIT_CLEAR_EPQ_PGNUM(x)				((x) & (~BITS_EPQ_PGNUM))
#define BIT_GET_EPQ_PGNUM(x)				(((x) >> BIT_SHIFT_EPQ_PGNUM) & BIT_MASK_EPQ_PGNUM)
#define BIT_SET_EPQ_PGNUM(x, v)			(BIT_CLEAR_EPQ_PGNUM(x) | BIT_EPQ_PGNUM(v))

#define BIT_SHIFT_EPQ_R_PGNUM				16
#define BIT_MASK_EPQ_R_PGNUM				0xff
#define BIT_EPQ_R_PGNUM(x)				(((x) & BIT_MASK_EPQ_R_PGNUM) << BIT_SHIFT_EPQ_R_PGNUM)
#define BITS_EPQ_R_PGNUM				(BIT_MASK_EPQ_R_PGNUM << BIT_SHIFT_EPQ_R_PGNUM)
#define BIT_CLEAR_EPQ_R_PGNUM(x)			((x) & (~BITS_EPQ_R_PGNUM))
#define BIT_GET_EPQ_R_PGNUM(x)				(((x) >> BIT_SHIFT_EPQ_R_PGNUM) & BIT_MASK_EPQ_R_PGNUM)
#define BIT_SET_EPQ_R_PGNUM(x, v)			(BIT_CLEAR_EPQ_R_PGNUM(x) | BIT_EPQ_R_PGNUM(v))

#define BIT_SHIFT_NPQ_PGNUM				8
#define BIT_MASK_NPQ_PGNUM				0xff
#define BIT_NPQ_PGNUM(x)				(((x) & BIT_MASK_NPQ_PGNUM) << BIT_SHIFT_NPQ_PGNUM)
#define BITS_NPQ_PGNUM					(BIT_MASK_NPQ_PGNUM << BIT_SHIFT_NPQ_PGNUM)
#define BIT_CLEAR_NPQ_PGNUM(x)				((x) & (~BITS_NPQ_PGNUM))
#define BIT_GET_NPQ_PGNUM(x)				(((x) >> BIT_SHIFT_NPQ_PGNUM) & BIT_MASK_NPQ_PGNUM)
#define BIT_SET_NPQ_PGNUM(x, v)			(BIT_CLEAR_NPQ_PGNUM(x) | BIT_NPQ_PGNUM(v))

#define BIT_SHIFT_NPQ_R_PGNUM				0
#define BIT_MASK_NPQ_R_PGNUM				0xff
#define BIT_NPQ_R_PGNUM(x)				(((x) & BIT_MASK_NPQ_R_PGNUM) << BIT_SHIFT_NPQ_R_PGNUM)
#define BITS_NPQ_R_PGNUM				(BIT_MASK_NPQ_R_PGNUM << BIT_SHIFT_NPQ_R_PGNUM)
#define BIT_CLEAR_NPQ_R_PGNUM(x)			((x) & (~BITS_NPQ_R_PGNUM))
#define BIT_GET_NPQ_R_PGNUM(x)				(((x) >> BIT_SHIFT_NPQ_R_PGNUM) & BIT_MASK_NPQ_R_PGNUM)
#define BIT_SET_NPQ_R_PGNUM(x, v)			(BIT_CLEAR_NPQ_R_PGNUM(x) | BIT_NPQ_R_PGNUM(v))

/* 2 REG_TQPNT1				(Offset 0x0218) */

#define BIT_SHIFT_NPQ_HIGH_TH				24
#define BIT_MASK_NPQ_HIGH_TH				0xff
#define BIT_NPQ_HIGH_TH(x)				(((x) & BIT_MASK_NPQ_HIGH_TH) << BIT_SHIFT_NPQ_HIGH_TH)
#define BITS_NPQ_HIGH_TH				(BIT_MASK_NPQ_HIGH_TH << BIT_SHIFT_NPQ_HIGH_TH)
#define BIT_CLEAR_NPQ_HIGH_TH(x)			((x) & (~BITS_NPQ_HIGH_TH))
#define BIT_GET_NPQ_HIGH_TH(x)				(((x) >> BIT_SHIFT_NPQ_HIGH_TH) & BIT_MASK_NPQ_HIGH_TH)
#define BIT_SET_NPQ_HIGH_TH(x, v)			(BIT_CLEAR_NPQ_HIGH_TH(x) | BIT_NPQ_HIGH_TH(v))

#define BIT_SHIFT_NPQ_LOW_TH				16
#define BIT_MASK_NPQ_LOW_TH				0xff
#define BIT_NPQ_LOW_TH(x)				(((x) & BIT_MASK_NPQ_LOW_TH) << BIT_SHIFT_NPQ_LOW_TH)
#define BITS_NPQ_LOW_TH				(BIT_MASK_NPQ_LOW_TH << BIT_SHIFT_NPQ_LOW_TH)
#define BIT_CLEAR_NPQ_LOW_TH(x)			((x) & (~BITS_NPQ_LOW_TH))
#define BIT_GET_NPQ_LOW_TH(x)				(((x) >> BIT_SHIFT_NPQ_LOW_TH) & BIT_MASK_NPQ_LOW_TH)
#define BIT_SET_NPQ_LOW_TH(x, v)			(BIT_CLEAR_NPQ_LOW_TH(x) | BIT_NPQ_LOW_TH(v))

#define BIT_SHIFT_HPQ_HIGH_TH				8
#define BIT_MASK_HPQ_HIGH_TH				0xff
#define BIT_HPQ_HIGH_TH(x)				(((x) & BIT_MASK_HPQ_HIGH_TH) << BIT_SHIFT_HPQ_HIGH_TH)
#define BITS_HPQ_HIGH_TH				(BIT_MASK_HPQ_HIGH_TH << BIT_SHIFT_HPQ_HIGH_TH)
#define BIT_CLEAR_HPQ_HIGH_TH(x)			((x) & (~BITS_HPQ_HIGH_TH))
#define BIT_GET_HPQ_HIGH_TH(x)				(((x) >> BIT_SHIFT_HPQ_HIGH_TH) & BIT_MASK_HPQ_HIGH_TH)
#define BIT_SET_HPQ_HIGH_TH(x, v)			(BIT_CLEAR_HPQ_HIGH_TH(x) | BIT_HPQ_HIGH_TH(v))

#define BIT_SHIFT_HPQ_LOW_TH				0
#define BIT_MASK_HPQ_LOW_TH				0xff
#define BIT_HPQ_LOW_TH(x)				(((x) & BIT_MASK_HPQ_LOW_TH) << BIT_SHIFT_HPQ_LOW_TH)
#define BITS_HPQ_LOW_TH				(BIT_MASK_HPQ_LOW_TH << BIT_SHIFT_HPQ_LOW_TH)
#define BIT_CLEAR_HPQ_LOW_TH(x)			((x) & (~BITS_HPQ_LOW_TH))
#define BIT_GET_HPQ_LOW_TH(x)				(((x) >> BIT_SHIFT_HPQ_LOW_TH) & BIT_MASK_HPQ_LOW_TH)
#define BIT_SET_HPQ_LOW_TH(x, v)			(BIT_CLEAR_HPQ_LOW_TH(x) | BIT_HPQ_LOW_TH(v))

/* 2 REG_TQPNT2				(Offset 0x021C) */

#define BIT_SHIFT_EXQ_HIGH_TH				24
#define BIT_MASK_EXQ_HIGH_TH				0xff
#define BIT_EXQ_HIGH_TH(x)				(((x) & BIT_MASK_EXQ_HIGH_TH) << BIT_SHIFT_EXQ_HIGH_TH)
#define BITS_EXQ_HIGH_TH				(BIT_MASK_EXQ_HIGH_TH << BIT_SHIFT_EXQ_HIGH_TH)
#define BIT_CLEAR_EXQ_HIGH_TH(x)			((x) & (~BITS_EXQ_HIGH_TH))
#define BIT_GET_EXQ_HIGH_TH(x)				(((x) >> BIT_SHIFT_EXQ_HIGH_TH) & BIT_MASK_EXQ_HIGH_TH)
#define BIT_SET_EXQ_HIGH_TH(x, v)			(BIT_CLEAR_EXQ_HIGH_TH(x) | BIT_EXQ_HIGH_TH(v))

#define BIT_SHIFT_EXQ_LOW_TH				16
#define BIT_MASK_EXQ_LOW_TH				0xff
#define BIT_EXQ_LOW_TH(x)				(((x) & BIT_MASK_EXQ_LOW_TH) << BIT_SHIFT_EXQ_LOW_TH)
#define BITS_EXQ_LOW_TH				(BIT_MASK_EXQ_LOW_TH << BIT_SHIFT_EXQ_LOW_TH)
#define BIT_CLEAR_EXQ_LOW_TH(x)			((x) & (~BITS_EXQ_LOW_TH))
#define BIT_GET_EXQ_LOW_TH(x)				(((x) >> BIT_SHIFT_EXQ_LOW_TH) & BIT_MASK_EXQ_LOW_TH)
#define BIT_SET_EXQ_LOW_TH(x, v)			(BIT_CLEAR_EXQ_LOW_TH(x) | BIT_EXQ_LOW_TH(v))

#define BIT_SHIFT_LPQ_HIGH_TH				8
#define BIT_MASK_LPQ_HIGH_TH				0xff
#define BIT_LPQ_HIGH_TH(x)				(((x) & BIT_MASK_LPQ_HIGH_TH) << BIT_SHIFT_LPQ_HIGH_TH)
#define BITS_LPQ_HIGH_TH				(BIT_MASK_LPQ_HIGH_TH << BIT_SHIFT_LPQ_HIGH_TH)
#define BIT_CLEAR_LPQ_HIGH_TH(x)			((x) & (~BITS_LPQ_HIGH_TH))
#define BIT_GET_LPQ_HIGH_TH(x)				(((x) >> BIT_SHIFT_LPQ_HIGH_TH) & BIT_MASK_LPQ_HIGH_TH)
#define BIT_SET_LPQ_HIGH_TH(x, v)			(BIT_CLEAR_LPQ_HIGH_TH(x) | BIT_LPQ_HIGH_TH(v))

#define BIT_SHIFT_LPQ_LOW_TH				0
#define BIT_MASK_LPQ_LOW_TH				0xff
#define BIT_LPQ_LOW_TH(x)				(((x) & BIT_MASK_LPQ_LOW_TH) << BIT_SHIFT_LPQ_LOW_TH)
#define BITS_LPQ_LOW_TH				(BIT_MASK_LPQ_LOW_TH << BIT_SHIFT_LPQ_LOW_TH)
#define BIT_CLEAR_LPQ_LOW_TH(x)			((x) & (~BITS_LPQ_LOW_TH))
#define BIT_GET_LPQ_LOW_TH(x)				(((x) >> BIT_SHIFT_LPQ_LOW_TH) & BIT_MASK_LPQ_LOW_TH)
#define BIT_SET_LPQ_LOW_TH(x, v)			(BIT_CLEAR_LPQ_LOW_TH(x) | BIT_LPQ_LOW_TH(v))

/* 2 REG_TDE_DEBUG				(Offset 0x0220) */

#define BIT_SHIFT_TDE_DEBUG				0
#define BIT_MASK_TDE_DEBUG				0xffffffffL
#define BIT_TDE_DEBUG(x)				(((x) & BIT_MASK_TDE_DEBUG) << BIT_SHIFT_TDE_DEBUG)
#define BITS_TDE_DEBUG					(BIT_MASK_TDE_DEBUG << BIT_SHIFT_TDE_DEBUG)
#define BIT_CLEAR_TDE_DEBUG(x)				((x) & (~BITS_TDE_DEBUG))
#define BIT_GET_TDE_DEBUG(x)				(((x) >> BIT_SHIFT_TDE_DEBUG) & BIT_MASK_TDE_DEBUG)
#define BIT_SET_TDE_DEBUG(x, v)			(BIT_CLEAR_TDE_DEBUG(x) | BIT_TDE_DEBUG(v))

/* 2 REG_AUTO_LLT				(Offset 0x0224) */

#define BIT_SHIFT_TXPKTNUM_H				24
#define BIT_MASK_TXPKTNUM_H				0xff
#define BIT_TXPKTNUM_H(x)				(((x) & BIT_MASK_TXPKTNUM_H) << BIT_SHIFT_TXPKTNUM_H)
#define BITS_TXPKTNUM_H				(BIT_MASK_TXPKTNUM_H << BIT_SHIFT_TXPKTNUM_H)
#define BIT_CLEAR_TXPKTNUM_H(x)			((x) & (~BITS_TXPKTNUM_H))
#define BIT_GET_TXPKTNUM_H(x)				(((x) >> BIT_SHIFT_TXPKTNUM_H) & BIT_MASK_TXPKTNUM_H)
#define BIT_SET_TXPKTNUM_H(x, v)			(BIT_CLEAR_TXPKTNUM_H(x) | BIT_TXPKTNUM_H(v))

#define BIT_TDE_DBG_SEL				BIT(23)
#define BIT_MASK_QSEL_DIFF				BIT(22)
#define BIT_AUTO_INIT_LLT				BIT(16)

#define BIT_SHIFT_TX_OQT_HE_FREE_SPACE			8
#define BIT_MASK_TX_OQT_HE_FREE_SPACE			0xff
#define BIT_TX_OQT_HE_FREE_SPACE(x)			(((x) & BIT_MASK_TX_OQT_HE_FREE_SPACE) << BIT_SHIFT_TX_OQT_HE_FREE_SPACE)
#define BITS_TX_OQT_HE_FREE_SPACE			(BIT_MASK_TX_OQT_HE_FREE_SPACE << BIT_SHIFT_TX_OQT_HE_FREE_SPACE)
#define BIT_CLEAR_TX_OQT_HE_FREE_SPACE(x)		((x) & (~BITS_TX_OQT_HE_FREE_SPACE))
#define BIT_GET_TX_OQT_HE_FREE_SPACE(x)		(((x) >> BIT_SHIFT_TX_OQT_HE_FREE_SPACE) & BIT_MASK_TX_OQT_HE_FREE_SPACE)
#define BIT_SET_TX_OQT_HE_FREE_SPACE(x, v)		(BIT_CLEAR_TX_OQT_HE_FREE_SPACE(x) | BIT_TX_OQT_HE_FREE_SPACE(v))

#define BIT_SHIFT_TX_OQT_NL_FREE_SPACE			0
#define BIT_MASK_TX_OQT_NL_FREE_SPACE			0xff
#define BIT_TX_OQT_NL_FREE_SPACE(x)			(((x) & BIT_MASK_TX_OQT_NL_FREE_SPACE) << BIT_SHIFT_TX_OQT_NL_FREE_SPACE)
#define BITS_TX_OQT_NL_FREE_SPACE			(BIT_MASK_TX_OQT_NL_FREE_SPACE << BIT_SHIFT_TX_OQT_NL_FREE_SPACE)
#define BIT_CLEAR_TX_OQT_NL_FREE_SPACE(x)		((x) & (~BITS_TX_OQT_NL_FREE_SPACE))
#define BIT_GET_TX_OQT_NL_FREE_SPACE(x)		(((x) >> BIT_SHIFT_TX_OQT_NL_FREE_SPACE) & BIT_MASK_TX_OQT_NL_FREE_SPACE)
#define BIT_SET_TX_OQT_NL_FREE_SPACE(x, v)		(BIT_CLEAR_TX_OQT_NL_FREE_SPACE(x) | BIT_TX_OQT_NL_FREE_SPACE(v))

/* 2 REG_DWBCN1_CTRL				(Offset 0x0228) */

#define BIT_SHIFT_BCN_HEAD_2				24
#define BIT_MASK_BCN_HEAD_2				0xff
#define BIT_BCN_HEAD_2(x)				(((x) & BIT_MASK_BCN_HEAD_2) << BIT_SHIFT_BCN_HEAD_2)
#define BITS_BCN_HEAD_2				(BIT_MASK_BCN_HEAD_2 << BIT_SHIFT_BCN_HEAD_2)
#define BIT_CLEAR_BCN_HEAD_2(x)			((x) & (~BITS_BCN_HEAD_2))
#define BIT_GET_BCN_HEAD_2(x)				(((x) >> BIT_SHIFT_BCN_HEAD_2) & BIT_MASK_BCN_HEAD_2)
#define BIT_SET_BCN_HEAD_2(x, v)			(BIT_CLEAR_BCN_HEAD_2(x) | BIT_BCN_HEAD_2(v))

#define BIT_SHIFT_SW_BCN_SEL				20
#define BIT_MASK_SW_BCN_SEL				0x3
#define BIT_SW_BCN_SEL(x)				(((x) & BIT_MASK_SW_BCN_SEL) << BIT_SHIFT_SW_BCN_SEL)
#define BITS_SW_BCN_SEL				(BIT_MASK_SW_BCN_SEL << BIT_SHIFT_SW_BCN_SEL)
#define BIT_CLEAR_SW_BCN_SEL(x)			((x) & (~BITS_SW_BCN_SEL))
#define BIT_GET_SW_BCN_SEL(x)				(((x) >> BIT_SHIFT_SW_BCN_SEL) & BIT_MASK_SW_BCN_SEL)
#define BIT_SET_SW_BCN_SEL(x, v)			(BIT_CLEAR_SW_BCN_SEL(x) | BIT_SW_BCN_SEL(v))

#define BIT_BCN_VALID_2				BIT(18)
#define BIT_SW_BCN_SEL_EN				BIT(17)
#define BIT_BCN_VALID_1				BIT(16)

#define BIT_SHIFT_BCN_HEAD_1				8
#define BIT_MASK_BCN_HEAD_1				0xff
#define BIT_BCN_HEAD_1(x)				(((x) & BIT_MASK_BCN_HEAD_1) << BIT_SHIFT_BCN_HEAD_1)
#define BITS_BCN_HEAD_1				(BIT_MASK_BCN_HEAD_1 << BIT_SHIFT_BCN_HEAD_1)
#define BIT_CLEAR_BCN_HEAD_1(x)			((x) & (~BITS_BCN_HEAD_1))
#define BIT_GET_BCN_HEAD_1(x)				(((x) >> BIT_SHIFT_BCN_HEAD_1) & BIT_MASK_BCN_HEAD_1)
#define BIT_SET_BCN_HEAD_1(x, v)			(BIT_CLEAR_BCN_HEAD_1(x) | BIT_BCN_HEAD_1(v))

#define BIT_SHIFT_MAX_TX_PKT				0
#define BIT_MASK_MAX_TX_PKT				0xff
#define BIT_MAX_TX_PKT(x)				(((x) & BIT_MASK_MAX_TX_PKT) << BIT_SHIFT_MAX_TX_PKT)
#define BITS_MAX_TX_PKT				(BIT_MASK_MAX_TX_PKT << BIT_SHIFT_MAX_TX_PKT)
#define BIT_CLEAR_MAX_TX_PKT(x)			((x) & (~BITS_MAX_TX_PKT))
#define BIT_GET_MAX_TX_PKT(x)				(((x) >> BIT_SHIFT_MAX_TX_PKT) & BIT_MASK_MAX_TX_PKT)
#define BIT_SET_MAX_TX_PKT(x, v)			(BIT_CLEAR_MAX_TX_PKT(x) | BIT_MAX_TX_PKT(v))

/* 2 REG_TX_ALIGNMENT_CTRL			(Offset 0x022C) */

#define BIT_ADJUSTABLE_SIZE_EN				BIT(15)

#define BIT_SHIFT_ALIGNMENT_SIZE			0
#define BIT_MASK_ALIGNMENT_SIZE			0xfff
#define BIT_ALIGNMENT_SIZE(x)				(((x) & BIT_MASK_ALIGNMENT_SIZE) << BIT_SHIFT_ALIGNMENT_SIZE)
#define BITS_ALIGNMENT_SIZE				(BIT_MASK_ALIGNMENT_SIZE << BIT_SHIFT_ALIGNMENT_SIZE)
#define BIT_CLEAR_ALIGNMENT_SIZE(x)			((x) & (~BITS_ALIGNMENT_SIZE))
#define BIT_GET_ALIGNMENT_SIZE(x)			(((x) >> BIT_SHIFT_ALIGNMENT_SIZE) & BIT_MASK_ALIGNMENT_SIZE)
#define BIT_SET_ALIGNMENT_SIZE(x, v)			(BIT_CLEAR_ALIGNMENT_SIZE(x) | BIT_ALIGNMENT_SIZE(v))

/* 2 REG_TDE_GCK_CTRL			(Offset 0x0230) */

#define BIT_SHIFT_TDE_GCLK_DLY_CNT			2
#define BIT_MASK_TDE_GCLK_DLY_CNT			0x1f
#define BIT_TDE_GCLK_DLY_CNT(x)			(((x) & BIT_MASK_TDE_GCLK_DLY_CNT) << BIT_SHIFT_TDE_GCLK_DLY_CNT)
#define BITS_TDE_GCLK_DLY_CNT				(BIT_MASK_TDE_GCLK_DLY_CNT << BIT_SHIFT_TDE_GCLK_DLY_CNT)
#define BIT_CLEAR_TDE_GCLK_DLY_CNT(x)			((x) & (~BITS_TDE_GCLK_DLY_CNT))
#define BIT_GET_TDE_GCLK_DLY_CNT(x)			(((x) >> BIT_SHIFT_TDE_GCLK_DLY_CNT) & BIT_MASK_TDE_GCLK_DLY_CNT)
#define BIT_SET_TDE_GCLK_DLY_CNT(x, v)			(BIT_CLEAR_TDE_GCLK_DLY_CNT(x) | BIT_TDE_GCLK_DLY_CNT(v))

#define BIT_DMA_WAIT_MORE_CYCLE			BIT(1)
#define BIT_TDE_GCLK_EN				BIT(0)

/* 2 REG_RXDMA_AGG_PG_TH			(Offset 0x0280) */

#define BIT_RXDMA_STORE				BIT(31)
#define BIT_EN_PRE_CALC				BIT(29)

#define BIT_SHIFT_PKT_NUM_WOL				16
#define BIT_MASK_PKT_NUM_WOL				0xff
#define BIT_PKT_NUM_WOL(x)				(((x) & BIT_MASK_PKT_NUM_WOL) << BIT_SHIFT_PKT_NUM_WOL)
#define BITS_PKT_NUM_WOL				(BIT_MASK_PKT_NUM_WOL << BIT_SHIFT_PKT_NUM_WOL)
#define BIT_CLEAR_PKT_NUM_WOL(x)			((x) & (~BITS_PKT_NUM_WOL))
#define BIT_GET_PKT_NUM_WOL(x)				(((x) >> BIT_SHIFT_PKT_NUM_WOL) & BIT_MASK_PKT_NUM_WOL)
#define BIT_SET_PKT_NUM_WOL(x, v)			(BIT_CLEAR_PKT_NUM_WOL(x) | BIT_PKT_NUM_WOL(v))

#define BIT_SHIFT_DMA_TIMEOUT_TH			8
#define BIT_MASK_DMA_TIMEOUT_TH			0xff
#define BIT_DMA_TIMEOUT_TH(x)				(((x) & BIT_MASK_DMA_TIMEOUT_TH) << BIT_SHIFT_DMA_TIMEOUT_TH)
#define BITS_DMA_TIMEOUT_TH				(BIT_MASK_DMA_TIMEOUT_TH << BIT_SHIFT_DMA_TIMEOUT_TH)
#define BIT_CLEAR_DMA_TIMEOUT_TH(x)			((x) & (~BITS_DMA_TIMEOUT_TH))
#define BIT_GET_DMA_TIMEOUT_TH(x)			(((x) >> BIT_SHIFT_DMA_TIMEOUT_TH) & BIT_MASK_DMA_TIMEOUT_TH)
#define BIT_SET_DMA_TIMEOUT_TH(x, v)			(BIT_CLEAR_DMA_TIMEOUT_TH(x) | BIT_DMA_TIMEOUT_TH(v))

#define BIT_SHIFT_RXDMA_AGG_PG_TH			0
#define BIT_MASK_RXDMA_AGG_PG_TH			0xff
#define BIT_RXDMA_AGG_PG_TH(x)				(((x) & BIT_MASK_RXDMA_AGG_PG_TH) << BIT_SHIFT_RXDMA_AGG_PG_TH)
#define BITS_RXDMA_AGG_PG_TH				(BIT_MASK_RXDMA_AGG_PG_TH << BIT_SHIFT_RXDMA_AGG_PG_TH)
#define BIT_CLEAR_RXDMA_AGG_PG_TH(x)			((x) & (~BITS_RXDMA_AGG_PG_TH))
#define BIT_GET_RXDMA_AGG_PG_TH(x)			(((x) >> BIT_SHIFT_RXDMA_AGG_PG_TH) & BIT_MASK_RXDMA_AGG_PG_TH)
#define BIT_SET_RXDMA_AGG_PG_TH(x, v)			(BIT_CLEAR_RXDMA_AGG_PG_TH(x) | BIT_RXDMA_AGG_PG_TH(v))

/* 2 REG_RXPKT_NUM				(Offset 0x0284) */

#define BIT_SHIFT_RXPKT_QUEUED				24
#define BIT_MASK_RXPKT_QUEUED				0xff
#define BIT_RXPKT_QUEUED(x)				(((x) & BIT_MASK_RXPKT_QUEUED) << BIT_SHIFT_RXPKT_QUEUED)
#define BITS_RXPKT_QUEUED				(BIT_MASK_RXPKT_QUEUED << BIT_SHIFT_RXPKT_QUEUED)
#define BIT_CLEAR_RXPKT_QUEUED(x)			((x) & (~BITS_RXPKT_QUEUED))
#define BIT_GET_RXPKT_QUEUED(x)			(((x) >> BIT_SHIFT_RXPKT_QUEUED) & BIT_MASK_RXPKT_QUEUED)
#define BIT_SET_RXPKT_QUEUED(x, v)			(BIT_CLEAR_RXPKT_QUEUED(x) | BIT_RXPKT_QUEUED(v))

#define BIT_WMACSTOP_RXDMA				BIT(20)
#define BIT_RXDMA_REQ					BIT(19)
#define BIT_FW_RELEASE_EN				BIT(18)
#define BIT_RXDMA_IDLE					BIT(17)
#define BIT_RXPKT_RELEASE_POLL				BIT(16)

#define BIT_SHIFT_FW_UPD_RXPKT_RDPTR			0
#define BIT_MASK_FW_UPD_RXPKT_RDPTR			0xffff
#define BIT_FW_UPD_RXPKT_RDPTR(x)			(((x) & BIT_MASK_FW_UPD_RXPKT_RDPTR) << BIT_SHIFT_FW_UPD_RXPKT_RDPTR)
#define BITS_FW_UPD_RXPKT_RDPTR			(BIT_MASK_FW_UPD_RXPKT_RDPTR << BIT_SHIFT_FW_UPD_RXPKT_RDPTR)
#define BIT_CLEAR_FW_UPD_RXPKT_RDPTR(x)		((x) & (~BITS_FW_UPD_RXPKT_RDPTR))
#define BIT_GET_FW_UPD_RXPKT_RDPTR(x)			(((x) >> BIT_SHIFT_FW_UPD_RXPKT_RDPTR) & BIT_MASK_FW_UPD_RXPKT_RDPTR)
#define BIT_SET_FW_UPD_RXPKT_RDPTR(x, v)		(BIT_CLEAR_FW_UPD_RXPKT_RDPTR(x) | BIT_FW_UPD_RXPKT_RDPTR(v))

/* 2 REG_RXDMA_STATUS			(Offset 0x0288) */

#define BIT_C2H_PKT_OVF				BIT(7)
#define BIT_AGG_CONFGI_ISSUE				BIT(6)
#define BIT_FW_POLL_ISSUE				BIT(5)
#define BIT_RX_DATA_UDN				BIT(4)
#define BIT_RX_SFF_UDN					BIT(3)
#define BIT_RX_SFF_OVF					BIT(2)
#define BIT_RXPKT_OVF					BIT(0)

/* 2 REG_RXDMA_DPR				(Offset 0x028C) */

#define BIT_SHIFT_RDE_DBG				0
#define BIT_MASK_RDE_DBG				0xffffffffL
#define BIT_RDE_DBG(x)					(((x) & BIT_MASK_RDE_DBG) << BIT_SHIFT_RDE_DBG)
#define BITS_RDE_DBG					(BIT_MASK_RDE_DBG << BIT_SHIFT_RDE_DBG)
#define BIT_CLEAR_RDE_DBG(x)				((x) & (~BITS_RDE_DBG))
#define BIT_GET_RDE_DBG(x)				(((x) >> BIT_SHIFT_RDE_DBG) & BIT_MASK_RDE_DBG)
#define BIT_SET_RDE_DBG(x, v)				(BIT_CLEAR_RDE_DBG(x) | BIT_RDE_DBG(v))

/* 2 REG_RXDMA_MODE				(Offset 0x0290) */

#define BIT_RXDMA_GCLK_EN				BIT(6)

#define BIT_SHIFT_BURST_SIZE				4
#define BIT_MASK_BURST_SIZE				0x3
#define BIT_BURST_SIZE(x)				(((x) & BIT_MASK_BURST_SIZE) << BIT_SHIFT_BURST_SIZE)
#define BITS_BURST_SIZE				(BIT_MASK_BURST_SIZE << BIT_SHIFT_BURST_SIZE)
#define BIT_CLEAR_BURST_SIZE(x)			((x) & (~BITS_BURST_SIZE))
#define BIT_GET_BURST_SIZE(x)				(((x) >> BIT_SHIFT_BURST_SIZE) & BIT_MASK_BURST_SIZE)
#define BIT_SET_BURST_SIZE(x, v)			(BIT_CLEAR_BURST_SIZE(x) | BIT_BURST_SIZE(v))

#define BIT_SHIFT_BURST_CNT				2
#define BIT_MASK_BURST_CNT				0x3
#define BIT_BURST_CNT(x)				(((x) & BIT_MASK_BURST_CNT) << BIT_SHIFT_BURST_CNT)
#define BITS_BURST_CNT					(BIT_MASK_BURST_CNT << BIT_SHIFT_BURST_CNT)
#define BIT_CLEAR_BURST_CNT(x)				((x) & (~BITS_BURST_CNT))
#define BIT_GET_BURST_CNT(x)				(((x) >> BIT_SHIFT_BURST_CNT) & BIT_MASK_BURST_CNT)
#define BIT_SET_BURST_CNT(x, v)			(BIT_CLEAR_BURST_CNT(x) | BIT_BURST_CNT(v))

#define BIT_DMA_MODE					BIT(1)
#define BIT_MASK_RX_PKT_PS				BIT(0)

/* 2 REG_C2H_PKT				(Offset 0x0294) */

#define BIT_R_C2H_PKT_REQ				BIT(16)

#define BIT_SHIFT_R_C2H_STR_ADDR			0
#define BIT_MASK_R_C2H_STR_ADDR			0xffff
#define BIT_R_C2H_STR_ADDR(x)				(((x) & BIT_MASK_R_C2H_STR_ADDR) << BIT_SHIFT_R_C2H_STR_ADDR)
#define BITS_R_C2H_STR_ADDR				(BIT_MASK_R_C2H_STR_ADDR << BIT_SHIFT_R_C2H_STR_ADDR)
#define BIT_CLEAR_R_C2H_STR_ADDR(x)			((x) & (~BITS_R_C2H_STR_ADDR))
#define BIT_GET_R_C2H_STR_ADDR(x)			(((x) >> BIT_SHIFT_R_C2H_STR_ADDR) & BIT_MASK_R_C2H_STR_ADDR)
#define BIT_SET_R_C2H_STR_ADDR(x, v)			(BIT_CLEAR_R_C2H_STR_ADDR(x) | BIT_R_C2H_STR_ADDR(v))

/* 2 REG_AXI_CTRL				(Offset 0x0300) */

#define BIT_SHIFT_MAX_RXDMA				28
#define BIT_MASK_MAX_RXDMA				0x3
#define BIT_MAX_RXDMA(x)				(((x) & BIT_MASK_MAX_RXDMA) << BIT_SHIFT_MAX_RXDMA)
#define BITS_MAX_RXDMA					(BIT_MASK_MAX_RXDMA << BIT_SHIFT_MAX_RXDMA)
#define BIT_CLEAR_MAX_RXDMA(x)				((x) & (~BITS_MAX_RXDMA))
#define BIT_GET_MAX_RXDMA(x)				(((x) >> BIT_SHIFT_MAX_RXDMA) & BIT_MASK_MAX_RXDMA)
#define BIT_SET_MAX_RXDMA(x, v)			(BIT_CLEAR_MAX_RXDMA(x) | BIT_MAX_RXDMA(v))

#define BIT_SHIFT_MAX_TXDMA				24
#define BIT_MASK_MAX_TXDMA				0x3
#define BIT_MAX_TXDMA(x)				(((x) & BIT_MASK_MAX_TXDMA) << BIT_SHIFT_MAX_TXDMA)
#define BITS_MAX_TXDMA					(BIT_MASK_MAX_TXDMA << BIT_SHIFT_MAX_TXDMA)
#define BIT_CLEAR_MAX_TXDMA(x)				((x) & (~BITS_MAX_TXDMA))
#define BIT_GET_MAX_TXDMA(x)				(((x) >> BIT_SHIFT_MAX_TXDMA) & BIT_MASK_MAX_TXDMA)
#define BIT_SET_MAX_TXDMA(x, v)			(BIT_CLEAR_MAX_TXDMA(x) | BIT_MAX_TXDMA(v))

#define BIT_REG_TXDMA_FAIL_PS				BIT(21)
#define BIT_MBSSID_ENSWBCN_BACKDOOR			BIT(16)
#define BIT_EN_WT_RXTAG				BIT(15)
#define BIT_STOPBCN					BIT(14)
#define BIT_STOPMG					BIT(13)
#define BIT_STOPVO					BIT(12)
#define BIT_STOPVI					BIT(11)
#define BIT_STOPBE					BIT(10)
#define BIT_STOPBK					BIT(9)
#define BIT_STOPRX					BIT(8)

#define BIT_SHIFT_MQ_STOP				0
#define BIT_MASK_MQ_STOP				0xff
#define BIT_MQ_STOP(x)					(((x) & BIT_MASK_MQ_STOP) << BIT_SHIFT_MQ_STOP)
#define BITS_MQ_STOP					(BIT_MASK_MQ_STOP << BIT_SHIFT_MQ_STOP)
#define BIT_CLEAR_MQ_STOP(x)				((x) & (~BITS_MQ_STOP))
#define BIT_GET_MQ_STOP(x)				(((x) >> BIT_SHIFT_MQ_STOP) & BIT_MASK_MQ_STOP)
#define BIT_SET_MQ_STOP(x, v)				(BIT_CLEAR_MQ_STOP(x) | BIT_MQ_STOP(v))

/* 2 REG_INT_MIG				(Offset 0x0304) */

#define BIT_SHIFT_TTMRMIT				28
#define BIT_MASK_TTMRMIT				0xf
#define BIT_TTMRMIT(x)					(((x) & BIT_MASK_TTMRMIT) << BIT_SHIFT_TTMRMIT)
#define BITS_TTMRMIT					(BIT_MASK_TTMRMIT << BIT_SHIFT_TTMRMIT)
#define BIT_CLEAR_TTMRMIT(x)				((x) & (~BITS_TTMRMIT))
#define BIT_GET_TTMRMIT(x)				(((x) >> BIT_SHIFT_TTMRMIT) & BIT_MASK_TTMRMIT)
#define BIT_SET_TTMRMIT(x, v)				(BIT_CLEAR_TTMRMIT(x) | BIT_TTMRMIT(v))

#define BIT_SHIFT_TNUMMIT				24
#define BIT_MASK_TNUMMIT				0xf
#define BIT_TNUMMIT(x)					(((x) & BIT_MASK_TNUMMIT) << BIT_SHIFT_TNUMMIT)
#define BITS_TNUMMIT					(BIT_MASK_TNUMMIT << BIT_SHIFT_TNUMMIT)
#define BIT_CLEAR_TNUMMIT(x)				((x) & (~BITS_TNUMMIT))
#define BIT_GET_TNUMMIT(x)				(((x) >> BIT_SHIFT_TNUMMIT) & BIT_MASK_TNUMMIT)
#define BIT_SET_TNUMMIT(x, v)				(BIT_CLEAR_TNUMMIT(x) | BIT_TNUMMIT(v))

#define BIT_SHIFT_RTMRMIT				20
#define BIT_MASK_RTMRMIT				0xf
#define BIT_RTMRMIT(x)					(((x) & BIT_MASK_RTMRMIT) << BIT_SHIFT_RTMRMIT)
#define BITS_RTMRMIT					(BIT_MASK_RTMRMIT << BIT_SHIFT_RTMRMIT)
#define BIT_CLEAR_RTMRMIT(x)				((x) & (~BITS_RTMRMIT))
#define BIT_GET_RTMRMIT(x)				(((x) >> BIT_SHIFT_RTMRMIT) & BIT_MASK_RTMRMIT)
#define BIT_SET_RTMRMIT(x, v)				(BIT_CLEAR_RTMRMIT(x) | BIT_RTMRMIT(v))

#define BIT_SHIFT_RNUMMIT				16
#define BIT_MASK_RNUMMIT				0xf
#define BIT_RNUMMIT(x)					(((x) & BIT_MASK_RNUMMIT) << BIT_SHIFT_RNUMMIT)
#define BITS_RNUMMIT					(BIT_MASK_RNUMMIT << BIT_SHIFT_RNUMMIT)
#define BIT_CLEAR_RNUMMIT(x)				((x) & (~BITS_RNUMMIT))
#define BIT_GET_RNUMMIT(x)				(((x) >> BIT_SHIFT_RNUMMIT) & BIT_MASK_RNUMMIT)
#define BIT_SET_RNUMMIT(x, v)				(BIT_CLEAR_RNUMMIT(x) | BIT_RNUMMIT(v))

#define BIT_SHIFT_MIGRATE_TIMER			0
#define BIT_MASK_MIGRATE_TIMER				0xffff
#define BIT_MIGRATE_TIMER(x)				(((x) & BIT_MASK_MIGRATE_TIMER) << BIT_SHIFT_MIGRATE_TIMER)
#define BITS_MIGRATE_TIMER				(BIT_MASK_MIGRATE_TIMER << BIT_SHIFT_MIGRATE_TIMER)
#define BIT_CLEAR_MIGRATE_TIMER(x)			((x) & (~BITS_MIGRATE_TIMER))
#define BIT_GET_MIGRATE_TIMER(x)			(((x) >> BIT_SHIFT_MIGRATE_TIMER) & BIT_MASK_MIGRATE_TIMER)
#define BIT_SET_MIGRATE_TIMER(x, v)			(BIT_CLEAR_MIGRATE_TIMER(x) | BIT_MIGRATE_TIMER(v))

/* 2 REG_BCNQ_TXBD_DESA			(Offset 0x0308) */

#define BIT_SHIFT_BPQDESA				0
#define BIT_MASK_BPQDESA				0xffffffffL
#define BIT_BPQDESA(x)					(((x) & BIT_MASK_BPQDESA) << BIT_SHIFT_BPQDESA)
#define BITS_BPQDESA					(BIT_MASK_BPQDESA << BIT_SHIFT_BPQDESA)
#define BIT_CLEAR_BPQDESA(x)				((x) & (~BITS_BPQDESA))
#define BIT_GET_BPQDESA(x)				(((x) >> BIT_SHIFT_BPQDESA) & BIT_MASK_BPQDESA)
#define BIT_SET_BPQDESA(x, v)				(BIT_CLEAR_BPQDESA(x) | BIT_BPQDESA(v))

/* 2 REG_MGQ_TXBD_DESA			(Offset 0x0310) */

#define BIT_SHIFT_MGQDESA				0
#define BIT_MASK_MGQDESA				0xffffffffL
#define BIT_MGQDESA(x)					(((x) & BIT_MASK_MGQDESA) << BIT_SHIFT_MGQDESA)
#define BITS_MGQDESA					(BIT_MASK_MGQDESA << BIT_SHIFT_MGQDESA)
#define BIT_CLEAR_MGQDESA(x)				((x) & (~BITS_MGQDESA))
#define BIT_GET_MGQDESA(x)				(((x) >> BIT_SHIFT_MGQDESA) & BIT_MASK_MGQDESA)
#define BIT_SET_MGQDESA(x, v)				(BIT_CLEAR_MGQDESA(x) | BIT_MGQDESA(v))

/* 2 REG_VOQ_TXBD_DESA			(Offset 0x0318) */

#define BIT_SHIFT_VOQDESA				0
#define BIT_MASK_VOQDESA				0xffffffffL
#define BIT_VOQDESA(x)					(((x) & BIT_MASK_VOQDESA) << BIT_SHIFT_VOQDESA)
#define BITS_VOQDESA					(BIT_MASK_VOQDESA << BIT_SHIFT_VOQDESA)
#define BIT_CLEAR_VOQDESA(x)				((x) & (~BITS_VOQDESA))
#define BIT_GET_VOQDESA(x)				(((x) >> BIT_SHIFT_VOQDESA) & BIT_MASK_VOQDESA)
#define BIT_SET_VOQDESA(x, v)				(BIT_CLEAR_VOQDESA(x) | BIT_VOQDESA(v))

/* 2 REG_VIQ_TXBD_DESA			(Offset 0x0320) */

#define BIT_SHIFT_VIQDESA				0
#define BIT_MASK_VIQDESA				0xffffffffL
#define BIT_VIQDESA(x)					(((x) & BIT_MASK_VIQDESA) << BIT_SHIFT_VIQDESA)
#define BITS_VIQDESA					(BIT_MASK_VIQDESA << BIT_SHIFT_VIQDESA)
#define BIT_CLEAR_VIQDESA(x)				((x) & (~BITS_VIQDESA))
#define BIT_GET_VIQDESA(x)				(((x) >> BIT_SHIFT_VIQDESA) & BIT_MASK_VIQDESA)
#define BIT_SET_VIQDESA(x, v)				(BIT_CLEAR_VIQDESA(x) | BIT_VIQDESA(v))

/* 2 REG_BEQ_TXBD_DESA			(Offset 0x0328) */

#define BIT_SHIFT_BEQDESA				0
#define BIT_MASK_BEQDESA				0xffffffffL
#define BIT_BEQDESA(x)					(((x) & BIT_MASK_BEQDESA) << BIT_SHIFT_BEQDESA)
#define BITS_BEQDESA					(BIT_MASK_BEQDESA << BIT_SHIFT_BEQDESA)
#define BIT_CLEAR_BEQDESA(x)				((x) & (~BITS_BEQDESA))
#define BIT_GET_BEQDESA(x)				(((x) >> BIT_SHIFT_BEQDESA) & BIT_MASK_BEQDESA)
#define BIT_SET_BEQDESA(x, v)				(BIT_CLEAR_BEQDESA(x) | BIT_BEQDESA(v))

/* 2 REG_BKQ_TXBD_DESA			(Offset 0x0330) */

#define BIT_SHIFT_BKQDESA				0
#define BIT_MASK_BKQDESA				0xffffffffL
#define BIT_BKQDESA(x)					(((x) & BIT_MASK_BKQDESA) << BIT_SHIFT_BKQDESA)
#define BITS_BKQDESA					(BIT_MASK_BKQDESA << BIT_SHIFT_BKQDESA)
#define BIT_CLEAR_BKQDESA(x)				((x) & (~BITS_BKQDESA))
#define BIT_GET_BKQDESA(x)				(((x) >> BIT_SHIFT_BKQDESA) & BIT_MASK_BKQDESA)
#define BIT_SET_BKQDESA(x, v)				(BIT_CLEAR_BKQDESA(x) | BIT_BKQDESA(v))

/* 2 REG_RXQ_RXBD_DESA			(Offset 0x0338) */

#define BIT_SHIFT_RXNRML_DESA				0
#define BIT_MASK_RXNRML_DESA				0xffffffffL
#define BIT_RXNRML_DESA(x)				(((x) & BIT_MASK_RXNRML_DESA) << BIT_SHIFT_RXNRML_DESA)
#define BITS_RXNRML_DESA				(BIT_MASK_RXNRML_DESA << BIT_SHIFT_RXNRML_DESA)
#define BIT_CLEAR_RXNRML_DESA(x)			((x) & (~BITS_RXNRML_DESA))
#define BIT_GET_RXNRML_DESA(x)				(((x) >> BIT_SHIFT_RXNRML_DESA) & BIT_MASK_RXNRML_DESA)
#define BIT_SET_RXNRML_DESA(x, v)			(BIT_CLEAR_RXNRML_DESA(x) | BIT_RXNRML_DESA(v))

/* 2 REG_MQ0_TXBD_DESA			(Offset 0x0340) */

#define BIT_SHIFT_MQ0DESA				0
#define BIT_MASK_MQ0DESA				0xffffffffL
#define BIT_MQ0DESA(x)					(((x) & BIT_MASK_MQ0DESA) << BIT_SHIFT_MQ0DESA)
#define BITS_MQ0DESA					(BIT_MASK_MQ0DESA << BIT_SHIFT_MQ0DESA)
#define BIT_CLEAR_MQ0DESA(x)				((x) & (~BITS_MQ0DESA))
#define BIT_GET_MQ0DESA(x)				(((x) >> BIT_SHIFT_MQ0DESA) & BIT_MASK_MQ0DESA)
#define BIT_SET_MQ0DESA(x, v)				(BIT_CLEAR_MQ0DESA(x) | BIT_MQ0DESA(v))

/* 2 REG_MQ1_TXBD_DESA			(Offset 0x0348) */

#define BIT_SHIFT_MQ1DESA				0
#define BIT_MASK_MQ1DESA				0xffffffffL
#define BIT_MQ1DESA(x)					(((x) & BIT_MASK_MQ1DESA) << BIT_SHIFT_MQ1DESA)
#define BITS_MQ1DESA					(BIT_MASK_MQ1DESA << BIT_SHIFT_MQ1DESA)
#define BIT_CLEAR_MQ1DESA(x)				((x) & (~BITS_MQ1DESA))
#define BIT_GET_MQ1DESA(x)				(((x) >> BIT_SHIFT_MQ1DESA) & BIT_MASK_MQ1DESA)
#define BIT_SET_MQ1DESA(x, v)				(BIT_CLEAR_MQ1DESA(x) | BIT_MQ1DESA(v))

/* 2 REG_MQ2_TXBD_DESA			(Offset 0x0350) */

#define BIT_SHIFT_MQ2DESA				0
#define BIT_MASK_MQ2DESA				0xffffffffL
#define BIT_MQ2DESA(x)					(((x) & BIT_MASK_MQ2DESA) << BIT_SHIFT_MQ2DESA)
#define BITS_MQ2DESA					(BIT_MASK_MQ2DESA << BIT_SHIFT_MQ2DESA)
#define BIT_CLEAR_MQ2DESA(x)				((x) & (~BITS_MQ2DESA))
#define BIT_GET_MQ2DESA(x)				(((x) >> BIT_SHIFT_MQ2DESA) & BIT_MASK_MQ2DESA)
#define BIT_SET_MQ2DESA(x, v)				(BIT_CLEAR_MQ2DESA(x) | BIT_MQ2DESA(v))

/* 2 REG_MQ3_TXBD_DESA			(Offset 0x0358) */

#define BIT_SHIFT_MQ3DESA				0
#define BIT_MASK_MQ3DESA				0xffffffffL
#define BIT_MQ3DESA(x)					(((x) & BIT_MASK_MQ3DESA) << BIT_SHIFT_MQ3DESA)
#define BITS_MQ3DESA					(BIT_MASK_MQ3DESA << BIT_SHIFT_MQ3DESA)
#define BIT_CLEAR_MQ3DESA(x)				((x) & (~BITS_MQ3DESA))
#define BIT_GET_MQ3DESA(x)				(((x) >> BIT_SHIFT_MQ3DESA) & BIT_MASK_MQ3DESA)
#define BIT_SET_MQ3DESA(x, v)				(BIT_CLEAR_MQ3DESA(x) | BIT_MQ3DESA(v))

/* 2 REG_MQ4_TXBD_DESA			(Offset 0x0360) */

#define BIT_SHIFT_MQ4DESA				0
#define BIT_MASK_MQ4DESA				0xffffffffL
#define BIT_MQ4DESA(x)					(((x) & BIT_MASK_MQ4DESA) << BIT_SHIFT_MQ4DESA)
#define BITS_MQ4DESA					(BIT_MASK_MQ4DESA << BIT_SHIFT_MQ4DESA)
#define BIT_CLEAR_MQ4DESA(x)				((x) & (~BITS_MQ4DESA))
#define BIT_GET_MQ4DESA(x)				(((x) >> BIT_SHIFT_MQ4DESA) & BIT_MASK_MQ4DESA)
#define BIT_SET_MQ4DESA(x, v)				(BIT_CLEAR_MQ4DESA(x) | BIT_MQ4DESA(v))

/* 2 REG_MQ5_TXBD_DESA			(Offset 0x0368) */

#define BIT_SHIFT_MQ5DESA				0
#define BIT_MASK_MQ5DESA				0xffffffffL
#define BIT_MQ5DESA(x)					(((x) & BIT_MASK_MQ5DESA) << BIT_SHIFT_MQ5DESA)
#define BITS_MQ5DESA					(BIT_MASK_MQ5DESA << BIT_SHIFT_MQ5DESA)
#define BIT_CLEAR_MQ5DESA(x)				((x) & (~BITS_MQ5DESA))
#define BIT_GET_MQ5DESA(x)				(((x) >> BIT_SHIFT_MQ5DESA) & BIT_MASK_MQ5DESA)
#define BIT_SET_MQ5DESA(x, v)				(BIT_CLEAR_MQ5DESA(x) | BIT_MQ5DESA(v))

/* 2 REG_MQ6_TXBD_DESA			(Offset 0x0370) */

#define BIT_SHIFT_MQ6DESA				0
#define BIT_MASK_MQ6DESA				0xffffffffL
#define BIT_MQ6DESA(x)					(((x) & BIT_MASK_MQ6DESA) << BIT_SHIFT_MQ6DESA)
#define BITS_MQ6DESA					(BIT_MASK_MQ6DESA << BIT_SHIFT_MQ6DESA)
#define BIT_CLEAR_MQ6DESA(x)				((x) & (~BITS_MQ6DESA))
#define BIT_GET_MQ6DESA(x)				(((x) >> BIT_SHIFT_MQ6DESA) & BIT_MASK_MQ6DESA)
#define BIT_SET_MQ6DESA(x, v)				(BIT_CLEAR_MQ6DESA(x) | BIT_MQ6DESA(v))

/* 2 REG_MQ7_TXBD_DESA			(Offset 0x0378) */

#define BIT_SHIFT_MQ7DESA				0
#define BIT_MASK_MQ7DESA				0xffffffffL
#define BIT_MQ7DESA(x)					(((x) & BIT_MASK_MQ7DESA) << BIT_SHIFT_MQ7DESA)
#define BITS_MQ7DESA					(BIT_MASK_MQ7DESA << BIT_SHIFT_MQ7DESA)
#define BIT_CLEAR_MQ7DESA(x)				((x) & (~BITS_MQ7DESA))
#define BIT_GET_MQ7DESA(x)				(((x) >> BIT_SHIFT_MQ7DESA) & BIT_MASK_MQ7DESA)
#define BIT_SET_MQ7DESA(x, v)				(BIT_CLEAR_MQ7DESA(x) | BIT_MQ7DESA(v))

/* 2 REG_MGQ_TXBD_RX_RXBD_NUM		(Offset 0x0380) */

#define BIT_POLL_BCNQ					BIT(12)

#define BIT_SHIFT_BCNQ_DESC_MODE			29
#define BIT_MASK_BCNQ_DESC_MODE			0x3
#define BIT_BCNQ_DESC_MODE(x)				(((x) & BIT_MASK_BCNQ_DESC_MODE) << BIT_SHIFT_BCNQ_DESC_MODE)
#define BITS_BCNQ_DESC_MODE				(BIT_MASK_BCNQ_DESC_MODE << BIT_SHIFT_BCNQ_DESC_MODE)
#define BIT_CLEAR_BCNQ_DESC_MODE(x)			((x) & (~BITS_BCNQ_DESC_MODE))
#define BIT_GET_BCNQ_DESC_MODE(x)			(((x) >> BIT_SHIFT_BCNQ_DESC_MODE) & BIT_MASK_BCNQ_DESC_MODE)
#define BIT_SET_BCNQ_DESC_MODE(x, v)			(BIT_CLEAR_BCNQ_DESC_MODE(x) | BIT_BCNQ_DESC_MODE(v))

#define BIT_BCNQ_FLAG					BIT(28)

#define BIT_SHIFT_RXDES_NUM				16
#define BIT_MASK_RXDES_NUM				0xfff
#define BIT_RXDES_NUM(x)				(((x) & BIT_MASK_RXDES_NUM) << BIT_SHIFT_RXDES_NUM)
#define BITS_RXDES_NUM					(BIT_MASK_RXDES_NUM << BIT_SHIFT_RXDES_NUM)
#define BIT_CLEAR_RXDES_NUM(x)				((x) & (~BITS_RXDES_NUM))
#define BIT_GET_RXDES_NUM(x)				(((x) >> BIT_SHIFT_RXDES_NUM) & BIT_MASK_RXDES_NUM)
#define BIT_SET_RXDES_NUM(x, v)			(BIT_CLEAR_RXDES_NUM(x) | BIT_RXDES_NUM(v))

#define BIT_MGQ_FLAG					BIT(14)

#define BIT_SHIFT_MGQ_DESC_MODE			12
#define BIT_MASK_MGQ_DESC_MODE				0x3
#define BIT_MGQ_DESC_MODE(x)				(((x) & BIT_MASK_MGQ_DESC_MODE) << BIT_SHIFT_MGQ_DESC_MODE)
#define BITS_MGQ_DESC_MODE				(BIT_MASK_MGQ_DESC_MODE << BIT_SHIFT_MGQ_DESC_MODE)
#define BIT_CLEAR_MGQ_DESC_MODE(x)			((x) & (~BITS_MGQ_DESC_MODE))
#define BIT_GET_MGQ_DESC_MODE(x)			(((x) >> BIT_SHIFT_MGQ_DESC_MODE) & BIT_MASK_MGQ_DESC_MODE)
#define BIT_SET_MGQ_DESC_MODE(x, v)			(BIT_CLEAR_MGQ_DESC_MODE(x) | BIT_MGQ_DESC_MODE(v))

#define BIT_SHIFT_MGQDES_NUM				0
#define BIT_MASK_MGQDES_NUM				0xfff
#define BIT_MGQDES_NUM(x)				(((x) & BIT_MASK_MGQDES_NUM) << BIT_SHIFT_MGQDES_NUM)
#define BITS_MGQDES_NUM				(BIT_MASK_MGQDES_NUM << BIT_SHIFT_MGQDES_NUM)
#define BIT_CLEAR_MGQDES_NUM(x)			((x) & (~BITS_MGQDES_NUM))
#define BIT_GET_MGQDES_NUM(x)				(((x) >> BIT_SHIFT_MGQDES_NUM) & BIT_MASK_MGQDES_NUM)
#define BIT_SET_MGQDES_NUM(x, v)			(BIT_CLEAR_MGQDES_NUM(x) | BIT_MGQDES_NUM(v))

/* 2 REG_VOQ_VIQ_TXBD_NUM			(Offset 0x0384) */

#define BIT_VIQ_FLAG					BIT(30)

#define BIT_SHIFT_VIQ_DESC_MODE			28
#define BIT_MASK_VIQ_DESC_MODE				0x3
#define BIT_VIQ_DESC_MODE(x)				(((x) & BIT_MASK_VIQ_DESC_MODE) << BIT_SHIFT_VIQ_DESC_MODE)
#define BITS_VIQ_DESC_MODE				(BIT_MASK_VIQ_DESC_MODE << BIT_SHIFT_VIQ_DESC_MODE)
#define BIT_CLEAR_VIQ_DESC_MODE(x)			((x) & (~BITS_VIQ_DESC_MODE))
#define BIT_GET_VIQ_DESC_MODE(x)			(((x) >> BIT_SHIFT_VIQ_DESC_MODE) & BIT_MASK_VIQ_DESC_MODE)
#define BIT_SET_VIQ_DESC_MODE(x, v)			(BIT_CLEAR_VIQ_DESC_MODE(x) | BIT_VIQ_DESC_MODE(v))

#define BIT_SHIFT_VIQDES_NUM				16
#define BIT_MASK_VIQDES_NUM				0xfff
#define BIT_VIQDES_NUM(x)				(((x) & BIT_MASK_VIQDES_NUM) << BIT_SHIFT_VIQDES_NUM)
#define BITS_VIQDES_NUM				(BIT_MASK_VIQDES_NUM << BIT_SHIFT_VIQDES_NUM)
#define BIT_CLEAR_VIQDES_NUM(x)			((x) & (~BITS_VIQDES_NUM))
#define BIT_GET_VIQDES_NUM(x)				(((x) >> BIT_SHIFT_VIQDES_NUM) & BIT_MASK_VIQDES_NUM)
#define BIT_SET_VIQDES_NUM(x, v)			(BIT_CLEAR_VIQDES_NUM(x) | BIT_VIQDES_NUM(v))

#define BIT_VOQ_FLAG					BIT(14)

#define BIT_SHIFT_VOQ_DESC_MODE			12
#define BIT_MASK_VOQ_DESC_MODE				0x3
#define BIT_VOQ_DESC_MODE(x)				(((x) & BIT_MASK_VOQ_DESC_MODE) << BIT_SHIFT_VOQ_DESC_MODE)
#define BITS_VOQ_DESC_MODE				(BIT_MASK_VOQ_DESC_MODE << BIT_SHIFT_VOQ_DESC_MODE)
#define BIT_CLEAR_VOQ_DESC_MODE(x)			((x) & (~BITS_VOQ_DESC_MODE))
#define BIT_GET_VOQ_DESC_MODE(x)			(((x) >> BIT_SHIFT_VOQ_DESC_MODE) & BIT_MASK_VOQ_DESC_MODE)
#define BIT_SET_VOQ_DESC_MODE(x, v)			(BIT_CLEAR_VOQ_DESC_MODE(x) | BIT_VOQ_DESC_MODE(v))

#define BIT_SHIFT_VOQDES_NUM				0
#define BIT_MASK_VOQDES_NUM				0xfff
#define BIT_VOQDES_NUM(x)				(((x) & BIT_MASK_VOQDES_NUM) << BIT_SHIFT_VOQDES_NUM)
#define BITS_VOQDES_NUM				(BIT_MASK_VOQDES_NUM << BIT_SHIFT_VOQDES_NUM)
#define BIT_CLEAR_VOQDES_NUM(x)			((x) & (~BITS_VOQDES_NUM))
#define BIT_GET_VOQDES_NUM(x)				(((x) >> BIT_SHIFT_VOQDES_NUM) & BIT_MASK_VOQDES_NUM)
#define BIT_SET_VOQDES_NUM(x, v)			(BIT_CLEAR_VOQDES_NUM(x) | BIT_VOQDES_NUM(v))

/* 2 REG_BEQ_BKQ_TXBD_NUM			(Offset 0x0388) */

#define BIT_BKQ_FLAG					BIT(30)

#define BIT_SHIFT_BKQ_DESC_MODE			28
#define BIT_MASK_BKQ_DESC_MODE				0x3
#define BIT_BKQ_DESC_MODE(x)				(((x) & BIT_MASK_BKQ_DESC_MODE) << BIT_SHIFT_BKQ_DESC_MODE)
#define BITS_BKQ_DESC_MODE				(BIT_MASK_BKQ_DESC_MODE << BIT_SHIFT_BKQ_DESC_MODE)
#define BIT_CLEAR_BKQ_DESC_MODE(x)			((x) & (~BITS_BKQ_DESC_MODE))
#define BIT_GET_BKQ_DESC_MODE(x)			(((x) >> BIT_SHIFT_BKQ_DESC_MODE) & BIT_MASK_BKQ_DESC_MODE)
#define BIT_SET_BKQ_DESC_MODE(x, v)			(BIT_CLEAR_BKQ_DESC_MODE(x) | BIT_BKQ_DESC_MODE(v))

#define BIT_SHIFT_BKQDES_NUM				16
#define BIT_MASK_BKQDES_NUM				0xfff
#define BIT_BKQDES_NUM(x)				(((x) & BIT_MASK_BKQDES_NUM) << BIT_SHIFT_BKQDES_NUM)
#define BITS_BKQDES_NUM				(BIT_MASK_BKQDES_NUM << BIT_SHIFT_BKQDES_NUM)
#define BIT_CLEAR_BKQDES_NUM(x)			((x) & (~BITS_BKQDES_NUM))
#define BIT_GET_BKQDES_NUM(x)				(((x) >> BIT_SHIFT_BKQDES_NUM) & BIT_MASK_BKQDES_NUM)
#define BIT_SET_BKQDES_NUM(x, v)			(BIT_CLEAR_BKQDES_NUM(x) | BIT_BKQDES_NUM(v))

#define BIT_BEQ_FLAG					BIT(14)

#define BIT_SHIFT_BEQ_DESC_MODE			12
#define BIT_MASK_BEQ_DESC_MODE				0x3
#define BIT_BEQ_DESC_MODE(x)				(((x) & BIT_MASK_BEQ_DESC_MODE) << BIT_SHIFT_BEQ_DESC_MODE)
#define BITS_BEQ_DESC_MODE				(BIT_MASK_BEQ_DESC_MODE << BIT_SHIFT_BEQ_DESC_MODE)
#define BIT_CLEAR_BEQ_DESC_MODE(x)			((x) & (~BITS_BEQ_DESC_MODE))
#define BIT_GET_BEQ_DESC_MODE(x)			(((x) >> BIT_SHIFT_BEQ_DESC_MODE) & BIT_MASK_BEQ_DESC_MODE)
#define BIT_SET_BEQ_DESC_MODE(x, v)			(BIT_CLEAR_BEQ_DESC_MODE(x) | BIT_BEQ_DESC_MODE(v))

#define BIT_SHIFT_BEQDES_NUM				0
#define BIT_MASK_BEQDES_NUM				0xfff
#define BIT_BEQDES_NUM(x)				(((x) & BIT_MASK_BEQDES_NUM) << BIT_SHIFT_BEQDES_NUM)
#define BITS_BEQDES_NUM				(BIT_MASK_BEQDES_NUM << BIT_SHIFT_BEQDES_NUM)
#define BIT_CLEAR_BEQDES_NUM(x)			((x) & (~BITS_BEQDES_NUM))
#define BIT_GET_BEQDES_NUM(x)				(((x) >> BIT_SHIFT_BEQDES_NUM) & BIT_MASK_BEQDES_NUM)
#define BIT_SET_BEQDES_NUM(x, v)			(BIT_CLEAR_BEQDES_NUM(x) | BIT_BEQDES_NUM(v))

/* 2 REG_MQ0_MQ1_TXBD_NUM			(Offset 0x038C) */

#define BIT_MQ1_FLAG					BIT(30)

#define BIT_SHIFT_MQ1_DESC_MODE			28
#define BIT_MASK_MQ1_DESC_MODE				0x3
#define BIT_MQ1_DESC_MODE(x)				(((x) & BIT_MASK_MQ1_DESC_MODE) << BIT_SHIFT_MQ1_DESC_MODE)
#define BITS_MQ1_DESC_MODE				(BIT_MASK_MQ1_DESC_MODE << BIT_SHIFT_MQ1_DESC_MODE)
#define BIT_CLEAR_MQ1_DESC_MODE(x)			((x) & (~BITS_MQ1_DESC_MODE))
#define BIT_GET_MQ1_DESC_MODE(x)			(((x) >> BIT_SHIFT_MQ1_DESC_MODE) & BIT_MASK_MQ1_DESC_MODE)
#define BIT_SET_MQ1_DESC_MODE(x, v)			(BIT_CLEAR_MQ1_DESC_MODE(x) | BIT_MQ1_DESC_MODE(v))

#define BIT_SHIFT_MQ1DES_NUM				16
#define BIT_MASK_MQ1DES_NUM				0xfff
#define BIT_MQ1DES_NUM(x)				(((x) & BIT_MASK_MQ1DES_NUM) << BIT_SHIFT_MQ1DES_NUM)
#define BITS_MQ1DES_NUM				(BIT_MASK_MQ1DES_NUM << BIT_SHIFT_MQ1DES_NUM)
#define BIT_CLEAR_MQ1DES_NUM(x)			((x) & (~BITS_MQ1DES_NUM))
#define BIT_GET_MQ1DES_NUM(x)				(((x) >> BIT_SHIFT_MQ1DES_NUM) & BIT_MASK_MQ1DES_NUM)
#define BIT_SET_MQ1DES_NUM(x, v)			(BIT_CLEAR_MQ1DES_NUM(x) | BIT_MQ1DES_NUM(v))

#define BIT_MQ0_FLAG					BIT(14)

#define BIT_SHIFT_MQ0_DESC_MODE			12
#define BIT_MASK_MQ0_DESC_MODE				0x3
#define BIT_MQ0_DESC_MODE(x)				(((x) & BIT_MASK_MQ0_DESC_MODE) << BIT_SHIFT_MQ0_DESC_MODE)
#define BITS_MQ0_DESC_MODE				(BIT_MASK_MQ0_DESC_MODE << BIT_SHIFT_MQ0_DESC_MODE)
#define BIT_CLEAR_MQ0_DESC_MODE(x)			((x) & (~BITS_MQ0_DESC_MODE))
#define BIT_GET_MQ0_DESC_MODE(x)			(((x) >> BIT_SHIFT_MQ0_DESC_MODE) & BIT_MASK_MQ0_DESC_MODE)
#define BIT_SET_MQ0_DESC_MODE(x, v)			(BIT_CLEAR_MQ0_DESC_MODE(x) | BIT_MQ0_DESC_MODE(v))

#define BIT_SHIFT_MQ0DES_NUM				0
#define BIT_MASK_MQ0DES_NUM				0xfff
#define BIT_MQ0DES_NUM(x)				(((x) & BIT_MASK_MQ0DES_NUM) << BIT_SHIFT_MQ0DES_NUM)
#define BITS_MQ0DES_NUM				(BIT_MASK_MQ0DES_NUM << BIT_SHIFT_MQ0DES_NUM)
#define BIT_CLEAR_MQ0DES_NUM(x)			((x) & (~BITS_MQ0DES_NUM))
#define BIT_GET_MQ0DES_NUM(x)				(((x) >> BIT_SHIFT_MQ0DES_NUM) & BIT_MASK_MQ0DES_NUM)
#define BIT_SET_MQ0DES_NUM(x, v)			(BIT_CLEAR_MQ0DES_NUM(x) | BIT_MQ0DES_NUM(v))

/* 2 REG_MQ2_MQ3_TXBD_NUM			(Offset 0x0390) */

#define BIT_MQ3_FLAG					BIT(30)

#define BIT_SHIFT_MQ3_DESC_MODE			28
#define BIT_MASK_MQ3_DESC_MODE				0x3
#define BIT_MQ3_DESC_MODE(x)				(((x) & BIT_MASK_MQ3_DESC_MODE) << BIT_SHIFT_MQ3_DESC_MODE)
#define BITS_MQ3_DESC_MODE				(BIT_MASK_MQ3_DESC_MODE << BIT_SHIFT_MQ3_DESC_MODE)
#define BIT_CLEAR_MQ3_DESC_MODE(x)			((x) & (~BITS_MQ3_DESC_MODE))
#define BIT_GET_MQ3_DESC_MODE(x)			(((x) >> BIT_SHIFT_MQ3_DESC_MODE) & BIT_MASK_MQ3_DESC_MODE)
#define BIT_SET_MQ3_DESC_MODE(x, v)			(BIT_CLEAR_MQ3_DESC_MODE(x) | BIT_MQ3_DESC_MODE(v))

#define BIT_SHIFT_MQ3DES_NUM				16
#define BIT_MASK_MQ3DES_NUM				0xfff
#define BIT_MQ3DES_NUM(x)				(((x) & BIT_MASK_MQ3DES_NUM) << BIT_SHIFT_MQ3DES_NUM)
#define BITS_MQ3DES_NUM				(BIT_MASK_MQ3DES_NUM << BIT_SHIFT_MQ3DES_NUM)
#define BIT_CLEAR_MQ3DES_NUM(x)			((x) & (~BITS_MQ3DES_NUM))
#define BIT_GET_MQ3DES_NUM(x)				(((x) >> BIT_SHIFT_MQ3DES_NUM) & BIT_MASK_MQ3DES_NUM)
#define BIT_SET_MQ3DES_NUM(x, v)			(BIT_CLEAR_MQ3DES_NUM(x) | BIT_MQ3DES_NUM(v))

#define BIT_MQ2_FLAG					BIT(14)

#define BIT_SHIFT_MQ2_DESC_MODE			12
#define BIT_MASK_MQ2_DESC_MODE				0x3
#define BIT_MQ2_DESC_MODE(x)				(((x) & BIT_MASK_MQ2_DESC_MODE) << BIT_SHIFT_MQ2_DESC_MODE)
#define BITS_MQ2_DESC_MODE				(BIT_MASK_MQ2_DESC_MODE << BIT_SHIFT_MQ2_DESC_MODE)
#define BIT_CLEAR_MQ2_DESC_MODE(x)			((x) & (~BITS_MQ2_DESC_MODE))
#define BIT_GET_MQ2_DESC_MODE(x)			(((x) >> BIT_SHIFT_MQ2_DESC_MODE) & BIT_MASK_MQ2_DESC_MODE)
#define BIT_SET_MQ2_DESC_MODE(x, v)			(BIT_CLEAR_MQ2_DESC_MODE(x) | BIT_MQ2_DESC_MODE(v))

#define BIT_SHIFT_MQ2DES_NUM				0
#define BIT_MASK_MQ2DES_NUM				0xfff
#define BIT_MQ2DES_NUM(x)				(((x) & BIT_MASK_MQ2DES_NUM) << BIT_SHIFT_MQ2DES_NUM)
#define BITS_MQ2DES_NUM				(BIT_MASK_MQ2DES_NUM << BIT_SHIFT_MQ2DES_NUM)
#define BIT_CLEAR_MQ2DES_NUM(x)			((x) & (~BITS_MQ2DES_NUM))
#define BIT_GET_MQ2DES_NUM(x)				(((x) >> BIT_SHIFT_MQ2DES_NUM) & BIT_MASK_MQ2DES_NUM)
#define BIT_SET_MQ2DES_NUM(x, v)			(BIT_CLEAR_MQ2DES_NUM(x) | BIT_MQ2DES_NUM(v))

/* 2 REG_MQ4_MQ5_TXBD_NUM			(Offset 0x0394) */

#define BIT_MQ5_FLAG					BIT(30)

#define BIT_SHIFT_MQ5_DESC_MODE			28
#define BIT_MASK_MQ5_DESC_MODE				0x3
#define BIT_MQ5_DESC_MODE(x)				(((x) & BIT_MASK_MQ5_DESC_MODE) << BIT_SHIFT_MQ5_DESC_MODE)
#define BITS_MQ5_DESC_MODE				(BIT_MASK_MQ5_DESC_MODE << BIT_SHIFT_MQ5_DESC_MODE)
#define BIT_CLEAR_MQ5_DESC_MODE(x)			((x) & (~BITS_MQ5_DESC_MODE))
#define BIT_GET_MQ5_DESC_MODE(x)			(((x) >> BIT_SHIFT_MQ5_DESC_MODE) & BIT_MASK_MQ5_DESC_MODE)
#define BIT_SET_MQ5_DESC_MODE(x, v)			(BIT_CLEAR_MQ5_DESC_MODE(x) | BIT_MQ5_DESC_MODE(v))

#define BIT_SHIFT_MQ5DES_NUM				16
#define BIT_MASK_MQ5DES_NUM				0xfff
#define BIT_MQ5DES_NUM(x)				(((x) & BIT_MASK_MQ5DES_NUM) << BIT_SHIFT_MQ5DES_NUM)
#define BITS_MQ5DES_NUM				(BIT_MASK_MQ5DES_NUM << BIT_SHIFT_MQ5DES_NUM)
#define BIT_CLEAR_MQ5DES_NUM(x)			((x) & (~BITS_MQ5DES_NUM))
#define BIT_GET_MQ5DES_NUM(x)				(((x) >> BIT_SHIFT_MQ5DES_NUM) & BIT_MASK_MQ5DES_NUM)
#define BIT_SET_MQ5DES_NUM(x, v)			(BIT_CLEAR_MQ5DES_NUM(x) | BIT_MQ5DES_NUM(v))

#define BIT_MQ4_FLAG					BIT(14)

#define BIT_SHIFT_MQ4_DESC_MODE			12
#define BIT_MASK_MQ4_DESC_MODE				0x3
#define BIT_MQ4_DESC_MODE(x)				(((x) & BIT_MASK_MQ4_DESC_MODE) << BIT_SHIFT_MQ4_DESC_MODE)
#define BITS_MQ4_DESC_MODE				(BIT_MASK_MQ4_DESC_MODE << BIT_SHIFT_MQ4_DESC_MODE)
#define BIT_CLEAR_MQ4_DESC_MODE(x)			((x) & (~BITS_MQ4_DESC_MODE))
#define BIT_GET_MQ4_DESC_MODE(x)			(((x) >> BIT_SHIFT_MQ4_DESC_MODE) & BIT_MASK_MQ4_DESC_MODE)
#define BIT_SET_MQ4_DESC_MODE(x, v)			(BIT_CLEAR_MQ4_DESC_MODE(x) | BIT_MQ4_DESC_MODE(v))

#define BIT_SHIFT_MQ4DES_NUM				0
#define BIT_MASK_MQ4DES_NUM				0xfff
#define BIT_MQ4DES_NUM(x)				(((x) & BIT_MASK_MQ4DES_NUM) << BIT_SHIFT_MQ4DES_NUM)
#define BITS_MQ4DES_NUM				(BIT_MASK_MQ4DES_NUM << BIT_SHIFT_MQ4DES_NUM)
#define BIT_CLEAR_MQ4DES_NUM(x)			((x) & (~BITS_MQ4DES_NUM))
#define BIT_GET_MQ4DES_NUM(x)				(((x) >> BIT_SHIFT_MQ4DES_NUM) & BIT_MASK_MQ4DES_NUM)
#define BIT_SET_MQ4DES_NUM(x, v)			(BIT_CLEAR_MQ4DES_NUM(x) | BIT_MQ4DES_NUM(v))

/* 2 REG_MQ6_MQ7_TXBD_NUM			(Offset 0x0398) */

#define BIT_MQ7_FLAG					BIT(30)

#define BIT_SHIFT_MQ7_DESC_MODE			28
#define BIT_MASK_MQ7_DESC_MODE				0x3
#define BIT_MQ7_DESC_MODE(x)				(((x) & BIT_MASK_MQ7_DESC_MODE) << BIT_SHIFT_MQ7_DESC_MODE)
#define BITS_MQ7_DESC_MODE				(BIT_MASK_MQ7_DESC_MODE << BIT_SHIFT_MQ7_DESC_MODE)
#define BIT_CLEAR_MQ7_DESC_MODE(x)			((x) & (~BITS_MQ7_DESC_MODE))
#define BIT_GET_MQ7_DESC_MODE(x)			(((x) >> BIT_SHIFT_MQ7_DESC_MODE) & BIT_MASK_MQ7_DESC_MODE)
#define BIT_SET_MQ7_DESC_MODE(x, v)			(BIT_CLEAR_MQ7_DESC_MODE(x) | BIT_MQ7_DESC_MODE(v))

#define BIT_SHIFT_MQ7DES_NUM				16
#define BIT_MASK_MQ7DES_NUM				0xfff
#define BIT_MQ7DES_NUM(x)				(((x) & BIT_MASK_MQ7DES_NUM) << BIT_SHIFT_MQ7DES_NUM)
#define BITS_MQ7DES_NUM				(BIT_MASK_MQ7DES_NUM << BIT_SHIFT_MQ7DES_NUM)
#define BIT_CLEAR_MQ7DES_NUM(x)			((x) & (~BITS_MQ7DES_NUM))
#define BIT_GET_MQ7DES_NUM(x)				(((x) >> BIT_SHIFT_MQ7DES_NUM) & BIT_MASK_MQ7DES_NUM)
#define BIT_SET_MQ7DES_NUM(x, v)			(BIT_CLEAR_MQ7DES_NUM(x) | BIT_MQ7DES_NUM(v))

#define BIT_MQ6_FLAG					BIT(14)

#define BIT_SHIFT_MQ6_DESC_MODE			12
#define BIT_MASK_MQ6_DESC_MODE				0x3
#define BIT_MQ6_DESC_MODE(x)				(((x) & BIT_MASK_MQ6_DESC_MODE) << BIT_SHIFT_MQ6_DESC_MODE)
#define BITS_MQ6_DESC_MODE				(BIT_MASK_MQ6_DESC_MODE << BIT_SHIFT_MQ6_DESC_MODE)
#define BIT_CLEAR_MQ6_DESC_MODE(x)			((x) & (~BITS_MQ6_DESC_MODE))
#define BIT_GET_MQ6_DESC_MODE(x)			(((x) >> BIT_SHIFT_MQ6_DESC_MODE) & BIT_MASK_MQ6_DESC_MODE)
#define BIT_SET_MQ6_DESC_MODE(x, v)			(BIT_CLEAR_MQ6_DESC_MODE(x) | BIT_MQ6_DESC_MODE(v))

#define BIT_SHIFT_MQ6DES_NUM				0
#define BIT_MASK_MQ6DES_NUM				0xfff
#define BIT_MQ6DES_NUM(x)				(((x) & BIT_MASK_MQ6DES_NUM) << BIT_SHIFT_MQ6DES_NUM)
#define BITS_MQ6DES_NUM				(BIT_MASK_MQ6DES_NUM << BIT_SHIFT_MQ6DES_NUM)
#define BIT_CLEAR_MQ6DES_NUM(x)			((x) & (~BITS_MQ6DES_NUM))
#define BIT_GET_MQ6DES_NUM(x)				(((x) >> BIT_SHIFT_MQ6DES_NUM) & BIT_MASK_MQ6DES_NUM)
#define BIT_SET_MQ6DES_NUM(x, v)			(BIT_CLEAR_MQ6DES_NUM(x) | BIT_MQ6DES_NUM(v))

/* 2 REG_BD_RWPTR_CLR			(Offset 0x039C) */

#define BIT_CLR_MQ7_HW_IDX				BIT(29)
#define BIT_CLR_MQ6_HW_IDX				BIT(28)
#define BIT_CLR_MQ5_HW_IDX				BIT(27)
#define BIT_CLR_MQ4_HW_IDX				BIT(26)
#define BIT_CLR_MQ3_HW_IDX				BIT(25)
#define BIT_CLR_MQ2_HW_IDX				BIT(24)
#define BIT_CLR_MQ1_HW_IDX				BIT(23)
#define BIT_CLR_MQ0_HW_IDX				BIT(22)
#define BIT_CLR_BKQ_HW_IDX				BIT(21)
#define BIT_CLR_BEQ_HW_IDX				BIT(20)
#define BIT_CLR_VIQ_HW_IDX				BIT(19)
#define BIT_CLR_VOQ_HW_IDX				BIT(18)
#define BIT_CLR_MGQ_HW_IDX				BIT(17)
#define BIT_CLR_RXQ_HW_IDX				BIT(16)
#define BIT_SRST_TX_N					BIT(15)
#define BIT_SRST_RX_N					BIT(14)
#define BIT_CLR_MQ7_HOST_IDX				BIT(13)
#define BIT_CLR_MQ6_HOST_IDX				BIT(12)
#define BIT_CLR_MQ5_HOST_IDX				BIT(11)
#define BIT_CLR_MQ4_HOST_IDX				BIT(10)
#define BIT_CLR_MQ3_HOST_IDX				BIT(9)
#define BIT_CLR_MQ2_HOST_IDX				BIT(8)
#define BIT_CLR_MQ1_HOST_IDX				BIT(7)
#define BIT_CLR_MQ0_HOST_IDX				BIT(6)
#define BIT_CLR_BKQ_HOST_IDX				BIT(5)
#define BIT_CLR_BEQ_HOST_IDX				BIT(4)
#define BIT_CLR_VIQ_HOST_IDX				BIT(3)
#define BIT_CLR_VOQ_HOST_IDX				BIT(2)
#define BIT_CLR_MGQ_HOST_IDX				BIT(1)
#define BIT_CLR_RXQ_HOST_IDX				BIT(0)

/* 2 REG_VOQ_TXBD_IDX			(Offset 0x03A0) */

#define BIT_SHIFT_VOQ_HW_IDX				16
#define BIT_MASK_VOQ_HW_IDX				0xfff
#define BIT_VOQ_HW_IDX(x)				(((x) & BIT_MASK_VOQ_HW_IDX) << BIT_SHIFT_VOQ_HW_IDX)
#define BITS_VOQ_HW_IDX				(BIT_MASK_VOQ_HW_IDX << BIT_SHIFT_VOQ_HW_IDX)
#define BIT_CLEAR_VOQ_HW_IDX(x)			((x) & (~BITS_VOQ_HW_IDX))
#define BIT_GET_VOQ_HW_IDX(x)				(((x) >> BIT_SHIFT_VOQ_HW_IDX) & BIT_MASK_VOQ_HW_IDX)
#define BIT_SET_VOQ_HW_IDX(x, v)			(BIT_CLEAR_VOQ_HW_IDX(x) | BIT_VOQ_HW_IDX(v))

#define BIT_SHIFT_VOQ_HOST_IDX				0
#define BIT_MASK_VOQ_HOST_IDX				0xfff
#define BIT_VOQ_HOST_IDX(x)				(((x) & BIT_MASK_VOQ_HOST_IDX) << BIT_SHIFT_VOQ_HOST_IDX)
#define BITS_VOQ_HOST_IDX				(BIT_MASK_VOQ_HOST_IDX << BIT_SHIFT_VOQ_HOST_IDX)
#define BIT_CLEAR_VOQ_HOST_IDX(x)			((x) & (~BITS_VOQ_HOST_IDX))
#define BIT_GET_VOQ_HOST_IDX(x)			(((x) >> BIT_SHIFT_VOQ_HOST_IDX) & BIT_MASK_VOQ_HOST_IDX)
#define BIT_SET_VOQ_HOST_IDX(x, v)			(BIT_CLEAR_VOQ_HOST_IDX(x) | BIT_VOQ_HOST_IDX(v))

/* 2 REG_VIQ_TXBD_IDX			(Offset 0x03A4) */

#define BIT_SHIFT_VIQ_HW_IDX				16
#define BIT_MASK_VIQ_HW_IDX				0xfff
#define BIT_VIQ_HW_IDX(x)				(((x) & BIT_MASK_VIQ_HW_IDX) << BIT_SHIFT_VIQ_HW_IDX)
#define BITS_VIQ_HW_IDX				(BIT_MASK_VIQ_HW_IDX << BIT_SHIFT_VIQ_HW_IDX)
#define BIT_CLEAR_VIQ_HW_IDX(x)			((x) & (~BITS_VIQ_HW_IDX))
#define BIT_GET_VIQ_HW_IDX(x)				(((x) >> BIT_SHIFT_VIQ_HW_IDX) & BIT_MASK_VIQ_HW_IDX)
#define BIT_SET_VIQ_HW_IDX(x, v)			(BIT_CLEAR_VIQ_HW_IDX(x) | BIT_VIQ_HW_IDX(v))

#define BIT_SHIFT_VIQ_HOST_IDX				0
#define BIT_MASK_VIQ_HOST_IDX				0xfff
#define BIT_VIQ_HOST_IDX(x)				(((x) & BIT_MASK_VIQ_HOST_IDX) << BIT_SHIFT_VIQ_HOST_IDX)
#define BITS_VIQ_HOST_IDX				(BIT_MASK_VIQ_HOST_IDX << BIT_SHIFT_VIQ_HOST_IDX)
#define BIT_CLEAR_VIQ_HOST_IDX(x)			((x) & (~BITS_VIQ_HOST_IDX))
#define BIT_GET_VIQ_HOST_IDX(x)			(((x) >> BIT_SHIFT_VIQ_HOST_IDX) & BIT_MASK_VIQ_HOST_IDX)
#define BIT_SET_VIQ_HOST_IDX(x, v)			(BIT_CLEAR_VIQ_HOST_IDX(x) | BIT_VIQ_HOST_IDX(v))

/* 2 REG_BEQ_TXBD_IDX			(Offset 0x03A8) */

#define BIT_SHIFT_BEQ_HW_IDX				16
#define BIT_MASK_BEQ_HW_IDX				0xfff
#define BIT_BEQ_HW_IDX(x)				(((x) & BIT_MASK_BEQ_HW_IDX) << BIT_SHIFT_BEQ_HW_IDX)
#define BITS_BEQ_HW_IDX				(BIT_MASK_BEQ_HW_IDX << BIT_SHIFT_BEQ_HW_IDX)
#define BIT_CLEAR_BEQ_HW_IDX(x)			((x) & (~BITS_BEQ_HW_IDX))
#define BIT_GET_BEQ_HW_IDX(x)				(((x) >> BIT_SHIFT_BEQ_HW_IDX) & BIT_MASK_BEQ_HW_IDX)
#define BIT_SET_BEQ_HW_IDX(x, v)			(BIT_CLEAR_BEQ_HW_IDX(x) | BIT_BEQ_HW_IDX(v))

#define BIT_SHIFT_BEQ_HOST_IDX				0
#define BIT_MASK_BEQ_HOST_IDX				0xfff
#define BIT_BEQ_HOST_IDX(x)				(((x) & BIT_MASK_BEQ_HOST_IDX) << BIT_SHIFT_BEQ_HOST_IDX)
#define BITS_BEQ_HOST_IDX				(BIT_MASK_BEQ_HOST_IDX << BIT_SHIFT_BEQ_HOST_IDX)
#define BIT_CLEAR_BEQ_HOST_IDX(x)			((x) & (~BITS_BEQ_HOST_IDX))
#define BIT_GET_BEQ_HOST_IDX(x)			(((x) >> BIT_SHIFT_BEQ_HOST_IDX) & BIT_MASK_BEQ_HOST_IDX)
#define BIT_SET_BEQ_HOST_IDX(x, v)			(BIT_CLEAR_BEQ_HOST_IDX(x) | BIT_BEQ_HOST_IDX(v))

/* 2 REG_BKQ_TXBD_IDX			(Offset 0x03AC) */

#define BIT_SHIFT_BKQ_HW_IDX				16
#define BIT_MASK_BKQ_HW_IDX				0xfff
#define BIT_BKQ_HW_IDX(x)				(((x) & BIT_MASK_BKQ_HW_IDX) << BIT_SHIFT_BKQ_HW_IDX)
#define BITS_BKQ_HW_IDX				(BIT_MASK_BKQ_HW_IDX << BIT_SHIFT_BKQ_HW_IDX)
#define BIT_CLEAR_BKQ_HW_IDX(x)			((x) & (~BITS_BKQ_HW_IDX))
#define BIT_GET_BKQ_HW_IDX(x)				(((x) >> BIT_SHIFT_BKQ_HW_IDX) & BIT_MASK_BKQ_HW_IDX)
#define BIT_SET_BKQ_HW_IDX(x, v)			(BIT_CLEAR_BKQ_HW_IDX(x) | BIT_BKQ_HW_IDX(v))

#define BIT_SHIFT_BKQ_HOST_IDX				0
#define BIT_MASK_BKQ_HOST_IDX				0xfff
#define BIT_BKQ_HOST_IDX(x)				(((x) & BIT_MASK_BKQ_HOST_IDX) << BIT_SHIFT_BKQ_HOST_IDX)
#define BITS_BKQ_HOST_IDX				(BIT_MASK_BKQ_HOST_IDX << BIT_SHIFT_BKQ_HOST_IDX)
#define BIT_CLEAR_BKQ_HOST_IDX(x)			((x) & (~BITS_BKQ_HOST_IDX))
#define BIT_GET_BKQ_HOST_IDX(x)			(((x) >> BIT_SHIFT_BKQ_HOST_IDX) & BIT_MASK_BKQ_HOST_IDX)
#define BIT_SET_BKQ_HOST_IDX(x, v)			(BIT_CLEAR_BKQ_HOST_IDX(x) | BIT_BKQ_HOST_IDX(v))

/* 2 REG_MGQ_TXBD_IDX			(Offset 0x03B0) */

#define BIT_SHIFT_MGQ_HW_IDX				16
#define BIT_MASK_MGQ_HW_IDX				0xfff
#define BIT_MGQ_HW_IDX(x)				(((x) & BIT_MASK_MGQ_HW_IDX) << BIT_SHIFT_MGQ_HW_IDX)
#define BITS_MGQ_HW_IDX				(BIT_MASK_MGQ_HW_IDX << BIT_SHIFT_MGQ_HW_IDX)
#define BIT_CLEAR_MGQ_HW_IDX(x)			((x) & (~BITS_MGQ_HW_IDX))
#define BIT_GET_MGQ_HW_IDX(x)				(((x) >> BIT_SHIFT_MGQ_HW_IDX) & BIT_MASK_MGQ_HW_IDX)
#define BIT_SET_MGQ_HW_IDX(x, v)			(BIT_CLEAR_MGQ_HW_IDX(x) | BIT_MGQ_HW_IDX(v))

#define BIT_SHIFT_MGQ_HOST_IDX				0
#define BIT_MASK_MGQ_HOST_IDX				0xfff
#define BIT_MGQ_HOST_IDX(x)				(((x) & BIT_MASK_MGQ_HOST_IDX) << BIT_SHIFT_MGQ_HOST_IDX)
#define BITS_MGQ_HOST_IDX				(BIT_MASK_MGQ_HOST_IDX << BIT_SHIFT_MGQ_HOST_IDX)
#define BIT_CLEAR_MGQ_HOST_IDX(x)			((x) & (~BITS_MGQ_HOST_IDX))
#define BIT_GET_MGQ_HOST_IDX(x)			(((x) >> BIT_SHIFT_MGQ_HOST_IDX) & BIT_MASK_MGQ_HOST_IDX)
#define BIT_SET_MGQ_HOST_IDX(x, v)			(BIT_CLEAR_MGQ_HOST_IDX(x) | BIT_MGQ_HOST_IDX(v))

/* 2 REG_RXQ_RXBD_IDX			(Offset 0x03B4) */

#define BIT_SHIFT_RXNRML_HW_IDX			16
#define BIT_MASK_RXNRML_HW_IDX				0xfff
#define BIT_RXNRML_HW_IDX(x)				(((x) & BIT_MASK_RXNRML_HW_IDX) << BIT_SHIFT_RXNRML_HW_IDX)
#define BITS_RXNRML_HW_IDX				(BIT_MASK_RXNRML_HW_IDX << BIT_SHIFT_RXNRML_HW_IDX)
#define BIT_CLEAR_RXNRML_HW_IDX(x)			((x) & (~BITS_RXNRML_HW_IDX))
#define BIT_GET_RXNRML_HW_IDX(x)			(((x) >> BIT_SHIFT_RXNRML_HW_IDX) & BIT_MASK_RXNRML_HW_IDX)
#define BIT_SET_RXNRML_HW_IDX(x, v)			(BIT_CLEAR_RXNRML_HW_IDX(x) | BIT_RXNRML_HW_IDX(v))

#define BIT_SHIFT_RXNRML_HOST_IDX			0
#define BIT_MASK_RXNRML_HOST_IDX			0xfff
#define BIT_RXNRML_HOST_IDX(x)				(((x) & BIT_MASK_RXNRML_HOST_IDX) << BIT_SHIFT_RXNRML_HOST_IDX)
#define BITS_RXNRML_HOST_IDX				(BIT_MASK_RXNRML_HOST_IDX << BIT_SHIFT_RXNRML_HOST_IDX)
#define BIT_CLEAR_RXNRML_HOST_IDX(x)			((x) & (~BITS_RXNRML_HOST_IDX))
#define BIT_GET_RXNRML_HOST_IDX(x)			(((x) >> BIT_SHIFT_RXNRML_HOST_IDX) & BIT_MASK_RXNRML_HOST_IDX)
#define BIT_SET_RXNRML_HOST_IDX(x, v)			(BIT_CLEAR_RXNRML_HOST_IDX(x) | BIT_RXNRML_HOST_IDX(v))

/* 2 REG_MQ0_TXBD_IDX			(Offset 0x03B8) */

#define BIT_SHIFT_MQ0_HW_IDX				16
#define BIT_MASK_MQ0_HW_IDX				0xfff
#define BIT_MQ0_HW_IDX(x)				(((x) & BIT_MASK_MQ0_HW_IDX) << BIT_SHIFT_MQ0_HW_IDX)
#define BITS_MQ0_HW_IDX				(BIT_MASK_MQ0_HW_IDX << BIT_SHIFT_MQ0_HW_IDX)
#define BIT_CLEAR_MQ0_HW_IDX(x)			((x) & (~BITS_MQ0_HW_IDX))
#define BIT_GET_MQ0_HW_IDX(x)				(((x) >> BIT_SHIFT_MQ0_HW_IDX) & BIT_MASK_MQ0_HW_IDX)
#define BIT_SET_MQ0_HW_IDX(x, v)			(BIT_CLEAR_MQ0_HW_IDX(x) | BIT_MQ0_HW_IDX(v))

#define BIT_SHIFT_MQ0_HOST_IDX				0
#define BIT_MASK_MQ0_HOST_IDX				0xfff
#define BIT_MQ0_HOST_IDX(x)				(((x) & BIT_MASK_MQ0_HOST_IDX) << BIT_SHIFT_MQ0_HOST_IDX)
#define BITS_MQ0_HOST_IDX				(BIT_MASK_MQ0_HOST_IDX << BIT_SHIFT_MQ0_HOST_IDX)
#define BIT_CLEAR_MQ0_HOST_IDX(x)			((x) & (~BITS_MQ0_HOST_IDX))
#define BIT_GET_MQ0_HOST_IDX(x)			(((x) >> BIT_SHIFT_MQ0_HOST_IDX) & BIT_MASK_MQ0_HOST_IDX)
#define BIT_SET_MQ0_HOST_IDX(x, v)			(BIT_CLEAR_MQ0_HOST_IDX(x) | BIT_MQ0_HOST_IDX(v))

/* 2 REG_MQ1_TXBD_IDX			(Offset 0x03BC) */

#define BIT_SHIFT_MQ1_HW_IDX				16
#define BIT_MASK_MQ1_HW_IDX				0xfff
#define BIT_MQ1_HW_IDX(x)				(((x) & BIT_MASK_MQ1_HW_IDX) << BIT_SHIFT_MQ1_HW_IDX)
#define BITS_MQ1_HW_IDX				(BIT_MASK_MQ1_HW_IDX << BIT_SHIFT_MQ1_HW_IDX)
#define BIT_CLEAR_MQ1_HW_IDX(x)			((x) & (~BITS_MQ1_HW_IDX))
#define BIT_GET_MQ1_HW_IDX(x)				(((x) >> BIT_SHIFT_MQ1_HW_IDX) & BIT_MASK_MQ1_HW_IDX)
#define BIT_SET_MQ1_HW_IDX(x, v)			(BIT_CLEAR_MQ1_HW_IDX(x) | BIT_MQ1_HW_IDX(v))

#define BIT_SHIFT_MQ1_HOST_IDX				0
#define BIT_MASK_MQ1_HOST_IDX				0xfff
#define BIT_MQ1_HOST_IDX(x)				(((x) & BIT_MASK_MQ1_HOST_IDX) << BIT_SHIFT_MQ1_HOST_IDX)
#define BITS_MQ1_HOST_IDX				(BIT_MASK_MQ1_HOST_IDX << BIT_SHIFT_MQ1_HOST_IDX)
#define BIT_CLEAR_MQ1_HOST_IDX(x)			((x) & (~BITS_MQ1_HOST_IDX))
#define BIT_GET_MQ1_HOST_IDX(x)			(((x) >> BIT_SHIFT_MQ1_HOST_IDX) & BIT_MASK_MQ1_HOST_IDX)
#define BIT_SET_MQ1_HOST_IDX(x, v)			(BIT_CLEAR_MQ1_HOST_IDX(x) | BIT_MQ1_HOST_IDX(v))

/* 2 REG_MQ2_TXBD_IDX			(Offset 0x03C0) */

#define BIT_SHIFT_MQ2_HW_IDX				16
#define BIT_MASK_MQ2_HW_IDX				0xfff
#define BIT_MQ2_HW_IDX(x)				(((x) & BIT_MASK_MQ2_HW_IDX) << BIT_SHIFT_MQ2_HW_IDX)
#define BITS_MQ2_HW_IDX				(BIT_MASK_MQ2_HW_IDX << BIT_SHIFT_MQ2_HW_IDX)
#define BIT_CLEAR_MQ2_HW_IDX(x)			((x) & (~BITS_MQ2_HW_IDX))
#define BIT_GET_MQ2_HW_IDX(x)				(((x) >> BIT_SHIFT_MQ2_HW_IDX) & BIT_MASK_MQ2_HW_IDX)
#define BIT_SET_MQ2_HW_IDX(x, v)			(BIT_CLEAR_MQ2_HW_IDX(x) | BIT_MQ2_HW_IDX(v))

#define BIT_SHIFT_MQ2_HOST_IDX				0
#define BIT_MASK_MQ2_HOST_IDX				0xfff
#define BIT_MQ2_HOST_IDX(x)				(((x) & BIT_MASK_MQ2_HOST_IDX) << BIT_SHIFT_MQ2_HOST_IDX)
#define BITS_MQ2_HOST_IDX				(BIT_MASK_MQ2_HOST_IDX << BIT_SHIFT_MQ2_HOST_IDX)
#define BIT_CLEAR_MQ2_HOST_IDX(x)			((x) & (~BITS_MQ2_HOST_IDX))
#define BIT_GET_MQ2_HOST_IDX(x)			(((x) >> BIT_SHIFT_MQ2_HOST_IDX) & BIT_MASK_MQ2_HOST_IDX)
#define BIT_SET_MQ2_HOST_IDX(x, v)			(BIT_CLEAR_MQ2_HOST_IDX(x) | BIT_MQ2_HOST_IDX(v))

/* 2 REG_MQ3_TXBD_IDX			(Offset 0x03C4) */

#define BIT_SHIFT_MQ3_HW_IDX				16
#define BIT_MASK_MQ3_HW_IDX				0xfff
#define BIT_MQ3_HW_IDX(x)				(((x) & BIT_MASK_MQ3_HW_IDX) << BIT_SHIFT_MQ3_HW_IDX)
#define BITS_MQ3_HW_IDX				(BIT_MASK_MQ3_HW_IDX << BIT_SHIFT_MQ3_HW_IDX)
#define BIT_CLEAR_MQ3_HW_IDX(x)			((x) & (~BITS_MQ3_HW_IDX))
#define BIT_GET_MQ3_HW_IDX(x)				(((x) >> BIT_SHIFT_MQ3_HW_IDX) & BIT_MASK_MQ3_HW_IDX)
#define BIT_SET_MQ3_HW_IDX(x, v)			(BIT_CLEAR_MQ3_HW_IDX(x) | BIT_MQ3_HW_IDX(v))

#define BIT_SHIFT_MQ3_HOST_IDX				0
#define BIT_MASK_MQ3_HOST_IDX				0xfff
#define BIT_MQ3_HOST_IDX(x)				(((x) & BIT_MASK_MQ3_HOST_IDX) << BIT_SHIFT_MQ3_HOST_IDX)
#define BITS_MQ3_HOST_IDX				(BIT_MASK_MQ3_HOST_IDX << BIT_SHIFT_MQ3_HOST_IDX)
#define BIT_CLEAR_MQ3_HOST_IDX(x)			((x) & (~BITS_MQ3_HOST_IDX))
#define BIT_GET_MQ3_HOST_IDX(x)			(((x) >> BIT_SHIFT_MQ3_HOST_IDX) & BIT_MASK_MQ3_HOST_IDX)
#define BIT_SET_MQ3_HOST_IDX(x, v)			(BIT_CLEAR_MQ3_HOST_IDX(x) | BIT_MQ3_HOST_IDX(v))

/* 2 REG_MQ4_TXBD_IDX			(Offset 0x03C8) */

#define BIT_SHIFT_MQ4_HW_IDX				16
#define BIT_MASK_MQ4_HW_IDX				0xfff
#define BIT_MQ4_HW_IDX(x)				(((x) & BIT_MASK_MQ4_HW_IDX) << BIT_SHIFT_MQ4_HW_IDX)
#define BITS_MQ4_HW_IDX				(BIT_MASK_MQ4_HW_IDX << BIT_SHIFT_MQ4_HW_IDX)
#define BIT_CLEAR_MQ4_HW_IDX(x)			((x) & (~BITS_MQ4_HW_IDX))
#define BIT_GET_MQ4_HW_IDX(x)				(((x) >> BIT_SHIFT_MQ4_HW_IDX) & BIT_MASK_MQ4_HW_IDX)
#define BIT_SET_MQ4_HW_IDX(x, v)			(BIT_CLEAR_MQ4_HW_IDX(x) | BIT_MQ4_HW_IDX(v))

#define BIT_SHIFT_MQ4_HOST_IDX				0
#define BIT_MASK_MQ4_HOST_IDX				0xfff
#define BIT_MQ4_HOST_IDX(x)				(((x) & BIT_MASK_MQ4_HOST_IDX) << BIT_SHIFT_MQ4_HOST_IDX)
#define BITS_MQ4_HOST_IDX				(BIT_MASK_MQ4_HOST_IDX << BIT_SHIFT_MQ4_HOST_IDX)
#define BIT_CLEAR_MQ4_HOST_IDX(x)			((x) & (~BITS_MQ4_HOST_IDX))
#define BIT_GET_MQ4_HOST_IDX(x)			(((x) >> BIT_SHIFT_MQ4_HOST_IDX) & BIT_MASK_MQ4_HOST_IDX)
#define BIT_SET_MQ4_HOST_IDX(x, v)			(BIT_CLEAR_MQ4_HOST_IDX(x) | BIT_MQ4_HOST_IDX(v))

/* 2 REG_MQ5_TXBD_IDX			(Offset 0x03CC) */

#define BIT_SHIFT_MQ5_HW_IDX				16
#define BIT_MASK_MQ5_HW_IDX				0xfff
#define BIT_MQ5_HW_IDX(x)				(((x) & BIT_MASK_MQ5_HW_IDX) << BIT_SHIFT_MQ5_HW_IDX)
#define BITS_MQ5_HW_IDX				(BIT_MASK_MQ5_HW_IDX << BIT_SHIFT_MQ5_HW_IDX)
#define BIT_CLEAR_MQ5_HW_IDX(x)			((x) & (~BITS_MQ5_HW_IDX))
#define BIT_GET_MQ5_HW_IDX(x)				(((x) >> BIT_SHIFT_MQ5_HW_IDX) & BIT_MASK_MQ5_HW_IDX)
#define BIT_SET_MQ5_HW_IDX(x, v)			(BIT_CLEAR_MQ5_HW_IDX(x) | BIT_MQ5_HW_IDX(v))

#define BIT_SHIFT_MQ5_HOST_IDX				0
#define BIT_MASK_MQ5_HOST_IDX				0xfff
#define BIT_MQ5_HOST_IDX(x)				(((x) & BIT_MASK_MQ5_HOST_IDX) << BIT_SHIFT_MQ5_HOST_IDX)
#define BITS_MQ5_HOST_IDX				(BIT_MASK_MQ5_HOST_IDX << BIT_SHIFT_MQ5_HOST_IDX)
#define BIT_CLEAR_MQ5_HOST_IDX(x)			((x) & (~BITS_MQ5_HOST_IDX))
#define BIT_GET_MQ5_HOST_IDX(x)			(((x) >> BIT_SHIFT_MQ5_HOST_IDX) & BIT_MASK_MQ5_HOST_IDX)
#define BIT_SET_MQ5_HOST_IDX(x, v)			(BIT_CLEAR_MQ5_HOST_IDX(x) | BIT_MQ5_HOST_IDX(v))

/* 2 REG_MQ6_TXBD_IDX			(Offset 0x03D0) */

#define BIT_SHIFT_MQ6_HW_IDX				16
#define BIT_MASK_MQ6_HW_IDX				0xfff
#define BIT_MQ6_HW_IDX(x)				(((x) & BIT_MASK_MQ6_HW_IDX) << BIT_SHIFT_MQ6_HW_IDX)
#define BITS_MQ6_HW_IDX				(BIT_MASK_MQ6_HW_IDX << BIT_SHIFT_MQ6_HW_IDX)
#define BIT_CLEAR_MQ6_HW_IDX(x)			((x) & (~BITS_MQ6_HW_IDX))
#define BIT_GET_MQ6_HW_IDX(x)				(((x) >> BIT_SHIFT_MQ6_HW_IDX) & BIT_MASK_MQ6_HW_IDX)
#define BIT_SET_MQ6_HW_IDX(x, v)			(BIT_CLEAR_MQ6_HW_IDX(x) | BIT_MQ6_HW_IDX(v))

#define BIT_SHIFT_MQ6_HOST_IDX				0
#define BIT_MASK_MQ6_HOST_IDX				0xfff
#define BIT_MQ6_HOST_IDX(x)				(((x) & BIT_MASK_MQ6_HOST_IDX) << BIT_SHIFT_MQ6_HOST_IDX)
#define BITS_MQ6_HOST_IDX				(BIT_MASK_MQ6_HOST_IDX << BIT_SHIFT_MQ6_HOST_IDX)
#define BIT_CLEAR_MQ6_HOST_IDX(x)			((x) & (~BITS_MQ6_HOST_IDX))
#define BIT_GET_MQ6_HOST_IDX(x)			(((x) >> BIT_SHIFT_MQ6_HOST_IDX) & BIT_MASK_MQ6_HOST_IDX)
#define BIT_SET_MQ6_HOST_IDX(x, v)			(BIT_CLEAR_MQ6_HOST_IDX(x) | BIT_MQ6_HOST_IDX(v))

/* 2 REG_MQ7_TXBD_IDX			(Offset 0x03D4) */

#define BIT_SHIFT_MQ7_HW_IDX				16
#define BIT_MASK_MQ7_HW_IDX				0xfff
#define BIT_MQ7_HW_IDX(x)				(((x) & BIT_MASK_MQ7_HW_IDX) << BIT_SHIFT_MQ7_HW_IDX)
#define BITS_MQ7_HW_IDX				(BIT_MASK_MQ7_HW_IDX << BIT_SHIFT_MQ7_HW_IDX)
#define BIT_CLEAR_MQ7_HW_IDX(x)			((x) & (~BITS_MQ7_HW_IDX))
#define BIT_GET_MQ7_HW_IDX(x)				(((x) >> BIT_SHIFT_MQ7_HW_IDX) & BIT_MASK_MQ7_HW_IDX)
#define BIT_SET_MQ7_HW_IDX(x, v)			(BIT_CLEAR_MQ7_HW_IDX(x) | BIT_MQ7_HW_IDX(v))

#define BIT_SHIFT_MQ7_HOST_IDX				0
#define BIT_MASK_MQ7_HOST_IDX				0xfff
#define BIT_MQ7_HOST_IDX(x)				(((x) & BIT_MASK_MQ7_HOST_IDX) << BIT_SHIFT_MQ7_HOST_IDX)
#define BITS_MQ7_HOST_IDX				(BIT_MASK_MQ7_HOST_IDX << BIT_SHIFT_MQ7_HOST_IDX)
#define BIT_CLEAR_MQ7_HOST_IDX(x)			((x) & (~BITS_MQ7_HOST_IDX))
#define BIT_GET_MQ7_HOST_IDX(x)			(((x) >> BIT_SHIFT_MQ7_HOST_IDX) & BIT_MASK_MQ7_HOST_IDX)
#define BIT_SET_MQ7_HOST_IDX(x, v)			(BIT_CLEAR_MQ7_HOST_IDX(x) | BIT_MQ7_HOST_IDX(v))

/* 2 REG_AXI_CTRL2				(Offset 0x03D8) */

#define BIT_DEBUG_REG2					BIT(31)
#define BIT_DEBUG_REG1					BIT(30)

#define BIT_SHIFT_HPS_CLKR_AHB				28
#define BIT_MASK_HPS_CLKR_AHB				0x3
#define BIT_HPS_CLKR_AHB(x)				(((x) & BIT_MASK_HPS_CLKR_AHB) << BIT_SHIFT_HPS_CLKR_AHB)
#define BITS_HPS_CLKR_AHB				(BIT_MASK_HPS_CLKR_AHB << BIT_SHIFT_HPS_CLKR_AHB)
#define BIT_CLEAR_HPS_CLKR_AHB(x)			((x) & (~BITS_HPS_CLKR_AHB))
#define BIT_GET_HPS_CLKR_AHB(x)			(((x) >> BIT_SHIFT_HPS_CLKR_AHB) & BIT_MASK_HPS_CLKR_AHB)
#define BIT_SET_HPS_CLKR_AHB(x, v)			(BIT_CLEAR_HPS_CLKR_AHB(x) | BIT_HPS_CLKR_AHB(v))

#define BIT_INT_WLMAC					BIT(27)

#define BIT_SHIFT_DEBUG_REG0				24
#define BIT_MASK_DEBUG_REG0				0x7
#define BIT_DEBUG_REG0(x)				(((x) & BIT_MASK_DEBUG_REG0) << BIT_SHIFT_DEBUG_REG0)
#define BITS_DEBUG_REG0				(BIT_MASK_DEBUG_REG0 << BIT_SHIFT_DEBUG_REG0)
#define BIT_CLEAR_DEBUG_REG0(x)			((x) & (~BITS_DEBUG_REG0))
#define BIT_GET_DEBUG_REG0(x)				(((x) >> BIT_SHIFT_DEBUG_REG0) & BIT_MASK_DEBUG_REG0)
#define BIT_SET_DEBUG_REG0(x, v)			(BIT_CLEAR_DEBUG_REG0(x) | BIT_DEBUG_REG0(v))

#define BIT_SHIFT_CPWM_AHB				16
#define BIT_MASK_CPWM_AHB				0xff
#define BIT_CPWM_AHB(x)				(((x) & BIT_MASK_CPWM_AHB) << BIT_SHIFT_CPWM_AHB)
#define BITS_CPWM_AHB					(BIT_MASK_CPWM_AHB << BIT_SHIFT_CPWM_AHB)
#define BIT_CLEAR_CPWM_AHB(x)				((x) & (~BITS_CPWM_AHB))
#define BIT_GET_CPWM_AHB(x)				(((x) >> BIT_SHIFT_CPWM_AHB) & BIT_MASK_CPWM_AHB)
#define BIT_SET_CPWM_AHB(x, v)				(BIT_CLEAR_CPWM_AHB(x) | BIT_CPWM_AHB(v))

#define BIT_SHIFT_HRPWM_AHB				8
#define BIT_MASK_HRPWM_AHB				0xff
#define BIT_HRPWM_AHB(x)				(((x) & BIT_MASK_HRPWM_AHB) << BIT_SHIFT_HRPWM_AHB)
#define BITS_HRPWM_AHB					(BIT_MASK_HRPWM_AHB << BIT_SHIFT_HRPWM_AHB)
#define BIT_CLEAR_HRPWM_AHB(x)				((x) & (~BITS_HRPWM_AHB))
#define BIT_GET_HRPWM_AHB(x)				(((x) >> BIT_SHIFT_HRPWM_AHB) & BIT_MASK_HRPWM_AHB)
#define BIT_SET_HRPWM_AHB(x, v)			(BIT_CLEAR_HRPWM_AHB(x) | BIT_HRPWM_AHB(v))

#define BIT_SHIFT_DEBUG_REG3				0
#define BIT_MASK_DEBUG_REG3				0xffffff
#define BIT_DEBUG_REG3(x)				(((x) & BIT_MASK_DEBUG_REG3) << BIT_SHIFT_DEBUG_REG3)
#define BITS_DEBUG_REG3				(BIT_MASK_DEBUG_REG3 << BIT_SHIFT_DEBUG_REG3)
#define BIT_CLEAR_DEBUG_REG3(x)			((x) & (~BITS_DEBUG_REG3))
#define BIT_GET_DEBUG_REG3(x)				(((x) >> BIT_SHIFT_DEBUG_REG3) & BIT_MASK_DEBUG_REG3)
#define BIT_SET_DEBUG_REG3(x, v)			(BIT_CLEAR_DEBUG_REG3(x) | BIT_DEBUG_REG3(v))

/* 2 REG_AXI_HRPWM2_CPWM2			(Offset 0x03DC) */

#define BIT_SHIFT_CPWM2_AHB				16
#define BIT_MASK_CPWM2_AHB				0xffff
#define BIT_CPWM2_AHB(x)				(((x) & BIT_MASK_CPWM2_AHB) << BIT_SHIFT_CPWM2_AHB)
#define BITS_CPWM2_AHB					(BIT_MASK_CPWM2_AHB << BIT_SHIFT_CPWM2_AHB)
#define BIT_CLEAR_CPWM2_AHB(x)				((x) & (~BITS_CPWM2_AHB))
#define BIT_GET_CPWM2_AHB(x)				(((x) >> BIT_SHIFT_CPWM2_AHB) & BIT_MASK_CPWM2_AHB)
#define BIT_SET_CPWM2_AHB(x, v)			(BIT_CLEAR_CPWM2_AHB(x) | BIT_CPWM2_AHB(v))

#define BIT_SHIFT_HREG_DBG				12
#define BIT_MASK_HREG_DBG				0xfff
#define BIT_HREG_DBG(x)				(((x) & BIT_MASK_HREG_DBG) << BIT_SHIFT_HREG_DBG)
#define BITS_HREG_DBG					(BIT_MASK_HREG_DBG << BIT_SHIFT_HREG_DBG)
#define BIT_CLEAR_HREG_DBG(x)				((x) & (~BITS_HREG_DBG))
#define BIT_GET_HREG_DBG(x)				(((x) >> BIT_SHIFT_HREG_DBG) & BIT_MASK_HREG_DBG)
#define BIT_SET_HREG_DBG(x, v)				(BIT_CLEAR_HREG_DBG(x) | BIT_HREG_DBG(v))

#define BIT_FEN_WLMCUIOIF				BIT(8)
#define BIT_LOCK_REGALL_EN				BIT(7)
#define BIT_PRST_WLMAC					BIT(6)
#define BIT_WLOCK_1C_B6				BIT(5)
#define BIT_WLOCK_40					BIT(4)
#define BIT_WLOCK_08					BIT(3)
#define BIT_WLOCK_04					BIT(2)
#define BIT_WLOCK_00					BIT(1)

#define BIT_SHIFT_HRPWM2_AHB				0
#define BIT_MASK_HRPWM2_AHB				0xffff
#define BIT_HRPWM2_AHB(x)				(((x) & BIT_MASK_HRPWM2_AHB) << BIT_SHIFT_HRPWM2_AHB)
#define BITS_HRPWM2_AHB				(BIT_MASK_HRPWM2_AHB << BIT_SHIFT_HRPWM2_AHB)
#define BIT_CLEAR_HRPWM2_AHB(x)			((x) & (~BITS_HRPWM2_AHB))
#define BIT_GET_HRPWM2_AHB(x)				(((x) >> BIT_SHIFT_HRPWM2_AHB) & BIT_MASK_HRPWM2_AHB)
#define BIT_SET_HRPWM2_AHB(x, v)			(BIT_CLEAR_HRPWM2_AHB(x) | BIT_HRPWM2_AHB(v))

#define BIT_WLOCK_ALL					BIT(0)

/* 2 REG_DRVIER_TO_FIRMWARE_INFO		(Offset 0x03E0) */

#define BIT_SHIFT_DRV2FW_AHB				0
#define BIT_MASK_DRV2FW_AHB				0xffffffffL
#define BIT_DRV2FW_AHB(x)				(((x) & BIT_MASK_DRV2FW_AHB) << BIT_SHIFT_DRV2FW_AHB)
#define BITS_DRV2FW_AHB				(BIT_MASK_DRV2FW_AHB << BIT_SHIFT_DRV2FW_AHB)
#define BIT_CLEAR_DRV2FW_AHB(x)			((x) & (~BITS_DRV2FW_AHB))
#define BIT_GET_DRV2FW_AHB(x)				(((x) >> BIT_SHIFT_DRV2FW_AHB) & BIT_MASK_DRV2FW_AHB)
#define BIT_SET_DRV2FW_AHB(x, v)			(BIT_CLEAR_DRV2FW_AHB(x) | BIT_DRV2FW_AHB(v))

/* 2 REG_FIRMWARE_TO_DRIVER_INFO		(Offset 0x03E4) */

#define BIT_SHIFT_FW2DRV_AHB				0
#define BIT_MASK_FW2DRV_AHB				0xffffffffL
#define BIT_FW2DRV_AHB(x)				(((x) & BIT_MASK_FW2DRV_AHB) << BIT_SHIFT_FW2DRV_AHB)
#define BITS_FW2DRV_AHB				(BIT_MASK_FW2DRV_AHB << BIT_SHIFT_FW2DRV_AHB)
#define BIT_CLEAR_FW2DRV_AHB(x)			((x) & (~BITS_FW2DRV_AHB))
#define BIT_GET_FW2DRV_AHB(x)				(((x) >> BIT_SHIFT_FW2DRV_AHB) & BIT_MASK_FW2DRV_AHB)
#define BIT_SET_FW2DRV_AHB(x, v)			(BIT_CLEAR_FW2DRV_AHB(x) | BIT_FW2DRV_AHB(v))

/* 2 REG_AXI_INTERRUPT			(Offset 0x03E8) */

#define BIT_SHIFT_AHB_ISR				0
#define BIT_MASK_AHB_ISR				0xffffffffL
#define BIT_AHB_ISR(x)					(((x) & BIT_MASK_AHB_ISR) << BIT_SHIFT_AHB_ISR)
#define BITS_AHB_ISR					(BIT_MASK_AHB_ISR << BIT_SHIFT_AHB_ISR)
#define BIT_CLEAR_AHB_ISR(x)				((x) & (~BITS_AHB_ISR))
#define BIT_GET_AHB_ISR(x)				(((x) >> BIT_SHIFT_AHB_ISR) & BIT_MASK_AHB_ISR)
#define BIT_SET_AHB_ISR(x, v)				(BIT_CLEAR_AHB_ISR(x) | BIT_AHB_ISR(v))

/* 2 REG_AXI_INTERRUPT_MASK			(Offset 0x03EC) */

#define BIT_SHIFT_AHB_IMR				0
#define BIT_MASK_AHB_IMR				0xffffffffL
#define BIT_AHB_IMR(x)					(((x) & BIT_MASK_AHB_IMR) << BIT_SHIFT_AHB_IMR)
#define BITS_AHB_IMR					(BIT_MASK_AHB_IMR << BIT_SHIFT_AHB_IMR)
#define BIT_CLEAR_AHB_IMR(x)				((x) & (~BITS_AHB_IMR))
#define BIT_GET_AHB_IMR(x)				(((x) >> BIT_SHIFT_AHB_IMR) & BIT_MASK_AHB_IMR)
#define BIT_SET_AHB_IMR(x, v)				(BIT_CLEAR_AHB_IMR(x) | BIT_AHB_IMR(v))

/* 2 REG_TRXDMA_STUCK			(Offset 0x03F0) */

#define BIT_RXDMA_STUCK				BIT(9)
#define BIT_TXDMA_STUCK				BIT(8)
#define BIT_MST_BUSY					BIT(3)
#define BIT_RXBUF_ZERO_ERR				BIT(2)
#define BIT_HD_SIZE_ERR				BIT(1)
#define BIT_EN_DBG_STUCK				BIT(0)

/* 2 REG_LBC_WATCHDOG			(Offset 0x03F8) */

#define BIT_SHIFT_WATCH_DOG_RECORD			10
#define BIT_MASK_WATCH_DOG_RECORD			0x3fff
#define BIT_WATCH_DOG_RECORD(x)			(((x) & BIT_MASK_WATCH_DOG_RECORD) << BIT_SHIFT_WATCH_DOG_RECORD)
#define BITS_WATCH_DOG_RECORD				(BIT_MASK_WATCH_DOG_RECORD << BIT_SHIFT_WATCH_DOG_RECORD)
#define BIT_CLEAR_WATCH_DOG_RECORD(x)			((x) & (~BITS_WATCH_DOG_RECORD))
#define BIT_GET_WATCH_DOG_RECORD(x)			(((x) >> BIT_SHIFT_WATCH_DOG_RECORD) & BIT_MASK_WATCH_DOG_RECORD)
#define BIT_SET_WATCH_DOG_RECORD(x, v)			(BIT_CLEAR_WATCH_DOG_RECORD(x) | BIT_WATCH_DOG_RECORD(v))

#define BIT_R_IO_TIMEOUT_FLAG				BIT(9)
#define BIT_EN_WATCH_DOG				BIT(8)

/* 2 REG_ENABLE_DUMMY_READ			(Offset 0x03FC) */

#define BIT_SHIFT_R_DEBUG				22
#define BIT_MASK_R_DEBUG				0x3
#define BIT_R_DEBUG(x)					(((x) & BIT_MASK_R_DEBUG) << BIT_SHIFT_R_DEBUG)
#define BITS_R_DEBUG					(BIT_MASK_R_DEBUG << BIT_SHIFT_R_DEBUG)
#define BIT_CLEAR_R_DEBUG(x)				((x) & (~BITS_R_DEBUG))
#define BIT_GET_R_DEBUG(x)				(((x) >> BIT_SHIFT_R_DEBUG) & BIT_MASK_R_DEBUG)
#define BIT_SET_R_DEBUG(x, v)				(BIT_CLEAR_R_DEBUG(x) | BIT_R_DEBUG(v))

#define BIT_EN_OUT_STD					BIT(6)

/* 2 REG_Q0_INFO				(Offset 0x0400) */

#define BIT_SHIFT_QUEUEMACID_Q0_V1			25
#define BIT_MASK_QUEUEMACID_Q0_V1			0x7f
#define BIT_QUEUEMACID_Q0_V1(x)			(((x) & BIT_MASK_QUEUEMACID_Q0_V1) << BIT_SHIFT_QUEUEMACID_Q0_V1)
#define BITS_QUEUEMACID_Q0_V1				(BIT_MASK_QUEUEMACID_Q0_V1 << BIT_SHIFT_QUEUEMACID_Q0_V1)
#define BIT_CLEAR_QUEUEMACID_Q0_V1(x)			((x) & (~BITS_QUEUEMACID_Q0_V1))
#define BIT_GET_QUEUEMACID_Q0_V1(x)			(((x) >> BIT_SHIFT_QUEUEMACID_Q0_V1) & BIT_MASK_QUEUEMACID_Q0_V1)
#define BIT_SET_QUEUEMACID_Q0_V1(x, v)			(BIT_CLEAR_QUEUEMACID_Q0_V1(x) | BIT_QUEUEMACID_Q0_V1(v))

#define BIT_SHIFT_QUEUEAC_Q0_V1			23
#define BIT_MASK_QUEUEAC_Q0_V1				0x3
#define BIT_QUEUEAC_Q0_V1(x)				(((x) & BIT_MASK_QUEUEAC_Q0_V1) << BIT_SHIFT_QUEUEAC_Q0_V1)
#define BITS_QUEUEAC_Q0_V1				(BIT_MASK_QUEUEAC_Q0_V1 << BIT_SHIFT_QUEUEAC_Q0_V1)
#define BIT_CLEAR_QUEUEAC_Q0_V1(x)			((x) & (~BITS_QUEUEAC_Q0_V1))
#define BIT_GET_QUEUEAC_Q0_V1(x)			(((x) >> BIT_SHIFT_QUEUEAC_Q0_V1) & BIT_MASK_QUEUEAC_Q0_V1)
#define BIT_SET_QUEUEAC_Q0_V1(x, v)			(BIT_CLEAR_QUEUEAC_Q0_V1(x) | BIT_QUEUEAC_Q0_V1(v))

#define BIT_SHIFT_TAIL_PKT_Q0_V1			15
#define BIT_MASK_TAIL_PKT_Q0_V1			0xff
#define BIT_TAIL_PKT_Q0_V1(x)				(((x) & BIT_MASK_TAIL_PKT_Q0_V1) << BIT_SHIFT_TAIL_PKT_Q0_V1)
#define BITS_TAIL_PKT_Q0_V1				(BIT_MASK_TAIL_PKT_Q0_V1 << BIT_SHIFT_TAIL_PKT_Q0_V1)
#define BIT_CLEAR_TAIL_PKT_Q0_V1(x)			((x) & (~BITS_TAIL_PKT_Q0_V1))
#define BIT_GET_TAIL_PKT_Q0_V1(x)			(((x) >> BIT_SHIFT_TAIL_PKT_Q0_V1) & BIT_MASK_TAIL_PKT_Q0_V1)
#define BIT_SET_TAIL_PKT_Q0_V1(x, v)			(BIT_CLEAR_TAIL_PKT_Q0_V1(x) | BIT_TAIL_PKT_Q0_V1(v))

#define BIT_SHIFT_PKT_NUM_Q0_V1			8
#define BIT_MASK_PKT_NUM_Q0_V1				0x7f
#define BIT_PKT_NUM_Q0_V1(x)				(((x) & BIT_MASK_PKT_NUM_Q0_V1) << BIT_SHIFT_PKT_NUM_Q0_V1)
#define BITS_PKT_NUM_Q0_V1				(BIT_MASK_PKT_NUM_Q0_V1 << BIT_SHIFT_PKT_NUM_Q0_V1)
#define BIT_CLEAR_PKT_NUM_Q0_V1(x)			((x) & (~BITS_PKT_NUM_Q0_V1))
#define BIT_GET_PKT_NUM_Q0_V1(x)			(((x) >> BIT_SHIFT_PKT_NUM_Q0_V1) & BIT_MASK_PKT_NUM_Q0_V1)
#define BIT_SET_PKT_NUM_Q0_V1(x, v)			(BIT_CLEAR_PKT_NUM_Q0_V1(x) | BIT_PKT_NUM_Q0_V1(v))

#define BIT_SHIFT_HEAD_PKT_Q0				0
#define BIT_MASK_HEAD_PKT_Q0				0xff
#define BIT_HEAD_PKT_Q0(x)				(((x) & BIT_MASK_HEAD_PKT_Q0) << BIT_SHIFT_HEAD_PKT_Q0)
#define BITS_HEAD_PKT_Q0				(BIT_MASK_HEAD_PKT_Q0 << BIT_SHIFT_HEAD_PKT_Q0)
#define BIT_CLEAR_HEAD_PKT_Q0(x)			((x) & (~BITS_HEAD_PKT_Q0))
#define BIT_GET_HEAD_PKT_Q0(x)				(((x) >> BIT_SHIFT_HEAD_PKT_Q0) & BIT_MASK_HEAD_PKT_Q0)
#define BIT_SET_HEAD_PKT_Q0(x, v)			(BIT_CLEAR_HEAD_PKT_Q0(x) | BIT_HEAD_PKT_Q0(v))

/* 2 REG_Q1_INFO				(Offset 0x0404) */

#define BIT_SHIFT_QUEUEMACID_Q1_V1			25
#define BIT_MASK_QUEUEMACID_Q1_V1			0x7f
#define BIT_QUEUEMACID_Q1_V1(x)			(((x) & BIT_MASK_QUEUEMACID_Q1_V1) << BIT_SHIFT_QUEUEMACID_Q1_V1)
#define BITS_QUEUEMACID_Q1_V1				(BIT_MASK_QUEUEMACID_Q1_V1 << BIT_SHIFT_QUEUEMACID_Q1_V1)
#define BIT_CLEAR_QUEUEMACID_Q1_V1(x)			((x) & (~BITS_QUEUEMACID_Q1_V1))
#define BIT_GET_QUEUEMACID_Q1_V1(x)			(((x) >> BIT_SHIFT_QUEUEMACID_Q1_V1) & BIT_MASK_QUEUEMACID_Q1_V1)
#define BIT_SET_QUEUEMACID_Q1_V1(x, v)			(BIT_CLEAR_QUEUEMACID_Q1_V1(x) | BIT_QUEUEMACID_Q1_V1(v))

#define BIT_SHIFT_QUEUEAC_Q1_V1			23
#define BIT_MASK_QUEUEAC_Q1_V1				0x3
#define BIT_QUEUEAC_Q1_V1(x)				(((x) & BIT_MASK_QUEUEAC_Q1_V1) << BIT_SHIFT_QUEUEAC_Q1_V1)
#define BITS_QUEUEAC_Q1_V1				(BIT_MASK_QUEUEAC_Q1_V1 << BIT_SHIFT_QUEUEAC_Q1_V1)
#define BIT_CLEAR_QUEUEAC_Q1_V1(x)			((x) & (~BITS_QUEUEAC_Q1_V1))
#define BIT_GET_QUEUEAC_Q1_V1(x)			(((x) >> BIT_SHIFT_QUEUEAC_Q1_V1) & BIT_MASK_QUEUEAC_Q1_V1)
#define BIT_SET_QUEUEAC_Q1_V1(x, v)			(BIT_CLEAR_QUEUEAC_Q1_V1(x) | BIT_QUEUEAC_Q1_V1(v))

#define BIT_SHIFT_TAIL_PKT_Q1_V1			15
#define BIT_MASK_TAIL_PKT_Q1_V1			0xff
#define BIT_TAIL_PKT_Q1_V1(x)				(((x) & BIT_MASK_TAIL_PKT_Q1_V1) << BIT_SHIFT_TAIL_PKT_Q1_V1)
#define BITS_TAIL_PKT_Q1_V1				(BIT_MASK_TAIL_PKT_Q1_V1 << BIT_SHIFT_TAIL_PKT_Q1_V1)
#define BIT_CLEAR_TAIL_PKT_Q1_V1(x)			((x) & (~BITS_TAIL_PKT_Q1_V1))
#define BIT_GET_TAIL_PKT_Q1_V1(x)			(((x) >> BIT_SHIFT_TAIL_PKT_Q1_V1) & BIT_MASK_TAIL_PKT_Q1_V1)
#define BIT_SET_TAIL_PKT_Q1_V1(x, v)			(BIT_CLEAR_TAIL_PKT_Q1_V1(x) | BIT_TAIL_PKT_Q1_V1(v))

#define BIT_SHIFT_PKT_NUM_Q1_V1			8
#define BIT_MASK_PKT_NUM_Q1_V1				0x7f
#define BIT_PKT_NUM_Q1_V1(x)				(((x) & BIT_MASK_PKT_NUM_Q1_V1) << BIT_SHIFT_PKT_NUM_Q1_V1)
#define BITS_PKT_NUM_Q1_V1				(BIT_MASK_PKT_NUM_Q1_V1 << BIT_SHIFT_PKT_NUM_Q1_V1)
#define BIT_CLEAR_PKT_NUM_Q1_V1(x)			((x) & (~BITS_PKT_NUM_Q1_V1))
#define BIT_GET_PKT_NUM_Q1_V1(x)			(((x) >> BIT_SHIFT_PKT_NUM_Q1_V1) & BIT_MASK_PKT_NUM_Q1_V1)
#define BIT_SET_PKT_NUM_Q1_V1(x, v)			(BIT_CLEAR_PKT_NUM_Q1_V1(x) | BIT_PKT_NUM_Q1_V1(v))

#define BIT_SHIFT_HEAD_PKT_Q1				0
#define BIT_MASK_HEAD_PKT_Q1				0xff
#define BIT_HEAD_PKT_Q1(x)				(((x) & BIT_MASK_HEAD_PKT_Q1) << BIT_SHIFT_HEAD_PKT_Q1)
#define BITS_HEAD_PKT_Q1				(BIT_MASK_HEAD_PKT_Q1 << BIT_SHIFT_HEAD_PKT_Q1)
#define BIT_CLEAR_HEAD_PKT_Q1(x)			((x) & (~BITS_HEAD_PKT_Q1))
#define BIT_GET_HEAD_PKT_Q1(x)				(((x) >> BIT_SHIFT_HEAD_PKT_Q1) & BIT_MASK_HEAD_PKT_Q1)
#define BIT_SET_HEAD_PKT_Q1(x, v)			(BIT_CLEAR_HEAD_PKT_Q1(x) | BIT_HEAD_PKT_Q1(v))

/* 2 REG_Q2_INFO				(Offset 0x0408) */

#define BIT_SHIFT_QUEUEMACID_Q2_V1			25
#define BIT_MASK_QUEUEMACID_Q2_V1			0x7f
#define BIT_QUEUEMACID_Q2_V1(x)			(((x) & BIT_MASK_QUEUEMACID_Q2_V1) << BIT_SHIFT_QUEUEMACID_Q2_V1)
#define BITS_QUEUEMACID_Q2_V1				(BIT_MASK_QUEUEMACID_Q2_V1 << BIT_SHIFT_QUEUEMACID_Q2_V1)
#define BIT_CLEAR_QUEUEMACID_Q2_V1(x)			((x) & (~BITS_QUEUEMACID_Q2_V1))
#define BIT_GET_QUEUEMACID_Q2_V1(x)			(((x) >> BIT_SHIFT_QUEUEMACID_Q2_V1) & BIT_MASK_QUEUEMACID_Q2_V1)
#define BIT_SET_QUEUEMACID_Q2_V1(x, v)			(BIT_CLEAR_QUEUEMACID_Q2_V1(x) | BIT_QUEUEMACID_Q2_V1(v))

#define BIT_SHIFT_QUEUEAC_Q2_V1			23
#define BIT_MASK_QUEUEAC_Q2_V1				0x3
#define BIT_QUEUEAC_Q2_V1(x)				(((x) & BIT_MASK_QUEUEAC_Q2_V1) << BIT_SHIFT_QUEUEAC_Q2_V1)
#define BITS_QUEUEAC_Q2_V1				(BIT_MASK_QUEUEAC_Q2_V1 << BIT_SHIFT_QUEUEAC_Q2_V1)
#define BIT_CLEAR_QUEUEAC_Q2_V1(x)			((x) & (~BITS_QUEUEAC_Q2_V1))
#define BIT_GET_QUEUEAC_Q2_V1(x)			(((x) >> BIT_SHIFT_QUEUEAC_Q2_V1) & BIT_MASK_QUEUEAC_Q2_V1)
#define BIT_SET_QUEUEAC_Q2_V1(x, v)			(BIT_CLEAR_QUEUEAC_Q2_V1(x) | BIT_QUEUEAC_Q2_V1(v))

#define BIT_SHIFT_TAIL_PKT_Q2_V1			15
#define BIT_MASK_TAIL_PKT_Q2_V1			0xff
#define BIT_TAIL_PKT_Q2_V1(x)				(((x) & BIT_MASK_TAIL_PKT_Q2_V1) << BIT_SHIFT_TAIL_PKT_Q2_V1)
#define BITS_TAIL_PKT_Q2_V1				(BIT_MASK_TAIL_PKT_Q2_V1 << BIT_SHIFT_TAIL_PKT_Q2_V1)
#define BIT_CLEAR_TAIL_PKT_Q2_V1(x)			((x) & (~BITS_TAIL_PKT_Q2_V1))
#define BIT_GET_TAIL_PKT_Q2_V1(x)			(((x) >> BIT_SHIFT_TAIL_PKT_Q2_V1) & BIT_MASK_TAIL_PKT_Q2_V1)
#define BIT_SET_TAIL_PKT_Q2_V1(x, v)			(BIT_CLEAR_TAIL_PKT_Q2_V1(x) | BIT_TAIL_PKT_Q2_V1(v))

#define BIT_SHIFT_PKT_NUM_Q2_V1			8
#define BIT_MASK_PKT_NUM_Q2_V1				0x7f
#define BIT_PKT_NUM_Q2_V1(x)				(((x) & BIT_MASK_PKT_NUM_Q2_V1) << BIT_SHIFT_PKT_NUM_Q2_V1)
#define BITS_PKT_NUM_Q2_V1				(BIT_MASK_PKT_NUM_Q2_V1 << BIT_SHIFT_PKT_NUM_Q2_V1)
#define BIT_CLEAR_PKT_NUM_Q2_V1(x)			((x) & (~BITS_PKT_NUM_Q2_V1))
#define BIT_GET_PKT_NUM_Q2_V1(x)			(((x) >> BIT_SHIFT_PKT_NUM_Q2_V1) & BIT_MASK_PKT_NUM_Q2_V1)
#define BIT_SET_PKT_NUM_Q2_V1(x, v)			(BIT_CLEAR_PKT_NUM_Q2_V1(x) | BIT_PKT_NUM_Q2_V1(v))

#define BIT_SHIFT_HEAD_PKT_Q2				0
#define BIT_MASK_HEAD_PKT_Q2				0xff
#define BIT_HEAD_PKT_Q2(x)				(((x) & BIT_MASK_HEAD_PKT_Q2) << BIT_SHIFT_HEAD_PKT_Q2)
#define BITS_HEAD_PKT_Q2				(BIT_MASK_HEAD_PKT_Q2 << BIT_SHIFT_HEAD_PKT_Q2)
#define BIT_CLEAR_HEAD_PKT_Q2(x)			((x) & (~BITS_HEAD_PKT_Q2))
#define BIT_GET_HEAD_PKT_Q2(x)				(((x) >> BIT_SHIFT_HEAD_PKT_Q2) & BIT_MASK_HEAD_PKT_Q2)
#define BIT_SET_HEAD_PKT_Q2(x, v)			(BIT_CLEAR_HEAD_PKT_Q2(x) | BIT_HEAD_PKT_Q2(v))

/* 2 REG_Q3_INFO				(Offset 0x040C) */

#define BIT_SHIFT_QUEUEMACID_Q3_V1			25
#define BIT_MASK_QUEUEMACID_Q3_V1			0x7f
#define BIT_QUEUEMACID_Q3_V1(x)			(((x) & BIT_MASK_QUEUEMACID_Q3_V1) << BIT_SHIFT_QUEUEMACID_Q3_V1)
#define BITS_QUEUEMACID_Q3_V1				(BIT_MASK_QUEUEMACID_Q3_V1 << BIT_SHIFT_QUEUEMACID_Q3_V1)
#define BIT_CLEAR_QUEUEMACID_Q3_V1(x)			((x) & (~BITS_QUEUEMACID_Q3_V1))
#define BIT_GET_QUEUEMACID_Q3_V1(x)			(((x) >> BIT_SHIFT_QUEUEMACID_Q3_V1) & BIT_MASK_QUEUEMACID_Q3_V1)
#define BIT_SET_QUEUEMACID_Q3_V1(x, v)			(BIT_CLEAR_QUEUEMACID_Q3_V1(x) | BIT_QUEUEMACID_Q3_V1(v))

#define BIT_SHIFT_QUEUEAC_Q3_V1			23
#define BIT_MASK_QUEUEAC_Q3_V1				0x3
#define BIT_QUEUEAC_Q3_V1(x)				(((x) & BIT_MASK_QUEUEAC_Q3_V1) << BIT_SHIFT_QUEUEAC_Q3_V1)
#define BITS_QUEUEAC_Q3_V1				(BIT_MASK_QUEUEAC_Q3_V1 << BIT_SHIFT_QUEUEAC_Q3_V1)
#define BIT_CLEAR_QUEUEAC_Q3_V1(x)			((x) & (~BITS_QUEUEAC_Q3_V1))
#define BIT_GET_QUEUEAC_Q3_V1(x)			(((x) >> BIT_SHIFT_QUEUEAC_Q3_V1) & BIT_MASK_QUEUEAC_Q3_V1)
#define BIT_SET_QUEUEAC_Q3_V1(x, v)			(BIT_CLEAR_QUEUEAC_Q3_V1(x) | BIT_QUEUEAC_Q3_V1(v))

#define BIT_SHIFT_TAIL_PKT_Q3_V1			15
#define BIT_MASK_TAIL_PKT_Q3_V1			0xff
#define BIT_TAIL_PKT_Q3_V1(x)				(((x) & BIT_MASK_TAIL_PKT_Q3_V1) << BIT_SHIFT_TAIL_PKT_Q3_V1)
#define BITS_TAIL_PKT_Q3_V1				(BIT_MASK_TAIL_PKT_Q3_V1 << BIT_SHIFT_TAIL_PKT_Q3_V1)
#define BIT_CLEAR_TAIL_PKT_Q3_V1(x)			((x) & (~BITS_TAIL_PKT_Q3_V1))
#define BIT_GET_TAIL_PKT_Q3_V1(x)			(((x) >> BIT_SHIFT_TAIL_PKT_Q3_V1) & BIT_MASK_TAIL_PKT_Q3_V1)
#define BIT_SET_TAIL_PKT_Q3_V1(x, v)			(BIT_CLEAR_TAIL_PKT_Q3_V1(x) | BIT_TAIL_PKT_Q3_V1(v))

#define BIT_SHIFT_PKT_NUM_Q3_V1			8
#define BIT_MASK_PKT_NUM_Q3_V1				0x7f
#define BIT_PKT_NUM_Q3_V1(x)				(((x) & BIT_MASK_PKT_NUM_Q3_V1) << BIT_SHIFT_PKT_NUM_Q3_V1)
#define BITS_PKT_NUM_Q3_V1				(BIT_MASK_PKT_NUM_Q3_V1 << BIT_SHIFT_PKT_NUM_Q3_V1)
#define BIT_CLEAR_PKT_NUM_Q3_V1(x)			((x) & (~BITS_PKT_NUM_Q3_V1))
#define BIT_GET_PKT_NUM_Q3_V1(x)			(((x) >> BIT_SHIFT_PKT_NUM_Q3_V1) & BIT_MASK_PKT_NUM_Q3_V1)
#define BIT_SET_PKT_NUM_Q3_V1(x, v)			(BIT_CLEAR_PKT_NUM_Q3_V1(x) | BIT_PKT_NUM_Q3_V1(v))

#define BIT_SHIFT_HEAD_PKT_Q3				0
#define BIT_MASK_HEAD_PKT_Q3				0xff
#define BIT_HEAD_PKT_Q3(x)				(((x) & BIT_MASK_HEAD_PKT_Q3) << BIT_SHIFT_HEAD_PKT_Q3)
#define BITS_HEAD_PKT_Q3				(BIT_MASK_HEAD_PKT_Q3 << BIT_SHIFT_HEAD_PKT_Q3)
#define BIT_CLEAR_HEAD_PKT_Q3(x)			((x) & (~BITS_HEAD_PKT_Q3))
#define BIT_GET_HEAD_PKT_Q3(x)				(((x) >> BIT_SHIFT_HEAD_PKT_Q3) & BIT_MASK_HEAD_PKT_Q3)
#define BIT_SET_HEAD_PKT_Q3(x, v)			(BIT_CLEAR_HEAD_PKT_Q3(x) | BIT_HEAD_PKT_Q3(v))

/* 2 REG_MGQ_INFO				(Offset 0x0410) */

#define BIT_SHIFT_QUEUEMACID_MGQ_V1			25
#define BIT_MASK_QUEUEMACID_MGQ_V1			0x7f
#define BIT_QUEUEMACID_MGQ_V1(x)			(((x) & BIT_MASK_QUEUEMACID_MGQ_V1) << BIT_SHIFT_QUEUEMACID_MGQ_V1)
#define BITS_QUEUEMACID_MGQ_V1				(BIT_MASK_QUEUEMACID_MGQ_V1 << BIT_SHIFT_QUEUEMACID_MGQ_V1)
#define BIT_CLEAR_QUEUEMACID_MGQ_V1(x)			((x) & (~BITS_QUEUEMACID_MGQ_V1))
#define BIT_GET_QUEUEMACID_MGQ_V1(x)			(((x) >> BIT_SHIFT_QUEUEMACID_MGQ_V1) & BIT_MASK_QUEUEMACID_MGQ_V1)
#define BIT_SET_QUEUEMACID_MGQ_V1(x, v)		(BIT_CLEAR_QUEUEMACID_MGQ_V1(x) | BIT_QUEUEMACID_MGQ_V1(v))

#define BIT_SHIFT_QUEUEAC_MGQ_V1			23
#define BIT_MASK_QUEUEAC_MGQ_V1			0x3
#define BIT_QUEUEAC_MGQ_V1(x)				(((x) & BIT_MASK_QUEUEAC_MGQ_V1) << BIT_SHIFT_QUEUEAC_MGQ_V1)
#define BITS_QUEUEAC_MGQ_V1				(BIT_MASK_QUEUEAC_MGQ_V1 << BIT_SHIFT_QUEUEAC_MGQ_V1)
#define BIT_CLEAR_QUEUEAC_MGQ_V1(x)			((x) & (~BITS_QUEUEAC_MGQ_V1))
#define BIT_GET_QUEUEAC_MGQ_V1(x)			(((x) >> BIT_SHIFT_QUEUEAC_MGQ_V1) & BIT_MASK_QUEUEAC_MGQ_V1)
#define BIT_SET_QUEUEAC_MGQ_V1(x, v)			(BIT_CLEAR_QUEUEAC_MGQ_V1(x) | BIT_QUEUEAC_MGQ_V1(v))

#define BIT_SHIFT_TAIL_PKT_MGQ_V1			15
#define BIT_MASK_TAIL_PKT_MGQ_V1			0xff
#define BIT_TAIL_PKT_MGQ_V1(x)				(((x) & BIT_MASK_TAIL_PKT_MGQ_V1) << BIT_SHIFT_TAIL_PKT_MGQ_V1)
#define BITS_TAIL_PKT_MGQ_V1				(BIT_MASK_TAIL_PKT_MGQ_V1 << BIT_SHIFT_TAIL_PKT_MGQ_V1)
#define BIT_CLEAR_TAIL_PKT_MGQ_V1(x)			((x) & (~BITS_TAIL_PKT_MGQ_V1))
#define BIT_GET_TAIL_PKT_MGQ_V1(x)			(((x) >> BIT_SHIFT_TAIL_PKT_MGQ_V1) & BIT_MASK_TAIL_PKT_MGQ_V1)
#define BIT_SET_TAIL_PKT_MGQ_V1(x, v)			(BIT_CLEAR_TAIL_PKT_MGQ_V1(x) | BIT_TAIL_PKT_MGQ_V1(v))

#define BIT_SHIFT_PKT_NUM_MGQ_V1			8
#define BIT_MASK_PKT_NUM_MGQ_V1			0x7f
#define BIT_PKT_NUM_MGQ_V1(x)				(((x) & BIT_MASK_PKT_NUM_MGQ_V1) << BIT_SHIFT_PKT_NUM_MGQ_V1)
#define BITS_PKT_NUM_MGQ_V1				(BIT_MASK_PKT_NUM_MGQ_V1 << BIT_SHIFT_PKT_NUM_MGQ_V1)
#define BIT_CLEAR_PKT_NUM_MGQ_V1(x)			((x) & (~BITS_PKT_NUM_MGQ_V1))
#define BIT_GET_PKT_NUM_MGQ_V1(x)			(((x) >> BIT_SHIFT_PKT_NUM_MGQ_V1) & BIT_MASK_PKT_NUM_MGQ_V1)
#define BIT_SET_PKT_NUM_MGQ_V1(x, v)			(BIT_CLEAR_PKT_NUM_MGQ_V1(x) | BIT_PKT_NUM_MGQ_V1(v))

#define BIT_SHIFT_HEAD_PKT_MGQ				0
#define BIT_MASK_HEAD_PKT_MGQ				0xff
#define BIT_HEAD_PKT_MGQ(x)				(((x) & BIT_MASK_HEAD_PKT_MGQ) << BIT_SHIFT_HEAD_PKT_MGQ)
#define BITS_HEAD_PKT_MGQ				(BIT_MASK_HEAD_PKT_MGQ << BIT_SHIFT_HEAD_PKT_MGQ)
#define BIT_CLEAR_HEAD_PKT_MGQ(x)			((x) & (~BITS_HEAD_PKT_MGQ))
#define BIT_GET_HEAD_PKT_MGQ(x)			(((x) >> BIT_SHIFT_HEAD_PKT_MGQ) & BIT_MASK_HEAD_PKT_MGQ)
#define BIT_SET_HEAD_PKT_MGQ(x, v)			(BIT_CLEAR_HEAD_PKT_MGQ(x) | BIT_HEAD_PKT_MGQ(v))

/* 2 REG_HIQ_INFO				(Offset 0x0414) */

#define BIT_SHIFT_QUEUEMACID_HIQ_V1			25
#define BIT_MASK_QUEUEMACID_HIQ_V1			0x7f
#define BIT_QUEUEMACID_HIQ_V1(x)			(((x) & BIT_MASK_QUEUEMACID_HIQ_V1) << BIT_SHIFT_QUEUEMACID_HIQ_V1)
#define BITS_QUEUEMACID_HIQ_V1				(BIT_MASK_QUEUEMACID_HIQ_V1 << BIT_SHIFT_QUEUEMACID_HIQ_V1)
#define BIT_CLEAR_QUEUEMACID_HIQ_V1(x)			((x) & (~BITS_QUEUEMACID_HIQ_V1))
#define BIT_GET_QUEUEMACID_HIQ_V1(x)			(((x) >> BIT_SHIFT_QUEUEMACID_HIQ_V1) & BIT_MASK_QUEUEMACID_HIQ_V1)
#define BIT_SET_QUEUEMACID_HIQ_V1(x, v)		(BIT_CLEAR_QUEUEMACID_HIQ_V1(x) | BIT_QUEUEMACID_HIQ_V1(v))

#define BIT_SHIFT_QUEUEAC_HIQ_V1			23
#define BIT_MASK_QUEUEAC_HIQ_V1			0x3
#define BIT_QUEUEAC_HIQ_V1(x)				(((x) & BIT_MASK_QUEUEAC_HIQ_V1) << BIT_SHIFT_QUEUEAC_HIQ_V1)
#define BITS_QUEUEAC_HIQ_V1				(BIT_MASK_QUEUEAC_HIQ_V1 << BIT_SHIFT_QUEUEAC_HIQ_V1)
#define BIT_CLEAR_QUEUEAC_HIQ_V1(x)			((x) & (~BITS_QUEUEAC_HIQ_V1))
#define BIT_GET_QUEUEAC_HIQ_V1(x)			(((x) >> BIT_SHIFT_QUEUEAC_HIQ_V1) & BIT_MASK_QUEUEAC_HIQ_V1)
#define BIT_SET_QUEUEAC_HIQ_V1(x, v)			(BIT_CLEAR_QUEUEAC_HIQ_V1(x) | BIT_QUEUEAC_HIQ_V1(v))

#define BIT_SHIFT_TAIL_PKT_HIQ_V1			15
#define BIT_MASK_TAIL_PKT_HIQ_V1			0xff
#define BIT_TAIL_PKT_HIQ_V1(x)				(((x) & BIT_MASK_TAIL_PKT_HIQ_V1) << BIT_SHIFT_TAIL_PKT_HIQ_V1)
#define BITS_TAIL_PKT_HIQ_V1				(BIT_MASK_TAIL_PKT_HIQ_V1 << BIT_SHIFT_TAIL_PKT_HIQ_V1)
#define BIT_CLEAR_TAIL_PKT_HIQ_V1(x)			((x) & (~BITS_TAIL_PKT_HIQ_V1))
#define BIT_GET_TAIL_PKT_HIQ_V1(x)			(((x) >> BIT_SHIFT_TAIL_PKT_HIQ_V1) & BIT_MASK_TAIL_PKT_HIQ_V1)
#define BIT_SET_TAIL_PKT_HIQ_V1(x, v)			(BIT_CLEAR_TAIL_PKT_HIQ_V1(x) | BIT_TAIL_PKT_HIQ_V1(v))

#define BIT_SHIFT_PKT_NUM_HIQ_V1			8
#define BIT_MASK_PKT_NUM_HIQ_V1			0x7f
#define BIT_PKT_NUM_HIQ_V1(x)				(((x) & BIT_MASK_PKT_NUM_HIQ_V1) << BIT_SHIFT_PKT_NUM_HIQ_V1)
#define BITS_PKT_NUM_HIQ_V1				(BIT_MASK_PKT_NUM_HIQ_V1 << BIT_SHIFT_PKT_NUM_HIQ_V1)
#define BIT_CLEAR_PKT_NUM_HIQ_V1(x)			((x) & (~BITS_PKT_NUM_HIQ_V1))
#define BIT_GET_PKT_NUM_HIQ_V1(x)			(((x) >> BIT_SHIFT_PKT_NUM_HIQ_V1) & BIT_MASK_PKT_NUM_HIQ_V1)
#define BIT_SET_PKT_NUM_HIQ_V1(x, v)			(BIT_CLEAR_PKT_NUM_HIQ_V1(x) | BIT_PKT_NUM_HIQ_V1(v))

#define BIT_SHIFT_HEAD_PKT_HIQ				0
#define BIT_MASK_HEAD_PKT_HIQ				0xff
#define BIT_HEAD_PKT_HIQ(x)				(((x) & BIT_MASK_HEAD_PKT_HIQ) << BIT_SHIFT_HEAD_PKT_HIQ)
#define BITS_HEAD_PKT_HIQ				(BIT_MASK_HEAD_PKT_HIQ << BIT_SHIFT_HEAD_PKT_HIQ)
#define BIT_CLEAR_HEAD_PKT_HIQ(x)			((x) & (~BITS_HEAD_PKT_HIQ))
#define BIT_GET_HEAD_PKT_HIQ(x)			(((x) >> BIT_SHIFT_HEAD_PKT_HIQ) & BIT_MASK_HEAD_PKT_HIQ)
#define BIT_SET_HEAD_PKT_HIQ(x, v)			(BIT_CLEAR_HEAD_PKT_HIQ(x) | BIT_HEAD_PKT_HIQ(v))

/* 2 REG_QUE_EMPTY_BCNQ_INFO			(Offset 0x0418) */

#define BIT_BCNQ_EMPTY_P2				BIT(31)
#define BIT_BCNQ_EMPTY_P1				BIT(30)
#define BIT_BCNQ_EMPTY_P0				BIT(29)
#define BIT_EVTQ_EMPTY					BIT(28)
#define BIT_BCNQ_EMPTY					BIT(27)
#define BIT_HQQ_EMPTY					BIT(26)
#define BIT_MQQ_EMPTY					BIT(25)
#define BIT_MGQ_CPU_EMPTY				BIT(24)
#define BIT_AC7Q_EMPTY					BIT(23)
#define BIT_AC6Q_EMPTY					BIT(22)
#define BIT_AC5Q_EMPTY					BIT(21)
#define BIT_AC4Q_EMPTY					BIT(20)
#define BIT_AC3Q_EMPTY					BIT(19)
#define BIT_AC2Q_EMPTY					BIT(18)
#define BIT_AC1Q_EMPTY					BIT(17)
#define BIT_AC0Q_EMPTY					BIT(16)

#define BIT_SHIFT_PKT_NUM_BCNQ				8
#define BIT_MASK_PKT_NUM_BCNQ				0xff
#define BIT_PKT_NUM_BCNQ(x)				(((x) & BIT_MASK_PKT_NUM_BCNQ) << BIT_SHIFT_PKT_NUM_BCNQ)
#define BITS_PKT_NUM_BCNQ				(BIT_MASK_PKT_NUM_BCNQ << BIT_SHIFT_PKT_NUM_BCNQ)
#define BIT_CLEAR_PKT_NUM_BCNQ(x)			((x) & (~BITS_PKT_NUM_BCNQ))
#define BIT_GET_PKT_NUM_BCNQ(x)			(((x) >> BIT_SHIFT_PKT_NUM_BCNQ) & BIT_MASK_PKT_NUM_BCNQ)
#define BIT_SET_PKT_NUM_BCNQ(x, v)			(BIT_CLEAR_PKT_NUM_BCNQ(x) | BIT_PKT_NUM_BCNQ(v))

#define BIT_SHIFT_BCNQ_HEAD_PG				0
#define BIT_MASK_BCNQ_HEAD_PG				0xff
#define BIT_BCNQ_HEAD_PG(x)				(((x) & BIT_MASK_BCNQ_HEAD_PG) << BIT_SHIFT_BCNQ_HEAD_PG)
#define BITS_BCNQ_HEAD_PG				(BIT_MASK_BCNQ_HEAD_PG << BIT_SHIFT_BCNQ_HEAD_PG)
#define BIT_CLEAR_BCNQ_HEAD_PG(x)			((x) & (~BITS_BCNQ_HEAD_PG))
#define BIT_GET_BCNQ_HEAD_PG(x)			(((x) >> BIT_SHIFT_BCNQ_HEAD_PG) & BIT_MASK_BCNQ_HEAD_PG)
#define BIT_SET_BCNQ_HEAD_PG(x, v)			(BIT_CLEAR_BCNQ_HEAD_PG(x) | BIT_BCNQ_HEAD_PG(v))

/* 2 REG_CPU_MGQ_INFO			(Offset 0x041C) */

#define BIT_BCN_POLL2					BIT(31)
#define BIT_BCN_POLL1					BIT(30)
#define BIT_CPUMGT_POLL_SET				BIT(29)
#define BIT_BCN_POLL					BIT(28)
#define BIT_CPUMGT_POLL_CLR				BIT(27)
#define BIT_EVTQ_VLD					BIT(26)
#define BIT_CMDQ_POLL					BIT(24)
#define BIT_CPUMGQ_FW_NUM				BIT(8)

#define BIT_SHIFT_CPUMGQ_HEAD_PG			0
#define BIT_MASK_CPUMGQ_HEAD_PG			0xff
#define BIT_CPUMGQ_HEAD_PG(x)				(((x) & BIT_MASK_CPUMGQ_HEAD_PG) << BIT_SHIFT_CPUMGQ_HEAD_PG)
#define BITS_CPUMGQ_HEAD_PG				(BIT_MASK_CPUMGQ_HEAD_PG << BIT_SHIFT_CPUMGQ_HEAD_PG)
#define BIT_CLEAR_CPUMGQ_HEAD_PG(x)			((x) & (~BITS_CPUMGQ_HEAD_PG))
#define BIT_GET_CPUMGQ_HEAD_PG(x)			(((x) >> BIT_SHIFT_CPUMGQ_HEAD_PG) & BIT_MASK_CPUMGQ_HEAD_PG)
#define BIT_SET_CPUMGQ_HEAD_PG(x, v)			(BIT_CLEAR_CPUMGQ_HEAD_PG(x) | BIT_CPUMGQ_HEAD_PG(v))

/* 2 REG_FWHW_TXQ_HWSSN_CTRL			(Offset 0x0420) */

#define BIT_SHIFT_HW_SSN_EN				24
#define BIT_MASK_HW_SSN_EN				0xff
#define BIT_HW_SSN_EN(x)				(((x) & BIT_MASK_HW_SSN_EN) << BIT_SHIFT_HW_SSN_EN)
#define BITS_HW_SSN_EN					(BIT_MASK_HW_SSN_EN << BIT_SHIFT_HW_SSN_EN)
#define BIT_CLEAR_HW_SSN_EN(x)				((x) & (~BITS_HW_SSN_EN))
#define BIT_GET_HW_SSN_EN(x)				(((x) >> BIT_SHIFT_HW_SSN_EN) & BIT_MASK_HW_SSN_EN)
#define BIT_SET_HW_SSN_EN(x, v)			(BIT_CLEAR_HW_SSN_EN(x) | BIT_HW_SSN_EN(v))

#define BIT_RTS_LIMIT_IN_OFDM				BIT(23)
#define BIT_EN_BCNQ_DL					BIT(22)
#define BIT_EN_RD_RESP_NAV_BK				BIT(21)
#define BIT_EN_WR_FREE_TAIL				BIT(20)
#define BIT_TXRPT_DIS					BIT(19)
#define BIT_TXFAILRPT_DIS				BIT(18)
#define BIT_EN_RTY_BC					BIT(17)
#define BIT_EN_RTY_BK_COND				BIT(16)

#define BIT_SHIFT_EN_QUEUE_RPT				8
#define BIT_MASK_EN_QUEUE_RPT				0xff
#define BIT_EN_QUEUE_RPT(x)				(((x) & BIT_MASK_EN_QUEUE_RPT) << BIT_SHIFT_EN_QUEUE_RPT)
#define BITS_EN_QUEUE_RPT				(BIT_MASK_EN_QUEUE_RPT << BIT_SHIFT_EN_QUEUE_RPT)
#define BIT_CLEAR_EN_QUEUE_RPT(x)			((x) & (~BITS_EN_QUEUE_RPT))
#define BIT_GET_EN_QUEUE_RPT(x)			(((x) >> BIT_SHIFT_EN_QUEUE_RPT) & BIT_MASK_EN_QUEUE_RPT)
#define BIT_SET_EN_QUEUE_RPT(x, v)			(BIT_CLEAR_EN_QUEUE_RPT(x) | BIT_EN_QUEUE_RPT(v))

#define BIT_EN_RTY_BK					BIT(7)
#define BIT_EN_USE_INI_RAT				BIT(6)
#define BIT_EN_RTS_NAV_BK				BIT(5)
#define BIT_DIS_SSN_CHECK				BIT(4)
#define BIT_MACID_MATCH_RTS				BIT(3)
#define BIT_EN_BCN_TXRPT				BIT(2)
#define BIT_EN_FTM_RPT					BIT(1)
#define BIT_PROTECT_BMC_NAV				BIT(0)

/* 2 REG_BNDY_LIFETIME_TAIL			(Offset 0x0424) */

#define BIT_SHIFT_FW_FREE_TAIL				24
#define BIT_MASK_FW_FREE_TAIL				0xff
#define BIT_FW_FREE_TAIL(x)				(((x) & BIT_MASK_FW_FREE_TAIL) << BIT_SHIFT_FW_FREE_TAIL)
#define BITS_FW_FREE_TAIL				(BIT_MASK_FW_FREE_TAIL << BIT_SHIFT_FW_FREE_TAIL)
#define BIT_CLEAR_FW_FREE_TAIL(x)			((x) & (~BITS_FW_FREE_TAIL))
#define BIT_GET_FW_FREE_TAIL(x)			(((x) >> BIT_SHIFT_FW_FREE_TAIL) & BIT_MASK_FW_FREE_TAIL)
#define BIT_SET_FW_FREE_TAIL(x, v)			(BIT_CLEAR_FW_FREE_TAIL(x) | BIT_FW_FREE_TAIL(v))

#define BIT_SHIFT_BT_INT_TYPE				22
#define BIT_MASK_BT_INT_TYPE				0x3
#define BIT_BT_INT_TYPE(x)				(((x) & BIT_MASK_BT_INT_TYPE) << BIT_SHIFT_BT_INT_TYPE)
#define BITS_BT_INT_TYPE				(BIT_MASK_BT_INT_TYPE << BIT_SHIFT_BT_INT_TYPE)
#define BIT_CLEAR_BT_INT_TYPE(x)			((x) & (~BITS_BT_INT_TYPE))
#define BIT_GET_BT_INT_TYPE(x)				(((x) >> BIT_SHIFT_BT_INT_TYPE) & BIT_MASK_BT_INT_TYPE)
#define BIT_SET_BT_INT_TYPE(x, v)			(BIT_CLEAR_BT_INT_TYPE(x) | BIT_BT_INT_TYPE(v))

#define BIT_HW_SSN_EN_EVTQ				BIT(21)
#define BIT_RTYBIT_CTRL_EN				BIT(20)
#define BIT_LIFETIME_BK_EN				BIT(19)
#define BIT_LIFETIME_BE_EN				BIT(18)
#define BIT_LIFETIME_VI_EN				BIT(17)
#define BIT_LIFETIME_VO_EN				BIT(16)

#define BIT_SHIFT_MGQ_PGBNDY				8
#define BIT_MASK_MGQ_PGBNDY				0xff
#define BIT_MGQ_PGBNDY(x)				(((x) & BIT_MASK_MGQ_PGBNDY) << BIT_SHIFT_MGQ_PGBNDY)
#define BITS_MGQ_PGBNDY				(BIT_MASK_MGQ_PGBNDY << BIT_SHIFT_MGQ_PGBNDY)
#define BIT_CLEAR_MGQ_PGBNDY(x)			((x) & (~BITS_MGQ_PGBNDY))
#define BIT_GET_MGQ_PGBNDY(x)				(((x) >> BIT_SHIFT_MGQ_PGBNDY) & BIT_MASK_MGQ_PGBNDY)
#define BIT_SET_MGQ_PGBNDY(x, v)			(BIT_CLEAR_MGQ_PGBNDY(x) | BIT_MGQ_PGBNDY(v))

#define BIT_SHIFT_BCNQ_PGBNDY				0
#define BIT_MASK_BCNQ_PGBNDY				0xff
#define BIT_BCNQ_PGBNDY(x)				(((x) & BIT_MASK_BCNQ_PGBNDY) << BIT_SHIFT_BCNQ_PGBNDY)
#define BITS_BCNQ_PGBNDY				(BIT_MASK_BCNQ_PGBNDY << BIT_SHIFT_BCNQ_PGBNDY)
#define BIT_CLEAR_BCNQ_PGBNDY(x)			((x) & (~BITS_BCNQ_PGBNDY))
#define BIT_GET_BCNQ_PGBNDY(x)				(((x) >> BIT_SHIFT_BCNQ_PGBNDY) & BIT_MASK_BCNQ_PGBNDY)
#define BIT_SET_BCNQ_PGBNDY(x, v)			(BIT_CLEAR_BCNQ_PGBNDY(x) | BIT_BCNQ_PGBNDY(v))

/* 2 REG_RETRY_LIMIT_SIFS			(Offset 0x0428) */

#define BIT_SHIFT_SRL					24
#define BIT_MASK_SRL					0x3f
#define BIT_SRL(x)					(((x) & BIT_MASK_SRL) << BIT_SHIFT_SRL)
#define BITS_SRL					(BIT_MASK_SRL << BIT_SHIFT_SRL)
#define BIT_CLEAR_SRL(x)				((x) & (~BITS_SRL))
#define BIT_GET_SRL(x)					(((x) >> BIT_SHIFT_SRL) & BIT_MASK_SRL)
#define BIT_SET_SRL(x, v)				(BIT_CLEAR_SRL(x) | BIT_SRL(v))

#define BIT_SHIFT_LRL					16
#define BIT_MASK_LRL					0x3f
#define BIT_LRL(x)					(((x) & BIT_MASK_LRL) << BIT_SHIFT_LRL)
#define BITS_LRL					(BIT_MASK_LRL << BIT_SHIFT_LRL)
#define BIT_CLEAR_LRL(x)				((x) & (~BITS_LRL))
#define BIT_GET_LRL(x)					(((x) >> BIT_SHIFT_LRL) & BIT_MASK_LRL)
#define BIT_SET_LRL(x, v)				(BIT_CLEAR_LRL(x) | BIT_LRL(v))

#define BIT_SHIFT_SPEC_SIFS_OFDM_PTCL			8
#define BIT_MASK_SPEC_SIFS_OFDM_PTCL			0xff
#define BIT_SPEC_SIFS_OFDM_PTCL(x)			(((x) & BIT_MASK_SPEC_SIFS_OFDM_PTCL) << BIT_SHIFT_SPEC_SIFS_OFDM_PTCL)
#define BITS_SPEC_SIFS_OFDM_PTCL			(BIT_MASK_SPEC_SIFS_OFDM_PTCL << BIT_SHIFT_SPEC_SIFS_OFDM_PTCL)
#define BIT_CLEAR_SPEC_SIFS_OFDM_PTCL(x)		((x) & (~BITS_SPEC_SIFS_OFDM_PTCL))
#define BIT_GET_SPEC_SIFS_OFDM_PTCL(x)			(((x) >> BIT_SHIFT_SPEC_SIFS_OFDM_PTCL) & BIT_MASK_SPEC_SIFS_OFDM_PTCL)
#define BIT_SET_SPEC_SIFS_OFDM_PTCL(x, v)		(BIT_CLEAR_SPEC_SIFS_OFDM_PTCL(x) | BIT_SPEC_SIFS_OFDM_PTCL(v))

#define BIT_SHIFT_SPEC_SIFS_CCK_PTCL			0
#define BIT_MASK_SPEC_SIFS_CCK_PTCL			0xff
#define BIT_SPEC_SIFS_CCK_PTCL(x)			(((x) & BIT_MASK_SPEC_SIFS_CCK_PTCL) << BIT_SHIFT_SPEC_SIFS_CCK_PTCL)
#define BITS_SPEC_SIFS_CCK_PTCL			(BIT_MASK_SPEC_SIFS_CCK_PTCL << BIT_SHIFT_SPEC_SIFS_CCK_PTCL)
#define BIT_CLEAR_SPEC_SIFS_CCK_PTCL(x)		((x) & (~BITS_SPEC_SIFS_CCK_PTCL))
#define BIT_GET_SPEC_SIFS_CCK_PTCL(x)			(((x) >> BIT_SHIFT_SPEC_SIFS_CCK_PTCL) & BIT_MASK_SPEC_SIFS_CCK_PTCL)
#define BIT_SET_SPEC_SIFS_CCK_PTCL(x, v)		(BIT_CLEAR_SPEC_SIFS_CCK_PTCL(x) | BIT_SPEC_SIFS_CCK_PTCL(v))

/* 2 REG_TXBF_CTRL				(Offset 0x042C) */

#define BIT_R_ENABLE_NDPA				BIT(31)
#define BIT_USE_NDPA_PARAMETER				BIT(30)
#define BIT_R_EN_NDPA_INT				BIT(28)
#define BIT_R_TXBF1_80M				BIT(27)
#define BIT_R_TXBF1_40M				BIT(26)
#define BIT_R_TXBF1_20M				BIT(25)

#define BIT_SHIFT_R_TXBF1_AID				16
#define BIT_MASK_R_TXBF1_AID				0x1ff
#define BIT_R_TXBF1_AID(x)				(((x) & BIT_MASK_R_TXBF1_AID) << BIT_SHIFT_R_TXBF1_AID)
#define BITS_R_TXBF1_AID				(BIT_MASK_R_TXBF1_AID << BIT_SHIFT_R_TXBF1_AID)
#define BIT_CLEAR_R_TXBF1_AID(x)			((x) & (~BITS_R_TXBF1_AID))
#define BIT_GET_R_TXBF1_AID(x)				(((x) >> BIT_SHIFT_R_TXBF1_AID) & BIT_MASK_R_TXBF1_AID)
#define BIT_SET_R_TXBF1_AID(x, v)			(BIT_CLEAR_R_TXBF1_AID(x) | BIT_R_TXBF1_AID(v))

#define BIT_NDP_BFEN_DIS				BIT(15)
#define BIT_BCN_NOBLOCK_NDP				BIT(14)
#define BIT_R_TXBF0_80M				BIT(11)
#define BIT_R_TXBF0_40M				BIT(10)
#define BIT_R_TXBF0_20M				BIT(9)

#define BIT_SHIFT_R_TXBF0_AID				0
#define BIT_MASK_R_TXBF0_AID				0x1ff
#define BIT_R_TXBF0_AID(x)				(((x) & BIT_MASK_R_TXBF0_AID) << BIT_SHIFT_R_TXBF0_AID)
#define BITS_R_TXBF0_AID				(BIT_MASK_R_TXBF0_AID << BIT_SHIFT_R_TXBF0_AID)
#define BIT_CLEAR_R_TXBF0_AID(x)			((x) & (~BITS_R_TXBF0_AID))
#define BIT_GET_R_TXBF0_AID(x)				(((x) >> BIT_SHIFT_R_TXBF0_AID) & BIT_MASK_R_TXBF0_AID)
#define BIT_SET_R_TXBF0_AID(x, v)			(BIT_CLEAR_R_TXBF0_AID(x) | BIT_R_TXBF0_AID(v))

/* 2 REG_DARFRC0_L				(Offset 0x0430) */

#define BIT_SHIFT_DATA_FALLBACK_RC4			24
#define BIT_MASK_DATA_FALLBACK_RC4			0x1f
#define BIT_DATA_FALLBACK_RC4(x)			(((x) & BIT_MASK_DATA_FALLBACK_RC4) << BIT_SHIFT_DATA_FALLBACK_RC4)
#define BITS_DATA_FALLBACK_RC4				(BIT_MASK_DATA_FALLBACK_RC4 << BIT_SHIFT_DATA_FALLBACK_RC4)
#define BIT_CLEAR_DATA_FALLBACK_RC4(x)			((x) & (~BITS_DATA_FALLBACK_RC4))
#define BIT_GET_DATA_FALLBACK_RC4(x)			(((x) >> BIT_SHIFT_DATA_FALLBACK_RC4) & BIT_MASK_DATA_FALLBACK_RC4)
#define BIT_SET_DATA_FALLBACK_RC4(x, v)		(BIT_CLEAR_DATA_FALLBACK_RC4(x) | BIT_DATA_FALLBACK_RC4(v))

#define BIT_SHIFT_DATA_FALLBACK_RC3			16
#define BIT_MASK_DATA_FALLBACK_RC3			0x1f
#define BIT_DATA_FALLBACK_RC3(x)			(((x) & BIT_MASK_DATA_FALLBACK_RC3) << BIT_SHIFT_DATA_FALLBACK_RC3)
#define BITS_DATA_FALLBACK_RC3				(BIT_MASK_DATA_FALLBACK_RC3 << BIT_SHIFT_DATA_FALLBACK_RC3)
#define BIT_CLEAR_DATA_FALLBACK_RC3(x)			((x) & (~BITS_DATA_FALLBACK_RC3))
#define BIT_GET_DATA_FALLBACK_RC3(x)			(((x) >> BIT_SHIFT_DATA_FALLBACK_RC3) & BIT_MASK_DATA_FALLBACK_RC3)
#define BIT_SET_DATA_FALLBACK_RC3(x, v)		(BIT_CLEAR_DATA_FALLBACK_RC3(x) | BIT_DATA_FALLBACK_RC3(v))

#define BIT_SHIFT_DATA_FALLBACK_RC2			8
#define BIT_MASK_DATA_FALLBACK_RC2			0x1f
#define BIT_DATA_FALLBACK_RC2(x)			(((x) & BIT_MASK_DATA_FALLBACK_RC2) << BIT_SHIFT_DATA_FALLBACK_RC2)
#define BITS_DATA_FALLBACK_RC2				(BIT_MASK_DATA_FALLBACK_RC2 << BIT_SHIFT_DATA_FALLBACK_RC2)
#define BIT_CLEAR_DATA_FALLBACK_RC2(x)			((x) & (~BITS_DATA_FALLBACK_RC2))
#define BIT_GET_DATA_FALLBACK_RC2(x)			(((x) >> BIT_SHIFT_DATA_FALLBACK_RC2) & BIT_MASK_DATA_FALLBACK_RC2)
#define BIT_SET_DATA_FALLBACK_RC2(x, v)		(BIT_CLEAR_DATA_FALLBACK_RC2(x) | BIT_DATA_FALLBACK_RC2(v))

#define BIT_SHIFT_DATA_FALLBACK_RC1			0
#define BIT_MASK_DATA_FALLBACK_RC1			0x1f
#define BIT_DATA_FALLBACK_RC1(x)			(((x) & BIT_MASK_DATA_FALLBACK_RC1) << BIT_SHIFT_DATA_FALLBACK_RC1)
#define BITS_DATA_FALLBACK_RC1				(BIT_MASK_DATA_FALLBACK_RC1 << BIT_SHIFT_DATA_FALLBACK_RC1)
#define BIT_CLEAR_DATA_FALLBACK_RC1(x)			((x) & (~BITS_DATA_FALLBACK_RC1))
#define BIT_GET_DATA_FALLBACK_RC1(x)			(((x) >> BIT_SHIFT_DATA_FALLBACK_RC1) & BIT_MASK_DATA_FALLBACK_RC1)
#define BIT_SET_DATA_FALLBACK_RC1(x, v)		(BIT_CLEAR_DATA_FALLBACK_RC1(x) | BIT_DATA_FALLBACK_RC1(v))

/* 2 REG_DARFRC0_H				(Offset 0x0434) */

#define BIT_SHIFT_DATA_FALLBACK_RC8			24
#define BIT_MASK_DATA_FALLBACK_RC8			0x1f
#define BIT_DATA_FALLBACK_RC8(x)			(((x) & BIT_MASK_DATA_FALLBACK_RC8) << BIT_SHIFT_DATA_FALLBACK_RC8)
#define BITS_DATA_FALLBACK_RC8				(BIT_MASK_DATA_FALLBACK_RC8 << BIT_SHIFT_DATA_FALLBACK_RC8)
#define BIT_CLEAR_DATA_FALLBACK_RC8(x)			((x) & (~BITS_DATA_FALLBACK_RC8))
#define BIT_GET_DATA_FALLBACK_RC8(x)			(((x) >> BIT_SHIFT_DATA_FALLBACK_RC8) & BIT_MASK_DATA_FALLBACK_RC8)
#define BIT_SET_DATA_FALLBACK_RC8(x, v)		(BIT_CLEAR_DATA_FALLBACK_RC8(x) | BIT_DATA_FALLBACK_RC8(v))

#define BIT_SHIFT_DATA_FALLBACK_RC7			16
#define BIT_MASK_DATA_FALLBACK_RC7			0x1f
#define BIT_DATA_FALLBACK_RC7(x)			(((x) & BIT_MASK_DATA_FALLBACK_RC7) << BIT_SHIFT_DATA_FALLBACK_RC7)
#define BITS_DATA_FALLBACK_RC7				(BIT_MASK_DATA_FALLBACK_RC7 << BIT_SHIFT_DATA_FALLBACK_RC7)
#define BIT_CLEAR_DATA_FALLBACK_RC7(x)			((x) & (~BITS_DATA_FALLBACK_RC7))
#define BIT_GET_DATA_FALLBACK_RC7(x)			(((x) >> BIT_SHIFT_DATA_FALLBACK_RC7) & BIT_MASK_DATA_FALLBACK_RC7)
#define BIT_SET_DATA_FALLBACK_RC7(x, v)		(BIT_CLEAR_DATA_FALLBACK_RC7(x) | BIT_DATA_FALLBACK_RC7(v))

#define BIT_SHIFT_DATA_FALLBACK_RC6			8
#define BIT_MASK_DATA_FALLBACK_RC6			0x1f
#define BIT_DATA_FALLBACK_RC6(x)			(((x) & BIT_MASK_DATA_FALLBACK_RC6) << BIT_SHIFT_DATA_FALLBACK_RC6)
#define BITS_DATA_FALLBACK_RC6				(BIT_MASK_DATA_FALLBACK_RC6 << BIT_SHIFT_DATA_FALLBACK_RC6)
#define BIT_CLEAR_DATA_FALLBACK_RC6(x)			((x) & (~BITS_DATA_FALLBACK_RC6))
#define BIT_GET_DATA_FALLBACK_RC6(x)			(((x) >> BIT_SHIFT_DATA_FALLBACK_RC6) & BIT_MASK_DATA_FALLBACK_RC6)
#define BIT_SET_DATA_FALLBACK_RC6(x, v)		(BIT_CLEAR_DATA_FALLBACK_RC6(x) | BIT_DATA_FALLBACK_RC6(v))

#define BIT_SHIFT_DATA_FALLBACK_RC5			0
#define BIT_MASK_DATA_FALLBACK_RC5			0x1f
#define BIT_DATA_FALLBACK_RC5(x)			(((x) & BIT_MASK_DATA_FALLBACK_RC5) << BIT_SHIFT_DATA_FALLBACK_RC5)
#define BITS_DATA_FALLBACK_RC5				(BIT_MASK_DATA_FALLBACK_RC5 << BIT_SHIFT_DATA_FALLBACK_RC5)
#define BIT_CLEAR_DATA_FALLBACK_RC5(x)			((x) & (~BITS_DATA_FALLBACK_RC5))
#define BIT_GET_DATA_FALLBACK_RC5(x)			(((x) >> BIT_SHIFT_DATA_FALLBACK_RC5) & BIT_MASK_DATA_FALLBACK_RC5)
#define BIT_SET_DATA_FALLBACK_RC5(x, v)		(BIT_CLEAR_DATA_FALLBACK_RC5(x) | BIT_DATA_FALLBACK_RC5(v))

/* 2 REG_RARFRC_L				(Offset 0x0438) */

#define BIT_SHIFT_CTRL_FALLBACK_RC4			24
#define BIT_MASK_CTRL_FALLBACK_RC4			0x1f
#define BIT_CTRL_FALLBACK_RC4(x)			(((x) & BIT_MASK_CTRL_FALLBACK_RC4) << BIT_SHIFT_CTRL_FALLBACK_RC4)
#define BITS_CTRL_FALLBACK_RC4				(BIT_MASK_CTRL_FALLBACK_RC4 << BIT_SHIFT_CTRL_FALLBACK_RC4)
#define BIT_CLEAR_CTRL_FALLBACK_RC4(x)			((x) & (~BITS_CTRL_FALLBACK_RC4))
#define BIT_GET_CTRL_FALLBACK_RC4(x)			(((x) >> BIT_SHIFT_CTRL_FALLBACK_RC4) & BIT_MASK_CTRL_FALLBACK_RC4)
#define BIT_SET_CTRL_FALLBACK_RC4(x, v)		(BIT_CLEAR_CTRL_FALLBACK_RC4(x) | BIT_CTRL_FALLBACK_RC4(v))

#define BIT_SHIFT_CTRL_FALLBACK_RC3			16
#define BIT_MASK_CTRL_FALLBACK_RC3			0x1f
#define BIT_CTRL_FALLBACK_RC3(x)			(((x) & BIT_MASK_CTRL_FALLBACK_RC3) << BIT_SHIFT_CTRL_FALLBACK_RC3)
#define BITS_CTRL_FALLBACK_RC3				(BIT_MASK_CTRL_FALLBACK_RC3 << BIT_SHIFT_CTRL_FALLBACK_RC3)
#define BIT_CLEAR_CTRL_FALLBACK_RC3(x)			((x) & (~BITS_CTRL_FALLBACK_RC3))
#define BIT_GET_CTRL_FALLBACK_RC3(x)			(((x) >> BIT_SHIFT_CTRL_FALLBACK_RC3) & BIT_MASK_CTRL_FALLBACK_RC3)
#define BIT_SET_CTRL_FALLBACK_RC3(x, v)		(BIT_CLEAR_CTRL_FALLBACK_RC3(x) | BIT_CTRL_FALLBACK_RC3(v))

#define BIT_SHIFT_CTRL_FALLBACK_RC2			8
#define BIT_MASK_CTRL_FALLBACK_RC2			0x1f
#define BIT_CTRL_FALLBACK_RC2(x)			(((x) & BIT_MASK_CTRL_FALLBACK_RC2) << BIT_SHIFT_CTRL_FALLBACK_RC2)
#define BITS_CTRL_FALLBACK_RC2				(BIT_MASK_CTRL_FALLBACK_RC2 << BIT_SHIFT_CTRL_FALLBACK_RC2)
#define BIT_CLEAR_CTRL_FALLBACK_RC2(x)			((x) & (~BITS_CTRL_FALLBACK_RC2))
#define BIT_GET_CTRL_FALLBACK_RC2(x)			(((x) >> BIT_SHIFT_CTRL_FALLBACK_RC2) & BIT_MASK_CTRL_FALLBACK_RC2)
#define BIT_SET_CTRL_FALLBACK_RC2(x, v)		(BIT_CLEAR_CTRL_FALLBACK_RC2(x) | BIT_CTRL_FALLBACK_RC2(v))

#define BIT_SHIFT_CTRL_FALLBACK_RC1			0
#define BIT_MASK_CTRL_FALLBACK_RC1			0x1f
#define BIT_CTRL_FALLBACK_RC1(x)			(((x) & BIT_MASK_CTRL_FALLBACK_RC1) << BIT_SHIFT_CTRL_FALLBACK_RC1)
#define BITS_CTRL_FALLBACK_RC1				(BIT_MASK_CTRL_FALLBACK_RC1 << BIT_SHIFT_CTRL_FALLBACK_RC1)
#define BIT_CLEAR_CTRL_FALLBACK_RC1(x)			((x) & (~BITS_CTRL_FALLBACK_RC1))
#define BIT_GET_CTRL_FALLBACK_RC1(x)			(((x) >> BIT_SHIFT_CTRL_FALLBACK_RC1) & BIT_MASK_CTRL_FALLBACK_RC1)
#define BIT_SET_CTRL_FALLBACK_RC1(x, v)		(BIT_CLEAR_CTRL_FALLBACK_RC1(x) | BIT_CTRL_FALLBACK_RC1(v))

/* 2 REG_RARFRC_H				(Offset 0x043C) */

#define BIT_SHIFT_CTRL_FALLBACK_RC8			24
#define BIT_MASK_CTRL_FALLBACK_RC8			0x1f
#define BIT_CTRL_FALLBACK_RC8(x)			(((x) & BIT_MASK_CTRL_FALLBACK_RC8) << BIT_SHIFT_CTRL_FALLBACK_RC8)
#define BITS_CTRL_FALLBACK_RC8				(BIT_MASK_CTRL_FALLBACK_RC8 << BIT_SHIFT_CTRL_FALLBACK_RC8)
#define BIT_CLEAR_CTRL_FALLBACK_RC8(x)			((x) & (~BITS_CTRL_FALLBACK_RC8))
#define BIT_GET_CTRL_FALLBACK_RC8(x)			(((x) >> BIT_SHIFT_CTRL_FALLBACK_RC8) & BIT_MASK_CTRL_FALLBACK_RC8)
#define BIT_SET_CTRL_FALLBACK_RC8(x, v)		(BIT_CLEAR_CTRL_FALLBACK_RC8(x) | BIT_CTRL_FALLBACK_RC8(v))

#define BIT_SHIFT_CTRL_FALLBACK_RC7			16
#define BIT_MASK_CTRL_FALLBACK_RC7			0x1f
#define BIT_CTRL_FALLBACK_RC7(x)			(((x) & BIT_MASK_CTRL_FALLBACK_RC7) << BIT_SHIFT_CTRL_FALLBACK_RC7)
#define BITS_CTRL_FALLBACK_RC7				(BIT_MASK_CTRL_FALLBACK_RC7 << BIT_SHIFT_CTRL_FALLBACK_RC7)
#define BIT_CLEAR_CTRL_FALLBACK_RC7(x)			((x) & (~BITS_CTRL_FALLBACK_RC7))
#define BIT_GET_CTRL_FALLBACK_RC7(x)			(((x) >> BIT_SHIFT_CTRL_FALLBACK_RC7) & BIT_MASK_CTRL_FALLBACK_RC7)
#define BIT_SET_CTRL_FALLBACK_RC7(x, v)		(BIT_CLEAR_CTRL_FALLBACK_RC7(x) | BIT_CTRL_FALLBACK_RC7(v))

#define BIT_SHIFT_CTRL_FALLBACK_RC6			8
#define BIT_MASK_CTRL_FALLBACK_RC6			0x1f
#define BIT_CTRL_FALLBACK_RC6(x)			(((x) & BIT_MASK_CTRL_FALLBACK_RC6) << BIT_SHIFT_CTRL_FALLBACK_RC6)
#define BITS_CTRL_FALLBACK_RC6				(BIT_MASK_CTRL_FALLBACK_RC6 << BIT_SHIFT_CTRL_FALLBACK_RC6)
#define BIT_CLEAR_CTRL_FALLBACK_RC6(x)			((x) & (~BITS_CTRL_FALLBACK_RC6))
#define BIT_GET_CTRL_FALLBACK_RC6(x)			(((x) >> BIT_SHIFT_CTRL_FALLBACK_RC6) & BIT_MASK_CTRL_FALLBACK_RC6)
#define BIT_SET_CTRL_FALLBACK_RC6(x, v)		(BIT_CLEAR_CTRL_FALLBACK_RC6(x) | BIT_CTRL_FALLBACK_RC6(v))

#define BIT_SHIFT_CTRL_FALLBACK_RC5			0
#define BIT_MASK_CTRL_FALLBACK_RC5			0x1f
#define BIT_CTRL_FALLBACK_RC5(x)			(((x) & BIT_MASK_CTRL_FALLBACK_RC5) << BIT_SHIFT_CTRL_FALLBACK_RC5)
#define BITS_CTRL_FALLBACK_RC5				(BIT_MASK_CTRL_FALLBACK_RC5 << BIT_SHIFT_CTRL_FALLBACK_RC5)
#define BIT_CLEAR_CTRL_FALLBACK_RC5(x)			((x) & (~BITS_CTRL_FALLBACK_RC5))
#define BIT_GET_CTRL_FALLBACK_RC5(x)			(((x) >> BIT_SHIFT_CTRL_FALLBACK_RC5) & BIT_MASK_CTRL_FALLBACK_RC5)
#define BIT_SET_CTRL_FALLBACK_RC5(x, v)		(BIT_CLEAR_CTRL_FALLBACK_RC5(x) | BIT_CTRL_FALLBACK_RC5(v))

/* 2 REG_RRSR				(Offset 0x0440) */

#define BIT_SHIFT_RRSR_RSC				21
#define BIT_MASK_RRSR_RSC				0xf
#define BIT_RRSR_RSC(x)				(((x) & BIT_MASK_RRSR_RSC) << BIT_SHIFT_RRSR_RSC)
#define BITS_RRSR_RSC					(BIT_MASK_RRSR_RSC << BIT_SHIFT_RRSR_RSC)
#define BIT_CLEAR_RRSR_RSC(x)				((x) & (~BITS_RRSR_RSC))
#define BIT_GET_RRSR_RSC(x)				(((x) >> BIT_SHIFT_RRSR_RSC) & BIT_MASK_RRSR_RSC)
#define BIT_SET_RRSR_RSC(x, v)				(BIT_CLEAR_RRSR_RSC(x) | BIT_RRSR_RSC(v))

#define BIT_SHIFT_R_RATE_CTRL_TABLE			0
#define BIT_MASK_R_RATE_CTRL_TABLE			0xfffff
#define BIT_R_RATE_CTRL_TABLE(x)			(((x) & BIT_MASK_R_RATE_CTRL_TABLE) << BIT_SHIFT_R_RATE_CTRL_TABLE)
#define BITS_R_RATE_CTRL_TABLE				(BIT_MASK_R_RATE_CTRL_TABLE << BIT_SHIFT_R_RATE_CTRL_TABLE)
#define BIT_CLEAR_R_RATE_CTRL_TABLE(x)			((x) & (~BITS_R_RATE_CTRL_TABLE))
#define BIT_GET_R_RATE_CTRL_TABLE(x)			(((x) >> BIT_SHIFT_R_RATE_CTRL_TABLE) & BIT_MASK_R_RATE_CTRL_TABLE)
#define BIT_SET_R_RATE_CTRL_TABLE(x, v)		(BIT_CLEAR_R_RATE_CTRL_TABLE(x) | BIT_R_RATE_CTRL_TABLE(v))

#define BIT_SHIFT_ADPT_RATE_TABLE_L0			0
#define BIT_MASK_ADPT_RATE_TABLE_L0			0xffffffffL
#define BIT_ADPT_RATE_TABLE_L0(x)			(((x) & BIT_MASK_ADPT_RATE_TABLE_L0) << BIT_SHIFT_ADPT_RATE_TABLE_L0)
#define BITS_ADPT_RATE_TABLE_L0			(BIT_MASK_ADPT_RATE_TABLE_L0 << BIT_SHIFT_ADPT_RATE_TABLE_L0)
#define BIT_CLEAR_ADPT_RATE_TABLE_L0(x)		((x) & (~BITS_ADPT_RATE_TABLE_L0))
#define BIT_GET_ADPT_RATE_TABLE_L0(x)			(((x) >> BIT_SHIFT_ADPT_RATE_TABLE_L0) & BIT_MASK_ADPT_RATE_TABLE_L0)
#define BIT_SET_ADPT_RATE_TABLE_L0(x, v)		(BIT_CLEAR_ADPT_RATE_TABLE_L0(x) | BIT_ADPT_RATE_TABLE_L0(v))

#define BIT_SHIFT_ADPT_RATE_TABLE_H0			0
#define BIT_MASK_ADPT_RATE_TABLE_H0			0xffffffffL
#define BIT_ADPT_RATE_TABLE_H0(x)			(((x) & BIT_MASK_ADPT_RATE_TABLE_H0) << BIT_SHIFT_ADPT_RATE_TABLE_H0)
#define BITS_ADPT_RATE_TABLE_H0			(BIT_MASK_ADPT_RATE_TABLE_H0 << BIT_SHIFT_ADPT_RATE_TABLE_H0)
#define BIT_CLEAR_ADPT_RATE_TABLE_H0(x)		((x) & (~BITS_ADPT_RATE_TABLE_H0))
#define BIT_GET_ADPT_RATE_TABLE_H0(x)			(((x) >> BIT_SHIFT_ADPT_RATE_TABLE_H0) & BIT_MASK_ADPT_RATE_TABLE_H0)
#define BIT_SET_ADPT_RATE_TABLE_H0(x, v)		(BIT_CLEAR_ADPT_RATE_TABLE_H0(x) | BIT_ADPT_RATE_TABLE_H0(v))

#define BIT_SHIFT_ADPT_RATE_TABLE_L1			0
#define BIT_MASK_ADPT_RATE_TABLE_L1			0xffffffffL
#define BIT_ADPT_RATE_TABLE_L1(x)			(((x) & BIT_MASK_ADPT_RATE_TABLE_L1) << BIT_SHIFT_ADPT_RATE_TABLE_L1)
#define BITS_ADPT_RATE_TABLE_L1			(BIT_MASK_ADPT_RATE_TABLE_L1 << BIT_SHIFT_ADPT_RATE_TABLE_L1)
#define BIT_CLEAR_ADPT_RATE_TABLE_L1(x)		((x) & (~BITS_ADPT_RATE_TABLE_L1))
#define BIT_GET_ADPT_RATE_TABLE_L1(x)			(((x) >> BIT_SHIFT_ADPT_RATE_TABLE_L1) & BIT_MASK_ADPT_RATE_TABLE_L1)
#define BIT_SET_ADPT_RATE_TABLE_L1(x, v)		(BIT_CLEAR_ADPT_RATE_TABLE_L1(x) | BIT_ADPT_RATE_TABLE_L1(v))

#define BIT_SHIFT_ADPT_RATE_TABLE_H1			0
#define BIT_MASK_ADPT_RATE_TABLE_H1			0xffffffffL
#define BIT_ADPT_RATE_TABLE_H1(x)			(((x) & BIT_MASK_ADPT_RATE_TABLE_H1) << BIT_SHIFT_ADPT_RATE_TABLE_H1)
#define BITS_ADPT_RATE_TABLE_H1			(BIT_MASK_ADPT_RATE_TABLE_H1 << BIT_SHIFT_ADPT_RATE_TABLE_H1)
#define BIT_CLEAR_ADPT_RATE_TABLE_H1(x)		((x) & (~BITS_ADPT_RATE_TABLE_H1))
#define BIT_GET_ADPT_RATE_TABLE_H1(x)			(((x) >> BIT_SHIFT_ADPT_RATE_TABLE_H1) & BIT_MASK_ADPT_RATE_TABLE_H1)
#define BIT_SET_ADPT_RATE_TABLE_H1(x, v)		(BIT_CLEAR_ADPT_RATE_TABLE_H1(x) | BIT_ADPT_RATE_TABLE_H1(v))

/* 2 REG_BCN_AMPDU_CTCL			(Offset 0x0454) */

#define BIT_SHIFT_BCNQ1_HEAD				24
#define BIT_MASK_BCNQ1_HEAD				0xff
#define BIT_BCNQ1_HEAD(x)				(((x) & BIT_MASK_BCNQ1_HEAD) << BIT_SHIFT_BCNQ1_HEAD)
#define BITS_BCNQ1_HEAD				(BIT_MASK_BCNQ1_HEAD << BIT_SHIFT_BCNQ1_HEAD)
#define BIT_CLEAR_BCNQ1_HEAD(x)			((x) & (~BITS_BCNQ1_HEAD))
#define BIT_GET_BCNQ1_HEAD(x)				(((x) >> BIT_SHIFT_BCNQ1_HEAD) & BIT_MASK_BCNQ1_HEAD)
#define BIT_SET_BCNQ1_HEAD(x, v)			(BIT_CLEAR_BCNQ1_HEAD(x) | BIT_BCNQ1_HEAD(v))

#define BIT_SHIFT_AMPDU_MAX_TIME			16
#define BIT_MASK_AMPDU_MAX_TIME			0xff
#define BIT_AMPDU_MAX_TIME(x)				(((x) & BIT_MASK_AMPDU_MAX_TIME) << BIT_SHIFT_AMPDU_MAX_TIME)
#define BITS_AMPDU_MAX_TIME				(BIT_MASK_AMPDU_MAX_TIME << BIT_SHIFT_AMPDU_MAX_TIME)
#define BIT_CLEAR_AMPDU_MAX_TIME(x)			((x) & (~BITS_AMPDU_MAX_TIME))
#define BIT_GET_AMPDU_MAX_TIME(x)			(((x) >> BIT_SHIFT_AMPDU_MAX_TIME) & BIT_MASK_AMPDU_MAX_TIME)
#define BIT_SET_AMPDU_MAX_TIME(x, v)			(BIT_CLEAR_AMPDU_MAX_TIME(x) | BIT_AMPDU_MAX_TIME(v))

#define BIT_SHIFT_BCNQ2_HEAD				8
#define BIT_MASK_BCNQ2_HEAD				0xff
#define BIT_BCNQ2_HEAD(x)				(((x) & BIT_MASK_BCNQ2_HEAD) << BIT_SHIFT_BCNQ2_HEAD)
#define BITS_BCNQ2_HEAD				(BIT_MASK_BCNQ2_HEAD << BIT_SHIFT_BCNQ2_HEAD)
#define BIT_CLEAR_BCNQ2_HEAD(x)			((x) & (~BITS_BCNQ2_HEAD))
#define BIT_GET_BCNQ2_HEAD(x)				(((x) >> BIT_SHIFT_BCNQ2_HEAD) & BIT_MASK_BCNQ2_HEAD)
#define BIT_SET_BCNQ2_HEAD(x, v)			(BIT_CLEAR_BCNQ2_HEAD(x) | BIT_BCNQ2_HEAD(v))

#define BIT_CHECK_CCK_EN				BIT(7)
#define BIT_EN_BCN_PKT_REL				BIT(6)
#define BIT_BCN_PORT_SEL				BIT(5)
#define BIT_MOREDATA_BYPASS				BIT(4)
#define BIT_EN_CLR_CMD_REL_BCN_PKT			BIT(3)
#define BIT_EN_SET_MOREDATA				BIT(2)
#define BIT_DIS_CLEAR_MACID_RELEASE			BIT(1)
#define BIT_EN_MACID_RELEASE				BIT(0)

/* 2 REG_AMPDU_MAX_LENGTH			(Offset 0x0458) */

#define BIT_SHIFT_AMPDU_MAX_LENGTH			0
#define BIT_MASK_AMPDU_MAX_LENGTH			0xffffffffL
#define BIT_AMPDU_MAX_LENGTH(x)			(((x) & BIT_MASK_AMPDU_MAX_LENGTH) << BIT_SHIFT_AMPDU_MAX_LENGTH)
#define BITS_AMPDU_MAX_LENGTH				(BIT_MASK_AMPDU_MAX_LENGTH << BIT_SHIFT_AMPDU_MAX_LENGTH)
#define BIT_CLEAR_AMPDU_MAX_LENGTH(x)			((x) & (~BITS_AMPDU_MAX_LENGTH))
#define BIT_GET_AMPDU_MAX_LENGTH(x)			(((x) >> BIT_SHIFT_AMPDU_MAX_LENGTH) & BIT_MASK_AMPDU_MAX_LENGTH)
#define BIT_SET_AMPDU_MAX_LENGTH(x, v)			(BIT_CLEAR_AMPDU_MAX_LENGTH(x) | BIT_AMPDU_MAX_LENGTH(v))

/* 2 REG_NDPA_CTRL_LBK_ACQ_STOP		(Offset 0x045C) */

#define BIT_SHIFT_R_NDPA_BW				24
#define BIT_MASK_R_NDPA_BW				0x3
#define BIT_R_NDPA_BW(x)				(((x) & BIT_MASK_R_NDPA_BW) << BIT_SHIFT_R_NDPA_BW)
#define BITS_R_NDPA_BW					(BIT_MASK_R_NDPA_BW << BIT_SHIFT_R_NDPA_BW)
#define BIT_CLEAR_R_NDPA_BW(x)				((x) & (~BITS_R_NDPA_BW))
#define BIT_GET_R_NDPA_BW(x)				(((x) >> BIT_SHIFT_R_NDPA_BW) & BIT_MASK_R_NDPA_BW)
#define BIT_SET_R_NDPA_BW(x, v)			(BIT_CLEAR_R_NDPA_BW(x) | BIT_R_NDPA_BW(v))

#define BIT_SHIFT_R_SIGTA_BW				22
#define BIT_MASK_R_SIGTA_BW				0x3
#define BIT_R_SIGTA_BW(x)				(((x) & BIT_MASK_R_SIGTA_BW) << BIT_SHIFT_R_SIGTA_BW)
#define BITS_R_SIGTA_BW				(BIT_MASK_R_SIGTA_BW << BIT_SHIFT_R_SIGTA_BW)
#define BIT_CLEAR_R_SIGTA_BW(x)			((x) & (~BITS_R_SIGTA_BW))
#define BIT_GET_R_SIGTA_BW(x)				(((x) >> BIT_SHIFT_R_SIGTA_BW) & BIT_MASK_R_SIGTA_BW)
#define BIT_SET_R_SIGTA_BW(x, v)			(BIT_CLEAR_R_SIGTA_BW(x) | BIT_R_SIGTA_BW(v))

#define BIT_R_SIGTA_BAR				BIT(21)
#define BIT_R_EOF_EN					BIT(20)
#define BIT_R_EN_GNT_BT_AWAKE				BIT(19)
#define BIT_DIS_RELEASE_RETRY				BIT(18)
#define BIT_DIS_OQT_BLOCK				BIT(17)
#define BIT_SEARCH_QUEUE_EN				BIT(16)

#define BIT_SHIFT_WMAC_LBK_BUF_HEAD			8
#define BIT_MASK_WMAC_LBK_BUF_HEAD			0xff
#define BIT_WMAC_LBK_BUF_HEAD(x)			(((x) & BIT_MASK_WMAC_LBK_BUF_HEAD) << BIT_SHIFT_WMAC_LBK_BUF_HEAD)
#define BITS_WMAC_LBK_BUF_HEAD				(BIT_MASK_WMAC_LBK_BUF_HEAD << BIT_SHIFT_WMAC_LBK_BUF_HEAD)
#define BIT_CLEAR_WMAC_LBK_BUF_HEAD(x)			((x) & (~BITS_WMAC_LBK_BUF_HEAD))
#define BIT_GET_WMAC_LBK_BUF_HEAD(x)			(((x) >> BIT_SHIFT_WMAC_LBK_BUF_HEAD) & BIT_MASK_WMAC_LBK_BUF_HEAD)
#define BIT_SET_WMAC_LBK_BUF_HEAD(x, v)		(BIT_CLEAR_WMAC_LBK_BUF_HEAD(x) | BIT_WMAC_LBK_BUF_HEAD(v))

#define BIT_AC7Q_STOP					BIT(7)
#define BIT_AC6Q_STOP					BIT(6)
#define BIT_AC5Q_STOP					BIT(5)
#define BIT_AC4Q_STOP					BIT(4)
#define BIT_AC3Q_STOP					BIT(3)
#define BIT_AC2Q_STOP					BIT(2)
#define BIT_AC1Q_STOP					BIT(1)
#define BIT_AC0Q_STOP					BIT(0)

/* 2 REG_RD_RESP_PKT_TH			(Offset 0x0460) */

#define BIT_SHIFT_RD_RESP_PKT_TH			24
#define BIT_MASK_RD_RESP_PKT_TH			0x3f
#define BIT_RD_RESP_PKT_TH(x)				(((x) & BIT_MASK_RD_RESP_PKT_TH) << BIT_SHIFT_RD_RESP_PKT_TH)
#define BITS_RD_RESP_PKT_TH				(BIT_MASK_RD_RESP_PKT_TH << BIT_SHIFT_RD_RESP_PKT_TH)
#define BIT_CLEAR_RD_RESP_PKT_TH(x)			((x) & (~BITS_RD_RESP_PKT_TH))
#define BIT_GET_RD_RESP_PKT_TH(x)			(((x) >> BIT_SHIFT_RD_RESP_PKT_TH) & BIT_MASK_RD_RESP_PKT_TH)
#define BIT_SET_RD_RESP_PKT_TH(x, v)			(BIT_CLEAR_RD_RESP_PKT_TH(x) | BIT_RD_RESP_PKT_TH(v))

/* 2 REG_CMDQ_INFO				(Offset 0x0464) */

#define BIT_SHIFT_PKT_NUM_CMDQ_V2			24
#define BIT_MASK_PKT_NUM_CMDQ_V2			0xff
#define BIT_PKT_NUM_CMDQ_V2(x)				(((x) & BIT_MASK_PKT_NUM_CMDQ_V2) << BIT_SHIFT_PKT_NUM_CMDQ_V2)
#define BITS_PKT_NUM_CMDQ_V2				(BIT_MASK_PKT_NUM_CMDQ_V2 << BIT_SHIFT_PKT_NUM_CMDQ_V2)
#define BIT_CLEAR_PKT_NUM_CMDQ_V2(x)			((x) & (~BITS_PKT_NUM_CMDQ_V2))
#define BIT_GET_PKT_NUM_CMDQ_V2(x)			(((x) >> BIT_SHIFT_PKT_NUM_CMDQ_V2) & BIT_MASK_PKT_NUM_CMDQ_V2)
#define BIT_SET_PKT_NUM_CMDQ_V2(x, v)			(BIT_CLEAR_PKT_NUM_CMDQ_V2(x) | BIT_PKT_NUM_CMDQ_V2(v))

#define BIT_SHIFT_TAIL_PKT_CMDQ			16
#define BIT_MASK_TAIL_PKT_CMDQ				0xff
#define BIT_TAIL_PKT_CMDQ(x)				(((x) & BIT_MASK_TAIL_PKT_CMDQ) << BIT_SHIFT_TAIL_PKT_CMDQ)
#define BITS_TAIL_PKT_CMDQ				(BIT_MASK_TAIL_PKT_CMDQ << BIT_SHIFT_TAIL_PKT_CMDQ)
#define BIT_CLEAR_TAIL_PKT_CMDQ(x)			((x) & (~BITS_TAIL_PKT_CMDQ))
#define BIT_GET_TAIL_PKT_CMDQ(x)			(((x) >> BIT_SHIFT_TAIL_PKT_CMDQ) & BIT_MASK_TAIL_PKT_CMDQ)
#define BIT_SET_TAIL_PKT_CMDQ(x, v)			(BIT_CLEAR_TAIL_PKT_CMDQ(x) | BIT_TAIL_PKT_CMDQ(v))

#define BIT_SHIFT_PKT_NUM_CMDQ				8
#define BIT_MASK_PKT_NUM_CMDQ				0xff
#define BIT_PKT_NUM_CMDQ(x)				(((x) & BIT_MASK_PKT_NUM_CMDQ) << BIT_SHIFT_PKT_NUM_CMDQ)
#define BITS_PKT_NUM_CMDQ				(BIT_MASK_PKT_NUM_CMDQ << BIT_SHIFT_PKT_NUM_CMDQ)
#define BIT_CLEAR_PKT_NUM_CMDQ(x)			((x) & (~BITS_PKT_NUM_CMDQ))
#define BIT_GET_PKT_NUM_CMDQ(x)			(((x) >> BIT_SHIFT_PKT_NUM_CMDQ) & BIT_MASK_PKT_NUM_CMDQ)
#define BIT_SET_PKT_NUM_CMDQ(x, v)			(BIT_CLEAR_PKT_NUM_CMDQ(x) | BIT_PKT_NUM_CMDQ(v))

#define BIT_SHIFT_HEAD_PKT_CMDQ			0
#define BIT_MASK_HEAD_PKT_CMDQ				0xff
#define BIT_HEAD_PKT_CMDQ(x)				(((x) & BIT_MASK_HEAD_PKT_CMDQ) << BIT_SHIFT_HEAD_PKT_CMDQ)
#define BITS_HEAD_PKT_CMDQ				(BIT_MASK_HEAD_PKT_CMDQ << BIT_SHIFT_HEAD_PKT_CMDQ)
#define BIT_CLEAR_HEAD_PKT_CMDQ(x)			((x) & (~BITS_HEAD_PKT_CMDQ))
#define BIT_GET_HEAD_PKT_CMDQ(x)			(((x) >> BIT_SHIFT_HEAD_PKT_CMDQ) & BIT_MASK_HEAD_PKT_CMDQ)
#define BIT_SET_HEAD_PKT_CMDQ(x, v)			(BIT_CLEAR_HEAD_PKT_CMDQ(x) | BIT_HEAD_PKT_CMDQ(v))

/* 2 REG_Q4_INFO				(Offset 0x0468) */

#define BIT_SHIFT_QUEUEMACID_Q4_V1			25
#define BIT_MASK_QUEUEMACID_Q4_V1			0x7f
#define BIT_QUEUEMACID_Q4_V1(x)			(((x) & BIT_MASK_QUEUEMACID_Q4_V1) << BIT_SHIFT_QUEUEMACID_Q4_V1)
#define BITS_QUEUEMACID_Q4_V1				(BIT_MASK_QUEUEMACID_Q4_V1 << BIT_SHIFT_QUEUEMACID_Q4_V1)
#define BIT_CLEAR_QUEUEMACID_Q4_V1(x)			((x) & (~BITS_QUEUEMACID_Q4_V1))
#define BIT_GET_QUEUEMACID_Q4_V1(x)			(((x) >> BIT_SHIFT_QUEUEMACID_Q4_V1) & BIT_MASK_QUEUEMACID_Q4_V1)
#define BIT_SET_QUEUEMACID_Q4_V1(x, v)			(BIT_CLEAR_QUEUEMACID_Q4_V1(x) | BIT_QUEUEMACID_Q4_V1(v))

#define BIT_SHIFT_QUEUEAC_Q4_V1			23
#define BIT_MASK_QUEUEAC_Q4_V1				0x3
#define BIT_QUEUEAC_Q4_V1(x)				(((x) & BIT_MASK_QUEUEAC_Q4_V1) << BIT_SHIFT_QUEUEAC_Q4_V1)
#define BITS_QUEUEAC_Q4_V1				(BIT_MASK_QUEUEAC_Q4_V1 << BIT_SHIFT_QUEUEAC_Q4_V1)
#define BIT_CLEAR_QUEUEAC_Q4_V1(x)			((x) & (~BITS_QUEUEAC_Q4_V1))
#define BIT_GET_QUEUEAC_Q4_V1(x)			(((x) >> BIT_SHIFT_QUEUEAC_Q4_V1) & BIT_MASK_QUEUEAC_Q4_V1)
#define BIT_SET_QUEUEAC_Q4_V1(x, v)			(BIT_CLEAR_QUEUEAC_Q4_V1(x) | BIT_QUEUEAC_Q4_V1(v))

#define BIT_SHIFT_TAIL_PKT_Q4_V1			15
#define BIT_MASK_TAIL_PKT_Q4_V1			0xff
#define BIT_TAIL_PKT_Q4_V1(x)				(((x) & BIT_MASK_TAIL_PKT_Q4_V1) << BIT_SHIFT_TAIL_PKT_Q4_V1)
#define BITS_TAIL_PKT_Q4_V1				(BIT_MASK_TAIL_PKT_Q4_V1 << BIT_SHIFT_TAIL_PKT_Q4_V1)
#define BIT_CLEAR_TAIL_PKT_Q4_V1(x)			((x) & (~BITS_TAIL_PKT_Q4_V1))
#define BIT_GET_TAIL_PKT_Q4_V1(x)			(((x) >> BIT_SHIFT_TAIL_PKT_Q4_V1) & BIT_MASK_TAIL_PKT_Q4_V1)
#define BIT_SET_TAIL_PKT_Q4_V1(x, v)			(BIT_CLEAR_TAIL_PKT_Q4_V1(x) | BIT_TAIL_PKT_Q4_V1(v))

#define BIT_SHIFT_PKT_NUM_Q4_V1			8
#define BIT_MASK_PKT_NUM_Q4_V1				0x7f
#define BIT_PKT_NUM_Q4_V1(x)				(((x) & BIT_MASK_PKT_NUM_Q4_V1) << BIT_SHIFT_PKT_NUM_Q4_V1)
#define BITS_PKT_NUM_Q4_V1				(BIT_MASK_PKT_NUM_Q4_V1 << BIT_SHIFT_PKT_NUM_Q4_V1)
#define BIT_CLEAR_PKT_NUM_Q4_V1(x)			((x) & (~BITS_PKT_NUM_Q4_V1))
#define BIT_GET_PKT_NUM_Q4_V1(x)			(((x) >> BIT_SHIFT_PKT_NUM_Q4_V1) & BIT_MASK_PKT_NUM_Q4_V1)
#define BIT_SET_PKT_NUM_Q4_V1(x, v)			(BIT_CLEAR_PKT_NUM_Q4_V1(x) | BIT_PKT_NUM_Q4_V1(v))

#define BIT_SHIFT_HEAD_PKT_Q4				0
#define BIT_MASK_HEAD_PKT_Q4				0xff
#define BIT_HEAD_PKT_Q4(x)				(((x) & BIT_MASK_HEAD_PKT_Q4) << BIT_SHIFT_HEAD_PKT_Q4)
#define BITS_HEAD_PKT_Q4				(BIT_MASK_HEAD_PKT_Q4 << BIT_SHIFT_HEAD_PKT_Q4)
#define BIT_CLEAR_HEAD_PKT_Q4(x)			((x) & (~BITS_HEAD_PKT_Q4))
#define BIT_GET_HEAD_PKT_Q4(x)				(((x) >> BIT_SHIFT_HEAD_PKT_Q4) & BIT_MASK_HEAD_PKT_Q4)
#define BIT_SET_HEAD_PKT_Q4(x, v)			(BIT_CLEAR_HEAD_PKT_Q4(x) | BIT_HEAD_PKT_Q4(v))

/* 2 REG_Q5_INFO				(Offset 0x046C) */

#define BIT_SHIFT_QUEUEMACID_Q5_V1			25
#define BIT_MASK_QUEUEMACID_Q5_V1			0x7f
#define BIT_QUEUEMACID_Q5_V1(x)			(((x) & BIT_MASK_QUEUEMACID_Q5_V1) << BIT_SHIFT_QUEUEMACID_Q5_V1)
#define BITS_QUEUEMACID_Q5_V1				(BIT_MASK_QUEUEMACID_Q5_V1 << BIT_SHIFT_QUEUEMACID_Q5_V1)
#define BIT_CLEAR_QUEUEMACID_Q5_V1(x)			((x) & (~BITS_QUEUEMACID_Q5_V1))
#define BIT_GET_QUEUEMACID_Q5_V1(x)			(((x) >> BIT_SHIFT_QUEUEMACID_Q5_V1) & BIT_MASK_QUEUEMACID_Q5_V1)
#define BIT_SET_QUEUEMACID_Q5_V1(x, v)			(BIT_CLEAR_QUEUEMACID_Q5_V1(x) | BIT_QUEUEMACID_Q5_V1(v))

#define BIT_SHIFT_QUEUEAC_Q5_V1			23
#define BIT_MASK_QUEUEAC_Q5_V1				0x3
#define BIT_QUEUEAC_Q5_V1(x)				(((x) & BIT_MASK_QUEUEAC_Q5_V1) << BIT_SHIFT_QUEUEAC_Q5_V1)
#define BITS_QUEUEAC_Q5_V1				(BIT_MASK_QUEUEAC_Q5_V1 << BIT_SHIFT_QUEUEAC_Q5_V1)
#define BIT_CLEAR_QUEUEAC_Q5_V1(x)			((x) & (~BITS_QUEUEAC_Q5_V1))
#define BIT_GET_QUEUEAC_Q5_V1(x)			(((x) >> BIT_SHIFT_QUEUEAC_Q5_V1) & BIT_MASK_QUEUEAC_Q5_V1)
#define BIT_SET_QUEUEAC_Q5_V1(x, v)			(BIT_CLEAR_QUEUEAC_Q5_V1(x) | BIT_QUEUEAC_Q5_V1(v))

#define BIT_SHIFT_TAIL_PKT_Q5_V1			15
#define BIT_MASK_TAIL_PKT_Q5_V1			0xff
#define BIT_TAIL_PKT_Q5_V1(x)				(((x) & BIT_MASK_TAIL_PKT_Q5_V1) << BIT_SHIFT_TAIL_PKT_Q5_V1)
#define BITS_TAIL_PKT_Q5_V1				(BIT_MASK_TAIL_PKT_Q5_V1 << BIT_SHIFT_TAIL_PKT_Q5_V1)
#define BIT_CLEAR_TAIL_PKT_Q5_V1(x)			((x) & (~BITS_TAIL_PKT_Q5_V1))
#define BIT_GET_TAIL_PKT_Q5_V1(x)			(((x) >> BIT_SHIFT_TAIL_PKT_Q5_V1) & BIT_MASK_TAIL_PKT_Q5_V1)
#define BIT_SET_TAIL_PKT_Q5_V1(x, v)			(BIT_CLEAR_TAIL_PKT_Q5_V1(x) | BIT_TAIL_PKT_Q5_V1(v))

#define BIT_SHIFT_PKT_NUM_Q5_V1			8
#define BIT_MASK_PKT_NUM_Q5_V1				0x7f
#define BIT_PKT_NUM_Q5_V1(x)				(((x) & BIT_MASK_PKT_NUM_Q5_V1) << BIT_SHIFT_PKT_NUM_Q5_V1)
#define BITS_PKT_NUM_Q5_V1				(BIT_MASK_PKT_NUM_Q5_V1 << BIT_SHIFT_PKT_NUM_Q5_V1)
#define BIT_CLEAR_PKT_NUM_Q5_V1(x)			((x) & (~BITS_PKT_NUM_Q5_V1))
#define BIT_GET_PKT_NUM_Q5_V1(x)			(((x) >> BIT_SHIFT_PKT_NUM_Q5_V1) & BIT_MASK_PKT_NUM_Q5_V1)
#define BIT_SET_PKT_NUM_Q5_V1(x, v)			(BIT_CLEAR_PKT_NUM_Q5_V1(x) | BIT_PKT_NUM_Q5_V1(v))

#define BIT_SHIFT_HEAD_PKT_Q5				0
#define BIT_MASK_HEAD_PKT_Q5				0xff
#define BIT_HEAD_PKT_Q5(x)				(((x) & BIT_MASK_HEAD_PKT_Q5) << BIT_SHIFT_HEAD_PKT_Q5)
#define BITS_HEAD_PKT_Q5				(BIT_MASK_HEAD_PKT_Q5 << BIT_SHIFT_HEAD_PKT_Q5)
#define BIT_CLEAR_HEAD_PKT_Q5(x)			((x) & (~BITS_HEAD_PKT_Q5))
#define BIT_GET_HEAD_PKT_Q5(x)				(((x) >> BIT_SHIFT_HEAD_PKT_Q5) & BIT_MASK_HEAD_PKT_Q5)
#define BIT_SET_HEAD_PKT_Q5(x, v)			(BIT_CLEAR_HEAD_PKT_Q5(x) | BIT_HEAD_PKT_Q5(v))

/* 2 REG_Q6_INFO				(Offset 0x0470) */

#define BIT_SHIFT_QUEUEMACID_Q6_V1			25
#define BIT_MASK_QUEUEMACID_Q6_V1			0x7f
#define BIT_QUEUEMACID_Q6_V1(x)			(((x) & BIT_MASK_QUEUEMACID_Q6_V1) << BIT_SHIFT_QUEUEMACID_Q6_V1)
#define BITS_QUEUEMACID_Q6_V1				(BIT_MASK_QUEUEMACID_Q6_V1 << BIT_SHIFT_QUEUEMACID_Q6_V1)
#define BIT_CLEAR_QUEUEMACID_Q6_V1(x)			((x) & (~BITS_QUEUEMACID_Q6_V1))
#define BIT_GET_QUEUEMACID_Q6_V1(x)			(((x) >> BIT_SHIFT_QUEUEMACID_Q6_V1) & BIT_MASK_QUEUEMACID_Q6_V1)
#define BIT_SET_QUEUEMACID_Q6_V1(x, v)			(BIT_CLEAR_QUEUEMACID_Q6_V1(x) | BIT_QUEUEMACID_Q6_V1(v))

#define BIT_SHIFT_QUEUEAC_Q6_V1			23
#define BIT_MASK_QUEUEAC_Q6_V1				0x3
#define BIT_QUEUEAC_Q6_V1(x)				(((x) & BIT_MASK_QUEUEAC_Q6_V1) << BIT_SHIFT_QUEUEAC_Q6_V1)
#define BITS_QUEUEAC_Q6_V1				(BIT_MASK_QUEUEAC_Q6_V1 << BIT_SHIFT_QUEUEAC_Q6_V1)
#define BIT_CLEAR_QUEUEAC_Q6_V1(x)			((x) & (~BITS_QUEUEAC_Q6_V1))
#define BIT_GET_QUEUEAC_Q6_V1(x)			(((x) >> BIT_SHIFT_QUEUEAC_Q6_V1) & BIT_MASK_QUEUEAC_Q6_V1)
#define BIT_SET_QUEUEAC_Q6_V1(x, v)			(BIT_CLEAR_QUEUEAC_Q6_V1(x) | BIT_QUEUEAC_Q6_V1(v))

#define BIT_SHIFT_TAIL_PKT_Q6_V1			15
#define BIT_MASK_TAIL_PKT_Q6_V1			0xff
#define BIT_TAIL_PKT_Q6_V1(x)				(((x) & BIT_MASK_TAIL_PKT_Q6_V1) << BIT_SHIFT_TAIL_PKT_Q6_V1)
#define BITS_TAIL_PKT_Q6_V1				(BIT_MASK_TAIL_PKT_Q6_V1 << BIT_SHIFT_TAIL_PKT_Q6_V1)
#define BIT_CLEAR_TAIL_PKT_Q6_V1(x)			((x) & (~BITS_TAIL_PKT_Q6_V1))
#define BIT_GET_TAIL_PKT_Q6_V1(x)			(((x) >> BIT_SHIFT_TAIL_PKT_Q6_V1) & BIT_MASK_TAIL_PKT_Q6_V1)
#define BIT_SET_TAIL_PKT_Q6_V1(x, v)			(BIT_CLEAR_TAIL_PKT_Q6_V1(x) | BIT_TAIL_PKT_Q6_V1(v))

#define BIT_SHIFT_PKT_NUM_Q6_V1			8
#define BIT_MASK_PKT_NUM_Q6_V1				0x7f
#define BIT_PKT_NUM_Q6_V1(x)				(((x) & BIT_MASK_PKT_NUM_Q6_V1) << BIT_SHIFT_PKT_NUM_Q6_V1)
#define BITS_PKT_NUM_Q6_V1				(BIT_MASK_PKT_NUM_Q6_V1 << BIT_SHIFT_PKT_NUM_Q6_V1)
#define BIT_CLEAR_PKT_NUM_Q6_V1(x)			((x) & (~BITS_PKT_NUM_Q6_V1))
#define BIT_GET_PKT_NUM_Q6_V1(x)			(((x) >> BIT_SHIFT_PKT_NUM_Q6_V1) & BIT_MASK_PKT_NUM_Q6_V1)
#define BIT_SET_PKT_NUM_Q6_V1(x, v)			(BIT_CLEAR_PKT_NUM_Q6_V1(x) | BIT_PKT_NUM_Q6_V1(v))

#define BIT_SHIFT_HEAD_PKT_Q6				0
#define BIT_MASK_HEAD_PKT_Q6				0xff
#define BIT_HEAD_PKT_Q6(x)				(((x) & BIT_MASK_HEAD_PKT_Q6) << BIT_SHIFT_HEAD_PKT_Q6)
#define BITS_HEAD_PKT_Q6				(BIT_MASK_HEAD_PKT_Q6 << BIT_SHIFT_HEAD_PKT_Q6)
#define BIT_CLEAR_HEAD_PKT_Q6(x)			((x) & (~BITS_HEAD_PKT_Q6))
#define BIT_GET_HEAD_PKT_Q6(x)				(((x) >> BIT_SHIFT_HEAD_PKT_Q6) & BIT_MASK_HEAD_PKT_Q6)
#define BIT_SET_HEAD_PKT_Q6(x, v)			(BIT_CLEAR_HEAD_PKT_Q6(x) | BIT_HEAD_PKT_Q6(v))

/* 2 REG_Q7_INFO				(Offset 0x0474) */

#define BIT_SHIFT_QUEUEMACID_Q7_V1			25
#define BIT_MASK_QUEUEMACID_Q7_V1			0x7f
#define BIT_QUEUEMACID_Q7_V1(x)			(((x) & BIT_MASK_QUEUEMACID_Q7_V1) << BIT_SHIFT_QUEUEMACID_Q7_V1)
#define BITS_QUEUEMACID_Q7_V1				(BIT_MASK_QUEUEMACID_Q7_V1 << BIT_SHIFT_QUEUEMACID_Q7_V1)
#define BIT_CLEAR_QUEUEMACID_Q7_V1(x)			((x) & (~BITS_QUEUEMACID_Q7_V1))
#define BIT_GET_QUEUEMACID_Q7_V1(x)			(((x) >> BIT_SHIFT_QUEUEMACID_Q7_V1) & BIT_MASK_QUEUEMACID_Q7_V1)
#define BIT_SET_QUEUEMACID_Q7_V1(x, v)			(BIT_CLEAR_QUEUEMACID_Q7_V1(x) | BIT_QUEUEMACID_Q7_V1(v))

#define BIT_SHIFT_QUEUEAC_Q7_V1			23
#define BIT_MASK_QUEUEAC_Q7_V1				0x3
#define BIT_QUEUEAC_Q7_V1(x)				(((x) & BIT_MASK_QUEUEAC_Q7_V1) << BIT_SHIFT_QUEUEAC_Q7_V1)
#define BITS_QUEUEAC_Q7_V1				(BIT_MASK_QUEUEAC_Q7_V1 << BIT_SHIFT_QUEUEAC_Q7_V1)
#define BIT_CLEAR_QUEUEAC_Q7_V1(x)			((x) & (~BITS_QUEUEAC_Q7_V1))
#define BIT_GET_QUEUEAC_Q7_V1(x)			(((x) >> BIT_SHIFT_QUEUEAC_Q7_V1) & BIT_MASK_QUEUEAC_Q7_V1)
#define BIT_SET_QUEUEAC_Q7_V1(x, v)			(BIT_CLEAR_QUEUEAC_Q7_V1(x) | BIT_QUEUEAC_Q7_V1(v))

#define BIT_SHIFT_TAIL_PKT_Q7_V1			15
#define BIT_MASK_TAIL_PKT_Q7_V1			0xff
#define BIT_TAIL_PKT_Q7_V1(x)				(((x) & BIT_MASK_TAIL_PKT_Q7_V1) << BIT_SHIFT_TAIL_PKT_Q7_V1)
#define BITS_TAIL_PKT_Q7_V1				(BIT_MASK_TAIL_PKT_Q7_V1 << BIT_SHIFT_TAIL_PKT_Q7_V1)
#define BIT_CLEAR_TAIL_PKT_Q7_V1(x)			((x) & (~BITS_TAIL_PKT_Q7_V1))
#define BIT_GET_TAIL_PKT_Q7_V1(x)			(((x) >> BIT_SHIFT_TAIL_PKT_Q7_V1) & BIT_MASK_TAIL_PKT_Q7_V1)
#define BIT_SET_TAIL_PKT_Q7_V1(x, v)			(BIT_CLEAR_TAIL_PKT_Q7_V1(x) | BIT_TAIL_PKT_Q7_V1(v))

#define BIT_SHIFT_PKT_NUM_Q7_V1			8
#define BIT_MASK_PKT_NUM_Q7_V1				0x7f
#define BIT_PKT_NUM_Q7_V1(x)				(((x) & BIT_MASK_PKT_NUM_Q7_V1) << BIT_SHIFT_PKT_NUM_Q7_V1)
#define BITS_PKT_NUM_Q7_V1				(BIT_MASK_PKT_NUM_Q7_V1 << BIT_SHIFT_PKT_NUM_Q7_V1)
#define BIT_CLEAR_PKT_NUM_Q7_V1(x)			((x) & (~BITS_PKT_NUM_Q7_V1))
#define BIT_GET_PKT_NUM_Q7_V1(x)			(((x) >> BIT_SHIFT_PKT_NUM_Q7_V1) & BIT_MASK_PKT_NUM_Q7_V1)
#define BIT_SET_PKT_NUM_Q7_V1(x, v)			(BIT_CLEAR_PKT_NUM_Q7_V1(x) | BIT_PKT_NUM_Q7_V1(v))

#define BIT_SHIFT_HEAD_PKT_Q7				0
#define BIT_MASK_HEAD_PKT_Q7				0xff
#define BIT_HEAD_PKT_Q7(x)				(((x) & BIT_MASK_HEAD_PKT_Q7) << BIT_SHIFT_HEAD_PKT_Q7)
#define BITS_HEAD_PKT_Q7				(BIT_MASK_HEAD_PKT_Q7 << BIT_SHIFT_HEAD_PKT_Q7)
#define BIT_CLEAR_HEAD_PKT_Q7(x)			((x) & (~BITS_HEAD_PKT_Q7))
#define BIT_GET_HEAD_PKT_Q7(x)				(((x) >> BIT_SHIFT_HEAD_PKT_Q7) & BIT_MASK_HEAD_PKT_Q7)
#define BIT_SET_HEAD_PKT_Q7(x, v)			(BIT_CLEAR_HEAD_PKT_Q7(x) | BIT_HEAD_PKT_Q7(v))

/* 2 REG_GCLK_CFG				(Offset 0x0478) */

#define BIT_CLR_TXRPT_RW_PTR				BIT(2)
#define BIT_EN_QUEUE_RPT_B8				BIT(1)
#define BIT_EN_PTCL_GCLK				BIT(0)

/* 2 REG_TXRPT_CTRL				(Offset 0x047C) */

#define BIT_SHIFT_AMPDU_TXRPT_TIME_THRS		24
#define BIT_MASK_AMPDU_TXRPT_TIME_THRS			0xff
#define BIT_AMPDU_TXRPT_TIME_THRS(x)			(((x) & BIT_MASK_AMPDU_TXRPT_TIME_THRS) << BIT_SHIFT_AMPDU_TXRPT_TIME_THRS)
#define BITS_AMPDU_TXRPT_TIME_THRS			(BIT_MASK_AMPDU_TXRPT_TIME_THRS << BIT_SHIFT_AMPDU_TXRPT_TIME_THRS)
#define BIT_CLEAR_AMPDU_TXRPT_TIME_THRS(x)		((x) & (~BITS_AMPDU_TXRPT_TIME_THRS))
#define BIT_GET_AMPDU_TXRPT_TIME_THRS(x)		(((x) >> BIT_SHIFT_AMPDU_TXRPT_TIME_THRS) & BIT_MASK_AMPDU_TXRPT_TIME_THRS)
#define BIT_SET_AMPDU_TXRPT_TIME_THRS(x, v)		(BIT_CLEAR_AMPDU_TXRPT_TIME_THRS(x) | BIT_AMPDU_TXRPT_TIME_THRS(v))

#define BIT_SHIFT_AMPDU_TXRPT_LEN_THRS			16
#define BIT_MASK_AMPDU_TXRPT_LEN_THRS			0xff
#define BIT_AMPDU_TXRPT_LEN_THRS(x)			(((x) & BIT_MASK_AMPDU_TXRPT_LEN_THRS) << BIT_SHIFT_AMPDU_TXRPT_LEN_THRS)
#define BITS_AMPDU_TXRPT_LEN_THRS			(BIT_MASK_AMPDU_TXRPT_LEN_THRS << BIT_SHIFT_AMPDU_TXRPT_LEN_THRS)
#define BIT_CLEAR_AMPDU_TXRPT_LEN_THRS(x)		((x) & (~BITS_AMPDU_TXRPT_LEN_THRS))
#define BIT_GET_AMPDU_TXRPT_LEN_THRS(x)		(((x) >> BIT_SHIFT_AMPDU_TXRPT_LEN_THRS) & BIT_MASK_AMPDU_TXRPT_LEN_THRS)
#define BIT_SET_AMPDU_TXRPT_LEN_THRS(x, v)		(BIT_CLEAR_AMPDU_TXRPT_LEN_THRS(x) | BIT_AMPDU_TXRPT_LEN_THRS(v))

#define BIT_SHIFT_AMPDU_TXRPT_R_PTR			8
#define BIT_MASK_AMPDU_TXRPT_R_PTR			0xff
#define BIT_AMPDU_TXRPT_R_PTR(x)			(((x) & BIT_MASK_AMPDU_TXRPT_R_PTR) << BIT_SHIFT_AMPDU_TXRPT_R_PTR)
#define BITS_AMPDU_TXRPT_R_PTR				(BIT_MASK_AMPDU_TXRPT_R_PTR << BIT_SHIFT_AMPDU_TXRPT_R_PTR)
#define BIT_CLEAR_AMPDU_TXRPT_R_PTR(x)			((x) & (~BITS_AMPDU_TXRPT_R_PTR))
#define BIT_GET_AMPDU_TXRPT_R_PTR(x)			(((x) >> BIT_SHIFT_AMPDU_TXRPT_R_PTR) & BIT_MASK_AMPDU_TXRPT_R_PTR)
#define BIT_SET_AMPDU_TXRPT_R_PTR(x, v)		(BIT_CLEAR_AMPDU_TXRPT_R_PTR(x) | BIT_AMPDU_TXRPT_R_PTR(v))

#define BIT_SHIFT_AMPDU_TXRPT_W_PTR			0
#define BIT_MASK_AMPDU_TXRPT_W_PTR			0xff
#define BIT_AMPDU_TXRPT_W_PTR(x)			(((x) & BIT_MASK_AMPDU_TXRPT_W_PTR) << BIT_SHIFT_AMPDU_TXRPT_W_PTR)
#define BITS_AMPDU_TXRPT_W_PTR				(BIT_MASK_AMPDU_TXRPT_W_PTR << BIT_SHIFT_AMPDU_TXRPT_W_PTR)
#define BIT_CLEAR_AMPDU_TXRPT_W_PTR(x)			((x) & (~BITS_AMPDU_TXRPT_W_PTR))
#define BIT_GET_AMPDU_TXRPT_W_PTR(x)			(((x) >> BIT_SHIFT_AMPDU_TXRPT_W_PTR) & BIT_MASK_AMPDU_TXRPT_W_PTR)
#define BIT_SET_AMPDU_TXRPT_W_PTR(x, v)		(BIT_CLEAR_AMPDU_TXRPT_W_PTR(x) | BIT_AMPDU_TXRPT_W_PTR(v))

/* 2 REG_CFEND_RATE_SC_CTRL			(Offset 0x0480) */

#define BIT_SHIFT_TXSC_40M				28
#define BIT_MASK_TXSC_40M				0xf
#define BIT_TXSC_40M(x)				(((x) & BIT_MASK_TXSC_40M) << BIT_SHIFT_TXSC_40M)
#define BITS_TXSC_40M					(BIT_MASK_TXSC_40M << BIT_SHIFT_TXSC_40M)
#define BIT_CLEAR_TXSC_40M(x)				((x) & (~BITS_TXSC_40M))
#define BIT_GET_TXSC_40M(x)				(((x) >> BIT_SHIFT_TXSC_40M) & BIT_MASK_TXSC_40M)
#define BIT_SET_TXSC_40M(x, v)				(BIT_CLEAR_TXSC_40M(x) | BIT_TXSC_40M(v))

#define BIT_SHIFT_TXSC_20M				24
#define BIT_MASK_TXSC_20M				0xf
#define BIT_TXSC_20M(x)				(((x) & BIT_MASK_TXSC_20M) << BIT_SHIFT_TXSC_20M)
#define BITS_TXSC_20M					(BIT_MASK_TXSC_20M << BIT_SHIFT_TXSC_20M)
#define BIT_CLEAR_TXSC_20M(x)				((x) & (~BITS_TXSC_20M))
#define BIT_GET_TXSC_20M(x)				(((x) >> BIT_SHIFT_TXSC_20M) & BIT_MASK_TXSC_20M)
#define BIT_SET_TXSC_20M(x, v)				(BIT_CLEAR_TXSC_20M(x) | BIT_TXSC_20M(v))

#define BIT_SHIFT_STBC_CFEND_RATE			15
#define BIT_MASK_STBC_CFEND_RATE			0x1ff
#define BIT_STBC_CFEND_RATE(x)				(((x) & BIT_MASK_STBC_CFEND_RATE) << BIT_SHIFT_STBC_CFEND_RATE)
#define BITS_STBC_CFEND_RATE				(BIT_MASK_STBC_CFEND_RATE << BIT_SHIFT_STBC_CFEND_RATE)
#define BIT_CLEAR_STBC_CFEND_RATE(x)			((x) & (~BITS_STBC_CFEND_RATE))
#define BIT_GET_STBC_CFEND_RATE(x)			(((x) >> BIT_SHIFT_STBC_CFEND_RATE) & BIT_MASK_STBC_CFEND_RATE)
#define BIT_SET_STBC_CFEND_RATE(x, v)			(BIT_CLEAR_STBC_CFEND_RATE(x) | BIT_STBC_CFEND_RATE(v))

#define BIT_SHIFT_BASIC_CFEND_RATE			6
#define BIT_MASK_BASIC_CFEND_RATE			0x1ff
#define BIT_BASIC_CFEND_RATE(x)			(((x) & BIT_MASK_BASIC_CFEND_RATE) << BIT_SHIFT_BASIC_CFEND_RATE)
#define BITS_BASIC_CFEND_RATE				(BIT_MASK_BASIC_CFEND_RATE << BIT_SHIFT_BASIC_CFEND_RATE)
#define BIT_CLEAR_BASIC_CFEND_RATE(x)			((x) & (~BITS_BASIC_CFEND_RATE))
#define BIT_GET_BASIC_CFEND_RATE(x)			(((x) >> BIT_SHIFT_BASIC_CFEND_RATE) & BIT_MASK_BASIC_CFEND_RATE)
#define BIT_SET_BASIC_CFEND_RATE(x, v)			(BIT_CLEAR_BASIC_CFEND_RATE(x) | BIT_BASIC_CFEND_RATE(v))

#define BIT_LEAG_RTS_BW_DUP				BIT(5)

/* 2 REG_MACID_SLEEP3			(Offset 0x0484) */

#define BIT_SHIFT_MACID127_96_PKTSLEEP			0
#define BIT_MASK_MACID127_96_PKTSLEEP			0xffffffffL
#define BIT_MACID127_96_PKTSLEEP(x)			(((x) & BIT_MASK_MACID127_96_PKTSLEEP) << BIT_SHIFT_MACID127_96_PKTSLEEP)
#define BITS_MACID127_96_PKTSLEEP			(BIT_MASK_MACID127_96_PKTSLEEP << BIT_SHIFT_MACID127_96_PKTSLEEP)
#define BIT_CLEAR_MACID127_96_PKTSLEEP(x)		((x) & (~BITS_MACID127_96_PKTSLEEP))
#define BIT_GET_MACID127_96_PKTSLEEP(x)		(((x) >> BIT_SHIFT_MACID127_96_PKTSLEEP) & BIT_MASK_MACID127_96_PKTSLEEP)
#define BIT_SET_MACID127_96_PKTSLEEP(x, v)		(BIT_CLEAR_MACID127_96_PKTSLEEP(x) | BIT_MACID127_96_PKTSLEEP(v))

/* 2 REG_MACID_SLEEP1			(Offset 0x0488) */

#define BIT_SHIFT_MACID63_32_PKTSLEEP			0
#define BIT_MASK_MACID63_32_PKTSLEEP			0xffffffffL
#define BIT_MACID63_32_PKTSLEEP(x)			(((x) & BIT_MASK_MACID63_32_PKTSLEEP) << BIT_SHIFT_MACID63_32_PKTSLEEP)
#define BITS_MACID63_32_PKTSLEEP			(BIT_MASK_MACID63_32_PKTSLEEP << BIT_SHIFT_MACID63_32_PKTSLEEP)
#define BIT_CLEAR_MACID63_32_PKTSLEEP(x)		((x) & (~BITS_MACID63_32_PKTSLEEP))
#define BIT_GET_MACID63_32_PKTSLEEP(x)			(((x) >> BIT_SHIFT_MACID63_32_PKTSLEEP) & BIT_MASK_MACID63_32_PKTSLEEP)
#define BIT_SET_MACID63_32_PKTSLEEP(x, v)		(BIT_CLEAR_MACID63_32_PKTSLEEP(x) | BIT_MACID63_32_PKTSLEEP(v))

#define BIT_SHIFT_ADPT_RATE_TABLE_L2			0
#define BIT_MASK_ADPT_RATE_TABLE_L2			0xffffffffL
#define BIT_ADPT_RATE_TABLE_L2(x)			(((x) & BIT_MASK_ADPT_RATE_TABLE_L2) << BIT_SHIFT_ADPT_RATE_TABLE_L2)
#define BITS_ADPT_RATE_TABLE_L2			(BIT_MASK_ADPT_RATE_TABLE_L2 << BIT_SHIFT_ADPT_RATE_TABLE_L2)
#define BIT_CLEAR_ADPT_RATE_TABLE_L2(x)		((x) & (~BITS_ADPT_RATE_TABLE_L2))
#define BIT_GET_ADPT_RATE_TABLE_L2(x)			(((x) >> BIT_SHIFT_ADPT_RATE_TABLE_L2) & BIT_MASK_ADPT_RATE_TABLE_L2)
#define BIT_SET_ADPT_RATE_TABLE_L2(x, v)		(BIT_CLEAR_ADPT_RATE_TABLE_L2(x) | BIT_ADPT_RATE_TABLE_L2(v))

#define BIT_SHIFT_ADPT_RATE_TABLE_H2			0
#define BIT_MASK_ADPT_RATE_TABLE_H2			0xffffffffL
#define BIT_ADPT_RATE_TABLE_H2(x)			(((x) & BIT_MASK_ADPT_RATE_TABLE_H2) << BIT_SHIFT_ADPT_RATE_TABLE_H2)
#define BITS_ADPT_RATE_TABLE_H2			(BIT_MASK_ADPT_RATE_TABLE_H2 << BIT_SHIFT_ADPT_RATE_TABLE_H2)
#define BIT_CLEAR_ADPT_RATE_TABLE_H2(x)		((x) & (~BITS_ADPT_RATE_TABLE_H2))
#define BIT_GET_ADPT_RATE_TABLE_H2(x)			(((x) >> BIT_SHIFT_ADPT_RATE_TABLE_H2) & BIT_MASK_ADPT_RATE_TABLE_H2)
#define BIT_SET_ADPT_RATE_TABLE_H2(x, v)		(BIT_CLEAR_ADPT_RATE_TABLE_H2(x) | BIT_ADPT_RATE_TABLE_H2(v))

#define BIT_SHIFT_ADPT_RATE_TABLE_L3			0
#define BIT_MASK_ADPT_RATE_TABLE_L3			0xffffffffL
#define BIT_ADPT_RATE_TABLE_L3(x)			(((x) & BIT_MASK_ADPT_RATE_TABLE_L3) << BIT_SHIFT_ADPT_RATE_TABLE_L3)
#define BITS_ADPT_RATE_TABLE_L3			(BIT_MASK_ADPT_RATE_TABLE_L3 << BIT_SHIFT_ADPT_RATE_TABLE_L3)
#define BIT_CLEAR_ADPT_RATE_TABLE_L3(x)		((x) & (~BITS_ADPT_RATE_TABLE_L3))
#define BIT_GET_ADPT_RATE_TABLE_L3(x)			(((x) >> BIT_SHIFT_ADPT_RATE_TABLE_L3) & BIT_MASK_ADPT_RATE_TABLE_L3)
#define BIT_SET_ADPT_RATE_TABLE_L3(x, v)		(BIT_CLEAR_ADPT_RATE_TABLE_L3(x) | BIT_ADPT_RATE_TABLE_L3(v))

#define BIT_SHIFT_ADPT_RATE_TABLE_H3			0
#define BIT_MASK_ADPT_RATE_TABLE_H3			0xffffffffL
#define BIT_ADPT_RATE_TABLE_H3(x)			(((x) & BIT_MASK_ADPT_RATE_TABLE_H3) << BIT_SHIFT_ADPT_RATE_TABLE_H3)
#define BITS_ADPT_RATE_TABLE_H3			(BIT_MASK_ADPT_RATE_TABLE_H3 << BIT_SHIFT_ADPT_RATE_TABLE_H3)
#define BIT_CLEAR_ADPT_RATE_TABLE_H3(x)		((x) & (~BITS_ADPT_RATE_TABLE_H3))
#define BIT_GET_ADPT_RATE_TABLE_H3(x)			(((x) >> BIT_SHIFT_ADPT_RATE_TABLE_H3) & BIT_MASK_ADPT_RATE_TABLE_H3)
#define BIT_SET_ADPT_RATE_TABLE_H3(x, v)		(BIT_CLEAR_ADPT_RATE_TABLE_H3(x) | BIT_ADPT_RATE_TABLE_H3(v))

#define BIT_SHIFT_ADPT_RATE_TABLE_L4			0
#define BIT_MASK_ADPT_RATE_TABLE_L4			0xffffffffL
#define BIT_ADPT_RATE_TABLE_L4(x)			(((x) & BIT_MASK_ADPT_RATE_TABLE_L4) << BIT_SHIFT_ADPT_RATE_TABLE_L4)
#define BITS_ADPT_RATE_TABLE_L4			(BIT_MASK_ADPT_RATE_TABLE_L4 << BIT_SHIFT_ADPT_RATE_TABLE_L4)
#define BIT_CLEAR_ADPT_RATE_TABLE_L4(x)		((x) & (~BITS_ADPT_RATE_TABLE_L4))
#define BIT_GET_ADPT_RATE_TABLE_L4(x)			(((x) >> BIT_SHIFT_ADPT_RATE_TABLE_L4) & BIT_MASK_ADPT_RATE_TABLE_L4)
#define BIT_SET_ADPT_RATE_TABLE_L4(x, v)		(BIT_CLEAR_ADPT_RATE_TABLE_L4(x) | BIT_ADPT_RATE_TABLE_L4(v))

#define BIT_SHIFT_ADPT_RATE_TABLE_H4			0
#define BIT_MASK_ADPT_RATE_TABLE_H4			0xffffffffL
#define BIT_ADPT_RATE_TABLE_H4(x)			(((x) & BIT_MASK_ADPT_RATE_TABLE_H4) << BIT_SHIFT_ADPT_RATE_TABLE_H4)
#define BITS_ADPT_RATE_TABLE_H4			(BIT_MASK_ADPT_RATE_TABLE_H4 << BIT_SHIFT_ADPT_RATE_TABLE_H4)
#define BIT_CLEAR_ADPT_RATE_TABLE_H4(x)		((x) & (~BITS_ADPT_RATE_TABLE_H4))
#define BIT_GET_ADPT_RATE_TABLE_H4(x)			(((x) >> BIT_SHIFT_ADPT_RATE_TABLE_H4) & BIT_MASK_ADPT_RATE_TABLE_H4)
#define BIT_SET_ADPT_RATE_TABLE_H4(x, v)		(BIT_CLEAR_ADPT_RATE_TABLE_H4(x) | BIT_ADPT_RATE_TABLE_H4(v))

#define BIT_SHIFT_ADPT_RATE_TABLE_L5			0
#define BIT_MASK_ADPT_RATE_TABLE_L5			0xffffffffL
#define BIT_ADPT_RATE_TABLE_L5(x)			(((x) & BIT_MASK_ADPT_RATE_TABLE_L5) << BIT_SHIFT_ADPT_RATE_TABLE_L5)
#define BITS_ADPT_RATE_TABLE_L5			(BIT_MASK_ADPT_RATE_TABLE_L5 << BIT_SHIFT_ADPT_RATE_TABLE_L5)
#define BIT_CLEAR_ADPT_RATE_TABLE_L5(x)		((x) & (~BITS_ADPT_RATE_TABLE_L5))
#define BIT_GET_ADPT_RATE_TABLE_L5(x)			(((x) >> BIT_SHIFT_ADPT_RATE_TABLE_L5) & BIT_MASK_ADPT_RATE_TABLE_L5)
#define BIT_SET_ADPT_RATE_TABLE_L5(x, v)		(BIT_CLEAR_ADPT_RATE_TABLE_L5(x) | BIT_ADPT_RATE_TABLE_L5(v))

#define BIT_SHIFT_ADPT_RATE_TABLE_H5			0
#define BIT_MASK_ADPT_RATE_TABLE_H5			0xffffffffL
#define BIT_ADPT_RATE_TABLE_H5(x)			(((x) & BIT_MASK_ADPT_RATE_TABLE_H5) << BIT_SHIFT_ADPT_RATE_TABLE_H5)
#define BITS_ADPT_RATE_TABLE_H5			(BIT_MASK_ADPT_RATE_TABLE_H5 << BIT_SHIFT_ADPT_RATE_TABLE_H5)
#define BIT_CLEAR_ADPT_RATE_TABLE_H5(x)		((x) & (~BITS_ADPT_RATE_TABLE_H5))
#define BIT_GET_ADPT_RATE_TABLE_H5(x)			(((x) >> BIT_SHIFT_ADPT_RATE_TABLE_H5) & BIT_MASK_ADPT_RATE_TABLE_H5)
#define BIT_SET_ADPT_RATE_TABLE_H5(x, v)		(BIT_CLEAR_ADPT_RATE_TABLE_H5(x) | BIT_ADPT_RATE_TABLE_H5(v))

/* 2 REG_TXRPT_START_OFFSET			(Offset 0x04AC) */

#define BIT_RPTFIFO_1K					BIT(16)

#define BIT_SHIFT_MACID_CTRL_OFFSET			8
#define BIT_MASK_MACID_CTRL_OFFSET			0xff
#define BIT_MACID_CTRL_OFFSET(x)			(((x) & BIT_MASK_MACID_CTRL_OFFSET) << BIT_SHIFT_MACID_CTRL_OFFSET)
#define BITS_MACID_CTRL_OFFSET				(BIT_MASK_MACID_CTRL_OFFSET << BIT_SHIFT_MACID_CTRL_OFFSET)
#define BIT_CLEAR_MACID_CTRL_OFFSET(x)			((x) & (~BITS_MACID_CTRL_OFFSET))
#define BIT_GET_MACID_CTRL_OFFSET(x)			(((x) >> BIT_SHIFT_MACID_CTRL_OFFSET) & BIT_MASK_MACID_CTRL_OFFSET)
#define BIT_SET_MACID_CTRL_OFFSET(x, v)		(BIT_CLEAR_MACID_CTRL_OFFSET(x) | BIT_MACID_CTRL_OFFSET(v))

#define BIT_SHIFT_AMPDU_TXRPT_OFFSET			0
#define BIT_MASK_AMPDU_TXRPT_OFFSET			0xff
#define BIT_AMPDU_TXRPT_OFFSET(x)			(((x) & BIT_MASK_AMPDU_TXRPT_OFFSET) << BIT_SHIFT_AMPDU_TXRPT_OFFSET)
#define BITS_AMPDU_TXRPT_OFFSET			(BIT_MASK_AMPDU_TXRPT_OFFSET << BIT_SHIFT_AMPDU_TXRPT_OFFSET)
#define BIT_CLEAR_AMPDU_TXRPT_OFFSET(x)		((x) & (~BITS_AMPDU_TXRPT_OFFSET))
#define BIT_GET_AMPDU_TXRPT_OFFSET(x)			(((x) >> BIT_SHIFT_AMPDU_TXRPT_OFFSET) & BIT_MASK_AMPDU_TXRPT_OFFSET)
#define BIT_SET_AMPDU_TXRPT_OFFSET(x, v)		(BIT_CLEAR_AMPDU_TXRPT_OFFSET(x) | BIT_AMPDU_TXRPT_OFFSET(v))

/* 2 REG_PTA_WL_PRI_MASK			(Offset 0x04B4) */

#define BIT_PTA_WL_PRI_MASK_CPU_MGQ			BIT(31)
#define BIT_PTA_WL_PRI_MASK_BCNQ			BIT(30)
#define BIT_PTA_WL_PRI_MASK_HIQ			BIT(29)
#define BIT_PTA_WL_PRI_MASK_MGQ			BIT(28)
#define BIT_PTA_WL_PRI_MASK_BK				BIT(27)
#define BIT_PTA_WL_PRI_MASK_BE				BIT(26)
#define BIT_PTA_WL_PRI_MASK_VI				BIT(25)
#define BIT_PTA_WL_PRI_MASK_VO				BIT(24)

/* 2 REG_EVTQ_RPT				(Offset 0x04B8) */

#define BIT_SHIFT_EVTQ_TX_RPT				27
#define BIT_MASK_EVTQ_TX_RPT				0x7
#define BIT_EVTQ_TX_RPT(x)				(((x) & BIT_MASK_EVTQ_TX_RPT) << BIT_SHIFT_EVTQ_TX_RPT)
#define BITS_EVTQ_TX_RPT				(BIT_MASK_EVTQ_TX_RPT << BIT_SHIFT_EVTQ_TX_RPT)
#define BIT_CLEAR_EVTQ_TX_RPT(x)			((x) & (~BITS_EVTQ_TX_RPT))
#define BIT_GET_EVTQ_TX_RPT(x)				(((x) >> BIT_SHIFT_EVTQ_TX_RPT) & BIT_MASK_EVTQ_TX_RPT)
#define BIT_SET_EVTQ_TX_RPT(x, v)			(BIT_CLEAR_EVTQ_TX_RPT(x) | BIT_EVTQ_TX_RPT(v))

#define BIT_PTA_WL_PRI_MASK_EVT			BIT(25)

/* 2 REG_SW_AMPDU_BURST_MODE_CTRL		(Offset 0x04BC) */

#define BIT_SHIFT_EVTQ_HEAD				24
#define BIT_MASK_EVTQ_HEAD				0xff
#define BIT_EVTQ_HEAD(x)				(((x) & BIT_MASK_EVTQ_HEAD) << BIT_SHIFT_EVTQ_HEAD)
#define BITS_EVTQ_HEAD					(BIT_MASK_EVTQ_HEAD << BIT_SHIFT_EVTQ_HEAD)
#define BIT_CLEAR_EVTQ_HEAD(x)				((x) & (~BITS_EVTQ_HEAD))
#define BIT_GET_EVTQ_HEAD(x)				(((x) >> BIT_SHIFT_EVTQ_HEAD) & BIT_MASK_EVTQ_HEAD)
#define BIT_SET_EVTQ_HEAD(x, v)			(BIT_CLEAR_EVTQ_HEAD(x) | BIT_EVTQ_HEAD(v))

#define BIT_SHIFT_DMA_THIS_QUEUE			20
#define BIT_MASK_DMA_THIS_QUEUE			0xf
#define BIT_DMA_THIS_QUEUE(x)				(((x) & BIT_MASK_DMA_THIS_QUEUE) << BIT_SHIFT_DMA_THIS_QUEUE)
#define BITS_DMA_THIS_QUEUE				(BIT_MASK_DMA_THIS_QUEUE << BIT_SHIFT_DMA_THIS_QUEUE)
#define BIT_CLEAR_DMA_THIS_QUEUE(x)			((x) & (~BITS_DMA_THIS_QUEUE))
#define BIT_GET_DMA_THIS_QUEUE(x)			(((x) >> BIT_SHIFT_DMA_THIS_QUEUE) & BIT_MASK_DMA_THIS_QUEUE)
#define BIT_SET_DMA_THIS_QUEUE(x, v)			(BIT_CLEAR_DMA_THIS_QUEUE(x) | BIT_DMA_THIS_QUEUE(v))

#define BIT_SHIFT_TOTAL_LEN_THRS			8
#define BIT_MASK_TOTAL_LEN_THRS			0xfff
#define BIT_TOTAL_LEN_THRS(x)				(((x) & BIT_MASK_TOTAL_LEN_THRS) << BIT_SHIFT_TOTAL_LEN_THRS)
#define BITS_TOTAL_LEN_THRS				(BIT_MASK_TOTAL_LEN_THRS << BIT_SHIFT_TOTAL_LEN_THRS)
#define BIT_CLEAR_TOTAL_LEN_THRS(x)			((x) & (~BITS_TOTAL_LEN_THRS))
#define BIT_GET_TOTAL_LEN_THRS(x)			(((x) >> BIT_SHIFT_TOTAL_LEN_THRS) & BIT_MASK_TOTAL_LEN_THRS)
#define BIT_SET_TOTAL_LEN_THRS(x, v)			(BIT_CLEAR_TOTAL_LEN_THRS(x) | BIT_TOTAL_LEN_THRS(v))

#define BIT_WEP_PRETX_EN				BIT(7)
#define BIT_PRE_TX_CMD					BIT(6)

#define BIT_SHIFT_NUM_SCL_EN				4
#define BIT_MASK_NUM_SCL_EN				0x3
#define BIT_NUM_SCL_EN(x)				(((x) & BIT_MASK_NUM_SCL_EN) << BIT_SHIFT_NUM_SCL_EN)
#define BITS_NUM_SCL_EN				(BIT_MASK_NUM_SCL_EN << BIT_SHIFT_NUM_SCL_EN)
#define BIT_CLEAR_NUM_SCL_EN(x)			((x) & (~BITS_NUM_SCL_EN))
#define BIT_GET_NUM_SCL_EN(x)				(((x) >> BIT_SHIFT_NUM_SCL_EN) & BIT_MASK_NUM_SCL_EN)
#define BIT_SET_NUM_SCL_EN(x, v)			(BIT_CLEAR_NUM_SCL_EN(x) | BIT_NUM_SCL_EN(v))

#define BIT_BK_EN					BIT(3)
#define BIT_BE_EN					BIT(2)
#define BIT_VI_EN					BIT(1)
#define BIT_VO_EN					BIT(0)

/* 2 REG_PKT_LIFE_TIME			(Offset 0x04C0) */

#define BIT_SHIFT_PKT_LIFTIME_BEBK			16
#define BIT_MASK_PKT_LIFTIME_BEBK			0xffff
#define BIT_PKT_LIFTIME_BEBK(x)			(((x) & BIT_MASK_PKT_LIFTIME_BEBK) << BIT_SHIFT_PKT_LIFTIME_BEBK)
#define BITS_PKT_LIFTIME_BEBK				(BIT_MASK_PKT_LIFTIME_BEBK << BIT_SHIFT_PKT_LIFTIME_BEBK)
#define BIT_CLEAR_PKT_LIFTIME_BEBK(x)			((x) & (~BITS_PKT_LIFTIME_BEBK))
#define BIT_GET_PKT_LIFTIME_BEBK(x)			(((x) >> BIT_SHIFT_PKT_LIFTIME_BEBK) & BIT_MASK_PKT_LIFTIME_BEBK)
#define BIT_SET_PKT_LIFTIME_BEBK(x, v)			(BIT_CLEAR_PKT_LIFTIME_BEBK(x) | BIT_PKT_LIFTIME_BEBK(v))

#define BIT_SHIFT_PKT_LIFTIME_VOVI			0
#define BIT_MASK_PKT_LIFTIME_VOVI			0xffff
#define BIT_PKT_LIFTIME_VOVI(x)			(((x) & BIT_MASK_PKT_LIFTIME_VOVI) << BIT_SHIFT_PKT_LIFTIME_VOVI)
#define BITS_PKT_LIFTIME_VOVI				(BIT_MASK_PKT_LIFTIME_VOVI << BIT_SHIFT_PKT_LIFTIME_VOVI)
#define BIT_CLEAR_PKT_LIFTIME_VOVI(x)			((x) & (~BITS_PKT_LIFTIME_VOVI))
#define BIT_GET_PKT_LIFTIME_VOVI(x)			(((x) >> BIT_SHIFT_PKT_LIFTIME_VOVI) & BIT_MASK_PKT_LIFTIME_VOVI)
#define BIT_SET_PKT_LIFTIME_VOVI(x, v)			(BIT_CLEAR_PKT_LIFTIME_VOVI(x) | BIT_PKT_LIFTIME_VOVI(v))

/* 2 REG_PTA_STBC_CTRL			(Offset 0x04C4) */

#define BIT_EN_SINGLE_APMDU				BIT(31)
#define BIT_FORCE_RND_PRI				BIT(22)
#define BIT_PTA_EDCCA_EN				BIT(21)
#define BIT_PTA_WL_TX_EN				BIT(20)
#define BIT_R_USE_DATA_BW				BIT(19)
#define BIT_TRI_PKT_STATUS				BIT(18)
#define BIT_TRI_PKT_PKTIN				BIT(17)
#define BIT_ACQ_MODE_SEL				BIT(16)

#define BIT_SHIFT_CDEND_TXTIME_H			8
#define BIT_MASK_CDEND_TXTIME_H			0x1f
#define BIT_CDEND_TXTIME_H(x)				(((x) & BIT_MASK_CDEND_TXTIME_H) << BIT_SHIFT_CDEND_TXTIME_H)
#define BITS_CDEND_TXTIME_H				(BIT_MASK_CDEND_TXTIME_H << BIT_SHIFT_CDEND_TXTIME_H)
#define BIT_CLEAR_CDEND_TXTIME_H(x)			((x) & (~BITS_CDEND_TXTIME_H))
#define BIT_GET_CDEND_TXTIME_H(x)			(((x) >> BIT_SHIFT_CDEND_TXTIME_H) & BIT_MASK_CDEND_TXTIME_H)
#define BIT_SET_CDEND_TXTIME_H(x, v)			(BIT_CLEAR_CDEND_TXTIME_H(x) | BIT_CDEND_TXTIME_H(v))

#define BIT_SHIFT_CDEND_TXTIME_L			4
#define BIT_MASK_CDEND_TXTIME_L			0xf
#define BIT_CDEND_TXTIME_L(x)				(((x) & BIT_MASK_CDEND_TXTIME_L) << BIT_SHIFT_CDEND_TXTIME_L)
#define BITS_CDEND_TXTIME_L				(BIT_MASK_CDEND_TXTIME_L << BIT_SHIFT_CDEND_TXTIME_L)
#define BIT_CLEAR_CDEND_TXTIME_L(x)			((x) & (~BITS_CDEND_TXTIME_L))
#define BIT_GET_CDEND_TXTIME_L(x)			(((x) >> BIT_SHIFT_CDEND_TXTIME_L) & BIT_MASK_CDEND_TXTIME_L)
#define BIT_SET_CDEND_TXTIME_L(x, v)			(BIT_CLEAR_CDEND_TXTIME_L(x) | BIT_CDEND_TXTIME_L(v))

#define BIT_SHIFT_NESS					2
#define BIT_MASK_NESS					0x3
#define BIT_NESS(x)					(((x) & BIT_MASK_NESS) << BIT_SHIFT_NESS)
#define BITS_NESS					(BIT_MASK_NESS << BIT_SHIFT_NESS)
#define BIT_CLEAR_NESS(x)				((x) & (~BITS_NESS))
#define BIT_GET_NESS(x)				(((x) >> BIT_SHIFT_NESS) & BIT_MASK_NESS)
#define BIT_SET_NESS(x, v)				(BIT_CLEAR_NESS(x) | BIT_NESS(v))

#define BIT_SHIFT_STBC_CFEND				0
#define BIT_MASK_STBC_CFEND				0x3
#define BIT_STBC_CFEND(x)				(((x) & BIT_MASK_STBC_CFEND) << BIT_SHIFT_STBC_CFEND)
#define BITS_STBC_CFEND				(BIT_MASK_STBC_CFEND << BIT_SHIFT_STBC_CFEND)
#define BIT_CLEAR_STBC_CFEND(x)			((x) & (~BITS_STBC_CFEND))
#define BIT_GET_STBC_CFEND(x)				(((x) >> BIT_SHIFT_STBC_CFEND) & BIT_MASK_STBC_CFEND)
#define BIT_SET_STBC_CFEND(x, v)			(BIT_CLEAR_STBC_CFEND(x) | BIT_STBC_CFEND(v))

/* 2 REG_PROT_MODE_CTRL			(Offset 0x04C8) */

#define BIT_SHIFT_RTS_MAX_AGG_NUM			24
#define BIT_MASK_RTS_MAX_AGG_NUM			0x3f
#define BIT_RTS_MAX_AGG_NUM(x)				(((x) & BIT_MASK_RTS_MAX_AGG_NUM) << BIT_SHIFT_RTS_MAX_AGG_NUM)
#define BITS_RTS_MAX_AGG_NUM				(BIT_MASK_RTS_MAX_AGG_NUM << BIT_SHIFT_RTS_MAX_AGG_NUM)
#define BIT_CLEAR_RTS_MAX_AGG_NUM(x)			((x) & (~BITS_RTS_MAX_AGG_NUM))
#define BIT_GET_RTS_MAX_AGG_NUM(x)			(((x) >> BIT_SHIFT_RTS_MAX_AGG_NUM) & BIT_MASK_RTS_MAX_AGG_NUM)
#define BIT_SET_RTS_MAX_AGG_NUM(x, v)			(BIT_CLEAR_RTS_MAX_AGG_NUM(x) | BIT_RTS_MAX_AGG_NUM(v))

#define BIT_SHIFT_MAX_AGG_NUM				16
#define BIT_MASK_MAX_AGG_NUM				0x3f
#define BIT_MAX_AGG_NUM(x)				(((x) & BIT_MASK_MAX_AGG_NUM) << BIT_SHIFT_MAX_AGG_NUM)
#define BITS_MAX_AGG_NUM				(BIT_MASK_MAX_AGG_NUM << BIT_SHIFT_MAX_AGG_NUM)
#define BIT_CLEAR_MAX_AGG_NUM(x)			((x) & (~BITS_MAX_AGG_NUM))
#define BIT_GET_MAX_AGG_NUM(x)				(((x) >> BIT_SHIFT_MAX_AGG_NUM) & BIT_MASK_MAX_AGG_NUM)
#define BIT_SET_MAX_AGG_NUM(x, v)			(BIT_CLEAR_MAX_AGG_NUM(x) | BIT_MAX_AGG_NUM(v))

#define BIT_SHIFT_RTS_TXTIME_TH			8
#define BIT_MASK_RTS_TXTIME_TH				0xff
#define BIT_RTS_TXTIME_TH(x)				(((x) & BIT_MASK_RTS_TXTIME_TH) << BIT_SHIFT_RTS_TXTIME_TH)
#define BITS_RTS_TXTIME_TH				(BIT_MASK_RTS_TXTIME_TH << BIT_SHIFT_RTS_TXTIME_TH)
#define BIT_CLEAR_RTS_TXTIME_TH(x)			((x) & (~BITS_RTS_TXTIME_TH))
#define BIT_GET_RTS_TXTIME_TH(x)			(((x) >> BIT_SHIFT_RTS_TXTIME_TH) & BIT_MASK_RTS_TXTIME_TH)
#define BIT_SET_RTS_TXTIME_TH(x, v)			(BIT_CLEAR_RTS_TXTIME_TH(x) | BIT_RTS_TXTIME_TH(v))

#define BIT_SHIFT_RTS_LEN_TH				0
#define BIT_MASK_RTS_LEN_TH				0xff
#define BIT_RTS_LEN_TH(x)				(((x) & BIT_MASK_RTS_LEN_TH) << BIT_SHIFT_RTS_LEN_TH)
#define BITS_RTS_LEN_TH				(BIT_MASK_RTS_LEN_TH << BIT_SHIFT_RTS_LEN_TH)
#define BIT_CLEAR_RTS_LEN_TH(x)			((x) & (~BITS_RTS_LEN_TH))
#define BIT_GET_RTS_LEN_TH(x)				(((x) >> BIT_SHIFT_RTS_LEN_TH) & BIT_MASK_RTS_LEN_TH)
#define BIT_SET_RTS_LEN_TH(x, v)			(BIT_CLEAR_RTS_LEN_TH(x) | BIT_RTS_LEN_TH(v))

/* 2 REG_BAR_MODE_CTRL			(Offset 0x04CC) */

#define BIT_SHIFT_RTY_PKT_LMT				24
#define BIT_MASK_RTY_PKT_LMT				0x3f
#define BIT_RTY_PKT_LMT(x)				(((x) & BIT_MASK_RTY_PKT_LMT) << BIT_SHIFT_RTY_PKT_LMT)
#define BITS_RTY_PKT_LMT				(BIT_MASK_RTY_PKT_LMT << BIT_SHIFT_RTY_PKT_LMT)
#define BIT_CLEAR_RTY_PKT_LMT(x)			((x) & (~BITS_RTY_PKT_LMT))
#define BIT_GET_RTY_PKT_LMT(x)				(((x) >> BIT_SHIFT_RTY_PKT_LMT) & BIT_MASK_RTY_PKT_LMT)
#define BIT_SET_RTY_PKT_LMT(x, v)			(BIT_CLEAR_RTY_PKT_LMT(x) | BIT_RTY_PKT_LMT(v))

#define BIT_SHIFT_BAR_RTY_LMT				16
#define BIT_MASK_BAR_RTY_LMT				0x3
#define BIT_BAR_RTY_LMT(x)				(((x) & BIT_MASK_BAR_RTY_LMT) << BIT_SHIFT_BAR_RTY_LMT)
#define BITS_BAR_RTY_LMT				(BIT_MASK_BAR_RTY_LMT << BIT_SHIFT_BAR_RTY_LMT)
#define BIT_CLEAR_BAR_RTY_LMT(x)			((x) & (~BITS_BAR_RTY_LMT))
#define BIT_GET_BAR_RTY_LMT(x)				(((x) >> BIT_SHIFT_BAR_RTY_LMT) & BIT_MASK_BAR_RTY_LMT)
#define BIT_SET_BAR_RTY_LMT(x, v)			(BIT_CLEAR_BAR_RTY_LMT(x) | BIT_BAR_RTY_LMT(v))

#define BIT_SHIFT_BAR_PKTTIME_THRS			8
#define BIT_MASK_BAR_PKTTIME_THRS			0xff
#define BIT_BAR_PKTTIME_THRS(x)			(((x) & BIT_MASK_BAR_PKTTIME_THRS) << BIT_SHIFT_BAR_PKTTIME_THRS)
#define BITS_BAR_PKTTIME_THRS				(BIT_MASK_BAR_PKTTIME_THRS << BIT_SHIFT_BAR_PKTTIME_THRS)
#define BIT_CLEAR_BAR_PKTTIME_THRS(x)			((x) & (~BITS_BAR_PKTTIME_THRS))
#define BIT_GET_BAR_PKTTIME_THRS(x)			(((x) >> BIT_SHIFT_BAR_PKTTIME_THRS) & BIT_MASK_BAR_PKTTIME_THRS)
#define BIT_SET_BAR_PKTTIME_THRS(x, v)			(BIT_CLEAR_BAR_PKTTIME_THRS(x) | BIT_BAR_PKTTIME_THRS(v))

#define BIT_SHIFT_BAR_PKTNUM_TH_V1			0
#define BIT_MASK_BAR_PKTNUM_TH_V1			0x7f
#define BIT_BAR_PKTNUM_TH_V1(x)			(((x) & BIT_MASK_BAR_PKTNUM_TH_V1) << BIT_SHIFT_BAR_PKTNUM_TH_V1)
#define BITS_BAR_PKTNUM_TH_V1				(BIT_MASK_BAR_PKTNUM_TH_V1 << BIT_SHIFT_BAR_PKTNUM_TH_V1)
#define BIT_CLEAR_BAR_PKTNUM_TH_V1(x)			((x) & (~BITS_BAR_PKTNUM_TH_V1))
#define BIT_GET_BAR_PKTNUM_TH_V1(x)			(((x) >> BIT_SHIFT_BAR_PKTNUM_TH_V1) & BIT_MASK_BAR_PKTNUM_TH_V1)
#define BIT_SET_BAR_PKTNUM_TH_V1(x, v)			(BIT_CLEAR_BAR_PKTNUM_TH_V1(x) | BIT_BAR_PKTNUM_TH_V1(v))

/* 2 REG_MACID_SLEEP2			(Offset 0x04D0) */

#define BIT_SHIFT_MACID95_64PKTSLEEP			0
#define BIT_MASK_MACID95_64PKTSLEEP			0xffffffffL
#define BIT_MACID95_64PKTSLEEP(x)			(((x) & BIT_MASK_MACID95_64PKTSLEEP) << BIT_SHIFT_MACID95_64PKTSLEEP)
#define BITS_MACID95_64PKTSLEEP			(BIT_MASK_MACID95_64PKTSLEEP << BIT_SHIFT_MACID95_64PKTSLEEP)
#define BIT_CLEAR_MACID95_64PKTSLEEP(x)		((x) & (~BITS_MACID95_64PKTSLEEP))
#define BIT_GET_MACID95_64PKTSLEEP(x)			(((x) >> BIT_SHIFT_MACID95_64PKTSLEEP) & BIT_MASK_MACID95_64PKTSLEEP)
#define BIT_SET_MACID95_64PKTSLEEP(x, v)		(BIT_CLEAR_MACID95_64PKTSLEEP(x) | BIT_MACID95_64PKTSLEEP(v))

/* 2 REG_MACID_SLEEP				(Offset 0x04D4) */

#define BIT_SHIFT_MACID31_0_PKTSLEEP			0
#define BIT_MASK_MACID31_0_PKTSLEEP			0xffffffffL
#define BIT_MACID31_0_PKTSLEEP(x)			(((x) & BIT_MASK_MACID31_0_PKTSLEEP) << BIT_SHIFT_MACID31_0_PKTSLEEP)
#define BITS_MACID31_0_PKTSLEEP			(BIT_MASK_MACID31_0_PKTSLEEP << BIT_SHIFT_MACID31_0_PKTSLEEP)
#define BIT_CLEAR_MACID31_0_PKTSLEEP(x)		((x) & (~BITS_MACID31_0_PKTSLEEP))
#define BIT_GET_MACID31_0_PKTSLEEP(x)			(((x) >> BIT_SHIFT_MACID31_0_PKTSLEEP) & BIT_MASK_MACID31_0_PKTSLEEP)
#define BIT_SET_MACID31_0_PKTSLEEP(x, v)		(BIT_CLEAR_MACID31_0_PKTSLEEP(x) | BIT_MACID31_0_PKTSLEEP(v))

/* 2 REG_HW_SEQ0_1				(Offset 0x04D8) */

#define BIT_SHIFT_HW_SSN_SEQ1				16
#define BIT_MASK_HW_SSN_SEQ1				0xfff
#define BIT_HW_SSN_SEQ1(x)				(((x) & BIT_MASK_HW_SSN_SEQ1) << BIT_SHIFT_HW_SSN_SEQ1)
#define BITS_HW_SSN_SEQ1				(BIT_MASK_HW_SSN_SEQ1 << BIT_SHIFT_HW_SSN_SEQ1)
#define BIT_CLEAR_HW_SSN_SEQ1(x)			((x) & (~BITS_HW_SSN_SEQ1))
#define BIT_GET_HW_SSN_SEQ1(x)				(((x) >> BIT_SHIFT_HW_SSN_SEQ1) & BIT_MASK_HW_SSN_SEQ1)
#define BIT_SET_HW_SSN_SEQ1(x, v)			(BIT_CLEAR_HW_SSN_SEQ1(x) | BIT_HW_SSN_SEQ1(v))

#define BIT_SHIFT_HW_SSN_SEQ0				0
#define BIT_MASK_HW_SSN_SEQ0				0xfff
#define BIT_HW_SSN_SEQ0(x)				(((x) & BIT_MASK_HW_SSN_SEQ0) << BIT_SHIFT_HW_SSN_SEQ0)
#define BITS_HW_SSN_SEQ0				(BIT_MASK_HW_SSN_SEQ0 << BIT_SHIFT_HW_SSN_SEQ0)
#define BIT_CLEAR_HW_SSN_SEQ0(x)			((x) & (~BITS_HW_SSN_SEQ0))
#define BIT_GET_HW_SSN_SEQ0(x)				(((x) >> BIT_SHIFT_HW_SSN_SEQ0) & BIT_MASK_HW_SSN_SEQ0)
#define BIT_SET_HW_SSN_SEQ0(x, v)			(BIT_CLEAR_HW_SSN_SEQ0(x) | BIT_HW_SSN_SEQ0(v))

/* 2 REG_HW_SEQ2_3				(Offset 0x04DC) */

#define BIT_SHIFT_HW_SSN_SEQ3				16
#define BIT_MASK_HW_SSN_SEQ3				0xfff
#define BIT_HW_SSN_SEQ3(x)				(((x) & BIT_MASK_HW_SSN_SEQ3) << BIT_SHIFT_HW_SSN_SEQ3)
#define BITS_HW_SSN_SEQ3				(BIT_MASK_HW_SSN_SEQ3 << BIT_SHIFT_HW_SSN_SEQ3)
#define BIT_CLEAR_HW_SSN_SEQ3(x)			((x) & (~BITS_HW_SSN_SEQ3))
#define BIT_GET_HW_SSN_SEQ3(x)				(((x) >> BIT_SHIFT_HW_SSN_SEQ3) & BIT_MASK_HW_SSN_SEQ3)
#define BIT_SET_HW_SSN_SEQ3(x, v)			(BIT_CLEAR_HW_SSN_SEQ3(x) | BIT_HW_SSN_SEQ3(v))

#define BIT_SHIFT_HW_SSN_SEQ2				0
#define BIT_MASK_HW_SSN_SEQ2				0xfff
#define BIT_HW_SSN_SEQ2(x)				(((x) & BIT_MASK_HW_SSN_SEQ2) << BIT_SHIFT_HW_SSN_SEQ2)
#define BITS_HW_SSN_SEQ2				(BIT_MASK_HW_SSN_SEQ2 << BIT_SHIFT_HW_SSN_SEQ2)
#define BIT_CLEAR_HW_SSN_SEQ2(x)			((x) & (~BITS_HW_SSN_SEQ2))
#define BIT_GET_HW_SSN_SEQ2(x)				(((x) >> BIT_SHIFT_HW_SSN_SEQ2) & BIT_MASK_HW_SSN_SEQ2)
#define BIT_SET_HW_SSN_SEQ2(x, v)			(BIT_CLEAR_HW_SSN_SEQ2(x) | BIT_HW_SSN_SEQ2(v))

/* 2 REG_PTCLERR_NULLPKT_STATUS		(Offset 0x04E0) */

#define BIT_SHIFT_PTCL_TOTAL_PG0_7			24
#define BIT_MASK_PTCL_TOTAL_PG0_7			0xff
#define BIT_PTCL_TOTAL_PG0_7(x)			(((x) & BIT_MASK_PTCL_TOTAL_PG0_7) << BIT_SHIFT_PTCL_TOTAL_PG0_7)
#define BITS_PTCL_TOTAL_PG0_7				(BIT_MASK_PTCL_TOTAL_PG0_7 << BIT_SHIFT_PTCL_TOTAL_PG0_7)
#define BIT_CLEAR_PTCL_TOTAL_PG0_7(x)			((x) & (~BITS_PTCL_TOTAL_PG0_7))
#define BIT_GET_PTCL_TOTAL_PG0_7(x)			(((x) >> BIT_SHIFT_PTCL_TOTAL_PG0_7) & BIT_MASK_PTCL_TOTAL_PG0_7)
#define BIT_SET_PTCL_TOTAL_PG0_7(x, v)			(BIT_CLEAR_PTCL_TOTAL_PG0_7(x) | BIT_PTCL_TOTAL_PG0_7(v))

#define BIT_PTCL_TOTAL_PG_8				BIT(23)
#define BIT_PTCL_RATE_TABLE_INVALID			BIT(22)
#define BIT_RD_TXHANG_ERR				BIT(21)
#define BIT_RD_STATUS_ERR				BIT(20)
#define BIT_RD_CTN_ERR					BIT(19)

#define BIT_SHIFT_RD_PKTIN_ERR				16
#define BIT_MASK_RD_PKTIN_ERR				0x7
#define BIT_RD_PKTIN_ERR(x)				(((x) & BIT_MASK_RD_PKTIN_ERR) << BIT_SHIFT_RD_PKTIN_ERR)
#define BITS_RD_PKTIN_ERR				(BIT_MASK_RD_PKTIN_ERR << BIT_SHIFT_RD_PKTIN_ERR)
#define BIT_CLEAR_RD_PKTIN_ERR(x)			((x) & (~BITS_RD_PKTIN_ERR))
#define BIT_GET_RD_PKTIN_ERR(x)			(((x) >> BIT_SHIFT_RD_PKTIN_ERR) & BIT_MASK_RD_PKTIN_ERR)
#define BIT_SET_RD_PKTIN_ERR(x, v)			(BIT_CLEAR_RD_PKTIN_ERR(x) | BIT_RD_PKTIN_ERR(v))

#define BIT_RD_FTMT2R_ERR				BIT(15)
#define BIT_P1_TX_NULL_1				BIT(3)
#define BIT_P1_TX_NULL_0				BIT(2)
#define BIT_P0_TX_NULL_1				BIT(1)
#define BIT_P0_TX_NULL_0				BIT(0)

/* 2 REG_PRETX_DROP_CTRL			(Offset 0x04E4) */

#define BIT_SHIFT_COLLI_DETEC_TIME_MAX			20
#define BIT_MASK_COLLI_DETEC_TIME_MAX			0xf
#define BIT_COLLI_DETEC_TIME_MAX(x)			(((x) & BIT_MASK_COLLI_DETEC_TIME_MAX) << BIT_SHIFT_COLLI_DETEC_TIME_MAX)
#define BITS_COLLI_DETEC_TIME_MAX			(BIT_MASK_COLLI_DETEC_TIME_MAX << BIT_SHIFT_COLLI_DETEC_TIME_MAX)
#define BIT_CLEAR_COLLI_DETEC_TIME_MAX(x)		((x) & (~BITS_COLLI_DETEC_TIME_MAX))
#define BIT_GET_COLLI_DETEC_TIME_MAX(x)		(((x) >> BIT_SHIFT_COLLI_DETEC_TIME_MAX) & BIT_MASK_COLLI_DETEC_TIME_MAX)
#define BIT_SET_COLLI_DETEC_TIME_MAX(x, v)		(BIT_CLEAR_COLLI_DETEC_TIME_MAX(x) | BIT_COLLI_DETEC_TIME_MAX(v))

#define BIT_PRETX_AGGR_EN				BIT(19)

#define BIT_SHIFT_PRETX_AGGR_TIME_MAX			8
#define BIT_MASK_PRETX_AGGR_TIME_MAX			0x7ff
#define BIT_PRETX_AGGR_TIME_MAX(x)			(((x) & BIT_MASK_PRETX_AGGR_TIME_MAX) << BIT_SHIFT_PRETX_AGGR_TIME_MAX)
#define BITS_PRETX_AGGR_TIME_MAX			(BIT_MASK_PRETX_AGGR_TIME_MAX << BIT_SHIFT_PRETX_AGGR_TIME_MAX)
#define BIT_CLEAR_PRETX_AGGR_TIME_MAX(x)		((x) & (~BITS_PRETX_AGGR_TIME_MAX))
#define BIT_GET_PRETX_AGGR_TIME_MAX(x)			(((x) >> BIT_SHIFT_PRETX_AGGR_TIME_MAX) & BIT_MASK_PRETX_AGGR_TIME_MAX)
#define BIT_SET_PRETX_AGGR_TIME_MAX(x, v)		(BIT_CLEAR_PRETX_AGGR_TIME_MAX(x) | BIT_PRETX_AGGR_TIME_MAX(v))

#define BIT_HGQ_DEL_EN					BIT(7)
#define BIT_MGQ_DEL_EN					BIT(6)

/* 2 REG_BT_POLLUTE_PKT_CNT			(Offset 0x04E8) */

#define BIT_SHIFT_BT_RXPOLLUTE_PKT_CNT			16
#define BIT_MASK_BT_RXPOLLUTE_PKT_CNT			0xffff
#define BIT_BT_RXPOLLUTE_PKT_CNT(x)			(((x) & BIT_MASK_BT_RXPOLLUTE_PKT_CNT) << BIT_SHIFT_BT_RXPOLLUTE_PKT_CNT)
#define BITS_BT_RXPOLLUTE_PKT_CNT			(BIT_MASK_BT_RXPOLLUTE_PKT_CNT << BIT_SHIFT_BT_RXPOLLUTE_PKT_CNT)
#define BIT_CLEAR_BT_RXPOLLUTE_PKT_CNT(x)		((x) & (~BITS_BT_RXPOLLUTE_PKT_CNT))
#define BIT_GET_BT_RXPOLLUTE_PKT_CNT(x)		(((x) >> BIT_SHIFT_BT_RXPOLLUTE_PKT_CNT) & BIT_MASK_BT_RXPOLLUTE_PKT_CNT)
#define BIT_SET_BT_RXPOLLUTE_PKT_CNT(x, v)		(BIT_CLEAR_BT_RXPOLLUTE_PKT_CNT(x) | BIT_BT_RXPOLLUTE_PKT_CNT(v))

#define BIT_SHIFT_BT_TXPOLLUTE_PKT_CNT			0
#define BIT_MASK_BT_TXPOLLUTE_PKT_CNT			0xffff
#define BIT_BT_TXPOLLUTE_PKT_CNT(x)			(((x) & BIT_MASK_BT_TXPOLLUTE_PKT_CNT) << BIT_SHIFT_BT_TXPOLLUTE_PKT_CNT)
#define BITS_BT_TXPOLLUTE_PKT_CNT			(BIT_MASK_BT_TXPOLLUTE_PKT_CNT << BIT_SHIFT_BT_TXPOLLUTE_PKT_CNT)
#define BIT_CLEAR_BT_TXPOLLUTE_PKT_CNT(x)		((x) & (~BITS_BT_TXPOLLUTE_PKT_CNT))
#define BIT_GET_BT_TXPOLLUTE_PKT_CNT(x)		(((x) >> BIT_SHIFT_BT_TXPOLLUTE_PKT_CNT) & BIT_MASK_BT_TXPOLLUTE_PKT_CNT)
#define BIT_SET_BT_TXPOLLUTE_PKT_CNT(x, v)		(BIT_CLEAR_BT_TXPOLLUTE_PKT_CNT(x) | BIT_BT_TXPOLLUTE_PKT_CNT(v))

/* 2 REG_DROP_PKT_NUM			(Offset 0x04EC) */

#define BIT_SHIFT_LIFE_DROP_NUM			16
#define BIT_MASK_LIFE_DROP_NUM				0xffff
#define BIT_LIFE_DROP_NUM(x)				(((x) & BIT_MASK_LIFE_DROP_NUM) << BIT_SHIFT_LIFE_DROP_NUM)
#define BITS_LIFE_DROP_NUM				(BIT_MASK_LIFE_DROP_NUM << BIT_SHIFT_LIFE_DROP_NUM)
#define BIT_CLEAR_LIFE_DROP_NUM(x)			((x) & (~BITS_LIFE_DROP_NUM))
#define BIT_GET_LIFE_DROP_NUM(x)			(((x) >> BIT_SHIFT_LIFE_DROP_NUM) & BIT_MASK_LIFE_DROP_NUM)
#define BIT_SET_LIFE_DROP_NUM(x, v)			(BIT_CLEAR_LIFE_DROP_NUM(x) | BIT_LIFE_DROP_NUM(v))

#define BIT_SHIFT_DROP_PKT_NUM				0
#define BIT_MASK_DROP_PKT_NUM				0xffff
#define BIT_DROP_PKT_NUM(x)				(((x) & BIT_MASK_DROP_PKT_NUM) << BIT_SHIFT_DROP_PKT_NUM)
#define BITS_DROP_PKT_NUM				(BIT_MASK_DROP_PKT_NUM << BIT_SHIFT_DROP_PKT_NUM)
#define BIT_CLEAR_DROP_PKT_NUM(x)			((x) & (~BITS_DROP_PKT_NUM))
#define BIT_GET_DROP_PKT_NUM(x)			(((x) >> BIT_SHIFT_DROP_PKT_NUM) & BIT_MASK_DROP_PKT_NUM)
#define BIT_SET_DROP_PKT_NUM(x, v)			(BIT_CLEAR_DROP_PKT_NUM(x) | BIT_DROP_PKT_NUM(v))

/* 2 REG_CPUMGQ_TIMER_CTRL			(Offset 0x04F4) */

#define BIT_SHIFT_MGQ_TRI_HEAD				16
#define BIT_MASK_MGQ_TRI_HEAD				0xfff
#define BIT_MGQ_TRI_HEAD(x)				(((x) & BIT_MASK_MGQ_TRI_HEAD) << BIT_SHIFT_MGQ_TRI_HEAD)
#define BITS_MGQ_TRI_HEAD				(BIT_MASK_MGQ_TRI_HEAD << BIT_SHIFT_MGQ_TRI_HEAD)
#define BIT_CLEAR_MGQ_TRI_HEAD(x)			((x) & (~BITS_MGQ_TRI_HEAD))
#define BIT_GET_MGQ_TRI_HEAD(x)			(((x) >> BIT_SHIFT_MGQ_TRI_HEAD) & BIT_MASK_MGQ_TRI_HEAD)
#define BIT_SET_MGQ_TRI_HEAD(x, v)			(BIT_CLEAR_MGQ_TRI_HEAD(x) | BIT_MGQ_TRI_HEAD(v))

#define BIT_CPUMGQ_TRI_LIFETIME_EN			BIT(8)

#define BIT_SHIFT_CPUMGQ_TRI_LIFETIME			0
#define BIT_MASK_CPUMGQ_TRI_LIFETIME			0xff
#define BIT_CPUMGQ_TRI_LIFETIME(x)			(((x) & BIT_MASK_CPUMGQ_TRI_LIFETIME) << BIT_SHIFT_CPUMGQ_TRI_LIFETIME)
#define BITS_CPUMGQ_TRI_LIFETIME			(BIT_MASK_CPUMGQ_TRI_LIFETIME << BIT_SHIFT_CPUMGQ_TRI_LIFETIME)
#define BIT_CLEAR_CPUMGQ_TRI_LIFETIME(x)		((x) & (~BITS_CPUMGQ_TRI_LIFETIME))
#define BIT_GET_CPUMGQ_TRI_LIFETIME(x)			(((x) >> BIT_SHIFT_CPUMGQ_TRI_LIFETIME) & BIT_MASK_CPUMGQ_TRI_LIFETIME)
#define BIT_SET_CPUMGQ_TRI_LIFETIME(x, v)		(BIT_CLEAR_CPUMGQ_TRI_LIFETIME(x) | BIT_CPUMGQ_TRI_LIFETIME(v))

/* 2 REG_DUMMY				(Offset 0x04FC) */

#define BIT_SHIFT_DUMMY_REG_1				18
#define BIT_MASK_DUMMY_REG_1				0x3fff
#define BIT_DUMMY_REG_1(x)				(((x) & BIT_MASK_DUMMY_REG_1) << BIT_SHIFT_DUMMY_REG_1)
#define BITS_DUMMY_REG_1				(BIT_MASK_DUMMY_REG_1 << BIT_SHIFT_DUMMY_REG_1)
#define BIT_CLEAR_DUMMY_REG_1(x)			((x) & (~BITS_DUMMY_REG_1))
#define BIT_GET_DUMMY_REG_1(x)				(((x) >> BIT_SHIFT_DUMMY_REG_1) & BIT_MASK_DUMMY_REG_1)
#define BIT_SET_DUMMY_REG_1(x, v)			(BIT_CLEAR_DUMMY_REG_1(x) | BIT_DUMMY_REG_1(v))

#define BIT_EN_BCN_TRXRPT				BIT(17)

#define BIT_SHIFT_DUMMY_REG_0				0
#define BIT_MASK_DUMMY_REG_0				0x1ffff
#define BIT_DUMMY_REG_0(x)				(((x) & BIT_MASK_DUMMY_REG_0) << BIT_SHIFT_DUMMY_REG_0)
#define BITS_DUMMY_REG_0				(BIT_MASK_DUMMY_REG_0 << BIT_SHIFT_DUMMY_REG_0)
#define BIT_CLEAR_DUMMY_REG_0(x)			((x) & (~BITS_DUMMY_REG_0))
#define BIT_GET_DUMMY_REG_0(x)				(((x) >> BIT_SHIFT_DUMMY_REG_0) & BIT_MASK_DUMMY_REG_0)
#define BIT_SET_DUMMY_REG_0(x, v)			(BIT_CLEAR_DUMMY_REG_0(x) | BIT_DUMMY_REG_0(v))

#define BIT_SHIFT_ADPT_RATE_TABLE_L6			0
#define BIT_MASK_ADPT_RATE_TABLE_L6			0xffffffffL
#define BIT_ADPT_RATE_TABLE_L6(x)			(((x) & BIT_MASK_ADPT_RATE_TABLE_L6) << BIT_SHIFT_ADPT_RATE_TABLE_L6)
#define BITS_ADPT_RATE_TABLE_L6			(BIT_MASK_ADPT_RATE_TABLE_L6 << BIT_SHIFT_ADPT_RATE_TABLE_L6)
#define BIT_CLEAR_ADPT_RATE_TABLE_L6(x)		((x) & (~BITS_ADPT_RATE_TABLE_L6))
#define BIT_GET_ADPT_RATE_TABLE_L6(x)			(((x) >> BIT_SHIFT_ADPT_RATE_TABLE_L6) & BIT_MASK_ADPT_RATE_TABLE_L6)
#define BIT_SET_ADPT_RATE_TABLE_L6(x, v)		(BIT_CLEAR_ADPT_RATE_TABLE_L6(x) | BIT_ADPT_RATE_TABLE_L6(v))

#define BIT_SHIFT_ADPT_RATE_TABLE_H6			0
#define BIT_MASK_ADPT_RATE_TABLE_H6			0xffffffffL
#define BIT_ADPT_RATE_TABLE_H6(x)			(((x) & BIT_MASK_ADPT_RATE_TABLE_H6) << BIT_SHIFT_ADPT_RATE_TABLE_H6)
#define BITS_ADPT_RATE_TABLE_H6			(BIT_MASK_ADPT_RATE_TABLE_H6 << BIT_SHIFT_ADPT_RATE_TABLE_H6)
#define BIT_CLEAR_ADPT_RATE_TABLE_H6(x)		((x) & (~BITS_ADPT_RATE_TABLE_H6))
#define BIT_GET_ADPT_RATE_TABLE_H6(x)			(((x) >> BIT_SHIFT_ADPT_RATE_TABLE_H6) & BIT_MASK_ADPT_RATE_TABLE_H6)
#define BIT_SET_ADPT_RATE_TABLE_H6(x, v)		(BIT_CLEAR_ADPT_RATE_TABLE_H6(x) | BIT_ADPT_RATE_TABLE_H6(v))

#define BIT_SHIFT_ADPT_RATE_TABLE_L7			0
#define BIT_MASK_ADPT_RATE_TABLE_L7			0xffffffffL
#define BIT_ADPT_RATE_TABLE_L7(x)			(((x) & BIT_MASK_ADPT_RATE_TABLE_L7) << BIT_SHIFT_ADPT_RATE_TABLE_L7)
#define BITS_ADPT_RATE_TABLE_L7			(BIT_MASK_ADPT_RATE_TABLE_L7 << BIT_SHIFT_ADPT_RATE_TABLE_L7)
#define BIT_CLEAR_ADPT_RATE_TABLE_L7(x)		((x) & (~BITS_ADPT_RATE_TABLE_L7))
#define BIT_GET_ADPT_RATE_TABLE_L7(x)			(((x) >> BIT_SHIFT_ADPT_RATE_TABLE_L7) & BIT_MASK_ADPT_RATE_TABLE_L7)
#define BIT_SET_ADPT_RATE_TABLE_L7(x, v)		(BIT_CLEAR_ADPT_RATE_TABLE_L7(x) | BIT_ADPT_RATE_TABLE_L7(v))

#define BIT_SHIFT_ADPT_RATE_TABLE_H7			0
#define BIT_MASK_ADPT_RATE_TABLE_H7			0xffffffffL
#define BIT_ADPT_RATE_TABLE_H7(x)			(((x) & BIT_MASK_ADPT_RATE_TABLE_H7) << BIT_SHIFT_ADPT_RATE_TABLE_H7)
#define BITS_ADPT_RATE_TABLE_H7			(BIT_MASK_ADPT_RATE_TABLE_H7 << BIT_SHIFT_ADPT_RATE_TABLE_H7)
#define BIT_CLEAR_ADPT_RATE_TABLE_H7(x)		((x) & (~BITS_ADPT_RATE_TABLE_H7))
#define BIT_GET_ADPT_RATE_TABLE_H7(x)			(((x) >> BIT_SHIFT_ADPT_RATE_TABLE_H7) & BIT_MASK_ADPT_RATE_TABLE_H7)
#define BIT_SET_ADPT_RATE_TABLE_H7(x, v)		(BIT_CLEAR_ADPT_RATE_TABLE_H7(x) | BIT_ADPT_RATE_TABLE_H7(v))

#define BIT_SHIFT_ADPT_RATE_TABLE_L8			0
#define BIT_MASK_ADPT_RATE_TABLE_L8			0xffffffffL
#define BIT_ADPT_RATE_TABLE_L8(x)			(((x) & BIT_MASK_ADPT_RATE_TABLE_L8) << BIT_SHIFT_ADPT_RATE_TABLE_L8)
#define BITS_ADPT_RATE_TABLE_L8			(BIT_MASK_ADPT_RATE_TABLE_L8 << BIT_SHIFT_ADPT_RATE_TABLE_L8)
#define BIT_CLEAR_ADPT_RATE_TABLE_L8(x)		((x) & (~BITS_ADPT_RATE_TABLE_L8))
#define BIT_GET_ADPT_RATE_TABLE_L8(x)			(((x) >> BIT_SHIFT_ADPT_RATE_TABLE_L8) & BIT_MASK_ADPT_RATE_TABLE_L8)
#define BIT_SET_ADPT_RATE_TABLE_L8(x, v)		(BIT_CLEAR_ADPT_RATE_TABLE_L8(x) | BIT_ADPT_RATE_TABLE_L8(v))

#define BIT_SHIFT_ADPT_RATE_TABLE_H8			0
#define BIT_MASK_ADPT_RATE_TABLE_H8			0xffffffffL
#define BIT_ADPT_RATE_TABLE_H8(x)			(((x) & BIT_MASK_ADPT_RATE_TABLE_H8) << BIT_SHIFT_ADPT_RATE_TABLE_H8)
#define BITS_ADPT_RATE_TABLE_H8			(BIT_MASK_ADPT_RATE_TABLE_H8 << BIT_SHIFT_ADPT_RATE_TABLE_H8)
#define BIT_CLEAR_ADPT_RATE_TABLE_H8(x)		((x) & (~BITS_ADPT_RATE_TABLE_H8))
#define BIT_GET_ADPT_RATE_TABLE_H8(x)			(((x) >> BIT_SHIFT_ADPT_RATE_TABLE_H8) & BIT_MASK_ADPT_RATE_TABLE_H8)
#define BIT_SET_ADPT_RATE_TABLE_H8(x, v)		(BIT_CLEAR_ADPT_RATE_TABLE_H8(x) | BIT_ADPT_RATE_TABLE_H8(v))

/* 2 REG_EDCA_VO_PARAM			(Offset 0x0500) */

#define BIT_SHIFT_TXOPLIMIT_VO				16
#define BIT_MASK_TXOPLIMIT_VO				0x7ff
#define BIT_TXOPLIMIT_VO(x)				(((x) & BIT_MASK_TXOPLIMIT_VO) << BIT_SHIFT_TXOPLIMIT_VO)
#define BITS_TXOPLIMIT_VO				(BIT_MASK_TXOPLIMIT_VO << BIT_SHIFT_TXOPLIMIT_VO)
#define BIT_CLEAR_TXOPLIMIT_VO(x)			((x) & (~BITS_TXOPLIMIT_VO))
#define BIT_GET_TXOPLIMIT_VO(x)			(((x) >> BIT_SHIFT_TXOPLIMIT_VO) & BIT_MASK_TXOPLIMIT_VO)
#define BIT_SET_TXOPLIMIT_VO(x, v)			(BIT_CLEAR_TXOPLIMIT_VO(x) | BIT_TXOPLIMIT_VO(v))

#define BIT_SHIFT_CW_VO				8
#define BIT_MASK_CW_VO					0xff
#define BIT_CW_VO(x)					(((x) & BIT_MASK_CW_VO) << BIT_SHIFT_CW_VO)
#define BITS_CW_VO					(BIT_MASK_CW_VO << BIT_SHIFT_CW_VO)
#define BIT_CLEAR_CW_VO(x)				((x) & (~BITS_CW_VO))
#define BIT_GET_CW_VO(x)				(((x) >> BIT_SHIFT_CW_VO) & BIT_MASK_CW_VO)
#define BIT_SET_CW_VO(x, v)				(BIT_CLEAR_CW_VO(x) | BIT_CW_VO(v))

#define BIT_SHIFT_AIFS_VO				0
#define BIT_MASK_AIFS_VO				0xff
#define BIT_AIFS_VO(x)					(((x) & BIT_MASK_AIFS_VO) << BIT_SHIFT_AIFS_VO)
#define BITS_AIFS_VO					(BIT_MASK_AIFS_VO << BIT_SHIFT_AIFS_VO)
#define BIT_CLEAR_AIFS_VO(x)				((x) & (~BITS_AIFS_VO))
#define BIT_GET_AIFS_VO(x)				(((x) >> BIT_SHIFT_AIFS_VO) & BIT_MASK_AIFS_VO)
#define BIT_SET_AIFS_VO(x, v)				(BIT_CLEAR_AIFS_VO(x) | BIT_AIFS_VO(v))

/* 2 REG_EDCA_VI_PARAM			(Offset 0x0504) */

#define BIT_SHIFT_TXOPLIMIT_VI				16
#define BIT_MASK_TXOPLIMIT_VI				0x7ff
#define BIT_TXOPLIMIT_VI(x)				(((x) & BIT_MASK_TXOPLIMIT_VI) << BIT_SHIFT_TXOPLIMIT_VI)
#define BITS_TXOPLIMIT_VI				(BIT_MASK_TXOPLIMIT_VI << BIT_SHIFT_TXOPLIMIT_VI)
#define BIT_CLEAR_TXOPLIMIT_VI(x)			((x) & (~BITS_TXOPLIMIT_VI))
#define BIT_GET_TXOPLIMIT_VI(x)			(((x) >> BIT_SHIFT_TXOPLIMIT_VI) & BIT_MASK_TXOPLIMIT_VI)
#define BIT_SET_TXOPLIMIT_VI(x, v)			(BIT_CLEAR_TXOPLIMIT_VI(x) | BIT_TXOPLIMIT_VI(v))

#define BIT_SHIFT_CW_VI				8
#define BIT_MASK_CW_VI					0xff
#define BIT_CW_VI(x)					(((x) & BIT_MASK_CW_VI) << BIT_SHIFT_CW_VI)
#define BITS_CW_VI					(BIT_MASK_CW_VI << BIT_SHIFT_CW_VI)
#define BIT_CLEAR_CW_VI(x)				((x) & (~BITS_CW_VI))
#define BIT_GET_CW_VI(x)				(((x) >> BIT_SHIFT_CW_VI) & BIT_MASK_CW_VI)
#define BIT_SET_CW_VI(x, v)				(BIT_CLEAR_CW_VI(x) | BIT_CW_VI(v))

#define BIT_SHIFT_AIFS_VI				0
#define BIT_MASK_AIFS_VI				0xff
#define BIT_AIFS_VI(x)					(((x) & BIT_MASK_AIFS_VI) << BIT_SHIFT_AIFS_VI)
#define BITS_AIFS_VI					(BIT_MASK_AIFS_VI << BIT_SHIFT_AIFS_VI)
#define BIT_CLEAR_AIFS_VI(x)				((x) & (~BITS_AIFS_VI))
#define BIT_GET_AIFS_VI(x)				(((x) >> BIT_SHIFT_AIFS_VI) & BIT_MASK_AIFS_VI)
#define BIT_SET_AIFS_VI(x, v)				(BIT_CLEAR_AIFS_VI(x) | BIT_AIFS_VI(v))

/* 2 REG_EDCA_BE_PARAM			(Offset 0x0508) */

#define BIT_SHIFT_TXOPLIMIT_BE				16
#define BIT_MASK_TXOPLIMIT_BE				0x7ff
#define BIT_TXOPLIMIT_BE(x)				(((x) & BIT_MASK_TXOPLIMIT_BE) << BIT_SHIFT_TXOPLIMIT_BE)
#define BITS_TXOPLIMIT_BE				(BIT_MASK_TXOPLIMIT_BE << BIT_SHIFT_TXOPLIMIT_BE)
#define BIT_CLEAR_TXOPLIMIT_BE(x)			((x) & (~BITS_TXOPLIMIT_BE))
#define BIT_GET_TXOPLIMIT_BE(x)			(((x) >> BIT_SHIFT_TXOPLIMIT_BE) & BIT_MASK_TXOPLIMIT_BE)
#define BIT_SET_TXOPLIMIT_BE(x, v)			(BIT_CLEAR_TXOPLIMIT_BE(x) | BIT_TXOPLIMIT_BE(v))

#define BIT_SHIFT_CW_BE				8
#define BIT_MASK_CW_BE					0xff
#define BIT_CW_BE(x)					(((x) & BIT_MASK_CW_BE) << BIT_SHIFT_CW_BE)
#define BITS_CW_BE					(BIT_MASK_CW_BE << BIT_SHIFT_CW_BE)
#define BIT_CLEAR_CW_BE(x)				((x) & (~BITS_CW_BE))
#define BIT_GET_CW_BE(x)				(((x) >> BIT_SHIFT_CW_BE) & BIT_MASK_CW_BE)
#define BIT_SET_CW_BE(x, v)				(BIT_CLEAR_CW_BE(x) | BIT_CW_BE(v))

#define BIT_SHIFT_AIFS_BE				0
#define BIT_MASK_AIFS_BE				0xff
#define BIT_AIFS_BE(x)					(((x) & BIT_MASK_AIFS_BE) << BIT_SHIFT_AIFS_BE)
#define BITS_AIFS_BE					(BIT_MASK_AIFS_BE << BIT_SHIFT_AIFS_BE)
#define BIT_CLEAR_AIFS_BE(x)				((x) & (~BITS_AIFS_BE))
#define BIT_GET_AIFS_BE(x)				(((x) >> BIT_SHIFT_AIFS_BE) & BIT_MASK_AIFS_BE)
#define BIT_SET_AIFS_BE(x, v)				(BIT_CLEAR_AIFS_BE(x) | BIT_AIFS_BE(v))

/* 2 REG_EDCA_BK_PARAM			(Offset 0x050C) */

#define BIT_SHIFT_TXOPLIMIT_BK				16
#define BIT_MASK_TXOPLIMIT_BK				0x7ff
#define BIT_TXOPLIMIT_BK(x)				(((x) & BIT_MASK_TXOPLIMIT_BK) << BIT_SHIFT_TXOPLIMIT_BK)
#define BITS_TXOPLIMIT_BK				(BIT_MASK_TXOPLIMIT_BK << BIT_SHIFT_TXOPLIMIT_BK)
#define BIT_CLEAR_TXOPLIMIT_BK(x)			((x) & (~BITS_TXOPLIMIT_BK))
#define BIT_GET_TXOPLIMIT_BK(x)			(((x) >> BIT_SHIFT_TXOPLIMIT_BK) & BIT_MASK_TXOPLIMIT_BK)
#define BIT_SET_TXOPLIMIT_BK(x, v)			(BIT_CLEAR_TXOPLIMIT_BK(x) | BIT_TXOPLIMIT_BK(v))

#define BIT_SHIFT_CW_BK				8
#define BIT_MASK_CW_BK					0xff
#define BIT_CW_BK(x)					(((x) & BIT_MASK_CW_BK) << BIT_SHIFT_CW_BK)
#define BITS_CW_BK					(BIT_MASK_CW_BK << BIT_SHIFT_CW_BK)
#define BIT_CLEAR_CW_BK(x)				((x) & (~BITS_CW_BK))
#define BIT_GET_CW_BK(x)				(((x) >> BIT_SHIFT_CW_BK) & BIT_MASK_CW_BK)
#define BIT_SET_CW_BK(x, v)				(BIT_CLEAR_CW_BK(x) | BIT_CW_BK(v))

#define BIT_SHIFT_AIFS_BK				0
#define BIT_MASK_AIFS_BK				0xff
#define BIT_AIFS_BK(x)					(((x) & BIT_MASK_AIFS_BK) << BIT_SHIFT_AIFS_BK)
#define BITS_AIFS_BK					(BIT_MASK_AIFS_BK << BIT_SHIFT_AIFS_BK)
#define BIT_CLEAR_AIFS_BK(x)				((x) & (~BITS_AIFS_BK))
#define BIT_GET_AIFS_BK(x)				(((x) >> BIT_SHIFT_AIFS_BK) & BIT_MASK_AIFS_BK)
#define BIT_SET_AIFS_BK(x, v)				(BIT_CLEAR_AIFS_BK(x) | BIT_AIFS_BK(v))

/* 2 REG_BCN_CFG_PIFS			(Offset 0x0510) */

#define BIT_SHIFT_RDG_PIFS				24
#define BIT_MASK_RDG_PIFS				0xff
#define BIT_RDG_PIFS(x)				(((x) & BIT_MASK_RDG_PIFS) << BIT_SHIFT_RDG_PIFS)
#define BITS_RDG_PIFS					(BIT_MASK_RDG_PIFS << BIT_SHIFT_RDG_PIFS)
#define BIT_CLEAR_RDG_PIFS(x)				((x) & (~BITS_RDG_PIFS))
#define BIT_GET_RDG_PIFS(x)				(((x) >> BIT_SHIFT_RDG_PIFS) & BIT_MASK_RDG_PIFS)
#define BIT_SET_RDG_PIFS(x, v)				(BIT_CLEAR_RDG_PIFS(x) | BIT_RDG_PIFS(v))

#define BIT_SHIFT_PIFS					16
#define BIT_MASK_PIFS					0xff
#define BIT_PIFS(x)					(((x) & BIT_MASK_PIFS) << BIT_SHIFT_PIFS)
#define BITS_PIFS					(BIT_MASK_PIFS << BIT_SHIFT_PIFS)
#define BIT_CLEAR_PIFS(x)				((x) & (~BITS_PIFS))
#define BIT_GET_PIFS(x)				(((x) >> BIT_SHIFT_PIFS) & BIT_MASK_PIFS)
#define BIT_SET_PIFS(x, v)				(BIT_CLEAR_PIFS(x) | BIT_PIFS(v))

#define BIT_SHIFT_BCNCW_MAX				12
#define BIT_MASK_BCNCW_MAX				0xf
#define BIT_BCNCW_MAX(x)				(((x) & BIT_MASK_BCNCW_MAX) << BIT_SHIFT_BCNCW_MAX)
#define BITS_BCNCW_MAX					(BIT_MASK_BCNCW_MAX << BIT_SHIFT_BCNCW_MAX)
#define BIT_CLEAR_BCNCW_MAX(x)				((x) & (~BITS_BCNCW_MAX))
#define BIT_GET_BCNCW_MAX(x)				(((x) >> BIT_SHIFT_BCNCW_MAX) & BIT_MASK_BCNCW_MAX)
#define BIT_SET_BCNCW_MAX(x, v)			(BIT_CLEAR_BCNCW_MAX(x) | BIT_BCNCW_MAX(v))

#define BIT_SHIFT_BCNCW_MIN				8
#define BIT_MASK_BCNCW_MIN				0xf
#define BIT_BCNCW_MIN(x)				(((x) & BIT_MASK_BCNCW_MIN) << BIT_SHIFT_BCNCW_MIN)
#define BITS_BCNCW_MIN					(BIT_MASK_BCNCW_MIN << BIT_SHIFT_BCNCW_MIN)
#define BIT_CLEAR_BCNCW_MIN(x)				((x) & (~BITS_BCNCW_MIN))
#define BIT_GET_BCNCW_MIN(x)				(((x) >> BIT_SHIFT_BCNCW_MIN) & BIT_MASK_BCNCW_MIN)
#define BIT_SET_BCNCW_MIN(x, v)			(BIT_CLEAR_BCNCW_MIN(x) | BIT_BCNCW_MIN(v))

#define BIT_SHIFT_BCNIFS				0
#define BIT_MASK_BCNIFS				0xff
#define BIT_BCNIFS(x)					(((x) & BIT_MASK_BCNIFS) << BIT_SHIFT_BCNIFS)
#define BITS_BCNIFS					(BIT_MASK_BCNIFS << BIT_SHIFT_BCNIFS)
#define BIT_CLEAR_BCNIFS(x)				((x) & (~BITS_BCNIFS))
#define BIT_GET_BCNIFS(x)				(((x) >> BIT_SHIFT_BCNIFS) & BIT_MASK_BCNIFS)
#define BIT_SET_BCNIFS(x, v)				(BIT_CLEAR_BCNIFS(x) | BIT_BCNIFS(v))

/* 2 REG_SIFS				(Offset 0x0514) */

#define BIT_SHIFT_SIFS_OFDM_TRX			24
#define BIT_MASK_SIFS_OFDM_TRX				0xff
#define BIT_SIFS_OFDM_TRX(x)				(((x) & BIT_MASK_SIFS_OFDM_TRX) << BIT_SHIFT_SIFS_OFDM_TRX)
#define BITS_SIFS_OFDM_TRX				(BIT_MASK_SIFS_OFDM_TRX << BIT_SHIFT_SIFS_OFDM_TRX)
#define BIT_CLEAR_SIFS_OFDM_TRX(x)			((x) & (~BITS_SIFS_OFDM_TRX))
#define BIT_GET_SIFS_OFDM_TRX(x)			(((x) >> BIT_SHIFT_SIFS_OFDM_TRX) & BIT_MASK_SIFS_OFDM_TRX)
#define BIT_SET_SIFS_OFDM_TRX(x, v)			(BIT_CLEAR_SIFS_OFDM_TRX(x) | BIT_SIFS_OFDM_TRX(v))

#define BIT_SHIFT_SIFS_CCK_TRX				16
#define BIT_MASK_SIFS_CCK_TRX				0xff
#define BIT_SIFS_CCK_TRX(x)				(((x) & BIT_MASK_SIFS_CCK_TRX) << BIT_SHIFT_SIFS_CCK_TRX)
#define BITS_SIFS_CCK_TRX				(BIT_MASK_SIFS_CCK_TRX << BIT_SHIFT_SIFS_CCK_TRX)
#define BIT_CLEAR_SIFS_CCK_TRX(x)			((x) & (~BITS_SIFS_CCK_TRX))
#define BIT_GET_SIFS_CCK_TRX(x)			(((x) >> BIT_SHIFT_SIFS_CCK_TRX) & BIT_MASK_SIFS_CCK_TRX)
#define BIT_SET_SIFS_CCK_TRX(x, v)			(BIT_CLEAR_SIFS_CCK_TRX(x) | BIT_SIFS_CCK_TRX(v))

#define BIT_SHIFT_SIFS_OFDM_CTX			8
#define BIT_MASK_SIFS_OFDM_CTX				0xff
#define BIT_SIFS_OFDM_CTX(x)				(((x) & BIT_MASK_SIFS_OFDM_CTX) << BIT_SHIFT_SIFS_OFDM_CTX)
#define BITS_SIFS_OFDM_CTX				(BIT_MASK_SIFS_OFDM_CTX << BIT_SHIFT_SIFS_OFDM_CTX)
#define BIT_CLEAR_SIFS_OFDM_CTX(x)			((x) & (~BITS_SIFS_OFDM_CTX))
#define BIT_GET_SIFS_OFDM_CTX(x)			(((x) >> BIT_SHIFT_SIFS_OFDM_CTX) & BIT_MASK_SIFS_OFDM_CTX)
#define BIT_SET_SIFS_OFDM_CTX(x, v)			(BIT_CLEAR_SIFS_OFDM_CTX(x) | BIT_SIFS_OFDM_CTX(v))

#define BIT_SHIFT_SIFS_CCK_CTX				0
#define BIT_MASK_SIFS_CCK_CTX				0xff
#define BIT_SIFS_CCK_CTX(x)				(((x) & BIT_MASK_SIFS_CCK_CTX) << BIT_SHIFT_SIFS_CCK_CTX)
#define BITS_SIFS_CCK_CTX				(BIT_MASK_SIFS_CCK_CTX << BIT_SHIFT_SIFS_CCK_CTX)
#define BIT_CLEAR_SIFS_CCK_CTX(x)			((x) & (~BITS_SIFS_CCK_CTX))
#define BIT_GET_SIFS_CCK_CTX(x)			(((x) >> BIT_SHIFT_SIFS_CCK_CTX) & BIT_MASK_SIFS_CCK_CTX)
#define BIT_SET_SIFS_CCK_CTX(x, v)			(BIT_CLEAR_SIFS_CCK_CTX(x) | BIT_SIFS_CCK_CTX(v))

/* 2 REG_TSFT_SYN_OFFSET_SLOT		(Offset 0x0518) */

#define BIT_SHIFT_SLOTTIME				24
#define BIT_MASK_SLOTTIME				0xff
#define BIT_SLOTTIME(x)				(((x) & BIT_MASK_SLOTTIME) << BIT_SHIFT_SLOTTIME)
#define BITS_SLOTTIME					(BIT_MASK_SLOTTIME << BIT_SHIFT_SLOTTIME)
#define BIT_CLEAR_SLOTTIME(x)				((x) & (~BITS_SLOTTIME))
#define BIT_GET_SLOTTIME(x)				(((x) >> BIT_SHIFT_SLOTTIME) & BIT_MASK_SLOTTIME)
#define BIT_SET_SLOTTIME(x, v)				(BIT_CLEAR_SLOTTIME(x) | BIT_SLOTTIME(v))

#define BIT_SHIFT_AGGR_BK_TIME				16
#define BIT_MASK_AGGR_BK_TIME				0xff
#define BIT_AGGR_BK_TIME(x)				(((x) & BIT_MASK_AGGR_BK_TIME) << BIT_SHIFT_AGGR_BK_TIME)
#define BITS_AGGR_BK_TIME				(BIT_MASK_AGGR_BK_TIME << BIT_SHIFT_AGGR_BK_TIME)
#define BIT_CLEAR_AGGR_BK_TIME(x)			((x) & (~BITS_AGGR_BK_TIME))
#define BIT_GET_AGGR_BK_TIME(x)			(((x) >> BIT_SHIFT_AGGR_BK_TIME) & BIT_MASK_AGGR_BK_TIME)
#define BIT_SET_AGGR_BK_TIME(x, v)			(BIT_CLEAR_AGGR_BK_TIME(x) | BIT_AGGR_BK_TIME(v))

#define BIT_SHIFT_TSFTR_SYNC_OFFSET			0
#define BIT_MASK_TSFTR_SYNC_OFFSET			0xffff
#define BIT_TSFTR_SYNC_OFFSET(x)			(((x) & BIT_MASK_TSFTR_SYNC_OFFSET) << BIT_SHIFT_TSFTR_SYNC_OFFSET)
#define BITS_TSFTR_SYNC_OFFSET				(BIT_MASK_TSFTR_SYNC_OFFSET << BIT_SHIFT_TSFTR_SYNC_OFFSET)
#define BIT_CLEAR_TSFTR_SYNC_OFFSET(x)			((x) & (~BITS_TSFTR_SYNC_OFFSET))
#define BIT_GET_TSFTR_SYNC_OFFSET(x)			(((x) >> BIT_SHIFT_TSFTR_SYNC_OFFSET) & BIT_MASK_TSFTR_SYNC_OFFSET)
#define BIT_SET_TSFTR_SYNC_OFFSET(x, v)		(BIT_CLEAR_TSFTR_SYNC_OFFSET(x) | BIT_TSFTR_SYNC_OFFSET(v))

/* 2 REG_PS_NOA_ERLY_TIME			(Offset 0x051C) */

#define BIT_SHIFT_NOA_OFF_ERLY_TIME			8
#define BIT_MASK_NOA_OFF_ERLY_TIME			0xff
#define BIT_NOA_OFF_ERLY_TIME(x)			(((x) & BIT_MASK_NOA_OFF_ERLY_TIME) << BIT_SHIFT_NOA_OFF_ERLY_TIME)
#define BITS_NOA_OFF_ERLY_TIME				(BIT_MASK_NOA_OFF_ERLY_TIME << BIT_SHIFT_NOA_OFF_ERLY_TIME)
#define BIT_CLEAR_NOA_OFF_ERLY_TIME(x)			((x) & (~BITS_NOA_OFF_ERLY_TIME))
#define BIT_GET_NOA_OFF_ERLY_TIME(x)			(((x) >> BIT_SHIFT_NOA_OFF_ERLY_TIME) & BIT_MASK_NOA_OFF_ERLY_TIME)
#define BIT_SET_NOA_OFF_ERLY_TIME(x, v)		(BIT_CLEAR_NOA_OFF_ERLY_TIME(x) | BIT_NOA_OFF_ERLY_TIME(v))

#define BIT_SHIFT_NOA_ON_ERLY_TIME			0
#define BIT_MASK_NOA_ON_ERLY_TIME			0xff
#define BIT_NOA_ON_ERLY_TIME(x)			(((x) & BIT_MASK_NOA_ON_ERLY_TIME) << BIT_SHIFT_NOA_ON_ERLY_TIME)
#define BITS_NOA_ON_ERLY_TIME				(BIT_MASK_NOA_ON_ERLY_TIME << BIT_SHIFT_NOA_ON_ERLY_TIME)
#define BIT_CLEAR_NOA_ON_ERLY_TIME(x)			((x) & (~BITS_NOA_ON_ERLY_TIME))
#define BIT_GET_NOA_ON_ERLY_TIME(x)			(((x) >> BIT_SHIFT_NOA_ON_ERLY_TIME) & BIT_MASK_NOA_ON_ERLY_TIME)
#define BIT_SET_NOA_ON_ERLY_TIME(x, v)			(BIT_CLEAR_NOA_ON_ERLY_TIME(x) | BIT_NOA_ON_ERLY_TIME(v))

/* 2 REG_TXPAUSE_TXPTCL_DISTXREQ_CTRL	(Offset 0x0520) */

#define BIT_DIS_BT_CCA					BIT(31)
#define BIT_DIS_TXREQ_CLR_CPUMGQ			BIT(30)
#define BIT_DIS_TXREQ_CLR_HI				BIT(29)
#define BIT_DIS_TXREQ_CLR_MGQ				BIT(28)
#define BIT_DIS_TXREQ_CLR_BK				BIT(27)
#define BIT_DIS_TXREQ_CLR_BE				BIT(26)
#define BIT_DIS_TXREQ_CLR_VI				BIT(25)
#define BIT_DIS_TXREQ_CLR_VO				BIT(24)
#define BIT_STOP_CPUMGQ				BIT(23)
#define BIT_MAC_STOPBCNQ				BIT(22)
#define BIT_MAC_STOPHIQ				BIT(21)
#define BIT_MAC_STOPMGQ				BIT(20)
#define BIT_MAC_STOPBK					BIT(19)
#define BIT_MAC_STOPBE					BIT(18)
#define BIT_MAC_STOPVI					BIT(17)
#define BIT_MAC_STOPVO					BIT(16)
#define BIT_DIS_EDCCA					BIT(15)
#define BIT_DIS_CCA					BIT(14)
#define BIT_LSIG_TXOP_TXCMD_NAV			BIT(13)
#define BIT_SIFS_BK_EN					BIT(12)

#define BIT_SHIFT_TXQ_NAV_MSK				8
#define BIT_MASK_TXQ_NAV_MSK				0xf
#define BIT_TXQ_NAV_MSK(x)				(((x) & BIT_MASK_TXQ_NAV_MSK) << BIT_SHIFT_TXQ_NAV_MSK)
#define BITS_TXQ_NAV_MSK				(BIT_MASK_TXQ_NAV_MSK << BIT_SHIFT_TXQ_NAV_MSK)
#define BIT_CLEAR_TXQ_NAV_MSK(x)			((x) & (~BITS_TXQ_NAV_MSK))
#define BIT_GET_TXQ_NAV_MSK(x)				(((x) >> BIT_SHIFT_TXQ_NAV_MSK) & BIT_MASK_TXQ_NAV_MSK)
#define BIT_SET_TXQ_NAV_MSK(x, v)			(BIT_CLEAR_TXQ_NAV_MSK(x) | BIT_TXQ_NAV_MSK(v))

#define BIT_DIS_CW					BIT(7)
#define BIT_NAV_END_TXOP				BIT(6)
#define BIT_RDG_END_TXOP				BIT(5)
#define BIT_AC_INBCN_HOLD				BIT(4)
#define BIT_MGTQ_TXOP_EN				BIT(3)
#define BIT_MGTQ_RTSMF_EN				BIT(2)
#define BIT_HIQ_RTSMF_EN				BIT(1)
#define BIT_BCN_RTSMF_EN				BIT(0)

/* 2 REG_NOA0_MBSSID_RD_CTRL			(Offset 0x0524) */

#define BIT_P2P_NOA0_ALLSTASLEEP			BIT(31)
#define BIT_P2P_NOA0_DISTX_EN				BIT(30)
#define BIT_P2P_NOA0_PWR_MGT_EN			BIT(29)

#define BIT_SHIFT_P2P_NOA0_EN				27
#define BIT_MASK_P2P_NOA0_EN				0x3
#define BIT_P2P_NOA0_EN(x)				(((x) & BIT_MASK_P2P_NOA0_EN) << BIT_SHIFT_P2P_NOA0_EN)
#define BITS_P2P_NOA0_EN				(BIT_MASK_P2P_NOA0_EN << BIT_SHIFT_P2P_NOA0_EN)
#define BIT_CLEAR_P2P_NOA0_EN(x)			((x) & (~BITS_P2P_NOA0_EN))
#define BIT_GET_P2P_NOA0_EN(x)				(((x) >> BIT_SHIFT_P2P_NOA0_EN) & BIT_MASK_P2P_NOA0_EN)
#define BIT_SET_P2P_NOA0_EN(x, v)			(BIT_CLEAR_P2P_NOA0_EN(x) | BIT_P2P_NOA0_EN(v))

#define BIT_SHIFT_P2P_NOA0_UNIT_SEL			25
#define BIT_MASK_P2P_NOA0_UNIT_SEL			0x3
#define BIT_P2P_NOA0_UNIT_SEL(x)			(((x) & BIT_MASK_P2P_NOA0_UNIT_SEL) << BIT_SHIFT_P2P_NOA0_UNIT_SEL)
#define BITS_P2P_NOA0_UNIT_SEL				(BIT_MASK_P2P_NOA0_UNIT_SEL << BIT_SHIFT_P2P_NOA0_UNIT_SEL)
#define BIT_CLEAR_P2P_NOA0_UNIT_SEL(x)			((x) & (~BITS_P2P_NOA0_UNIT_SEL))
#define BIT_GET_P2P_NOA0_UNIT_SEL(x)			(((x) >> BIT_SHIFT_P2P_NOA0_UNIT_SEL) & BIT_MASK_P2P_NOA0_UNIT_SEL)
#define BIT_SET_P2P_NOA0_UNIT_SEL(x, v)		(BIT_CLEAR_P2P_NOA0_UNIT_SEL(x) | BIT_P2P_NOA0_UNIT_SEL(v))

#define BIT_EN_TSFBIT32_RST_NOA0			BIT(24)
#define BIT_MBID_BCNQ7_EN				BIT(23)
#define BIT_MBID_BCNQ6_EN				BIT(22)
#define BIT_MBID_BCNQ5_EN				BIT(21)
#define BIT_MBID_BCNQ4_EN				BIT(20)
#define BIT_MBID_BCNQ3_EN				BIT(19)
#define BIT_MBID_BCNQ2_EN				BIT(18)
#define BIT_MBID_BCNQ1_EN				BIT(17)
#define BIT_MBID_BCNQ0_EN				BIT(16)
#define BIT_EN_CLR_TXREQ_INCCA				BIT(15)
#define BIT_DIS_TX_OVER_BCNQ				BIT(14)
#define BIT_EN_BCNERR_INCCCA				BIT(13)
#define BIT_EN_BCNERR_INEDCCA				BIT(12)
#define BIT_EDCCA_MSK_CNTDOWN_EN			BIT(11)
#define BIT_DIS_TXOP_CFE				BIT(10)
#define BIT_DIS_LSIG_CFE				BIT(9)
#define BIT_DIS_STBC_CFE				BIT(8)
#define BIT_BKQ_RD_INIT_EN				BIT(7)
#define BIT_BEQ_RD_INIT_EN				BIT(6)
#define BIT_VIQ_RD_INIT_EN				BIT(5)
#define BIT_VOQ_RD_INIT_EN				BIT(4)
#define BIT_BKQ_RD_RESP_EN				BIT(3)
#define BIT_BEQ_RD_RESP_EN				BIT(2)
#define BIT_VIQ_RD_RESP_EN				BIT(1)
#define BIT_VOQ_RD_RESP_EN				BIT(0)

/* 2 REG_NOA0_PKT_LIFETIME_CTRL		(Offset 0x0528) */

#define BIT_POWER_STATE_0				BIT(31)
#define BIT_CTWINDOW_ON_0				BIT(30)
#define BIT_BEACON_AREA_ON_0				BIT(29)
#define BIT_CTWIN_EARLY_DISTX_0			BIT(28)
#define BIT_NOA1_OFF_PERIOD_0				BIT(27)
#define BIT_FORCE_DOZE1_0				BIT(26)
#define BIT_NOA0_OFF_PERIOD_0				BIT(25)
#define BIT_FORCE_DOZE0_0				BIT(24)
#define BIT_CHANGE_POW_BCN_AREA			BIT(23)
#define BIT_EN_BKF_CLR_TXREQ				BIT(22)
#define BIT_EN_BCN_TX_BTCCA				BIT(20)
#define BIT_DIS_PKT_TX_ATIM				BIT(19)
#define BIT_DIS_BCN_DIS_CTN				BIT(18)
#define BIT_EN_NAVEND_RST_TXOP				BIT(17)
#define BIT_EN_FILTER_CCA				BIT(16)

#define BIT_SHIFT_CCA_FILTER_THRS			8
#define BIT_MASK_CCA_FILTER_THRS			0xff
#define BIT_CCA_FILTER_THRS(x)				(((x) & BIT_MASK_CCA_FILTER_THRS) << BIT_SHIFT_CCA_FILTER_THRS)
#define BITS_CCA_FILTER_THRS				(BIT_MASK_CCA_FILTER_THRS << BIT_SHIFT_CCA_FILTER_THRS)
#define BIT_CLEAR_CCA_FILTER_THRS(x)			((x) & (~BITS_CCA_FILTER_THRS))
#define BIT_GET_CCA_FILTER_THRS(x)			(((x) >> BIT_SHIFT_CCA_FILTER_THRS) & BIT_MASK_CCA_FILTER_THRS)
#define BIT_SET_CCA_FILTER_THRS(x, v)			(BIT_CLEAR_CCA_FILTER_THRS(x) | BIT_CCA_FILTER_THRS(v))

#define BIT_SHIFT_EDCCA_THRS				0
#define BIT_MASK_EDCCA_THRS				0xff
#define BIT_EDCCA_THRS(x)				(((x) & BIT_MASK_EDCCA_THRS) << BIT_SHIFT_EDCCA_THRS)
#define BITS_EDCCA_THRS				(BIT_MASK_EDCCA_THRS << BIT_SHIFT_EDCCA_THRS)
#define BIT_CLEAR_EDCCA_THRS(x)			((x) & (~BITS_EDCCA_THRS))
#define BIT_GET_EDCCA_THRS(x)				(((x) >> BIT_SHIFT_EDCCA_THRS) & BIT_MASK_EDCCA_THRS)
#define BIT_SET_EDCCA_THRS(x, v)			(BIT_CLEAR_EDCCA_THRS(x) | BIT_EDCCA_THRS(v))

/* 2 REG_P2PON_DIS_TXTIME			(Offset 0x0530) */

#define BIT_SHIFT_P2PON_DIS_TXTIME			8
#define BIT_MASK_P2PON_DIS_TXTIME			0xff
#define BIT_P2PON_DIS_TXTIME(x)			(((x) & BIT_MASK_P2PON_DIS_TXTIME) << BIT_SHIFT_P2PON_DIS_TXTIME)
#define BITS_P2PON_DIS_TXTIME				(BIT_MASK_P2PON_DIS_TXTIME << BIT_SHIFT_P2PON_DIS_TXTIME)
#define BIT_CLEAR_P2PON_DIS_TXTIME(x)			((x) & (~BITS_P2PON_DIS_TXTIME))
#define BIT_GET_P2PON_DIS_TXTIME(x)			(((x) >> BIT_SHIFT_P2PON_DIS_TXTIME) & BIT_MASK_P2PON_DIS_TXTIME)
#define BIT_SET_P2PON_DIS_TXTIME(x, v)			(BIT_CLEAR_P2PON_DIS_TXTIME(x) | BIT_P2PON_DIS_TXTIME(v))

/* 2 REG_NAN_SETTING_2			(Offset 0x0534) */

#define BIT_SHIFT_SYNC_BCN_DELAY			0
#define BIT_MASK_SYNC_BCN_DELAY			0x3fff
#define BIT_SYNC_BCN_DELAY(x)				(((x) & BIT_MASK_SYNC_BCN_DELAY) << BIT_SHIFT_SYNC_BCN_DELAY)
#define BITS_SYNC_BCN_DELAY				(BIT_MASK_SYNC_BCN_DELAY << BIT_SHIFT_SYNC_BCN_DELAY)
#define BIT_CLEAR_SYNC_BCN_DELAY(x)			((x) & (~BITS_SYNC_BCN_DELAY))
#define BIT_GET_SYNC_BCN_DELAY(x)			(((x) >> BIT_SHIFT_SYNC_BCN_DELAY) & BIT_MASK_SYNC_BCN_DELAY)
#define BIT_SET_SYNC_BCN_DELAY(x, v)			(BIT_CLEAR_SYNC_BCN_DELAY(x) | BIT_SYNC_BCN_DELAY(v))

/* 2 REG_QUEUE_INCOL_THR			(Offset 0x0538) */

#define BIT_SHIFT_BK_QUEUE_THR				24
#define BIT_MASK_BK_QUEUE_THR				0xff
#define BIT_BK_QUEUE_THR(x)				(((x) & BIT_MASK_BK_QUEUE_THR) << BIT_SHIFT_BK_QUEUE_THR)
#define BITS_BK_QUEUE_THR				(BIT_MASK_BK_QUEUE_THR << BIT_SHIFT_BK_QUEUE_THR)
#define BIT_CLEAR_BK_QUEUE_THR(x)			((x) & (~BITS_BK_QUEUE_THR))
#define BIT_GET_BK_QUEUE_THR(x)			(((x) >> BIT_SHIFT_BK_QUEUE_THR) & BIT_MASK_BK_QUEUE_THR)
#define BIT_SET_BK_QUEUE_THR(x, v)			(BIT_CLEAR_BK_QUEUE_THR(x) | BIT_BK_QUEUE_THR(v))

#define BIT_SHIFT_BE_QUEUE_THR				16
#define BIT_MASK_BE_QUEUE_THR				0xff
#define BIT_BE_QUEUE_THR(x)				(((x) & BIT_MASK_BE_QUEUE_THR) << BIT_SHIFT_BE_QUEUE_THR)
#define BITS_BE_QUEUE_THR				(BIT_MASK_BE_QUEUE_THR << BIT_SHIFT_BE_QUEUE_THR)
#define BIT_CLEAR_BE_QUEUE_THR(x)			((x) & (~BITS_BE_QUEUE_THR))
#define BIT_GET_BE_QUEUE_THR(x)			(((x) >> BIT_SHIFT_BE_QUEUE_THR) & BIT_MASK_BE_QUEUE_THR)
#define BIT_SET_BE_QUEUE_THR(x, v)			(BIT_CLEAR_BE_QUEUE_THR(x) | BIT_BE_QUEUE_THR(v))

#define BIT_SHIFT_VI_QUEUE_THR				8
#define BIT_MASK_VI_QUEUE_THR				0xff
#define BIT_VI_QUEUE_THR(x)				(((x) & BIT_MASK_VI_QUEUE_THR) << BIT_SHIFT_VI_QUEUE_THR)
#define BITS_VI_QUEUE_THR				(BIT_MASK_VI_QUEUE_THR << BIT_SHIFT_VI_QUEUE_THR)
#define BIT_CLEAR_VI_QUEUE_THR(x)			((x) & (~BITS_VI_QUEUE_THR))
#define BIT_GET_VI_QUEUE_THR(x)			(((x) >> BIT_SHIFT_VI_QUEUE_THR) & BIT_MASK_VI_QUEUE_THR)
#define BIT_SET_VI_QUEUE_THR(x, v)			(BIT_CLEAR_VI_QUEUE_THR(x) | BIT_VI_QUEUE_THR(v))

#define BIT_SHIFT_VO_QUEUE_THR				0
#define BIT_MASK_VO_QUEUE_THR				0xff
#define BIT_VO_QUEUE_THR(x)				(((x) & BIT_MASK_VO_QUEUE_THR) << BIT_SHIFT_VO_QUEUE_THR)
#define BITS_VO_QUEUE_THR				(BIT_MASK_VO_QUEUE_THR << BIT_SHIFT_VO_QUEUE_THR)
#define BIT_CLEAR_VO_QUEUE_THR(x)			((x) & (~BITS_VO_QUEUE_THR))
#define BIT_GET_VO_QUEUE_THR(x)			(((x) >> BIT_SHIFT_VO_QUEUE_THR) & BIT_MASK_VO_QUEUE_THR)
#define BIT_SET_VO_QUEUE_THR(x, v)			(BIT_CLEAR_VO_QUEUE_THR(x) | BIT_VO_QUEUE_THR(v))

/* 2 REG_QUEUE_INCOL_EN			(Offset 0x053C) */

#define BIT_DIS_ZGBCCA					BIT(31)

#define BIT_SHIFT_TXOP_FAILBREAK_CNT			22
#define BIT_MASK_TXOP_FAILBREAK_CNT			0xff
#define BIT_TXOP_FAILBREAK_CNT(x)			(((x) & BIT_MASK_TXOP_FAILBREAK_CNT) << BIT_SHIFT_TXOP_FAILBREAK_CNT)
#define BITS_TXOP_FAILBREAK_CNT			(BIT_MASK_TXOP_FAILBREAK_CNT << BIT_SHIFT_TXOP_FAILBREAK_CNT)
#define BIT_CLEAR_TXOP_FAILBREAK_CNT(x)		((x) & (~BITS_TXOP_FAILBREAK_CNT))
#define BIT_GET_TXOP_FAILBREAK_CNT(x)			(((x) >> BIT_SHIFT_TXOP_FAILBREAK_CNT) & BIT_MASK_TXOP_FAILBREAK_CNT)
#define BIT_SET_TXOP_FAILBREAK_CNT(x, v)		(BIT_CLEAR_TXOP_FAILBREAK_CNT(x) | BIT_TXOP_FAILBREAK_CNT(v))

#define BIT_TXOP_FAIL_BREAK				BIT(21)
#define BIT_EN_TBTT_AREA_BLK_4AC			BIT(20)
#define BIT_ENABLE_RANDOM_SHIFT_TX			BIT(19)
#define BIT_ENABLE_EDCA_REF_FUNCTION			BIT(18)
#define BIT_ENABLE_INTERCOL_EDCA_REF			BIT(17)
#define BIT_ACQ_MAX_INCOL_EN				BIT(16)

#define BIT_SHIFT_BK_TRIGGER_NUM			12
#define BIT_MASK_BK_TRIGGER_NUM			0xf
#define BIT_BK_TRIGGER_NUM(x)				(((x) & BIT_MASK_BK_TRIGGER_NUM) << BIT_SHIFT_BK_TRIGGER_NUM)
#define BITS_BK_TRIGGER_NUM				(BIT_MASK_BK_TRIGGER_NUM << BIT_SHIFT_BK_TRIGGER_NUM)
#define BIT_CLEAR_BK_TRIGGER_NUM(x)			((x) & (~BITS_BK_TRIGGER_NUM))
#define BIT_GET_BK_TRIGGER_NUM(x)			(((x) >> BIT_SHIFT_BK_TRIGGER_NUM) & BIT_MASK_BK_TRIGGER_NUM)
#define BIT_SET_BK_TRIGGER_NUM(x, v)			(BIT_CLEAR_BK_TRIGGER_NUM(x) | BIT_BK_TRIGGER_NUM(v))

#define BIT_SHIFT_BE_TRIGGER_NUM			8
#define BIT_MASK_BE_TRIGGER_NUM			0xf
#define BIT_BE_TRIGGER_NUM(x)				(((x) & BIT_MASK_BE_TRIGGER_NUM) << BIT_SHIFT_BE_TRIGGER_NUM)
#define BITS_BE_TRIGGER_NUM				(BIT_MASK_BE_TRIGGER_NUM << BIT_SHIFT_BE_TRIGGER_NUM)
#define BIT_CLEAR_BE_TRIGGER_NUM(x)			((x) & (~BITS_BE_TRIGGER_NUM))
#define BIT_GET_BE_TRIGGER_NUM(x)			(((x) >> BIT_SHIFT_BE_TRIGGER_NUM) & BIT_MASK_BE_TRIGGER_NUM)
#define BIT_SET_BE_TRIGGER_NUM(x, v)			(BIT_CLEAR_BE_TRIGGER_NUM(x) | BIT_BE_TRIGGER_NUM(v))

#define BIT_SHIFT_VI_TRIGGER_NUM			4
#define BIT_MASK_VI_TRIGGER_NUM			0xf
#define BIT_VI_TRIGGER_NUM(x)				(((x) & BIT_MASK_VI_TRIGGER_NUM) << BIT_SHIFT_VI_TRIGGER_NUM)
#define BITS_VI_TRIGGER_NUM				(BIT_MASK_VI_TRIGGER_NUM << BIT_SHIFT_VI_TRIGGER_NUM)
#define BIT_CLEAR_VI_TRIGGER_NUM(x)			((x) & (~BITS_VI_TRIGGER_NUM))
#define BIT_GET_VI_TRIGGER_NUM(x)			(((x) >> BIT_SHIFT_VI_TRIGGER_NUM) & BIT_MASK_VI_TRIGGER_NUM)
#define BIT_SET_VI_TRIGGER_NUM(x, v)			(BIT_CLEAR_VI_TRIGGER_NUM(x) | BIT_VI_TRIGGER_NUM(v))

#define BIT_SHIFT_VO_TRIGGER_NUM			0
#define BIT_MASK_VO_TRIGGER_NUM			0xf
#define BIT_VO_TRIGGER_NUM(x)				(((x) & BIT_MASK_VO_TRIGGER_NUM) << BIT_SHIFT_VO_TRIGGER_NUM)
#define BITS_VO_TRIGGER_NUM				(BIT_MASK_VO_TRIGGER_NUM << BIT_SHIFT_VO_TRIGGER_NUM)
#define BIT_CLEAR_VO_TRIGGER_NUM(x)			((x) & (~BITS_VO_TRIGGER_NUM))
#define BIT_GET_VO_TRIGGER_NUM(x)			(((x) >> BIT_SHIFT_VO_TRIGGER_NUM) & BIT_MASK_VO_TRIGGER_NUM)
#define BIT_SET_VO_TRIGGER_NUM(x, v)			(BIT_CLEAR_VO_TRIGGER_NUM(x) | BIT_VO_TRIGGER_NUM(v))

/* 2 REG_NOA0_TBTT_PROHIBIT			(Offset 0x0540) */

#define BIT_SPEC_POWER_STATE_0				BIT(31)
#define BIT_SPEC_CTWINDOW_ON_0				BIT(30)
#define BIT_SPEC_BEACON_AREA_ON_0			BIT(29)
#define BIT_SPEC_CTWIN_EARLY_DISTX_0			BIT(28)
#define BIT_SPEC_NOA1_OFF_PERIOD_0			BIT(27)
#define BIT_SPEC_FORCE_DOZE1_0				BIT(26)
#define BIT_SPEC_NOA0_OFF_PERIOD_0			BIT(25)
#define BIT_SPEC_FORCE_DOZE0_0				BIT(24)
#define BIT_EN_TBTT_AREA_FOR_BB			BIT(20)

#define BIT_SHIFT_TBTT_HOLD_TIME			8
#define BIT_MASK_TBTT_HOLD_TIME			0xfff
#define BIT_TBTT_HOLD_TIME(x)				(((x) & BIT_MASK_TBTT_HOLD_TIME) << BIT_SHIFT_TBTT_HOLD_TIME)
#define BITS_TBTT_HOLD_TIME				(BIT_MASK_TBTT_HOLD_TIME << BIT_SHIFT_TBTT_HOLD_TIME)
#define BIT_CLEAR_TBTT_HOLD_TIME(x)			((x) & (~BITS_TBTT_HOLD_TIME))
#define BIT_GET_TBTT_HOLD_TIME(x)			(((x) >> BIT_SHIFT_TBTT_HOLD_TIME) & BIT_MASK_TBTT_HOLD_TIME)
#define BIT_SET_TBTT_HOLD_TIME(x, v)			(BIT_CLEAR_TBTT_HOLD_TIME(x) | BIT_TBTT_HOLD_TIME(v))

#define BIT_SHIFT_TBTT_HOLD_TIME_INFRA			4
#define BIT_MASK_TBTT_HOLD_TIME_INFRA			0xf
#define BIT_TBTT_HOLD_TIME_INFRA(x)			(((x) & BIT_MASK_TBTT_HOLD_TIME_INFRA) << BIT_SHIFT_TBTT_HOLD_TIME_INFRA)
#define BITS_TBTT_HOLD_TIME_INFRA			(BIT_MASK_TBTT_HOLD_TIME_INFRA << BIT_SHIFT_TBTT_HOLD_TIME_INFRA)
#define BIT_CLEAR_TBTT_HOLD_TIME_INFRA(x)		((x) & (~BITS_TBTT_HOLD_TIME_INFRA))
#define BIT_GET_TBTT_HOLD_TIME_INFRA(x)		(((x) >> BIT_SHIFT_TBTT_HOLD_TIME_INFRA) & BIT_MASK_TBTT_HOLD_TIME_INFRA)
#define BIT_SET_TBTT_HOLD_TIME_INFRA(x, v)		(BIT_CLEAR_TBTT_HOLD_TIME_INFRA(x) | BIT_TBTT_HOLD_TIME_INFRA(v))

#define BIT_SHIFT_TBTT_PROHIBIT_SETUP			0
#define BIT_MASK_TBTT_PROHIBIT_SETUP			0xf
#define BIT_TBTT_PROHIBIT_SETUP(x)			(((x) & BIT_MASK_TBTT_PROHIBIT_SETUP) << BIT_SHIFT_TBTT_PROHIBIT_SETUP)
#define BITS_TBTT_PROHIBIT_SETUP			(BIT_MASK_TBTT_PROHIBIT_SETUP << BIT_SHIFT_TBTT_PROHIBIT_SETUP)
#define BIT_CLEAR_TBTT_PROHIBIT_SETUP(x)		((x) & (~BITS_TBTT_PROHIBIT_SETUP))
#define BIT_GET_TBTT_PROHIBIT_SETUP(x)			(((x) >> BIT_SHIFT_TBTT_PROHIBIT_SETUP) & BIT_MASK_TBTT_PROHIBIT_SETUP)
#define BIT_SET_TBTT_PROHIBIT_SETUP(x, v)		(BIT_CLEAR_TBTT_PROHIBIT_SETUP(x) | BIT_TBTT_PROHIBIT_SETUP(v))

/* 2 REG_NAV_CTRL				(Offset 0x0544) */

#define BIT_SHIFT_NAV_PROT_LEN				16
#define BIT_MASK_NAV_PROT_LEN				0xffff
#define BIT_NAV_PROT_LEN(x)				(((x) & BIT_MASK_NAV_PROT_LEN) << BIT_SHIFT_NAV_PROT_LEN)
#define BITS_NAV_PROT_LEN				(BIT_MASK_NAV_PROT_LEN << BIT_SHIFT_NAV_PROT_LEN)
#define BIT_CLEAR_NAV_PROT_LEN(x)			((x) & (~BITS_NAV_PROT_LEN))
#define BIT_GET_NAV_PROT_LEN(x)			(((x) >> BIT_SHIFT_NAV_PROT_LEN) & BIT_MASK_NAV_PROT_LEN)
#define BIT_SET_NAV_PROT_LEN(x, v)			(BIT_CLEAR_NAV_PROT_LEN(x) | BIT_NAV_PROT_LEN(v))

#define BIT_SHIFT_RD_NAV_PROT_NXT			0
#define BIT_MASK_RD_NAV_PROT_NXT			0xffff
#define BIT_RD_NAV_PROT_NXT(x)				(((x) & BIT_MASK_RD_NAV_PROT_NXT) << BIT_SHIFT_RD_NAV_PROT_NXT)
#define BITS_RD_NAV_PROT_NXT				(BIT_MASK_RD_NAV_PROT_NXT << BIT_SHIFT_RD_NAV_PROT_NXT)
#define BIT_CLEAR_RD_NAV_PROT_NXT(x)			((x) & (~BITS_RD_NAV_PROT_NXT))
#define BIT_GET_RD_NAV_PROT_NXT(x)			(((x) >> BIT_SHIFT_RD_NAV_PROT_NXT) & BIT_MASK_RD_NAV_PROT_NXT)
#define BIT_SET_RD_NAV_PROT_NXT(x, v)			(BIT_CLEAR_RD_NAV_PROT_NXT(x) | BIT_RD_NAV_PROT_NXT(v))

/* 2 REG_FTM_CTRL				(Offset 0x0548) */

#define BIT_FTM_TSF_R2T_PORT				BIT(24)
#define BIT_FTM_TSF_T2R_PORT				BIT(20)
#define BIT_FTM_PTT_PORT				BIT(16)

#define BIT_SHIFT_FTM_PTT				0
#define BIT_MASK_FTM_PTT				0xffff
#define BIT_FTM_PTT(x)					(((x) & BIT_MASK_FTM_PTT) << BIT_SHIFT_FTM_PTT)
#define BITS_FTM_PTT					(BIT_MASK_FTM_PTT << BIT_SHIFT_FTM_PTT)
#define BIT_CLEAR_FTM_PTT(x)				((x) & (~BITS_FTM_PTT))
#define BIT_GET_FTM_PTT(x)				(((x) >> BIT_SHIFT_FTM_PTT) & BIT_MASK_FTM_PTT)
#define BIT_SET_FTM_PTT(x, v)				(BIT_CLEAR_FTM_PTT(x) | BIT_FTM_PTT(v))

/* 2 REG_FTM_TSF_CNT				(Offset 0x054C) */

#define BIT_SHIFT_FTM_TSF_R2T				16
#define BIT_MASK_FTM_TSF_R2T				0xffff
#define BIT_FTM_TSF_R2T(x)				(((x) & BIT_MASK_FTM_TSF_R2T) << BIT_SHIFT_FTM_TSF_R2T)
#define BITS_FTM_TSF_R2T				(BIT_MASK_FTM_TSF_R2T << BIT_SHIFT_FTM_TSF_R2T)
#define BIT_CLEAR_FTM_TSF_R2T(x)			((x) & (~BITS_FTM_TSF_R2T))
#define BIT_GET_FTM_TSF_R2T(x)				(((x) >> BIT_SHIFT_FTM_TSF_R2T) & BIT_MASK_FTM_TSF_R2T)
#define BIT_SET_FTM_TSF_R2T(x, v)			(BIT_CLEAR_FTM_TSF_R2T(x) | BIT_FTM_TSF_R2T(v))

#define BIT_SHIFT_FTM_TSF_T2R				0
#define BIT_MASK_FTM_TSF_T2R				0xffff
#define BIT_FTM_TSF_T2R(x)				(((x) & BIT_MASK_FTM_TSF_T2R) << BIT_SHIFT_FTM_TSF_T2R)
#define BITS_FTM_TSF_T2R				(BIT_MASK_FTM_TSF_T2R << BIT_SHIFT_FTM_TSF_T2R)
#define BIT_CLEAR_FTM_TSF_T2R(x)			((x) & (~BITS_FTM_TSF_T2R))
#define BIT_GET_FTM_TSF_T2R(x)				(((x) >> BIT_SHIFT_FTM_TSF_T2R) & BIT_MASK_FTM_TSF_T2R)
#define BIT_SET_FTM_TSF_T2R(x, v)			(BIT_CLEAR_FTM_TSF_T2R(x) | BIT_FTM_TSF_T2R(v))

/* 2 REG_TSTRST_P2PRST_BCN_CTRL_PORT0_1	(Offset 0x0550) */

#define BIT_P2P_PWR_RST1				BIT(30)
#define BIT_SCHEDULER_RST				BIT(29)
#define BIT_P2P_PWR_RST0				BIT(28)
#define BIT_TSFTR1_SYNC_EN				BIT(27)
#define BIT_TSFTR_SYNC_EN				BIT(26)
#define BIT_TSFTR1_RST					BIT(25)
#define BIT_TSFTR_RST					BIT(24)
#define BIT_P2P_PWR_RST5				BIT(23)
#define BIT_P2P_PWR_RST4				BIT(22)
#define BIT_P2P_PWR_RST3				BIT(21)
#define BIT_P2P_PWR_RST2				BIT(20)
#define BIT_EN_PRE_DL_BEACON				BIT(19)

#define BIT_SHIFT_MBID_BCN_NUM				16
#define BIT_MASK_MBID_BCN_NUM				0x7
#define BIT_MBID_BCN_NUM(x)				(((x) & BIT_MASK_MBID_BCN_NUM) << BIT_SHIFT_MBID_BCN_NUM)
#define BITS_MBID_BCN_NUM				(BIT_MASK_MBID_BCN_NUM << BIT_SHIFT_MBID_BCN_NUM)
#define BIT_CLEAR_MBID_BCN_NUM(x)			((x) & (~BITS_MBID_BCN_NUM))
#define BIT_GET_MBID_BCN_NUM(x)			(((x) >> BIT_SHIFT_MBID_BCN_NUM) & BIT_MASK_MBID_BCN_NUM)
#define BIT_SET_MBID_BCN_NUM(x, v)			(BIT_CLEAR_MBID_BCN_NUM(x) | BIT_MBID_BCN_NUM(v))

#define BIT_P1_RXBCN_RPT_ENABLE			BIT(15)
#define BIT_P1_DIS_RX_BSSID_FIT			BIT(14)
#define BIT_P1_TXBCN_RPT_ENABLE			BIT(13)
#define BIT_P1_DIS_TSF_UDT				BIT(12)
#define BIT_P1_EN_BCN_FUNCTION				BIT(11)
#define BIT_P1_EN_BCN_RPT				BIT(10)
#define BIT_P1_ENP2P_CTWINDOW				BIT(9)
#define BIT_P1_ENP2P_BCNQ_AREA				BIT(8)
#define BIT_P0_RXBCN_RPT_ENABLE			BIT(7)
#define BIT_P0_DIS_RX_BSSID_FIT			BIT(6)
#define BIT_P0_TXBCN_RPT_ENABLE			BIT(5)
#define BIT_P0_DIS_TSF_UDT				BIT(4)
#define BIT_P0_EN_BCN_FUNCTION				BIT(3)
#define BIT_P0_EN_BCN_RPT				BIT(2)
#define BIT_P0_EN_P2P_CTWINDOW				BIT(1)
#define BIT_P0_EN_P2P_BCNQ_AREA			BIT(0)

/* 2 REG_PORT0_BCN_SPACE			(Offset 0x0554) */

#define BIT_SHIFT_BCN_SUB_SPACE_PORT0			16
#define BIT_MASK_BCN_SUB_SPACE_PORT0			0xffff
#define BIT_BCN_SUB_SPACE_PORT0(x)			(((x) & BIT_MASK_BCN_SUB_SPACE_PORT0) << BIT_SHIFT_BCN_SUB_SPACE_PORT0)
#define BITS_BCN_SUB_SPACE_PORT0			(BIT_MASK_BCN_SUB_SPACE_PORT0 << BIT_SHIFT_BCN_SUB_SPACE_PORT0)
#define BIT_CLEAR_BCN_SUB_SPACE_PORT0(x)		((x) & (~BITS_BCN_SUB_SPACE_PORT0))
#define BIT_GET_BCN_SUB_SPACE_PORT0(x)			(((x) >> BIT_SHIFT_BCN_SUB_SPACE_PORT0) & BIT_MASK_BCN_SUB_SPACE_PORT0)
#define BIT_SET_BCN_SUB_SPACE_PORT0(x, v)		(BIT_CLEAR_BCN_SUB_SPACE_PORT0(x) | BIT_BCN_SUB_SPACE_PORT0(v))

#define BIT_SHIFT_BCN_SPACE_PORT0			0
#define BIT_MASK_BCN_SPACE_PORT0			0xffff
#define BIT_BCN_SPACE_PORT0(x)				(((x) & BIT_MASK_BCN_SPACE_PORT0) << BIT_SHIFT_BCN_SPACE_PORT0)
#define BITS_BCN_SPACE_PORT0				(BIT_MASK_BCN_SPACE_PORT0 << BIT_SHIFT_BCN_SPACE_PORT0)
#define BIT_CLEAR_BCN_SPACE_PORT0(x)			((x) & (~BITS_BCN_SPACE_PORT0))
#define BIT_GET_BCN_SPACE_PORT0(x)			(((x) >> BIT_SHIFT_BCN_SPACE_PORT0) & BIT_MASK_BCN_SPACE_PORT0)
#define BIT_SET_BCN_SPACE_PORT0(x, v)			(BIT_CLEAR_BCN_SPACE_PORT0(x) | BIT_BCN_SPACE_PORT0(v))

/* 2 REG_ATIMWND0_P0_BCN_ERLY_DMA_CTRL	(Offset 0x0558) */

#define BIT_SHIFT_ATIMWND0				16
#define BIT_MASK_ATIMWND0				0xffff
#define BIT_ATIMWND0(x)				(((x) & BIT_MASK_ATIMWND0) << BIT_SHIFT_ATIMWND0)
#define BITS_ATIMWND0					(BIT_MASK_ATIMWND0 << BIT_SHIFT_ATIMWND0)
#define BIT_CLEAR_ATIMWND0(x)				((x) & (~BITS_ATIMWND0))
#define BIT_GET_ATIMWND0(x)				(((x) >> BIT_SHIFT_ATIMWND0) & BIT_MASK_ATIMWND0)
#define BIT_SET_ATIMWND0(x, v)				(BIT_CLEAR_ATIMWND0(x) | BIT_ATIMWND0(v))

#define BIT_SHIFT_BCNDMATIM_P0				8
#define BIT_MASK_BCNDMATIM_P0				0xff
#define BIT_BCNDMATIM_P0(x)				(((x) & BIT_MASK_BCNDMATIM_P0) << BIT_SHIFT_BCNDMATIM_P0)
#define BITS_BCNDMATIM_P0				(BIT_MASK_BCNDMATIM_P0 << BIT_SHIFT_BCNDMATIM_P0)
#define BIT_CLEAR_BCNDMATIM_P0(x)			((x) & (~BITS_BCNDMATIM_P0))
#define BIT_GET_BCNDMATIM_P0(x)			(((x) >> BIT_SHIFT_BCNDMATIM_P0) & BIT_MASK_BCNDMATIM_P0)
#define BIT_SET_BCNDMATIM_P0(x, v)			(BIT_CLEAR_BCNDMATIM_P0(x) | BIT_BCNDMATIM_P0(v))

#define BIT_SHIFT_DRVERLYITV_P0			0
#define BIT_MASK_DRVERLYITV_P0				0xff
#define BIT_DRVERLYITV_P0(x)				(((x) & BIT_MASK_DRVERLYITV_P0) << BIT_SHIFT_DRVERLYITV_P0)
#define BITS_DRVERLYITV_P0				(BIT_MASK_DRVERLYITV_P0 << BIT_SHIFT_DRVERLYITV_P0)
#define BIT_CLEAR_DRVERLYITV_P0(x)			((x) & (~BITS_DRVERLYITV_P0))
#define BIT_GET_DRVERLYITV_P0(x)			(((x) >> BIT_SHIFT_DRVERLYITV_P0) & BIT_MASK_DRVERLYITV_P0)
#define BIT_SET_DRVERLYITV_P0(x, v)			(BIT_CLEAR_DRVERLYITV_P0(x) | BIT_DRVERLYITV_P0(v))

/* 2 REG_BCNERR_TSF_CTRL			(Offset 0x055C) */

#define BIT_SHIFT_OFDM_RXTSF_OFFSET			24
#define BIT_MASK_OFDM_RXTSF_OFFSET			0xff
#define BIT_OFDM_RXTSF_OFFSET(x)			(((x) & BIT_MASK_OFDM_RXTSF_OFFSET) << BIT_SHIFT_OFDM_RXTSF_OFFSET)
#define BITS_OFDM_RXTSF_OFFSET				(BIT_MASK_OFDM_RXTSF_OFFSET << BIT_SHIFT_OFDM_RXTSF_OFFSET)
#define BIT_CLEAR_OFDM_RXTSF_OFFSET(x)			((x) & (~BITS_OFDM_RXTSF_OFFSET))
#define BIT_GET_OFDM_RXTSF_OFFSET(x)			(((x) >> BIT_SHIFT_OFDM_RXTSF_OFFSET) & BIT_MASK_OFDM_RXTSF_OFFSET)
#define BIT_SET_OFDM_RXTSF_OFFSET(x, v)		(BIT_CLEAR_OFDM_RXTSF_OFFSET(x) | BIT_OFDM_RXTSF_OFFSET(v))

#define BIT_SHIFT_CCK_RXTSF_OFFSET			16
#define BIT_MASK_CCK_RXTSF_OFFSET			0xff
#define BIT_CCK_RXTSF_OFFSET(x)			(((x) & BIT_MASK_CCK_RXTSF_OFFSET) << BIT_SHIFT_CCK_RXTSF_OFFSET)
#define BITS_CCK_RXTSF_OFFSET				(BIT_MASK_CCK_RXTSF_OFFSET << BIT_SHIFT_CCK_RXTSF_OFFSET)
#define BIT_CLEAR_CCK_RXTSF_OFFSET(x)			((x) & (~BITS_CCK_RXTSF_OFFSET))
#define BIT_GET_CCK_RXTSF_OFFSET(x)			(((x) >> BIT_SHIFT_CCK_RXTSF_OFFSET) & BIT_MASK_CCK_RXTSF_OFFSET)
#define BIT_SET_CCK_RXTSF_OFFSET(x, v)			(BIT_CLEAR_CCK_RXTSF_OFFSET(x) | BIT_CCK_RXTSF_OFFSET(v))

#define BIT_SHIFT_BCN_MAX_ERR				8
#define BIT_MASK_BCN_MAX_ERR				0xff
#define BIT_BCN_MAX_ERR(x)				(((x) & BIT_MASK_BCN_MAX_ERR) << BIT_SHIFT_BCN_MAX_ERR)
#define BITS_BCN_MAX_ERR				(BIT_MASK_BCN_MAX_ERR << BIT_SHIFT_BCN_MAX_ERR)
#define BIT_CLEAR_BCN_MAX_ERR(x)			((x) & (~BITS_BCN_MAX_ERR))
#define BIT_GET_BCN_MAX_ERR(x)				(((x) >> BIT_SHIFT_BCN_MAX_ERR) & BIT_MASK_BCN_MAX_ERR)
#define BIT_SET_BCN_MAX_ERR(x, v)			(BIT_CLEAR_BCN_MAX_ERR(x) | BIT_BCN_MAX_ERR(v))

#define BIT_SHIFT_USTIME_TSF				0
#define BIT_MASK_USTIME_TSF				0xff
#define BIT_USTIME_TSF(x)				(((x) & BIT_MASK_USTIME_TSF) << BIT_SHIFT_USTIME_TSF)
#define BITS_USTIME_TSF				(BIT_MASK_USTIME_TSF << BIT_SHIFT_USTIME_TSF)
#define BIT_CLEAR_USTIME_TSF(x)			((x) & (~BITS_USTIME_TSF))
#define BIT_GET_USTIME_TSF(x)				(((x) >> BIT_SHIFT_USTIME_TSF) & BIT_MASK_USTIME_TSF)
#define BIT_SET_USTIME_TSF(x, v)			(BIT_CLEAR_USTIME_TSF(x) | BIT_USTIME_TSF(v))

/* 2 REG_P0_TSFTR_L				(Offset 0x0560) */

#define BIT_SHIFT_P0_TSF_TIMER_L			0
#define BIT_MASK_P0_TSF_TIMER_L			0xffffffffL
#define BIT_P0_TSF_TIMER_L(x)				(((x) & BIT_MASK_P0_TSF_TIMER_L) << BIT_SHIFT_P0_TSF_TIMER_L)
#define BITS_P0_TSF_TIMER_L				(BIT_MASK_P0_TSF_TIMER_L << BIT_SHIFT_P0_TSF_TIMER_L)
#define BIT_CLEAR_P0_TSF_TIMER_L(x)			((x) & (~BITS_P0_TSF_TIMER_L))
#define BIT_GET_P0_TSF_TIMER_L(x)			(((x) >> BIT_SHIFT_P0_TSF_TIMER_L) & BIT_MASK_P0_TSF_TIMER_L)
#define BIT_SET_P0_TSF_TIMER_L(x, v)			(BIT_CLEAR_P0_TSF_TIMER_L(x) | BIT_P0_TSF_TIMER_L(v))

/* 2 REG_P0_TSFTR_H				(Offset 0x0564) */

#define BIT_SHIFT_P0_TSF_TIMER_H			0
#define BIT_MASK_P0_TSF_TIMER_H			0xffffffffL
#define BIT_P0_TSF_TIMER_H(x)				(((x) & BIT_MASK_P0_TSF_TIMER_H) << BIT_SHIFT_P0_TSF_TIMER_H)
#define BITS_P0_TSF_TIMER_H				(BIT_MASK_P0_TSF_TIMER_H << BIT_SHIFT_P0_TSF_TIMER_H)
#define BIT_CLEAR_P0_TSF_TIMER_H(x)			((x) & (~BITS_P0_TSF_TIMER_H))
#define BIT_GET_P0_TSF_TIMER_H(x)			(((x) >> BIT_SHIFT_P0_TSF_TIMER_H) & BIT_MASK_P0_TSF_TIMER_H)
#define BIT_SET_P0_TSF_TIMER_H(x, v)			(BIT_CLEAR_P0_TSF_TIMER_H(x) | BIT_P0_TSF_TIMER_H(v))

/* 2 REG_P1_TSFTR_L				(Offset 0x0568) */

#define BIT_SHIFT_P1_TSF_TIMER_L			0
#define BIT_MASK_P1_TSF_TIMER_L			0xffffffffL
#define BIT_P1_TSF_TIMER_L(x)				(((x) & BIT_MASK_P1_TSF_TIMER_L) << BIT_SHIFT_P1_TSF_TIMER_L)
#define BITS_P1_TSF_TIMER_L				(BIT_MASK_P1_TSF_TIMER_L << BIT_SHIFT_P1_TSF_TIMER_L)
#define BIT_CLEAR_P1_TSF_TIMER_L(x)			((x) & (~BITS_P1_TSF_TIMER_L))
#define BIT_GET_P1_TSF_TIMER_L(x)			(((x) >> BIT_SHIFT_P1_TSF_TIMER_L) & BIT_MASK_P1_TSF_TIMER_L)
#define BIT_SET_P1_TSF_TIMER_L(x, v)			(BIT_CLEAR_P1_TSF_TIMER_L(x) | BIT_P1_TSF_TIMER_L(v))

/* 2 REG_P1_TSFTR_H				(Offset 0x056C) */

#define BIT_SHIFT_P1_TSF_TIMER_H			0
#define BIT_MASK_P1_TSF_TIMER_H			0xffffffffL
#define BIT_P1_TSF_TIMER_H(x)				(((x) & BIT_MASK_P1_TSF_TIMER_H) << BIT_SHIFT_P1_TSF_TIMER_H)
#define BITS_P1_TSF_TIMER_H				(BIT_MASK_P1_TSF_TIMER_H << BIT_SHIFT_P1_TSF_TIMER_H)
#define BIT_CLEAR_P1_TSF_TIMER_H(x)			((x) & (~BITS_P1_TSF_TIMER_H))
#define BIT_GET_P1_TSF_TIMER_H(x)			(((x) >> BIT_SHIFT_P1_TSF_TIMER_H) & BIT_MASK_P1_TSF_TIMER_H)
#define BIT_SET_P1_TSF_TIMER_H(x, v)			(BIT_CLEAR_P1_TSF_TIMER_H(x) | BIT_P1_TSF_TIMER_H(v))

/* 2 REG_BCN_ERLY_CTW_CTRL			(Offset 0x0570) */

#define BIT_SHIFT_BCNIVLCUNT_P0			24
#define BIT_MASK_BCNIVLCUNT_P0				0x7f
#define BIT_BCNIVLCUNT_P0(x)				(((x) & BIT_MASK_BCNIVLCUNT_P0) << BIT_SHIFT_BCNIVLCUNT_P0)
#define BITS_BCNIVLCUNT_P0				(BIT_MASK_BCNIVLCUNT_P0 << BIT_SHIFT_BCNIVLCUNT_P0)
#define BIT_CLEAR_BCNIVLCUNT_P0(x)			((x) & (~BITS_BCNIVLCUNT_P0))
#define BIT_GET_BCNIVLCUNT_P0(x)			(((x) >> BIT_SHIFT_BCNIVLCUNT_P0) & BIT_MASK_BCNIVLCUNT_P0)
#define BIT_SET_BCNIVLCUNT_P0(x, v)			(BIT_CLEAR_BCNIVLCUNT_P0(x) | BIT_BCNIVLCUNT_P0(v))

#define BIT_SHIFT_CTWND_P0				16
#define BIT_MASK_CTWND_P0				0xff
#define BIT_CTWND_P0(x)				(((x) & BIT_MASK_CTWND_P0) << BIT_SHIFT_CTWND_P0)
#define BITS_CTWND_P0					(BIT_MASK_CTWND_P0 << BIT_SHIFT_CTWND_P0)
#define BIT_CLEAR_CTWND_P0(x)				((x) & (~BITS_CTWND_P0))
#define BIT_GET_CTWND_P0(x)				(((x) >> BIT_SHIFT_CTWND_P0) & BIT_MASK_CTWND_P0)
#define BIT_SET_CTWND_P0(x, v)				(BIT_CLEAR_CTWND_P0(x) | BIT_CTWND_P0(v))

#define BIT_SHIFT_ATIMWND1				0
#define BIT_MASK_ATIMWND1				0xffff
#define BIT_ATIMWND1(x)				(((x) & BIT_MASK_ATIMWND1) << BIT_SHIFT_ATIMWND1)
#define BITS_ATIMWND1					(BIT_MASK_ATIMWND1 << BIT_SHIFT_ATIMWND1)
#define BIT_CLEAR_ATIMWND1(x)				((x) & (~BITS_ATIMWND1))
#define BIT_GET_ATIMWND1(x)				(((x) >> BIT_SHIFT_ATIMWND1) & BIT_MASK_ATIMWND1)
#define BIT_SET_ATIMWND1(x, v)				(BIT_CLEAR_ATIMWND1(x) | BIT_ATIMWND1(v))

/* 2 REG_BCNDROP_TO_MISC_CTRL		(Offset 0x0574) */

#define BIT_SHIFT_TSF_TIMER_0_SEL			30
#define BIT_MASK_TSF_TIMER_0_SEL			0x3
#define BIT_TSF_TIMER_0_SEL(x)				(((x) & BIT_MASK_TSF_TIMER_0_SEL) << BIT_SHIFT_TSF_TIMER_0_SEL)
#define BITS_TSF_TIMER_0_SEL				(BIT_MASK_TSF_TIMER_0_SEL << BIT_SHIFT_TSF_TIMER_0_SEL)
#define BIT_CLEAR_TSF_TIMER_0_SEL(x)			((x) & (~BITS_TSF_TIMER_0_SEL))
#define BIT_GET_TSF_TIMER_0_SEL(x)			(((x) >> BIT_SHIFT_TSF_TIMER_0_SEL) & BIT_MASK_TSF_TIMER_0_SEL)
#define BIT_SET_TSF_TIMER_0_SEL(x, v)			(BIT_CLEAR_TSF_TIMER_0_SEL(x) | BIT_TSF_TIMER_0_SEL(v))

#define BIT_SHIFT_TSF_TIMER_1_SEL			28
#define BIT_MASK_TSF_TIMER_1_SEL			0x3
#define BIT_TSF_TIMER_1_SEL(x)				(((x) & BIT_MASK_TSF_TIMER_1_SEL) << BIT_SHIFT_TSF_TIMER_1_SEL)
#define BITS_TSF_TIMER_1_SEL				(BIT_MASK_TSF_TIMER_1_SEL << BIT_SHIFT_TSF_TIMER_1_SEL)
#define BIT_CLEAR_TSF_TIMER_1_SEL(x)			((x) & (~BITS_TSF_TIMER_1_SEL))
#define BIT_GET_TSF_TIMER_1_SEL(x)			(((x) >> BIT_SHIFT_TSF_TIMER_1_SEL) & BIT_MASK_TSF_TIMER_1_SEL)
#define BIT_SET_TSF_TIMER_1_SEL(x, v)			(BIT_CLEAR_TSF_TIMER_1_SEL(x) | BIT_TSF_TIMER_1_SEL(v))

#define BIT_SHIFT_TSF_TIMER_2_SEL			26
#define BIT_MASK_TSF_TIMER_2_SEL			0x3
#define BIT_TSF_TIMER_2_SEL(x)				(((x) & BIT_MASK_TSF_TIMER_2_SEL) << BIT_SHIFT_TSF_TIMER_2_SEL)
#define BITS_TSF_TIMER_2_SEL				(BIT_MASK_TSF_TIMER_2_SEL << BIT_SHIFT_TSF_TIMER_2_SEL)
#define BIT_CLEAR_TSF_TIMER_2_SEL(x)			((x) & (~BITS_TSF_TIMER_2_SEL))
#define BIT_GET_TSF_TIMER_2_SEL(x)			(((x) >> BIT_SHIFT_TSF_TIMER_2_SEL) & BIT_MASK_TSF_TIMER_2_SEL)
#define BIT_SET_TSF_TIMER_2_SEL(x, v)			(BIT_CLEAR_TSF_TIMER_2_SEL(x) | BIT_TSF_TIMER_2_SEL(v))

#define BIT_SHIFT_TXCMD_TIMEOUT_PERIOD			16
#define BIT_MASK_TXCMD_TIMEOUT_PERIOD			0xff
#define BIT_TXCMD_TIMEOUT_PERIOD(x)			(((x) & BIT_MASK_TXCMD_TIMEOUT_PERIOD) << BIT_SHIFT_TXCMD_TIMEOUT_PERIOD)
#define BITS_TXCMD_TIMEOUT_PERIOD			(BIT_MASK_TXCMD_TIMEOUT_PERIOD << BIT_SHIFT_TXCMD_TIMEOUT_PERIOD)
#define BIT_CLEAR_TXCMD_TIMEOUT_PERIOD(x)		((x) & (~BITS_TXCMD_TIMEOUT_PERIOD))
#define BIT_GET_TXCMD_TIMEOUT_PERIOD(x)		(((x) >> BIT_SHIFT_TXCMD_TIMEOUT_PERIOD) & BIT_MASK_TXCMD_TIMEOUT_PERIOD)
#define BIT_SET_TXCMD_TIMEOUT_PERIOD(x, v)		(BIT_CLEAR_TXCMD_TIMEOUT_PERIOD(x) | BIT_TXCMD_TIMEOUT_PERIOD(v))

#define BIT_SHIFT_HGQ_TIMEOUT_PERIOD			8
#define BIT_MASK_HGQ_TIMEOUT_PERIOD			0xff
#define BIT_HGQ_TIMEOUT_PERIOD(x)			(((x) & BIT_MASK_HGQ_TIMEOUT_PERIOD) << BIT_SHIFT_HGQ_TIMEOUT_PERIOD)
#define BITS_HGQ_TIMEOUT_PERIOD			(BIT_MASK_HGQ_TIMEOUT_PERIOD << BIT_SHIFT_HGQ_TIMEOUT_PERIOD)
#define BIT_CLEAR_HGQ_TIMEOUT_PERIOD(x)		((x) & (~BITS_HGQ_TIMEOUT_PERIOD))
#define BIT_GET_HGQ_TIMEOUT_PERIOD(x)			(((x) >> BIT_SHIFT_HGQ_TIMEOUT_PERIOD) & BIT_MASK_HGQ_TIMEOUT_PERIOD)
#define BIT_SET_HGQ_TIMEOUT_PERIOD(x, v)		(BIT_CLEAR_HGQ_TIMEOUT_PERIOD(x) | BIT_HGQ_TIMEOUT_PERIOD(v))

#define BIT_BEACON_DROP_EN				BIT(7)

#define BIT_SHIFT_BEACON_DROP_IVL			0
#define BIT_MASK_BEACON_DROP_IVL			0x7f
#define BIT_BEACON_DROP_IVL(x)				(((x) & BIT_MASK_BEACON_DROP_IVL) << BIT_SHIFT_BEACON_DROP_IVL)
#define BITS_BEACON_DROP_IVL				(BIT_MASK_BEACON_DROP_IVL << BIT_SHIFT_BEACON_DROP_IVL)
#define BIT_CLEAR_BEACON_DROP_IVL(x)			((x) & (~BITS_BEACON_DROP_IVL))
#define BIT_GET_BEACON_DROP_IVL(x)			(((x) >> BIT_SHIFT_BEACON_DROP_IVL) & BIT_MASK_BEACON_DROP_IVL)
#define BIT_SET_BEACON_DROP_IVL(x, v)			(BIT_CLEAR_BEACON_DROP_IVL(x) | BIT_BEACON_DROP_IVL(v))

/* 2 REG_P2_TSFTR_L				(Offset 0x0578) */

#define BIT_SHIFT_P2_TSF_TIMER_L			0
#define BIT_MASK_P2_TSF_TIMER_L			0xffffffffL
#define BIT_P2_TSF_TIMER_L(x)				(((x) & BIT_MASK_P2_TSF_TIMER_L) << BIT_SHIFT_P2_TSF_TIMER_L)
#define BITS_P2_TSF_TIMER_L				(BIT_MASK_P2_TSF_TIMER_L << BIT_SHIFT_P2_TSF_TIMER_L)
#define BIT_CLEAR_P2_TSF_TIMER_L(x)			((x) & (~BITS_P2_TSF_TIMER_L))
#define BIT_GET_P2_TSF_TIMER_L(x)			(((x) >> BIT_SHIFT_P2_TSF_TIMER_L) & BIT_MASK_P2_TSF_TIMER_L)
#define BIT_SET_P2_TSF_TIMER_L(x, v)			(BIT_CLEAR_P2_TSF_TIMER_L(x) | BIT_P2_TSF_TIMER_L(v))

/* 2 REG_P2_TSFTR_H				(Offset 0x057C) */

#define BIT_SHIFT_P2_TSF_TIMER_H			0
#define BIT_MASK_P2_TSF_TIMER_H			0xffffffffL
#define BIT_P2_TSF_TIMER_H(x)				(((x) & BIT_MASK_P2_TSF_TIMER_H) << BIT_SHIFT_P2_TSF_TIMER_H)
#define BITS_P2_TSF_TIMER_H				(BIT_MASK_P2_TSF_TIMER_H << BIT_SHIFT_P2_TSF_TIMER_H)
#define BIT_CLEAR_P2_TSF_TIMER_H(x)			((x) & (~BITS_P2_TSF_TIMER_H))
#define BIT_GET_P2_TSF_TIMER_H(x)			(((x) >> BIT_SHIFT_P2_TSF_TIMER_H) & BIT_MASK_P2_TSF_TIMER_H)
#define BIT_SET_P2_TSF_TIMER_H(x, v)			(BIT_CLEAR_P2_TSF_TIMER_H(x) | BIT_P2_TSF_TIMER_H(v))

/* 2 REG_TSF_TIMER1				(Offset 0x0580) */

#define BIT_SHIFT_TSTTIMER1				5
#define BIT_MASK_TSTTIMER1				0x7ffffff
#define BIT_TSTTIMER1(x)				(((x) & BIT_MASK_TSTTIMER1) << BIT_SHIFT_TSTTIMER1)
#define BITS_TSTTIMER1					(BIT_MASK_TSTTIMER1 << BIT_SHIFT_TSTTIMER1)
#define BIT_CLEAR_TSTTIMER1(x)				((x) & (~BITS_TSTTIMER1))
#define BIT_GET_TSTTIMER1(x)				(((x) >> BIT_SHIFT_TSTTIMER1) & BIT_MASK_TSTTIMER1)
#define BIT_SET_TSTTIMER1(x, v)			(BIT_CLEAR_TSTTIMER1(x) | BIT_TSTTIMER1(v))

/* 2 REG_TSF_TIMER2				(Offset 0x0584) */

#define BIT_SHIFT_TSTTIMER2				5
#define BIT_MASK_TSTTIMER2				0x7ffffff
#define BIT_TSTTIMER2(x)				(((x) & BIT_MASK_TSTTIMER2) << BIT_SHIFT_TSTTIMER2)
#define BITS_TSTTIMER2					(BIT_MASK_TSTTIMER2 << BIT_SHIFT_TSTTIMER2)
#define BIT_CLEAR_TSTTIMER2(x)				((x) & (~BITS_TSTTIMER2))
#define BIT_GET_TSTTIMER2(x)				(((x) >> BIT_SHIFT_TSTTIMER2) & BIT_MASK_TSTTIMER2)
#define BIT_SET_TSTTIMER2(x, v)			(BIT_CLEAR_TSTTIMER2(x) | BIT_TSTTIMER2(v))

/* 2 REG_TSF_TIMER3				(Offset 0x0588) */

#define BIT_SHIFT_TSTTIMER3				5
#define BIT_MASK_TSTTIMER3				0x7ffffff
#define BIT_TSTTIMER3(x)				(((x) & BIT_MASK_TSTTIMER3) << BIT_SHIFT_TSTTIMER3)
#define BITS_TSTTIMER3					(BIT_MASK_TSTTIMER3 << BIT_SHIFT_TSTTIMER3)
#define BIT_CLEAR_TSTTIMER3(x)				((x) & (~BITS_TSTTIMER3))
#define BIT_GET_TSTTIMER3(x)				(((x) >> BIT_SHIFT_TSTTIMER3) & BIT_MASK_TSTTIMER3)
#define BIT_SET_TSTTIMER3(x, v)			(BIT_CLEAR_TSTTIMER3(x) | BIT_TSTTIMER3(v))

/* 2 REG_BCN_IFS_TBTT_CTN			(Offset 0x058C) */

#define BIT_SHIFT_PRE_BCN_DMATIM			24
#define BIT_MASK_PRE_BCN_DMATIM			0xff
#define BIT_PRE_BCN_DMATIM(x)				(((x) & BIT_MASK_PRE_BCN_DMATIM) << BIT_SHIFT_PRE_BCN_DMATIM)
#define BITS_PRE_BCN_DMATIM				(BIT_MASK_PRE_BCN_DMATIM << BIT_SHIFT_PRE_BCN_DMATIM)
#define BIT_CLEAR_PRE_BCN_DMATIM(x)			((x) & (~BITS_PRE_BCN_DMATIM))
#define BIT_GET_PRE_BCN_DMATIM(x)			(((x) >> BIT_SHIFT_PRE_BCN_DMATIM) & BIT_MASK_PRE_BCN_DMATIM)
#define BIT_SET_PRE_BCN_DMATIM(x, v)			(BIT_CLEAR_PRE_BCN_DMATIM(x) | BIT_PRE_BCN_DMATIM(v))

#define BIT_SHIFT_FORCE_BCN_IFS			16
#define BIT_MASK_FORCE_BCN_IFS				0xff
#define BIT_FORCE_BCN_IFS(x)				(((x) & BIT_MASK_FORCE_BCN_IFS) << BIT_SHIFT_FORCE_BCN_IFS)
#define BITS_FORCE_BCN_IFS				(BIT_MASK_FORCE_BCN_IFS << BIT_SHIFT_FORCE_BCN_IFS)
#define BIT_CLEAR_FORCE_BCN_IFS(x)			((x) & (~BITS_FORCE_BCN_IFS))
#define BIT_GET_FORCE_BCN_IFS(x)			(((x) >> BIT_SHIFT_FORCE_BCN_IFS) & BIT_MASK_FORCE_BCN_IFS)
#define BIT_SET_FORCE_BCN_IFS(x, v)			(BIT_CLEAR_FORCE_BCN_IFS(x) | BIT_FORCE_BCN_IFS(v))

#define BIT_SHIFT_TBTT_CTN_AREA			0
#define BIT_MASK_TBTT_CTN_AREA				0xff
#define BIT_TBTT_CTN_AREA(x)				(((x) & BIT_MASK_TBTT_CTN_AREA) << BIT_SHIFT_TBTT_CTN_AREA)
#define BITS_TBTT_CTN_AREA				(BIT_MASK_TBTT_CTN_AREA << BIT_SHIFT_TBTT_CTN_AREA)
#define BIT_CLEAR_TBTT_CTN_AREA(x)			((x) & (~BITS_TBTT_CTN_AREA))
#define BIT_GET_TBTT_CTN_AREA(x)			(((x) >> BIT_SHIFT_TBTT_CTN_AREA) & BIT_MASK_TBTT_CTN_AREA)
#define BIT_SET_TBTT_CTN_AREA(x, v)			(BIT_CLEAR_TBTT_CTN_AREA(x) | BIT_TBTT_CTN_AREA(v))

/* 2 REG_TXOP_CTRL_PRE_BKF			(Offset 0x0590) */

#define BIT_NOPKT_END_RTSMF				BIT(31)

#define BIT_SHIFT_PRETX_US				27
#define BIT_MASK_PRETX_US				0xf
#define BIT_PRETX_US(x)				(((x) & BIT_MASK_PRETX_US) << BIT_SHIFT_PRETX_US)
#define BITS_PRETX_US					(BIT_MASK_PRETX_US << BIT_SHIFT_PRETX_US)
#define BIT_CLEAR_PRETX_US(x)				((x) & (~BITS_PRETX_US))
#define BIT_GET_PRETX_US(x)				(((x) >> BIT_SHIFT_PRETX_US) & BIT_MASK_PRETX_US)
#define BIT_SET_PRETX_US(x, v)				(BIT_CLEAR_PRETX_US(x) | BIT_PRETX_US(v))

#define BIT_DTIM_BYPASS				BIT(26)
#define BIT_RTS_NAV_TXOP				BIT(25)
#define BIT_NOT_CROSS_TXOP				BIT(24)

#define BIT_SHIFT_PRE_BKF_TIME				16
#define BIT_MASK_PRE_BKF_TIME				0xff
#define BIT_PRE_BKF_TIME(x)				(((x) & BIT_MASK_PRE_BKF_TIME) << BIT_SHIFT_PRE_BKF_TIME)
#define BITS_PRE_BKF_TIME				(BIT_MASK_PRE_BKF_TIME << BIT_SHIFT_PRE_BKF_TIME)
#define BIT_CLEAR_PRE_BKF_TIME(x)			((x) & (~BITS_PRE_BKF_TIME))
#define BIT_GET_PRE_BKF_TIME(x)			(((x) >> BIT_SHIFT_PRE_BKF_TIME) & BIT_MASK_PRE_BKF_TIME)
#define BIT_SET_PRE_BKF_TIME(x, v)			(BIT_CLEAR_PRE_BKF_TIME(x) | BIT_PRE_BKF_TIME(v))

#define BIT_NAV_BLK_HGQ				BIT(15)
#define BIT_NAV_BLK_MGQ				BIT(14)

#define BIT_SHIFT_TXOP_MIN				0
#define BIT_MASK_TXOP_MIN				0x3fff
#define BIT_TXOP_MIN(x)				(((x) & BIT_MASK_TXOP_MIN) << BIT_SHIFT_TXOP_MIN)
#define BITS_TXOP_MIN					(BIT_MASK_TXOP_MIN << BIT_SHIFT_TXOP_MIN)
#define BIT_CLEAR_TXOP_MIN(x)				((x) & (~BITS_TXOP_MIN))
#define BIT_GET_TXOP_MIN(x)				(((x) >> BIT_SHIFT_TXOP_MIN) & BIT_MASK_TXOP_MIN)
#define BIT_SET_TXOP_MIN(x, v)				(BIT_CLEAR_TXOP_MIN(x) | BIT_TXOP_MIN(v))

/* 2 REG_FREERUN_CNT_L			(Offset 0x0594) */

#define BIT_SHIFT_FREERUN_CNT_TIMER_L			0
#define BIT_MASK_FREERUN_CNT_TIMER_L			0xffffffffL
#define BIT_FREERUN_CNT_TIMER_L(x)			(((x) & BIT_MASK_FREERUN_CNT_TIMER_L) << BIT_SHIFT_FREERUN_CNT_TIMER_L)
#define BITS_FREERUN_CNT_TIMER_L			(BIT_MASK_FREERUN_CNT_TIMER_L << BIT_SHIFT_FREERUN_CNT_TIMER_L)
#define BIT_CLEAR_FREERUN_CNT_TIMER_L(x)		((x) & (~BITS_FREERUN_CNT_TIMER_L))
#define BIT_GET_FREERUN_CNT_TIMER_L(x)			(((x) >> BIT_SHIFT_FREERUN_CNT_TIMER_L) & BIT_MASK_FREERUN_CNT_TIMER_L)
#define BIT_SET_FREERUN_CNT_TIMER_L(x, v)		(BIT_CLEAR_FREERUN_CNT_TIMER_L(x) | BIT_FREERUN_CNT_TIMER_L(v))

/* 2 REG_FREERUN_CNT_H			(Offset 0x0598) */

#define BIT_SHIFT_FREERUN_CNT_TIMER_H			0
#define BIT_MASK_FREERUN_CNT_TIMER_H			0xffffffffL
#define BIT_FREERUN_CNT_TIMER_H(x)			(((x) & BIT_MASK_FREERUN_CNT_TIMER_H) << BIT_SHIFT_FREERUN_CNT_TIMER_H)
#define BITS_FREERUN_CNT_TIMER_H			(BIT_MASK_FREERUN_CNT_TIMER_H << BIT_SHIFT_FREERUN_CNT_TIMER_H)
#define BIT_CLEAR_FREERUN_CNT_TIMER_H(x)		((x) & (~BITS_FREERUN_CNT_TIMER_H))
#define BIT_GET_FREERUN_CNT_TIMER_H(x)			(((x) >> BIT_SHIFT_FREERUN_CNT_TIMER_H) & BIT_MASK_FREERUN_CNT_TIMER_H)
#define BIT_SET_FREERUN_CNT_TIMER_H(x, v)		(BIT_CLEAR_FREERUN_CNT_TIMER_H(x) | BIT_FREERUN_CNT_TIMER_H(v))

/* 2 REG_BCN_ERLY_CTW_CTRL_P1_2		(Offset 0x059C) */

#define BIT_SHIFT_BCNIVLCUNT_P2			24
#define BIT_MASK_BCNIVLCUNT_P2				0x7f
#define BIT_BCNIVLCUNT_P2(x)				(((x) & BIT_MASK_BCNIVLCUNT_P2) << BIT_SHIFT_BCNIVLCUNT_P2)
#define BITS_BCNIVLCUNT_P2				(BIT_MASK_BCNIVLCUNT_P2 << BIT_SHIFT_BCNIVLCUNT_P2)
#define BIT_CLEAR_BCNIVLCUNT_P2(x)			((x) & (~BITS_BCNIVLCUNT_P2))
#define BIT_GET_BCNIVLCUNT_P2(x)			(((x) >> BIT_SHIFT_BCNIVLCUNT_P2) & BIT_MASK_BCNIVLCUNT_P2)
#define BIT_SET_BCNIVLCUNT_P2(x, v)			(BIT_CLEAR_BCNIVLCUNT_P2(x) | BIT_BCNIVLCUNT_P2(v))

#define BIT_SHIFT_CTWND_P2				16
#define BIT_MASK_CTWND_P2				0xff
#define BIT_CTWND_P2(x)				(((x) & BIT_MASK_CTWND_P2) << BIT_SHIFT_CTWND_P2)
#define BITS_CTWND_P2					(BIT_MASK_CTWND_P2 << BIT_SHIFT_CTWND_P2)
#define BIT_CLEAR_CTWND_P2(x)				((x) & (~BITS_CTWND_P2))
#define BIT_GET_CTWND_P2(x)				(((x) >> BIT_SHIFT_CTWND_P2) & BIT_MASK_CTWND_P2)
#define BIT_SET_CTWND_P2(x, v)				(BIT_CLEAR_CTWND_P2(x) | BIT_CTWND_P2(v))

#define BIT_SHIFT_BCNIVLCUNT_P1			8
#define BIT_MASK_BCNIVLCUNT_P1				0x7f
#define BIT_BCNIVLCUNT_P1(x)				(((x) & BIT_MASK_BCNIVLCUNT_P1) << BIT_SHIFT_BCNIVLCUNT_P1)
#define BITS_BCNIVLCUNT_P1				(BIT_MASK_BCNIVLCUNT_P1 << BIT_SHIFT_BCNIVLCUNT_P1)
#define BIT_CLEAR_BCNIVLCUNT_P1(x)			((x) & (~BITS_BCNIVLCUNT_P1))
#define BIT_GET_BCNIVLCUNT_P1(x)			(((x) >> BIT_SHIFT_BCNIVLCUNT_P1) & BIT_MASK_BCNIVLCUNT_P1)
#define BIT_SET_BCNIVLCUNT_P1(x, v)			(BIT_CLEAR_BCNIVLCUNT_P1(x) | BIT_BCNIVLCUNT_P1(v))

#define BIT_SHIFT_CTWND_P1				0
#define BIT_MASK_CTWND_P1				0xff
#define BIT_CTWND_P1(x)				(((x) & BIT_MASK_CTWND_P1) << BIT_SHIFT_CTWND_P1)
#define BITS_CTWND_P1					(BIT_MASK_CTWND_P1 << BIT_SHIFT_CTWND_P1)
#define BIT_CLEAR_CTWND_P1(x)				((x) & (~BITS_CTWND_P1))
#define BIT_GET_CTWND_P1(x)				(((x) >> BIT_SHIFT_CTWND_P1) & BIT_MASK_CTWND_P1)
#define BIT_SET_CTWND_P1(x, v)				(BIT_CLEAR_CTWND_P1(x) | BIT_CTWND_P1(v))

/* 2 REG_ATIMWND2_5				(Offset 0x05A0) */

#define BIT_SHIFT_ATIMWND5				24
#define BIT_MASK_ATIMWND5				0xff
#define BIT_ATIMWND5(x)				(((x) & BIT_MASK_ATIMWND5) << BIT_SHIFT_ATIMWND5)
#define BITS_ATIMWND5					(BIT_MASK_ATIMWND5 << BIT_SHIFT_ATIMWND5)
#define BIT_CLEAR_ATIMWND5(x)				((x) & (~BITS_ATIMWND5))
#define BIT_GET_ATIMWND5(x)				(((x) >> BIT_SHIFT_ATIMWND5) & BIT_MASK_ATIMWND5)
#define BIT_SET_ATIMWND5(x, v)				(BIT_CLEAR_ATIMWND5(x) | BIT_ATIMWND5(v))

#define BIT_SHIFT_ATIMWND4				16
#define BIT_MASK_ATIMWND4				0xff
#define BIT_ATIMWND4(x)				(((x) & BIT_MASK_ATIMWND4) << BIT_SHIFT_ATIMWND4)
#define BITS_ATIMWND4					(BIT_MASK_ATIMWND4 << BIT_SHIFT_ATIMWND4)
#define BIT_CLEAR_ATIMWND4(x)				((x) & (~BITS_ATIMWND4))
#define BIT_GET_ATIMWND4(x)				(((x) >> BIT_SHIFT_ATIMWND4) & BIT_MASK_ATIMWND4)
#define BIT_SET_ATIMWND4(x, v)				(BIT_CLEAR_ATIMWND4(x) | BIT_ATIMWND4(v))

#define BIT_SHIFT_ATIMWND3				8
#define BIT_MASK_ATIMWND3				0xff
#define BIT_ATIMWND3(x)				(((x) & BIT_MASK_ATIMWND3) << BIT_SHIFT_ATIMWND3)
#define BITS_ATIMWND3					(BIT_MASK_ATIMWND3 << BIT_SHIFT_ATIMWND3)
#define BIT_CLEAR_ATIMWND3(x)				((x) & (~BITS_ATIMWND3))
#define BIT_GET_ATIMWND3(x)				(((x) >> BIT_SHIFT_ATIMWND3) & BIT_MASK_ATIMWND3)
#define BIT_SET_ATIMWND3(x, v)				(BIT_CLEAR_ATIMWND3(x) | BIT_ATIMWND3(v))

#define BIT_SHIFT_ATIMWND2				0
#define BIT_MASK_ATIMWND2				0xff
#define BIT_ATIMWND2(x)				(((x) & BIT_MASK_ATIMWND2) << BIT_SHIFT_ATIMWND2)
#define BITS_ATIMWND2					(BIT_MASK_ATIMWND2 << BIT_SHIFT_ATIMWND2)
#define BIT_CLEAR_ATIMWND2(x)				((x) & (~BITS_ATIMWND2))
#define BIT_GET_ATIMWND2(x)				(((x) >> BIT_SHIFT_ATIMWND2) & BIT_MASK_ATIMWND2)
#define BIT_SET_ATIMWND2(x, v)				(BIT_CLEAR_ATIMWND2(x) | BIT_ATIMWND2(v))

/* 2 REG_ATIMWND6_7_URGENT_NOLIMTHGQ		(Offset 0x05A4) */

#define BIT_HIQ_NO_LMT_EN_VAP7				BIT(31)
#define BIT_HIQ_NO_LMT_EN_VAP6				BIT(30)
#define BIT_HIQ_NO_LMT_EN_VAP5				BIT(29)
#define BIT_HIQ_NO_LMT_EN_VAP4				BIT(28)
#define BIT_HIQ_NO_LMT_EN_VAP3				BIT(27)
#define BIT_HIQ_NO_LMT_EN_VAP2				BIT(26)
#define BIT_HIQ_NO_LMT_EN_VAP1				BIT(25)
#define BIT_HIQ_NO_LMT_EN_ROOT				BIT(24)

#define BIT_SHIFT_ATIM_URGENT				16
#define BIT_MASK_ATIM_URGENT				0xff
#define BIT_ATIM_URGENT(x)				(((x) & BIT_MASK_ATIM_URGENT) << BIT_SHIFT_ATIM_URGENT)
#define BITS_ATIM_URGENT				(BIT_MASK_ATIM_URGENT << BIT_SHIFT_ATIM_URGENT)
#define BIT_CLEAR_ATIM_URGENT(x)			((x) & (~BITS_ATIM_URGENT))
#define BIT_GET_ATIM_URGENT(x)				(((x) >> BIT_SHIFT_ATIM_URGENT) & BIT_MASK_ATIM_URGENT)
#define BIT_SET_ATIM_URGENT(x, v)			(BIT_CLEAR_ATIM_URGENT(x) | BIT_ATIM_URGENT(v))

#define BIT_SHIFT_ATIMWND7				8
#define BIT_MASK_ATIMWND7				0xff
#define BIT_ATIMWND7(x)				(((x) & BIT_MASK_ATIMWND7) << BIT_SHIFT_ATIMWND7)
#define BITS_ATIMWND7					(BIT_MASK_ATIMWND7 << BIT_SHIFT_ATIMWND7)
#define BIT_CLEAR_ATIMWND7(x)				((x) & (~BITS_ATIMWND7))
#define BIT_GET_ATIMWND7(x)				(((x) >> BIT_SHIFT_ATIMWND7) & BIT_MASK_ATIMWND7)
#define BIT_SET_ATIMWND7(x, v)				(BIT_CLEAR_ATIMWND7(x) | BIT_ATIMWND7(v))

#define BIT_SHIFT_ATIMWND6				0
#define BIT_MASK_ATIMWND6				0xff
#define BIT_ATIMWND6(x)				(((x) & BIT_MASK_ATIMWND6) << BIT_SHIFT_ATIMWND6)
#define BITS_ATIMWND6					(BIT_MASK_ATIMWND6 << BIT_SHIFT_ATIMWND6)
#define BIT_CLEAR_ATIMWND6(x)				((x) & (~BITS_ATIMWND6))
#define BIT_GET_ATIMWND6(x)				(((x) >> BIT_SHIFT_ATIMWND6) & BIT_MASK_ATIMWND6)
#define BIT_SET_ATIMWND6(x, v)				(BIT_CLEAR_ATIMWND6(x) | BIT_ATIMWND6(v))

/* 2 REG_DTIM_COUNT_0_3			(Offset 0x05A8) */

#define BIT_SHIFT_DTIM_COUNT_VAP3			24
#define BIT_MASK_DTIM_COUNT_VAP3			0xff
#define BIT_DTIM_COUNT_VAP3(x)				(((x) & BIT_MASK_DTIM_COUNT_VAP3) << BIT_SHIFT_DTIM_COUNT_VAP3)
#define BITS_DTIM_COUNT_VAP3				(BIT_MASK_DTIM_COUNT_VAP3 << BIT_SHIFT_DTIM_COUNT_VAP3)
#define BIT_CLEAR_DTIM_COUNT_VAP3(x)			((x) & (~BITS_DTIM_COUNT_VAP3))
#define BIT_GET_DTIM_COUNT_VAP3(x)			(((x) >> BIT_SHIFT_DTIM_COUNT_VAP3) & BIT_MASK_DTIM_COUNT_VAP3)
#define BIT_SET_DTIM_COUNT_VAP3(x, v)			(BIT_CLEAR_DTIM_COUNT_VAP3(x) | BIT_DTIM_COUNT_VAP3(v))

#define BIT_SHIFT_DTIM_COUNT_VAP2			16
#define BIT_MASK_DTIM_COUNT_VAP2			0xff
#define BIT_DTIM_COUNT_VAP2(x)				(((x) & BIT_MASK_DTIM_COUNT_VAP2) << BIT_SHIFT_DTIM_COUNT_VAP2)
#define BITS_DTIM_COUNT_VAP2				(BIT_MASK_DTIM_COUNT_VAP2 << BIT_SHIFT_DTIM_COUNT_VAP2)
#define BIT_CLEAR_DTIM_COUNT_VAP2(x)			((x) & (~BITS_DTIM_COUNT_VAP2))
#define BIT_GET_DTIM_COUNT_VAP2(x)			(((x) >> BIT_SHIFT_DTIM_COUNT_VAP2) & BIT_MASK_DTIM_COUNT_VAP2)
#define BIT_SET_DTIM_COUNT_VAP2(x, v)			(BIT_CLEAR_DTIM_COUNT_VAP2(x) | BIT_DTIM_COUNT_VAP2(v))

#define BIT_SHIFT_DTIM_COUNT_VAP1			8
#define BIT_MASK_DTIM_COUNT_VAP1			0xff
#define BIT_DTIM_COUNT_VAP1(x)				(((x) & BIT_MASK_DTIM_COUNT_VAP1) << BIT_SHIFT_DTIM_COUNT_VAP1)
#define BITS_DTIM_COUNT_VAP1				(BIT_MASK_DTIM_COUNT_VAP1 << BIT_SHIFT_DTIM_COUNT_VAP1)
#define BIT_CLEAR_DTIM_COUNT_VAP1(x)			((x) & (~BITS_DTIM_COUNT_VAP1))
#define BIT_GET_DTIM_COUNT_VAP1(x)			(((x) >> BIT_SHIFT_DTIM_COUNT_VAP1) & BIT_MASK_DTIM_COUNT_VAP1)
#define BIT_SET_DTIM_COUNT_VAP1(x, v)			(BIT_CLEAR_DTIM_COUNT_VAP1(x) | BIT_DTIM_COUNT_VAP1(v))

#define BIT_SHIFT_DTIM_COUNT_ROOT			0
#define BIT_MASK_DTIM_COUNT_ROOT			0xff
#define BIT_DTIM_COUNT_ROOT(x)				(((x) & BIT_MASK_DTIM_COUNT_ROOT) << BIT_SHIFT_DTIM_COUNT_ROOT)
#define BITS_DTIM_COUNT_ROOT				(BIT_MASK_DTIM_COUNT_ROOT << BIT_SHIFT_DTIM_COUNT_ROOT)
#define BIT_CLEAR_DTIM_COUNT_ROOT(x)			((x) & (~BITS_DTIM_COUNT_ROOT))
#define BIT_GET_DTIM_COUNT_ROOT(x)			(((x) >> BIT_SHIFT_DTIM_COUNT_ROOT) & BIT_MASK_DTIM_COUNT_ROOT)
#define BIT_SET_DTIM_COUNT_ROOT(x, v)			(BIT_CLEAR_DTIM_COUNT_ROOT(x) | BIT_DTIM_COUNT_ROOT(v))

/* 2 REG_DTIM_COUNT_4_7			(Offset 0x05AC) */

#define BIT_SHIFT_DTIM_COUNT_VAP7			24
#define BIT_MASK_DTIM_COUNT_VAP7			0xff
#define BIT_DTIM_COUNT_VAP7(x)				(((x) & BIT_MASK_DTIM_COUNT_VAP7) << BIT_SHIFT_DTIM_COUNT_VAP7)
#define BITS_DTIM_COUNT_VAP7				(BIT_MASK_DTIM_COUNT_VAP7 << BIT_SHIFT_DTIM_COUNT_VAP7)
#define BIT_CLEAR_DTIM_COUNT_VAP7(x)			((x) & (~BITS_DTIM_COUNT_VAP7))
#define BIT_GET_DTIM_COUNT_VAP7(x)			(((x) >> BIT_SHIFT_DTIM_COUNT_VAP7) & BIT_MASK_DTIM_COUNT_VAP7)
#define BIT_SET_DTIM_COUNT_VAP7(x, v)			(BIT_CLEAR_DTIM_COUNT_VAP7(x) | BIT_DTIM_COUNT_VAP7(v))

#define BIT_SHIFT_DTIM_COUNT_VAP6			16
#define BIT_MASK_DTIM_COUNT_VAP6			0xff
#define BIT_DTIM_COUNT_VAP6(x)				(((x) & BIT_MASK_DTIM_COUNT_VAP6) << BIT_SHIFT_DTIM_COUNT_VAP6)
#define BITS_DTIM_COUNT_VAP6				(BIT_MASK_DTIM_COUNT_VAP6 << BIT_SHIFT_DTIM_COUNT_VAP6)
#define BIT_CLEAR_DTIM_COUNT_VAP6(x)			((x) & (~BITS_DTIM_COUNT_VAP6))
#define BIT_GET_DTIM_COUNT_VAP6(x)			(((x) >> BIT_SHIFT_DTIM_COUNT_VAP6) & BIT_MASK_DTIM_COUNT_VAP6)
#define BIT_SET_DTIM_COUNT_VAP6(x, v)			(BIT_CLEAR_DTIM_COUNT_VAP6(x) | BIT_DTIM_COUNT_VAP6(v))

#define BIT_SHIFT_DTIM_COUNT_VAP5			8
#define BIT_MASK_DTIM_COUNT_VAP5			0xff
#define BIT_DTIM_COUNT_VAP5(x)				(((x) & BIT_MASK_DTIM_COUNT_VAP5) << BIT_SHIFT_DTIM_COUNT_VAP5)
#define BITS_DTIM_COUNT_VAP5				(BIT_MASK_DTIM_COUNT_VAP5 << BIT_SHIFT_DTIM_COUNT_VAP5)
#define BIT_CLEAR_DTIM_COUNT_VAP5(x)			((x) & (~BITS_DTIM_COUNT_VAP5))
#define BIT_GET_DTIM_COUNT_VAP5(x)			(((x) >> BIT_SHIFT_DTIM_COUNT_VAP5) & BIT_MASK_DTIM_COUNT_VAP5)
#define BIT_SET_DTIM_COUNT_VAP5(x, v)			(BIT_CLEAR_DTIM_COUNT_VAP5(x) | BIT_DTIM_COUNT_VAP5(v))

#define BIT_SHIFT_DTIM_COUNT_VAP4			0
#define BIT_MASK_DTIM_COUNT_VAP4			0xff
#define BIT_DTIM_COUNT_VAP4(x)				(((x) & BIT_MASK_DTIM_COUNT_VAP4) << BIT_SHIFT_DTIM_COUNT_VAP4)
#define BITS_DTIM_COUNT_VAP4				(BIT_MASK_DTIM_COUNT_VAP4 << BIT_SHIFT_DTIM_COUNT_VAP4)
#define BIT_CLEAR_DTIM_COUNT_VAP4(x)			((x) & (~BITS_DTIM_COUNT_VAP4))
#define BIT_GET_DTIM_COUNT_VAP4(x)			(((x) >> BIT_SHIFT_DTIM_COUNT_VAP4) & BIT_MASK_DTIM_COUNT_VAP4)
#define BIT_SET_DTIM_COUNT_VAP4(x, v)			(BIT_CLEAR_DTIM_COUNT_VAP4(x) | BIT_DTIM_COUNT_VAP4(v))

/* 2 REG_DISATIM_BCNERLY_TBTTHOLD_BCNCS	(Offset 0x05B0) */

#define BIT_TSFTR3_SYNC_EN				BIT(31)
#define BIT_TSFTR2_SYNC_EN				BIT(29)
#define BIT_TSFTR2_RST					BIT(28)

#define BIT_SHIFT_MULTI_BCN_CS				24
#define BIT_MASK_MULTI_BCN_CS				0xf
#define BIT_MULTI_BCN_CS(x)				(((x) & BIT_MASK_MULTI_BCN_CS) << BIT_SHIFT_MULTI_BCN_CS)
#define BITS_MULTI_BCN_CS				(BIT_MASK_MULTI_BCN_CS << BIT_SHIFT_MULTI_BCN_CS)
#define BIT_CLEAR_MULTI_BCN_CS(x)			((x) & (~BITS_MULTI_BCN_CS))
#define BIT_GET_MULTI_BCN_CS(x)			(((x) >> BIT_SHIFT_MULTI_BCN_CS) & BIT_MASK_MULTI_BCN_CS)
#define BIT_SET_MULTI_BCN_CS(x, v)			(BIT_CLEAR_MULTI_BCN_CS(x) | BIT_MULTI_BCN_CS(v))

#define BIT_DIS_BCN_P2					BIT(23)
#define BIT_DIS_BCN_P1					BIT(22)
#define BIT_DIS_BCN_P0					BIT(21)

#define BIT_SHIFT_TBTT_HOLD_PREDICT_P1			16
#define BIT_MASK_TBTT_HOLD_PREDICT_P1			0x1f
#define BIT_TBTT_HOLD_PREDICT_P1(x)			(((x) & BIT_MASK_TBTT_HOLD_PREDICT_P1) << BIT_SHIFT_TBTT_HOLD_PREDICT_P1)
#define BITS_TBTT_HOLD_PREDICT_P1			(BIT_MASK_TBTT_HOLD_PREDICT_P1 << BIT_SHIFT_TBTT_HOLD_PREDICT_P1)
#define BIT_CLEAR_TBTT_HOLD_PREDICT_P1(x)		((x) & (~BITS_TBTT_HOLD_PREDICT_P1))
#define BIT_GET_TBTT_HOLD_PREDICT_P1(x)		(((x) >> BIT_SHIFT_TBTT_HOLD_PREDICT_P1) & BIT_MASK_TBTT_HOLD_PREDICT_P1)
#define BIT_SET_TBTT_HOLD_PREDICT_P1(x, v)		(BIT_CLEAR_TBTT_HOLD_PREDICT_P1(x) | BIT_TBTT_HOLD_PREDICT_P1(v))

#define BIT_SHIFT_EARLY_128US_P1			11
#define BIT_MASK_EARLY_128US_P1			0x7
#define BIT_EARLY_128US_P1(x)				(((x) & BIT_MASK_EARLY_128US_P1) << BIT_SHIFT_EARLY_128US_P1)
#define BITS_EARLY_128US_P1				(BIT_MASK_EARLY_128US_P1 << BIT_SHIFT_EARLY_128US_P1)
#define BIT_CLEAR_EARLY_128US_P1(x)			((x) & (~BITS_EARLY_128US_P1))
#define BIT_GET_EARLY_128US_P1(x)			(((x) >> BIT_SHIFT_EARLY_128US_P1) & BIT_MASK_EARLY_128US_P1)
#define BIT_SET_EARLY_128US_P1(x, v)			(BIT_CLEAR_EARLY_128US_P1(x) | BIT_EARLY_128US_P1(v))

#define BIT_SHIFT_EARLY_128US_P0			8
#define BIT_MASK_EARLY_128US_P0			0x7
#define BIT_EARLY_128US_P0(x)				(((x) & BIT_MASK_EARLY_128US_P0) << BIT_SHIFT_EARLY_128US_P0)
#define BITS_EARLY_128US_P0				(BIT_MASK_EARLY_128US_P0 << BIT_SHIFT_EARLY_128US_P0)
#define BIT_CLEAR_EARLY_128US_P0(x)			((x) & (~BITS_EARLY_128US_P0))
#define BIT_GET_EARLY_128US_P0(x)			(((x) >> BIT_SHIFT_EARLY_128US_P0) & BIT_MASK_EARLY_128US_P0)
#define BIT_SET_EARLY_128US_P0(x, v)			(BIT_CLEAR_EARLY_128US_P0(x) | BIT_EARLY_128US_P0(v))

#define BIT_DIS_ATIM_VAP7				BIT(7)
#define BIT_DIS_ATIM_VAP6				BIT(6)
#define BIT_DIS_ATIM_VAP5				BIT(5)
#define BIT_DIS_ATIM_VAP4				BIT(4)
#define BIT_DIS_ATIM_VAP3				BIT(3)
#define BIT_DIS_ATIM_VAP2				BIT(2)
#define BIT_DIS_ATIM_VAP1				BIT(1)
#define BIT_DIS_ATIM_ROOT				BIT(0)

/* 2 REG_FREERUN_CNT_P2POFF_DIS_TXTIME	(Offset 0x05B4) */

#define BIT_SHIFT_P2POFF_DIS_TXTIME			24
#define BIT_MASK_P2POFF_DIS_TXTIME			0xff
#define BIT_P2POFF_DIS_TXTIME(x)			(((x) & BIT_MASK_P2POFF_DIS_TXTIME) << BIT_SHIFT_P2POFF_DIS_TXTIME)
#define BITS_P2POFF_DIS_TXTIME				(BIT_MASK_P2POFF_DIS_TXTIME << BIT_SHIFT_P2POFF_DIS_TXTIME)
#define BIT_CLEAR_P2POFF_DIS_TXTIME(x)			((x) & (~BITS_P2POFF_DIS_TXTIME))
#define BIT_GET_P2POFF_DIS_TXTIME(x)			(((x) >> BIT_SHIFT_P2POFF_DIS_TXTIME) & BIT_MASK_P2POFF_DIS_TXTIME)
#define BIT_SET_P2POFF_DIS_TXTIME(x, v)		(BIT_CLEAR_P2POFF_DIS_TXTIME(x) | BIT_P2POFF_DIS_TXTIME(v))

#define BIT_EN_FREECNT					BIT(13)
#define BIT_RESET_FREECNT_P				BIT(12)

/* 2 REG_PTA_TRXBCN_CTRL			(Offset 0x05B8) */

#define BIT_PTA_RXBCN_PRI_MASK				BIT(31)
#define BIT_PTA_RXBCN_EN				BIT(30)
#define BIT_PTA_RXBCN_DIR				BIT(29)

#define BIT_SHIFT_PTA_RXBCN_DUR			20
#define BIT_MASK_PTA_RXBCN_DUR				0x1ff
#define BIT_PTA_RXBCN_DUR(x)				(((x) & BIT_MASK_PTA_RXBCN_DUR) << BIT_SHIFT_PTA_RXBCN_DUR)
#define BITS_PTA_RXBCN_DUR				(BIT_MASK_PTA_RXBCN_DUR << BIT_SHIFT_PTA_RXBCN_DUR)
#define BIT_CLEAR_PTA_RXBCN_DUR(x)			((x) & (~BITS_PTA_RXBCN_DUR))
#define BIT_GET_PTA_RXBCN_DUR(x)			(((x) >> BIT_SHIFT_PTA_RXBCN_DUR) & BIT_MASK_PTA_RXBCN_DUR)
#define BIT_SET_PTA_RXBCN_DUR(x, v)			(BIT_CLEAR_PTA_RXBCN_DUR(x) | BIT_PTA_RXBCN_DUR(v))

#define BIT_SHIFT_PTA_RXBCN_TIME			13
#define BIT_MASK_PTA_RXBCN_TIME			0x7f
#define BIT_PTA_RXBCN_TIME(x)				(((x) & BIT_MASK_PTA_RXBCN_TIME) << BIT_SHIFT_PTA_RXBCN_TIME)
#define BITS_PTA_RXBCN_TIME				(BIT_MASK_PTA_RXBCN_TIME << BIT_SHIFT_PTA_RXBCN_TIME)
#define BIT_CLEAR_PTA_RXBCN_TIME(x)			((x) & (~BITS_PTA_RXBCN_TIME))
#define BIT_GET_PTA_RXBCN_TIME(x)			(((x) >> BIT_SHIFT_PTA_RXBCN_TIME) & BIT_MASK_PTA_RXBCN_TIME)
#define BIT_SET_PTA_RXBCN_TIME(x, v)			(BIT_CLEAR_PTA_RXBCN_TIME(x) | BIT_PTA_RXBCN_TIME(v))

#define BIT_PTA_PRETX_EN				BIT(12)

#define BIT_SHIFT_PTA_PRETX_TIME			0
#define BIT_MASK_PTA_PRETX_TIME			0xfff
#define BIT_PTA_PRETX_TIME(x)				(((x) & BIT_MASK_PTA_PRETX_TIME) << BIT_SHIFT_PTA_PRETX_TIME)
#define BITS_PTA_PRETX_TIME				(BIT_MASK_PTA_PRETX_TIME << BIT_SHIFT_PTA_PRETX_TIME)
#define BIT_CLEAR_PTA_PRETX_TIME(x)			((x) & (~BITS_PTA_PRETX_TIME))
#define BIT_GET_PTA_PRETX_TIME(x)			(((x) >> BIT_SHIFT_PTA_PRETX_TIME) & BIT_MASK_PTA_PRETX_TIME)
#define BIT_SET_PTA_PRETX_TIME(x, v)			(BIT_CLEAR_PTA_PRETX_TIME(x) | BIT_PTA_PRETX_TIME(v))

/* 2 REG_P2P_NOA1_CTRL_STATE			(Offset 0x05BC) */

#define BIT_POWER_STATE_1				BIT(31)
#define BIT_CTWINDOW_ON_1				BIT(30)
#define BIT_BEACON_AREA_ON_1				BIT(29)
#define BIT_CTWIN_EARLY_DISTX_1			BIT(28)
#define BIT_NOA1_OFF_PERIOD_1				BIT(27)
#define BIT_FORCE_DOZE1_1				BIT(26)
#define BIT_NOA0_OFF_PERIOD_1				BIT(25)
#define BIT_FORCE_DOZE0_1				BIT(24)
#define BIT_SPEC_POWER_STATE_1				BIT(23)
#define BIT_SPEC_CTWINDOW_ON_1				BIT(22)
#define BIT_SPEC_BEACON_AREA_ON_1			BIT(21)
#define BIT_SPEC_CTWIN_EARLY_DISTX_1			BIT(20)
#define BIT_SPEC_NOA1_OFF_PERIOD_1			BIT(19)
#define BIT_SPEC_FORCE_DOZE1_1				BIT(18)
#define BIT_SPEC_NOA0_OFF_PERIOD_1			BIT(17)
#define BIT_SPEC_FORCE_DOZE0_1				BIT(16)
#define BIT_P2P_NOA1_ALLSTASLEEP			BIT(7)
#define BIT_P2P_NOA1_DISTX_EN				BIT(6)
#define BIT_P2P_NOA1_PWR_MGT_EN			BIT(5)

#define BIT_SHIFT_P2P_NOA1_EN				3
#define BIT_MASK_P2P_NOA1_EN				0x3
#define BIT_P2P_NOA1_EN(x)				(((x) & BIT_MASK_P2P_NOA1_EN) << BIT_SHIFT_P2P_NOA1_EN)
#define BITS_P2P_NOA1_EN				(BIT_MASK_P2P_NOA1_EN << BIT_SHIFT_P2P_NOA1_EN)
#define BIT_CLEAR_P2P_NOA1_EN(x)			((x) & (~BITS_P2P_NOA1_EN))
#define BIT_GET_P2P_NOA1_EN(x)				(((x) >> BIT_SHIFT_P2P_NOA1_EN) & BIT_MASK_P2P_NOA1_EN)
#define BIT_SET_P2P_NOA1_EN(x, v)			(BIT_CLEAR_P2P_NOA1_EN(x) | BIT_P2P_NOA1_EN(v))

#define BIT_SHIFT_P2P_NOA1_UNIT_SEL			1
#define BIT_MASK_P2P_NOA1_UNIT_SEL			0x3
#define BIT_P2P_NOA1_UNIT_SEL(x)			(((x) & BIT_MASK_P2P_NOA1_UNIT_SEL) << BIT_SHIFT_P2P_NOA1_UNIT_SEL)
#define BITS_P2P_NOA1_UNIT_SEL				(BIT_MASK_P2P_NOA1_UNIT_SEL << BIT_SHIFT_P2P_NOA1_UNIT_SEL)
#define BIT_CLEAR_P2P_NOA1_UNIT_SEL(x)			((x) & (~BITS_P2P_NOA1_UNIT_SEL))
#define BIT_GET_P2P_NOA1_UNIT_SEL(x)			(((x) >> BIT_SHIFT_P2P_NOA1_UNIT_SEL) & BIT_MASK_P2P_NOA1_UNIT_SEL)
#define BIT_SET_P2P_NOA1_UNIT_SEL(x, v)		(BIT_CLEAR_P2P_NOA1_UNIT_SEL(x) | BIT_P2P_NOA1_UNIT_SEL(v))

#define BIT_EN_TSFBIT32_RST_NOA1			BIT(0)

/* 2 REG_ACMHWCTRL				(Offset 0x05C0) */

#define BIT_SHIFT_AVGPERIOD				16
#define BIT_MASK_AVGPERIOD				0xffff
#define BIT_AVGPERIOD(x)				(((x) & BIT_MASK_AVGPERIOD) << BIT_SHIFT_AVGPERIOD)
#define BITS_AVGPERIOD					(BIT_MASK_AVGPERIOD << BIT_SHIFT_AVGPERIOD)
#define BIT_CLEAR_AVGPERIOD(x)				((x) & (~BITS_AVGPERIOD))
#define BIT_GET_AVGPERIOD(x)				(((x) >> BIT_SHIFT_AVGPERIOD) & BIT_MASK_AVGPERIOD)
#define BIT_SET_AVGPERIOD(x, v)			(BIT_CLEAR_AVGPERIOD(x) | BIT_AVGPERIOD(v))

#define BIT_BE_ACM_RESET_USED_TIME			BIT(10)
#define BIT_VI_ACM_RESET_USED_TIME			BIT(9)
#define BIT_VO_ACM_RESET_USED_TIME			BIT(8)
#define BIT_BEQ_ACM_STATUS				BIT(7)
#define BIT_VIQ_ACM_STATUS				BIT(6)
#define BIT_VOQ_ACM_STATUS				BIT(5)
#define BIT_BEQ_ACM_EN					BIT(3)
#define BIT_VIQ_ACM_EN					BIT(2)
#define BIT_VOQ_ACM_EN					BIT(1)
#define BIT_ACMHWEN					BIT(0)

/* 2 REG_VO_VI_ADMTIME			(Offset 0x05C4) */

#define BIT_SHIFT_VI_ADMITTED_TIME			16
#define BIT_MASK_VI_ADMITTED_TIME			0xffff
#define BIT_VI_ADMITTED_TIME(x)			(((x) & BIT_MASK_VI_ADMITTED_TIME) << BIT_SHIFT_VI_ADMITTED_TIME)
#define BITS_VI_ADMITTED_TIME				(BIT_MASK_VI_ADMITTED_TIME << BIT_SHIFT_VI_ADMITTED_TIME)
#define BIT_CLEAR_VI_ADMITTED_TIME(x)			((x) & (~BITS_VI_ADMITTED_TIME))
#define BIT_GET_VI_ADMITTED_TIME(x)			(((x) >> BIT_SHIFT_VI_ADMITTED_TIME) & BIT_MASK_VI_ADMITTED_TIME)
#define BIT_SET_VI_ADMITTED_TIME(x, v)			(BIT_CLEAR_VI_ADMITTED_TIME(x) | BIT_VI_ADMITTED_TIME(v))

#define BIT_SHIFT_VO_ADMITTED_TIME			0
#define BIT_MASK_VO_ADMITTED_TIME			0xffff
#define BIT_VO_ADMITTED_TIME(x)			(((x) & BIT_MASK_VO_ADMITTED_TIME) << BIT_SHIFT_VO_ADMITTED_TIME)
#define BITS_VO_ADMITTED_TIME				(BIT_MASK_VO_ADMITTED_TIME << BIT_SHIFT_VO_ADMITTED_TIME)
#define BIT_CLEAR_VO_ADMITTED_TIME(x)			((x) & (~BITS_VO_ADMITTED_TIME))
#define BIT_GET_VO_ADMITTED_TIME(x)			(((x) >> BIT_SHIFT_VO_ADMITTED_TIME) & BIT_MASK_VO_ADMITTED_TIME)
#define BIT_SET_VO_ADMITTED_TIME(x, v)			(BIT_CLEAR_VO_ADMITTED_TIME(x) | BIT_VO_ADMITTED_TIME(v))

/* 2 REG_BE_ADMTIME				(Offset 0x05C8) */

#define BIT_DIS_NDPA_NAV_CHK				BIT(24)

#define BIT_SHIFT_MHDR_NAV_OFFSET			16
#define BIT_MASK_MHDR_NAV_OFFSET			0xff
#define BIT_MHDR_NAV_OFFSET(x)				(((x) & BIT_MASK_MHDR_NAV_OFFSET) << BIT_SHIFT_MHDR_NAV_OFFSET)
#define BITS_MHDR_NAV_OFFSET				(BIT_MASK_MHDR_NAV_OFFSET << BIT_SHIFT_MHDR_NAV_OFFSET)
#define BIT_CLEAR_MHDR_NAV_OFFSET(x)			((x) & (~BITS_MHDR_NAV_OFFSET))
#define BIT_GET_MHDR_NAV_OFFSET(x)			(((x) >> BIT_SHIFT_MHDR_NAV_OFFSET) & BIT_MASK_MHDR_NAV_OFFSET)
#define BIT_SET_MHDR_NAV_OFFSET(x, v)			(BIT_CLEAR_MHDR_NAV_OFFSET(x) | BIT_MHDR_NAV_OFFSET(v))

#define BIT_SHIFT_BE_ADMITTED_TIME			0
#define BIT_MASK_BE_ADMITTED_TIME			0xffff
#define BIT_BE_ADMITTED_TIME(x)			(((x) & BIT_MASK_BE_ADMITTED_TIME) << BIT_SHIFT_BE_ADMITTED_TIME)
#define BITS_BE_ADMITTED_TIME				(BIT_MASK_BE_ADMITTED_TIME << BIT_SHIFT_BE_ADMITTED_TIME)
#define BIT_CLEAR_BE_ADMITTED_TIME(x)			((x) & (~BITS_BE_ADMITTED_TIME))
#define BIT_GET_BE_ADMITTED_TIME(x)			(((x) >> BIT_SHIFT_BE_ADMITTED_TIME) & BIT_MASK_BE_ADMITTED_TIME)
#define BIT_SET_BE_ADMITTED_TIME(x, v)			(BIT_CLEAR_BE_ADMITTED_TIME(x) | BIT_BE_ADMITTED_TIME(v))

/* 2 REG_NOACMD_SEL_EDCA_RANDOM_GEN		(Offset 0x05CC) */

#define BIT_SHIFT_NOA_SEL				28
#define BIT_MASK_NOA_SEL				0x7
#define BIT_NOA_SEL(x)					(((x) & BIT_MASK_NOA_SEL) << BIT_SHIFT_NOA_SEL)
#define BITS_NOA_SEL					(BIT_MASK_NOA_SEL << BIT_SHIFT_NOA_SEL)
#define BIT_CLEAR_NOA_SEL(x)				((x) & (~BITS_NOA_SEL))
#define BIT_GET_NOA_SEL(x)				(((x) >> BIT_SHIFT_NOA_SEL) & BIT_MASK_NOA_SEL)
#define BIT_SET_NOA_SEL(x, v)				(BIT_CLEAR_NOA_SEL(x) | BIT_NOA_SEL(v))

#define BIT_SHIFT_TXCMD_SEG_SEL			24
#define BIT_MASK_TXCMD_SEG_SEL				0xf
#define BIT_TXCMD_SEG_SEL(x)				(((x) & BIT_MASK_TXCMD_SEG_SEL) << BIT_SHIFT_TXCMD_SEG_SEL)
#define BITS_TXCMD_SEG_SEL				(BIT_MASK_TXCMD_SEG_SEL << BIT_SHIFT_TXCMD_SEG_SEL)
#define BIT_CLEAR_TXCMD_SEG_SEL(x)			((x) & (~BITS_TXCMD_SEG_SEL))
#define BIT_GET_TXCMD_SEG_SEL(x)			(((x) >> BIT_SHIFT_TXCMD_SEG_SEL) & BIT_MASK_TXCMD_SEG_SEL)
#define BIT_SET_TXCMD_SEG_SEL(x, v)			(BIT_CLEAR_TXCMD_SEG_SEL(x) | BIT_TXCMD_SEG_SEL(v))

#define BIT_SHIFT_RANDOM_GEN				0
#define BIT_MASK_RANDOM_GEN				0xffffff
#define BIT_RANDOM_GEN(x)				(((x) & BIT_MASK_RANDOM_GEN) << BIT_SHIFT_RANDOM_GEN)
#define BITS_RANDOM_GEN				(BIT_MASK_RANDOM_GEN << BIT_SHIFT_RANDOM_GEN)
#define BIT_CLEAR_RANDOM_GEN(x)			((x) & (~BITS_RANDOM_GEN))
#define BIT_GET_RANDOM_GEN(x)				(((x) >> BIT_SHIFT_RANDOM_GEN) & BIT_MASK_RANDOM_GEN)
#define BIT_SET_RANDOM_GEN(x, v)			(BIT_CLEAR_RANDOM_GEN(x) | BIT_RANDOM_GEN(v))

/* 2 REG_TXPAUSE_CFG				(Offset 0x05D0) */

#define BIT_SHIFT_TSF_DIFF_P1P2			16
#define BIT_MASK_TSF_DIFF_P1P2				0xffff
#define BIT_TSF_DIFF_P1P2(x)				(((x) & BIT_MASK_TSF_DIFF_P1P2) << BIT_SHIFT_TSF_DIFF_P1P2)
#define BITS_TSF_DIFF_P1P2				(BIT_MASK_TSF_DIFF_P1P2 << BIT_SHIFT_TSF_DIFF_P1P2)
#define BIT_CLEAR_TSF_DIFF_P1P2(x)			((x) & (~BITS_TSF_DIFF_P1P2))
#define BIT_GET_TSF_DIFF_P1P2(x)			(((x) >> BIT_SHIFT_TSF_DIFF_P1P2) & BIT_MASK_TSF_DIFF_P1P2)
#define BIT_SET_TSF_DIFF_P1P2(x, v)			(BIT_CLEAR_TSF_DIFF_P1P2(x) | BIT_TSF_DIFF_P1P2(v))

#define BIT_SHIFT_TXPAUSE1				8
#define BIT_MASK_TXPAUSE1				0xff
#define BIT_TXPAUSE1(x)				(((x) & BIT_MASK_TXPAUSE1) << BIT_SHIFT_TXPAUSE1)
#define BITS_TXPAUSE1					(BIT_MASK_TXPAUSE1 << BIT_SHIFT_TXPAUSE1)
#define BIT_CLEAR_TXPAUSE1(x)				((x) & (~BITS_TXPAUSE1))
#define BIT_GET_TXPAUSE1(x)				(((x) >> BIT_SHIFT_TXPAUSE1) & BIT_MASK_TXPAUSE1)
#define BIT_SET_TXPAUSE1(x, v)				(BIT_CLEAR_TXPAUSE1(x) | BIT_TXPAUSE1(v))

#define BIT_SHIFT_DRVERLYITV_P2			0
#define BIT_MASK_DRVERLYITV_P2				0xff
#define BIT_DRVERLYITV_P2(x)				(((x) & BIT_MASK_DRVERLYITV_P2) << BIT_SHIFT_DRVERLYITV_P2)
#define BITS_DRVERLYITV_P2				(BIT_MASK_DRVERLYITV_P2 << BIT_SHIFT_DRVERLYITV_P2)
#define BIT_CLEAR_DRVERLYITV_P2(x)			((x) & (~BITS_DRVERLYITV_P2))
#define BIT_GET_DRVERLYITV_P2(x)			(((x) >> BIT_SHIFT_DRVERLYITV_P2) & BIT_MASK_DRVERLYITV_P2)
#define BIT_SET_DRVERLYITV_P2(x, v)			(BIT_CLEAR_DRVERLYITV_P2(x) | BIT_DRVERLYITV_P2(v))

/* 2 REG_NAN_SETTING				(Offset 0x05D4) */

#define BIT_EN_MULTI_BCN				BIT(31)
#define BIT_ENP2P_DW_AREA				BIT(30)

#define BIT_SHIFT_TBTT_PROHIBIT_HOLD_P2		18
#define BIT_MASK_TBTT_PROHIBIT_HOLD_P2			0xfff
#define BIT_TBTT_PROHIBIT_HOLD_P2(x)			(((x) & BIT_MASK_TBTT_PROHIBIT_HOLD_P2) << BIT_SHIFT_TBTT_PROHIBIT_HOLD_P2)
#define BITS_TBTT_PROHIBIT_HOLD_P2			(BIT_MASK_TBTT_PROHIBIT_HOLD_P2 << BIT_SHIFT_TBTT_PROHIBIT_HOLD_P2)
#define BIT_CLEAR_TBTT_PROHIBIT_HOLD_P2(x)		((x) & (~BITS_TBTT_PROHIBIT_HOLD_P2))
#define BIT_GET_TBTT_PROHIBIT_HOLD_P2(x)		(((x) >> BIT_SHIFT_TBTT_PROHIBIT_HOLD_P2) & BIT_MASK_TBTT_PROHIBIT_HOLD_P2)
#define BIT_SET_TBTT_PROHIBIT_HOLD_P2(x, v)		(BIT_CLEAR_TBTT_PROHIBIT_HOLD_P2(x) | BIT_TBTT_PROHIBIT_HOLD_P2(v))

#define BIT_SHIFT_BCN_PORT_PRI				16
#define BIT_MASK_BCN_PORT_PRI				0x3
#define BIT_BCN_PORT_PRI(x)				(((x) & BIT_MASK_BCN_PORT_PRI) << BIT_SHIFT_BCN_PORT_PRI)
#define BITS_BCN_PORT_PRI				(BIT_MASK_BCN_PORT_PRI << BIT_SHIFT_BCN_PORT_PRI)
#define BIT_CLEAR_BCN_PORT_PRI(x)			((x) & (~BITS_BCN_PORT_PRI))
#define BIT_GET_BCN_PORT_PRI(x)			(((x) >> BIT_SHIFT_BCN_PORT_PRI) & BIT_MASK_BCN_PORT_PRI)
#define BIT_SET_BCN_PORT_PRI(x, v)			(BIT_CLEAR_BCN_PORT_PRI(x) | BIT_BCN_PORT_PRI(v))

#define BIT_SHIFT_DRVERLYITV_P1			8
#define BIT_MASK_DRVERLYITV_P1				0xff
#define BIT_DRVERLYITV_P1(x)				(((x) & BIT_MASK_DRVERLYITV_P1) << BIT_SHIFT_DRVERLYITV_P1)
#define BITS_DRVERLYITV_P1				(BIT_MASK_DRVERLYITV_P1 << BIT_SHIFT_DRVERLYITV_P1)
#define BIT_CLEAR_DRVERLYITV_P1(x)			((x) & (~BITS_DRVERLYITV_P1))
#define BIT_GET_DRVERLYITV_P1(x)			(((x) >> BIT_SHIFT_DRVERLYITV_P1) & BIT_MASK_DRVERLYITV_P1)
#define BIT_SET_DRVERLYITV_P1(x, v)			(BIT_CLEAR_DRVERLYITV_P1(x) | BIT_DRVERLYITV_P1(v))

#define BIT_P2_RXBCN_RPT_ENABLE			BIT(7)
#define BIT_P2_DIS_RX_BSSID_FIT			BIT(6)
#define BIT_P2_TXBCN_RPT_ENABLE			BIT(5)
#define BIT_P2_DIS_TSF_UDT				BIT(4)
#define BIT_P2_EN_BCN_FUNCTION				BIT(3)
#define BIT_P2_EN_BCN_RPT				BIT(2)
#define BIT_P2_ENP2P_CTWINDOW				BIT(1)
#define BIT_P2_ENP2P_BCNQ_AREA				BIT(0)

/* 2 REG_BCN_SPACE_PORT1_2			(Offset 0x05D8) */

#define BIT_SHIFT_BCN_SPACE4				16
#define BIT_MASK_BCN_SPACE4				0xffff
#define BIT_BCN_SPACE4(x)				(((x) & BIT_MASK_BCN_SPACE4) << BIT_SHIFT_BCN_SPACE4)
#define BITS_BCN_SPACE4				(BIT_MASK_BCN_SPACE4 << BIT_SHIFT_BCN_SPACE4)
#define BIT_CLEAR_BCN_SPACE4(x)			((x) & (~BITS_BCN_SPACE4))
#define BIT_GET_BCN_SPACE4(x)				(((x) >> BIT_SHIFT_BCN_SPACE4) & BIT_MASK_BCN_SPACE4)
#define BIT_SET_BCN_SPACE4(x, v)			(BIT_CLEAR_BCN_SPACE4(x) | BIT_BCN_SPACE4(v))

#define BIT_SHIFT_BCN_SPACE3				0
#define BIT_MASK_BCN_SPACE3				0xffff
#define BIT_BCN_SPACE3(x)				(((x) & BIT_MASK_BCN_SPACE3) << BIT_SHIFT_BCN_SPACE3)
#define BITS_BCN_SPACE3				(BIT_MASK_BCN_SPACE3 << BIT_SHIFT_BCN_SPACE3)
#define BIT_CLEAR_BCN_SPACE3(x)			((x) & (~BITS_BCN_SPACE3))
#define BIT_GET_BCN_SPACE3(x)				(((x) >> BIT_SHIFT_BCN_SPACE3) & BIT_MASK_BCN_SPACE3)
#define BIT_SET_BCN_SPACE3(x, v)			(BIT_CLEAR_BCN_SPACE3(x) | BIT_BCN_SPACE3(v))

/* 2 REG_NAN_SETTING_1			(Offset 0x05DC) */

#define BIT_SHIFT_SYNCBCN_RXNUM			27
#define BIT_MASK_SYNCBCN_RXNUM				0x1f
#define BIT_SYNCBCN_RXNUM(x)				(((x) & BIT_MASK_SYNCBCN_RXNUM) << BIT_SHIFT_SYNCBCN_RXNUM)
#define BITS_SYNCBCN_RXNUM				(BIT_MASK_SYNCBCN_RXNUM << BIT_SHIFT_SYNCBCN_RXNUM)
#define BIT_CLEAR_SYNCBCN_RXNUM(x)			((x) & (~BITS_SYNCBCN_RXNUM))
#define BIT_GET_SYNCBCN_RXNUM(x)			(((x) >> BIT_SHIFT_SYNCBCN_RXNUM) & BIT_MASK_SYNCBCN_RXNUM)
#define BIT_SET_SYNCBCN_RXNUM(x, v)			(BIT_CLEAR_SYNCBCN_RXNUM(x) | BIT_SYNCBCN_RXNUM(v))

#define BIT_DW_END_EARLY				BIT(26)

#define BIT_SHIFT_NAN_ROLE				24
#define BIT_MASK_NAN_ROLE				0x3
#define BIT_NAN_ROLE(x)				(((x) & BIT_MASK_NAN_ROLE) << BIT_SHIFT_NAN_ROLE)
#define BITS_NAN_ROLE					(BIT_MASK_NAN_ROLE << BIT_SHIFT_NAN_ROLE)
#define BIT_CLEAR_NAN_ROLE(x)				((x) & (~BITS_NAN_ROLE))
#define BIT_GET_NAN_ROLE(x)				(((x) >> BIT_SHIFT_NAN_ROLE) & BIT_MASK_NAN_ROLE)
#define BIT_SET_NAN_ROLE(x, v)				(BIT_CLEAR_NAN_ROLE(x) | BIT_NAN_ROLE(v))

#define BIT_SHIFT_MSLOT_EVTQ				16
#define BIT_MASK_MSLOT_EVTQ				0xff
#define BIT_MSLOT_EVTQ(x)				(((x) & BIT_MASK_MSLOT_EVTQ) << BIT_SHIFT_MSLOT_EVTQ)
#define BITS_MSLOT_EVTQ				(BIT_MASK_MSLOT_EVTQ << BIT_SHIFT_MSLOT_EVTQ)
#define BIT_CLEAR_MSLOT_EVTQ(x)			((x) & (~BITS_MSLOT_EVTQ))
#define BIT_GET_MSLOT_EVTQ(x)				(((x) >> BIT_SHIFT_MSLOT_EVTQ) & BIT_MASK_MSLOT_EVTQ)
#define BIT_SET_MSLOT_EVTQ(x, v)			(BIT_CLEAR_MSLOT_EVTQ(x) | BIT_MSLOT_EVTQ(v))

#define BIT_SHIFT_MDW_EVTQ				8
#define BIT_MASK_MDW_EVTQ				0xff
#define BIT_MDW_EVTQ(x)				(((x) & BIT_MASK_MDW_EVTQ) << BIT_SHIFT_MDW_EVTQ)
#define BITS_MDW_EVTQ					(BIT_MASK_MDW_EVTQ << BIT_SHIFT_MDW_EVTQ)
#define BIT_CLEAR_MDW_EVTQ(x)				((x) & (~BITS_MDW_EVTQ))
#define BIT_GET_MDW_EVTQ(x)				(((x) >> BIT_SHIFT_MDW_EVTQ) & BIT_MASK_MDW_EVTQ)
#define BIT_SET_MDW_EVTQ(x, v)				(BIT_CLEAR_MDW_EVTQ(x) | BIT_MDW_EVTQ(v))

#define BIT_SHIFT_EVTQ_EARLY				5
#define BIT_MASK_EVTQ_EARLY				0x7
#define BIT_EVTQ_EARLY(x)				(((x) & BIT_MASK_EVTQ_EARLY) << BIT_SHIFT_EVTQ_EARLY)
#define BITS_EVTQ_EARLY				(BIT_MASK_EVTQ_EARLY << BIT_SHIFT_EVTQ_EARLY)
#define BIT_CLEAR_EVTQ_EARLY(x)			((x) & (~BITS_EVTQ_EARLY))
#define BIT_GET_EVTQ_EARLY(x)				(((x) >> BIT_SHIFT_EVTQ_EARLY) & BIT_MASK_EVTQ_EARLY)
#define BIT_SET_EVTQ_EARLY(x, v)			(BIT_CLEAR_EVTQ_EARLY(x) | BIT_EVTQ_EARLY(v))

/* 2 REG_NOA_PARAM_V1			(Offset 0x05E0) */

#define BIT_SHIFT_NOA_DURATION_V1			0
#define BIT_MASK_NOA_DURATION_V1			0xffffffffL
#define BIT_NOA_DURATION_V1(x)				(((x) & BIT_MASK_NOA_DURATION_V1) << BIT_SHIFT_NOA_DURATION_V1)
#define BITS_NOA_DURATION_V1				(BIT_MASK_NOA_DURATION_V1 << BIT_SHIFT_NOA_DURATION_V1)
#define BIT_CLEAR_NOA_DURATION_V1(x)			((x) & (~BITS_NOA_DURATION_V1))
#define BIT_GET_NOA_DURATION_V1(x)			(((x) >> BIT_SHIFT_NOA_DURATION_V1) & BIT_MASK_NOA_DURATION_V1)
#define BIT_SET_NOA_DURATION_V1(x, v)			(BIT_CLEAR_NOA_DURATION_V1(x) | BIT_NOA_DURATION_V1(v))

/* 2 REG_NOA_PARAM_V2			(Offset 0x05E4) */

#define BIT_SHIFT_NOA_INTERVAL_V2			0
#define BIT_MASK_NOA_INTERVAL_V2			0xffffffffL
#define BIT_NOA_INTERVAL_V2(x)				(((x) & BIT_MASK_NOA_INTERVAL_V2) << BIT_SHIFT_NOA_INTERVAL_V2)
#define BITS_NOA_INTERVAL_V2				(BIT_MASK_NOA_INTERVAL_V2 << BIT_SHIFT_NOA_INTERVAL_V2)
#define BIT_CLEAR_NOA_INTERVAL_V2(x)			((x) & (~BITS_NOA_INTERVAL_V2))
#define BIT_GET_NOA_INTERVAL_V2(x)			(((x) >> BIT_SHIFT_NOA_INTERVAL_V2) & BIT_MASK_NOA_INTERVAL_V2)
#define BIT_SET_NOA_INTERVAL_V2(x, v)			(BIT_CLEAR_NOA_INTERVAL_V2(x) | BIT_NOA_INTERVAL_V2(v))

/* 2 REG_NOA_PARAM_V3			(Offset 0x05E8) */

#define BIT_SHIFT_NOA_START_TIME_V3			0
#define BIT_MASK_NOA_START_TIME_V3			0xffffffffL
#define BIT_NOA_START_TIME_V3(x)			(((x) & BIT_MASK_NOA_START_TIME_V3) << BIT_SHIFT_NOA_START_TIME_V3)
#define BITS_NOA_START_TIME_V3				(BIT_MASK_NOA_START_TIME_V3 << BIT_SHIFT_NOA_START_TIME_V3)
#define BIT_CLEAR_NOA_START_TIME_V3(x)			((x) & (~BITS_NOA_START_TIME_V3))
#define BIT_GET_NOA_START_TIME_V3(x)			(((x) >> BIT_SHIFT_NOA_START_TIME_V3) & BIT_MASK_NOA_START_TIME_V3)
#define BIT_SET_NOA_START_TIME_V3(x, v)		(BIT_CLEAR_NOA_START_TIME_V3(x) | BIT_NOA_START_TIME_V3(v))

/* 2 REG_NOA_PARAM_4				(Offset 0x05EC) */

#define BIT_SYNC_TSFT_2AON_P				BIT(10)

#define BIT_SHIFT_NOA_COUNT_V4				0
#define BIT_MASK_NOA_COUNT_V4				0xff
#define BIT_NOA_COUNT_V4(x)				(((x) & BIT_MASK_NOA_COUNT_V4) << BIT_SHIFT_NOA_COUNT_V4)
#define BITS_NOA_COUNT_V4				(BIT_MASK_NOA_COUNT_V4 << BIT_SHIFT_NOA_COUNT_V4)
#define BIT_CLEAR_NOA_COUNT_V4(x)			((x) & (~BITS_NOA_COUNT_V4))
#define BIT_GET_NOA_COUNT_V4(x)			(((x) >> BIT_SHIFT_NOA_COUNT_V4) & BIT_MASK_NOA_COUNT_V4)
#define BIT_SET_NOA_COUNT_V4(x, v)			(BIT_CLEAR_NOA_COUNT_V4(x) | BIT_NOA_COUNT_V4(v))

#define BIT_SHIFT_AON_TSFT_OFFSET			0
#define BIT_MASK_AON_TSFT_OFFSET			0x3ff
#define BIT_AON_TSFT_OFFSET(x)				(((x) & BIT_MASK_AON_TSFT_OFFSET) << BIT_SHIFT_AON_TSFT_OFFSET)
#define BITS_AON_TSFT_OFFSET				(BIT_MASK_AON_TSFT_OFFSET << BIT_SHIFT_AON_TSFT_OFFSET)
#define BIT_CLEAR_AON_TSFT_OFFSET(x)			((x) & (~BITS_AON_TSFT_OFFSET))
#define BIT_GET_AON_TSFT_OFFSET(x)			(((x) >> BIT_SHIFT_AON_TSFT_OFFSET) & BIT_MASK_AON_TSFT_OFFSET)
#define BIT_SET_AON_TSFT_OFFSET(x, v)			(BIT_CLEAR_AON_TSFT_OFFSET(x) | BIT_AON_TSFT_OFFSET(v))

/* 2 REG_SCHEDULER_DBG			(Offset 0x05F4) */

#define BIT_SHIFT_DBG_SCHEDULER			0
#define BIT_MASK_DBG_SCHEDULER				0xffffffffL
#define BIT_DBG_SCHEDULER(x)				(((x) & BIT_MASK_DBG_SCHEDULER) << BIT_SHIFT_DBG_SCHEDULER)
#define BITS_DBG_SCHEDULER				(BIT_MASK_DBG_SCHEDULER << BIT_SHIFT_DBG_SCHEDULER)
#define BIT_CLEAR_DBG_SCHEDULER(x)			((x) & (~BITS_DBG_SCHEDULER))
#define BIT_GET_DBG_SCHEDULER(x)			(((x) >> BIT_SHIFT_DBG_SCHEDULER) & BIT_MASK_DBG_SCHEDULER)
#define BIT_SET_DBG_SCHEDULER(x, v)			(BIT_CLEAR_DBG_SCHEDULER(x) | BIT_DBG_SCHEDULER(v))

/* 2 REG_SCH_TXCMD				(Offset 0x05F8) */

#define BIT_SHIFT_SCH_TXCMD				0
#define BIT_MASK_SCH_TXCMD				0xffffffffL
#define BIT_SCH_TXCMD(x)				(((x) & BIT_MASK_SCH_TXCMD) << BIT_SHIFT_SCH_TXCMD)
#define BITS_SCH_TXCMD					(BIT_MASK_SCH_TXCMD << BIT_SHIFT_SCH_TXCMD)
#define BIT_CLEAR_SCH_TXCMD(x)				((x) & (~BITS_SCH_TXCMD))
#define BIT_GET_SCH_TXCMD(x)				(((x) >> BIT_SHIFT_SCH_TXCMD) & BIT_MASK_SCH_TXCMD)
#define BIT_SET_SCH_TXCMD(x, v)			(BIT_CLEAR_SCH_TXCMD(x) | BIT_SCH_TXCMD(v))

/* 2 REG_PAGE5_DUMMY				(Offset 0x05FC) */

#define BIT_SHIFT_DUMMY				0
#define BIT_MASK_DUMMY					0xffffffffL
#define BIT_DUMMY(x)					(((x) & BIT_MASK_DUMMY) << BIT_SHIFT_DUMMY)
#define BITS_DUMMY					(BIT_MASK_DUMMY << BIT_SHIFT_DUMMY)
#define BIT_CLEAR_DUMMY(x)				((x) & (~BITS_DUMMY))
#define BIT_GET_DUMMY(x)				(((x) >> BIT_SHIFT_DUMMY) & BIT_MASK_DUMMY)
#define BIT_SET_DUMMY(x, v)				(BIT_CLEAR_DUMMY(x) | BIT_DUMMY(v))

/* 2 REG_WMAC_CR				(Offset 0x0600) */

#define BIT_TXPWR_CTL_CLK_EN				BIT(31)
#define BIT_TXPWR_CTL_ENGCLK				BIT(30)
#define BIT_WMAC_20MHZBW				BIT(26)
#define BIT_WMAC_M11J					BIT(24)
#define BIT_DATA_FW_STS_FILTER				BIT(18)
#define BIT_CTRL_FW_STS_FILTER				BIT(17)
#define BIT_MGNT_FW_STS_FILTER				BIT(16)
#define BIT_FWRX_EN					BIT(15)
#define BIT_PHYSTS_PKT_CTRL				BIT(14)
#define BIT_APPHDR_MIDSRCH_FAIL			BIT(12)
#define BIT_FWPARSING_EN				BIT(11)

#define BIT_SHIFT_APPEND_MHDR_LEN			8
#define BIT_MASK_APPEND_MHDR_LEN			0x7
#define BIT_APPEND_MHDR_LEN(x)				(((x) & BIT_MASK_APPEND_MHDR_LEN) << BIT_SHIFT_APPEND_MHDR_LEN)
#define BITS_APPEND_MHDR_LEN				(BIT_MASK_APPEND_MHDR_LEN << BIT_SHIFT_APPEND_MHDR_LEN)
#define BIT_CLEAR_APPEND_MHDR_LEN(x)			((x) & (~BITS_APPEND_MHDR_LEN))
#define BIT_GET_APPEND_MHDR_LEN(x)			(((x) >> BIT_SHIFT_APPEND_MHDR_LEN) & BIT_MASK_APPEND_MHDR_LEN)
#define BIT_SET_APPEND_MHDR_LEN(x, v)			(BIT_CLEAR_APPEND_MHDR_LEN(x) | BIT_APPEND_MHDR_LEN(v))

#define BIT_APSDOFF					BIT(6)
#define BIT_IC_MACPHY_M				BIT(0)

/* 2 REG_TCR					(Offset 0x0604) */

#define BIT_WMAC_EN_RTS_ADDR				BIT(31)
#define BIT_WMAC_DISABLE_CCK				BIT(30)
#define BIT_WMAC_RAW_LEN				BIT(29)
#define BIT_WMAC_NOTX_IN_RXNDP				BIT(28)
#define BIT_WMAC_EN_EOF				BIT(27)
#define BIT_WMAC_BF_SEL				BIT(26)
#define BIT_WMAC_ANTMODE_SEL				BIT(25)
#define BIT_WMAC_TCRPWRMGT_HWCTL			BIT(24)
#define BIT_WMAC_SMOOTH_VAL				BIT(23)
#define BIT_WMAC_EN_SCRAM_INC				BIT(22)
#define BIT_UNDERFLOWEN_CMPLEN_SEL			BIT(21)
#define BIT_FETCH_MPDU_AFTER_WSECRDY			BIT(20)
#define BIT_WMAC_TCR_EN_20MST				BIT(19)
#define BIT_WMAC_DIS_SIGTA				BIT(18)
#define BIT_WMAC_DIS_A2B0				BIT(17)
#define BIT_WMAC_MSK_SIGBCRC				BIT(16)
#define BIT_WMAC_TCR_ERRSTEN_3				BIT(15)
#define BIT_WMAC_TCR_ERRSTEN_2				BIT(14)
#define BIT_WMAC_TCR_ERRSTEN_1				BIT(13)
#define BIT_WMAC_TCR_ERRSTEN_0				BIT(12)
#define BIT_WMAC_TCR_TXSK_PERPKT			BIT(11)
#define BIT_WMAC_TCR_ICV				BIT(10)
#define BIT_WMAC_CFENDFOR				BIT(9)
#define BIT_WMAC_TCR_CRC				BIT(8)
#define BIT_WMAC_TCR_PWRMGT_CTL			BIT(7)
#define BIT_WMAC_TCR_PWRMGT_VAL			BIT(6)
#define BIT_WMAC_TCR_UPD_TIMIE				BIT(5)
#define BIT_WMAC_TCR_UPD_HGQMD				BIT(4)
#define BIT_WMAC_TCR_VHTSIGA1_TXPS			BIT(3)
#define BIT_WMAC_TCR_PADSEL				BIT(2)
#define BIT_WMAC_TCR_DISGCLK				BIT(1)

/* 2 REG_RCR					(Offset 0x0608) */

#define BIT_APP_FCS					BIT(31)
#define BIT_APP_MIC					BIT(30)
#define BIT_APP_ICV					BIT(29)
#define BIT_APP_PHYSTS					BIT(28)
#define BIT_APP_BASSN					BIT(27)
#define BIT_VHT_DACK					BIT(26)
#define BIT_TCPOFLD_EN					BIT(25)
#define BIT_ENMBID					BIT(24)
#define BIT_LSIGEN					BIT(23)
#define BIT_MFBEN					BIT(22)
#define BIT_DISCHKPPDLLEN				BIT(21)
#define BIT_PKTCTL_DLKEN				BIT(20)
#define BIT_DISGCLK					BIT(19)
#define BIT_TIMPSR_EN					BIT(18)
#define BIT_BCMDINT_EN					BIT(17)
#define BIT_UCMDINT_EN					BIT(16)
#define BIT_RXSK_PERPKT				BIT(15)
#define BIT_HTCBFMC					BIT(14)
#define BIT_CHK_PREVTXA2				BIT(13)
#define BIT_ACK_CBSSID					BIT(12)
#define BIT_CHKTA_MGNT					BIT(11)
#define BIT_DISDECNMYPKT				BIT(10)
#define BIT_AICV					BIT(9)
#define BIT_ACRC32					BIT(8)
#define BIT_CBSSID_MGNT				BIT(7)
#define BIT_CBSSID_DATA				BIT(6)
#define BIT_APWRMGT					BIT(5)
#define BIT_ADD3					BIT(4)
#define BIT_AB						BIT(3)
#define BIT_AM						BIT(2)
#define BIT_APM					BIT(1)
#define BIT_AAP					BIT(0)

/* 2 REG_RXPKT_CTL				(Offset 0x060C) */

#define BIT_APP_PHYSTS_PER_SUBMPDU			BIT(31)
#define BIT_APP_MH_SHIFT_VAL				BIT(30)
#define BIT_WMAC_ENSHIFT				BIT(29)

#define BIT_SHIFT_RX_DRVINFO_SZ			24
#define BIT_MASK_RX_DRVINFO_SZ				0xf
#define BIT_RX_DRVINFO_SZ(x)				(((x) & BIT_MASK_RX_DRVINFO_SZ) << BIT_SHIFT_RX_DRVINFO_SZ)
#define BITS_RX_DRVINFO_SZ				(BIT_MASK_RX_DRVINFO_SZ << BIT_SHIFT_RX_DRVINFO_SZ)
#define BIT_CLEAR_RX_DRVINFO_SZ(x)			((x) & (~BITS_RX_DRVINFO_SZ))
#define BIT_GET_RX_DRVINFO_SZ(x)			(((x) >> BIT_SHIFT_RX_DRVINFO_SZ) & BIT_MASK_RX_DRVINFO_SZ)
#define BIT_SET_RX_DRVINFO_SZ(x, v)			(BIT_CLEAR_RX_DRVINFO_SZ(x) | BIT_RX_DRVINFO_SZ(v))

#define BIT_MBID_EN					BIT(23)

#define BIT_SHIFT_MBID_BCNNO				20
#define BIT_MASK_MBID_BCNNO				0x7
#define BIT_MBID_BCNNO(x)				(((x) & BIT_MASK_MBID_BCNNO) << BIT_SHIFT_MBID_BCNNO)
#define BITS_MBID_BCNNO				(BIT_MASK_MBID_BCNNO << BIT_SHIFT_MBID_BCNNO)
#define BIT_CLEAR_MBID_BCNNO(x)			((x) & (~BITS_MBID_BCNNO))
#define BIT_GET_MBID_BCNNO(x)				(((x) >> BIT_SHIFT_MBID_BCNNO) & BIT_MASK_MBID_BCNNO)
#define BIT_SET_MBID_BCNNO(x, v)			(BIT_CLEAR_MBID_BCNNO(x) | BIT_MBID_BCNNO(v))

#define BIT_SHIFT_RX_DLK_TIME				8
#define BIT_MASK_RX_DLK_TIME				0xff
#define BIT_RX_DLK_TIME(x)				(((x) & BIT_MASK_RX_DLK_TIME) << BIT_SHIFT_RX_DLK_TIME)
#define BITS_RX_DLK_TIME				(BIT_MASK_RX_DLK_TIME << BIT_SHIFT_RX_DLK_TIME)
#define BIT_CLEAR_RX_DLK_TIME(x)			((x) & (~BITS_RX_DLK_TIME))
#define BIT_GET_RX_DLK_TIME(x)				(((x) >> BIT_SHIFT_RX_DLK_TIME) & BIT_MASK_RX_DLK_TIME)
#define BIT_SET_RX_DLK_TIME(x, v)			(BIT_CLEAR_RX_DLK_TIME(x) | BIT_RX_DLK_TIME(v))

#define BIT_SHIFT_RXPKTLMT				0
#define BIT_MASK_RXPKTLMT				0x3f
#define BIT_RXPKTLMT(x)				(((x) & BIT_MASK_RXPKTLMT) << BIT_SHIFT_RXPKTLMT)
#define BITS_RXPKTLMT					(BIT_MASK_RXPKTLMT << BIT_SHIFT_RXPKTLMT)
#define BIT_CLEAR_RXPKTLMT(x)				((x) & (~BITS_RXPKTLMT))
#define BIT_GET_RXPKTLMT(x)				(((x) >> BIT_SHIFT_RXPKTLMT) & BIT_MASK_RXPKTLMT)
#define BIT_SET_RXPKTLMT(x, v)				(BIT_CLEAR_RXPKTLMT(x) | BIT_RXPKTLMT(v))

/* 2 REG_MACID				(Offset 0x0610) */

#define BIT_SHIFT_MACID_V1				0
#define BIT_MASK_MACID_V1				0xffffffffL
#define BIT_MACID_V1(x)				(((x) & BIT_MASK_MACID_V1) << BIT_SHIFT_MACID_V1)
#define BITS_MACID_V1					(BIT_MASK_MACID_V1 << BIT_SHIFT_MACID_V1)
#define BIT_CLEAR_MACID_V1(x)				((x) & (~BITS_MACID_V1))
#define BIT_GET_MACID_V1(x)				(((x) >> BIT_SHIFT_MACID_V1) & BIT_MASK_MACID_V1)
#define BIT_SET_MACID_V1(x, v)				(BIT_CLEAR_MACID_V1(x) | BIT_MACID_V1(v))

/* 2 REG_MACID_H				(Offset 0x0614) */

#define BIT_AP_BSSID_FIT_UC				BIT(21)
#define BIT_EN_PORT4					BIT(20)
#define BIT_EN_PORT3					BIT(19)
#define BIT_EN_PORT2					BIT(18)
#define BIT_EN_PORT1					BIT(17)
#define BIT_EN_PORT0					BIT(16)

#define BIT_SHIFT_MACID_H				0
#define BIT_MASK_MACID_H				0xffff
#define BIT_MACID_H(x)					(((x) & BIT_MASK_MACID_H) << BIT_SHIFT_MACID_H)
#define BITS_MACID_H					(BIT_MASK_MACID_H << BIT_SHIFT_MACID_H)
#define BIT_CLEAR_MACID_H(x)				((x) & (~BITS_MACID_H))
#define BIT_GET_MACID_H(x)				(((x) >> BIT_SHIFT_MACID_H) & BIT_MASK_MACID_H)
#define BIT_SET_MACID_H(x, v)				(BIT_CLEAR_MACID_H(x) | BIT_MACID_H(v))

/* 2 REG_BSSID				(Offset 0x0618) */

#define BIT_SHIFT_BSSID_V1				0
#define BIT_MASK_BSSID_V1				0xffffffffL
#define BIT_BSSID_V1(x)				(((x) & BIT_MASK_BSSID_V1) << BIT_SHIFT_BSSID_V1)
#define BITS_BSSID_V1					(BIT_MASK_BSSID_V1 << BIT_SHIFT_BSSID_V1)
#define BIT_CLEAR_BSSID_V1(x)				((x) & (~BITS_BSSID_V1))
#define BIT_GET_BSSID_V1(x)				(((x) >> BIT_SHIFT_BSSID_V1) & BIT_MASK_BSSID_V1)
#define BIT_SET_BSSID_V1(x, v)				(BIT_CLEAR_BSSID_V1(x) | BIT_BSSID_V1(v))

/* 2 REG_BSSID_H				(Offset 0x061C) */

#define BIT_SHIFT_BSSID_H				0
#define BIT_MASK_BSSID_H				0xffff
#define BIT_BSSID_H(x)					(((x) & BIT_MASK_BSSID_H) << BIT_SHIFT_BSSID_H)
#define BITS_BSSID_H					(BIT_MASK_BSSID_H << BIT_SHIFT_BSSID_H)
#define BIT_CLEAR_BSSID_H(x)				((x) & (~BITS_BSSID_H))
#define BIT_GET_BSSID_H(x)				(((x) >> BIT_SHIFT_BSSID_H) & BIT_MASK_BSSID_H)
#define BIT_SET_BSSID_H(x, v)				(BIT_CLEAR_BSSID_H(x) | BIT_BSSID_H(v))

/* 2 REG_MAR					(Offset 0x0620) */

#define BIT_SHIFT_MAR_V1				0
#define BIT_MASK_MAR_V1				0xffffffffL
#define BIT_MAR_V1(x)					(((x) & BIT_MASK_MAR_V1) << BIT_SHIFT_MAR_V1)
#define BITS_MAR_V1					(BIT_MASK_MAR_V1 << BIT_SHIFT_MAR_V1)
#define BIT_CLEAR_MAR_V1(x)				((x) & (~BITS_MAR_V1))
#define BIT_GET_MAR_V1(x)				(((x) >> BIT_SHIFT_MAR_V1) & BIT_MASK_MAR_V1)
#define BIT_SET_MAR_V1(x, v)				(BIT_CLEAR_MAR_V1(x) | BIT_MAR_V1(v))

/* 2 REG_MAR_H				(Offset 0x0624) */

#define BIT_SHIFT_MAR_H				0
#define BIT_MASK_MAR_H					0xffffffffL
#define BIT_MAR_H(x)					(((x) & BIT_MASK_MAR_H) << BIT_SHIFT_MAR_H)
#define BITS_MAR_H					(BIT_MASK_MAR_H << BIT_SHIFT_MAR_H)
#define BIT_CLEAR_MAR_H(x)				((x) & (~BITS_MAR_H))
#define BIT_GET_MAR_H(x)				(((x) >> BIT_SHIFT_MAR_H) & BIT_MASK_MAR_H)
#define BIT_SET_MAR_H(x, v)				(BIT_CLEAR_MAR_H(x) | BIT_MAR_H(v))

/* 2 REG_MBIDCAMCFG_1			(Offset 0x0628) */

#define BIT_SHIFT_MBIDCAM_WDATA_L			0
#define BIT_MASK_MBIDCAM_WDATA_L			0xffffffffL
#define BIT_MBIDCAM_WDATA_L(x)				(((x) & BIT_MASK_MBIDCAM_WDATA_L) << BIT_SHIFT_MBIDCAM_WDATA_L)
#define BITS_MBIDCAM_WDATA_L				(BIT_MASK_MBIDCAM_WDATA_L << BIT_SHIFT_MBIDCAM_WDATA_L)
#define BIT_CLEAR_MBIDCAM_WDATA_L(x)			((x) & (~BITS_MBIDCAM_WDATA_L))
#define BIT_GET_MBIDCAM_WDATA_L(x)			(((x) >> BIT_SHIFT_MBIDCAM_WDATA_L) & BIT_MASK_MBIDCAM_WDATA_L)
#define BIT_SET_MBIDCAM_WDATA_L(x, v)			(BIT_CLEAR_MBIDCAM_WDATA_L(x) | BIT_MBIDCAM_WDATA_L(v))

/* 2 REG_MBIDCAM_CFG				(Offset 0x062C) */

#define BIT_MBIDCAM_POLL				BIT(31)
#define BIT_MBIDCAM_WT_EN				BIT(30)
#define BIT_MBIDCAM_DA_EN				BIT(29)

#define BIT_SHIFT_MBIDCAM_ADDR_V1			24
#define BIT_MASK_MBIDCAM_ADDR_V1			0x1f
#define BIT_MBIDCAM_ADDR_V1(x)				(((x) & BIT_MASK_MBIDCAM_ADDR_V1) << BIT_SHIFT_MBIDCAM_ADDR_V1)
#define BITS_MBIDCAM_ADDR_V1				(BIT_MASK_MBIDCAM_ADDR_V1 << BIT_SHIFT_MBIDCAM_ADDR_V1)
#define BIT_CLEAR_MBIDCAM_ADDR_V1(x)			((x) & (~BITS_MBIDCAM_ADDR_V1))
#define BIT_GET_MBIDCAM_ADDR_V1(x)			(((x) >> BIT_SHIFT_MBIDCAM_ADDR_V1) & BIT_MASK_MBIDCAM_ADDR_V1)
#define BIT_SET_MBIDCAM_ADDR_V1(x, v)			(BIT_CLEAR_MBIDCAM_ADDR_V1(x) | BIT_MBIDCAM_ADDR_V1(v))

#define BIT_MBIDCAM_VALID				BIT(23)
#define BIT_LSIC_TXOP_EN				BIT(17)
#define BIT_CTS_EN					BIT(16)

#define BIT_SHIFT_MBIDCAM_RWDATA_H			0
#define BIT_MASK_MBIDCAM_RWDATA_H			0xffff
#define BIT_MBIDCAM_RWDATA_H(x)			(((x) & BIT_MASK_MBIDCAM_RWDATA_H) << BIT_SHIFT_MBIDCAM_RWDATA_H)
#define BITS_MBIDCAM_RWDATA_H				(BIT_MASK_MBIDCAM_RWDATA_H << BIT_SHIFT_MBIDCAM_RWDATA_H)
#define BIT_CLEAR_MBIDCAM_RWDATA_H(x)			((x) & (~BITS_MBIDCAM_RWDATA_H))
#define BIT_GET_MBIDCAM_RWDATA_H(x)			(((x) >> BIT_SHIFT_MBIDCAM_RWDATA_H) & BIT_MASK_MBIDCAM_RWDATA_H)
#define BIT_SET_MBIDCAM_RWDATA_H(x, v)			(BIT_CLEAR_MBIDCAM_RWDATA_H(x) | BIT_MBIDCAM_RWDATA_H(v))

/* 2 REG_WMAC_TCR_CTL			(Offset 0x0630) */

#define BIT_SHIFT_ZLD_NUM				24
#define BIT_MASK_ZLD_NUM				0xff
#define BIT_ZLD_NUM(x)					(((x) & BIT_MASK_ZLD_NUM) << BIT_SHIFT_ZLD_NUM)
#define BITS_ZLD_NUM					(BIT_MASK_ZLD_NUM << BIT_SHIFT_ZLD_NUM)
#define BIT_CLEAR_ZLD_NUM(x)				((x) & (~BITS_ZLD_NUM))
#define BIT_GET_ZLD_NUM(x)				(((x) >> BIT_SHIFT_ZLD_NUM) & BIT_MASK_ZLD_NUM)
#define BIT_SET_ZLD_NUM(x, v)				(BIT_CLEAR_ZLD_NUM(x) | BIT_ZLD_NUM(v))

#define BIT_UDF_THSD_V1				BIT(23)

#define BIT_SHIFT_UDF_THSD_VALUE			16
#define BIT_MASK_UDF_THSD_VALUE			0x7f
#define BIT_UDF_THSD_VALUE(x)				(((x) & BIT_MASK_UDF_THSD_VALUE) << BIT_SHIFT_UDF_THSD_VALUE)
#define BITS_UDF_THSD_VALUE				(BIT_MASK_UDF_THSD_VALUE << BIT_SHIFT_UDF_THSD_VALUE)
#define BIT_CLEAR_UDF_THSD_VALUE(x)			((x) & (~BITS_UDF_THSD_VALUE))
#define BIT_GET_UDF_THSD_VALUE(x)			(((x) >> BIT_SHIFT_UDF_THSD_VALUE) & BIT_MASK_UDF_THSD_VALUE)
#define BIT_SET_UDF_THSD_VALUE(x, v)			(BIT_CLEAR_UDF_THSD_VALUE(x) | BIT_UDF_THSD_VALUE(v))

#define BIT_SHIFT_WMAC_TCR_TSFT_OFS			0
#define BIT_MASK_WMAC_TCR_TSFT_OFS			0xffff
#define BIT_WMAC_TCR_TSFT_OFS(x)			(((x) & BIT_MASK_WMAC_TCR_TSFT_OFS) << BIT_SHIFT_WMAC_TCR_TSFT_OFS)
#define BITS_WMAC_TCR_TSFT_OFS				(BIT_MASK_WMAC_TCR_TSFT_OFS << BIT_SHIFT_WMAC_TCR_TSFT_OFS)
#define BIT_CLEAR_WMAC_TCR_TSFT_OFS(x)			((x) & (~BITS_WMAC_TCR_TSFT_OFS))
#define BIT_GET_WMAC_TCR_TSFT_OFS(x)			(((x) >> BIT_SHIFT_WMAC_TCR_TSFT_OFS) & BIT_MASK_WMAC_TCR_TSFT_OFS)
#define BIT_SET_WMAC_TCR_TSFT_OFS(x, v)		(BIT_CLEAR_WMAC_TCR_TSFT_OFS(x) | BIT_WMAC_TCR_TSFT_OFS(v))

/* 2 REG_STMP_THSD				(Offset 0x0634) */

#define BIT_SHIFT_WMAC_TCR_E_TSFT_OFS			8
#define BIT_MASK_WMAC_TCR_E_TSFT_OFS			0xff
#define BIT_WMAC_TCR_E_TSFT_OFS(x)			(((x) & BIT_MASK_WMAC_TCR_E_TSFT_OFS) << BIT_SHIFT_WMAC_TCR_E_TSFT_OFS)
#define BITS_WMAC_TCR_E_TSFT_OFS			(BIT_MASK_WMAC_TCR_E_TSFT_OFS << BIT_SHIFT_WMAC_TCR_E_TSFT_OFS)
#define BIT_CLEAR_WMAC_TCR_E_TSFT_OFS(x)		((x) & (~BITS_WMAC_TCR_E_TSFT_OFS))
#define BIT_GET_WMAC_TCR_E_TSFT_OFS(x)			(((x) >> BIT_SHIFT_WMAC_TCR_E_TSFT_OFS) & BIT_MASK_WMAC_TCR_E_TSFT_OFS)
#define BIT_SET_WMAC_TCR_E_TSFT_OFS(x, v)		(BIT_CLEAR_WMAC_TCR_E_TSFT_OFS(x) | BIT_WMAC_TCR_E_TSFT_OFS(v))

#define BIT_SHIFT_STMP_THSD				0
#define BIT_MASK_STMP_THSD				0xff
#define BIT_STMP_THSD(x)				(((x) & BIT_MASK_STMP_THSD) << BIT_SHIFT_STMP_THSD)
#define BITS_STMP_THSD					(BIT_MASK_STMP_THSD << BIT_SHIFT_STMP_THSD)
#define BIT_CLEAR_STMP_THSD(x)				((x) & (~BITS_STMP_THSD))
#define BIT_GET_STMP_THSD(x)				(((x) >> BIT_SHIFT_STMP_THSD) & BIT_MASK_STMP_THSD)
#define BIT_SET_STMP_THSD(x, v)			(BIT_CLEAR_STMP_THSD(x) | BIT_STMP_THSD(v))

/* 2 REG_USTIME_EDCA				(Offset 0x0638) */

#define BIT_SHIFT_SPEC_SIFS_OFDM			24
#define BIT_MASK_SPEC_SIFS_OFDM			0xff
#define BIT_SPEC_SIFS_OFDM(x)				(((x) & BIT_MASK_SPEC_SIFS_OFDM) << BIT_SHIFT_SPEC_SIFS_OFDM)
#define BITS_SPEC_SIFS_OFDM				(BIT_MASK_SPEC_SIFS_OFDM << BIT_SHIFT_SPEC_SIFS_OFDM)
#define BIT_CLEAR_SPEC_SIFS_OFDM(x)			((x) & (~BITS_SPEC_SIFS_OFDM))
#define BIT_GET_SPEC_SIFS_OFDM(x)			(((x) >> BIT_SHIFT_SPEC_SIFS_OFDM) & BIT_MASK_SPEC_SIFS_OFDM)
#define BIT_SET_SPEC_SIFS_OFDM(x, v)			(BIT_CLEAR_SPEC_SIFS_OFDM(x) | BIT_SPEC_SIFS_OFDM(v))

#define BIT_SHIFT_SPEC_SIFS_CCK			16
#define BIT_MASK_SPEC_SIFS_CCK				0xff
#define BIT_SPEC_SIFS_CCK(x)				(((x) & BIT_MASK_SPEC_SIFS_CCK) << BIT_SHIFT_SPEC_SIFS_CCK)
#define BITS_SPEC_SIFS_CCK				(BIT_MASK_SPEC_SIFS_CCK << BIT_SHIFT_SPEC_SIFS_CCK)
#define BIT_CLEAR_SPEC_SIFS_CCK(x)			((x) & (~BITS_SPEC_SIFS_CCK))
#define BIT_GET_SPEC_SIFS_CCK(x)			(((x) >> BIT_SHIFT_SPEC_SIFS_CCK) & BIT_MASK_SPEC_SIFS_CCK)
#define BIT_SET_SPEC_SIFS_CCK(x, v)			(BIT_CLEAR_SPEC_SIFS_CCK(x) | BIT_SPEC_SIFS_CCK(v))

#define BIT_SHIFT_USTIME_EDCA				0
#define BIT_MASK_USTIME_EDCA				0xff
#define BIT_USTIME_EDCA(x)				(((x) & BIT_MASK_USTIME_EDCA) << BIT_SHIFT_USTIME_EDCA)
#define BITS_USTIME_EDCA				(BIT_MASK_USTIME_EDCA << BIT_SHIFT_USTIME_EDCA)
#define BIT_CLEAR_USTIME_EDCA(x)			((x) & (~BITS_USTIME_EDCA))
#define BIT_GET_USTIME_EDCA(x)				(((x) >> BIT_SHIFT_USTIME_EDCA) & BIT_MASK_USTIME_EDCA)
#define BIT_SET_USTIME_EDCA(x, v)			(BIT_CLEAR_USTIME_EDCA(x) | BIT_USTIME_EDCA(v))

/* 2 REG_RESP_SIFS_CCK			(Offset 0x063C) */

#define BIT_SHIFT_ACKTO_CCK				12
#define BIT_MASK_ACKTO_CCK				0xfff
#define BIT_ACKTO_CCK(x)				(((x) & BIT_MASK_ACKTO_CCK) << BIT_SHIFT_ACKTO_CCK)
#define BITS_ACKTO_CCK					(BIT_MASK_ACKTO_CCK << BIT_SHIFT_ACKTO_CCK)
#define BIT_CLEAR_ACKTO_CCK(x)				((x) & (~BITS_ACKTO_CCK))
#define BIT_GET_ACKTO_CCK(x)				(((x) >> BIT_SHIFT_ACKTO_CCK) & BIT_MASK_ACKTO_CCK)
#define BIT_SET_ACKTO_CCK(x, v)			(BIT_CLEAR_ACKTO_CCK(x) | BIT_ACKTO_CCK(v))

#define BIT_SHIFT_ACKTO_OFDM				0
#define BIT_MASK_ACKTO_OFDM				0xfff
#define BIT_ACKTO_OFDM(x)				(((x) & BIT_MASK_ACKTO_OFDM) << BIT_SHIFT_ACKTO_OFDM)
#define BITS_ACKTO_OFDM				(BIT_MASK_ACKTO_OFDM << BIT_SHIFT_ACKTO_OFDM)
#define BIT_CLEAR_ACKTO_OFDM(x)			((x) & (~BITS_ACKTO_OFDM))
#define BIT_GET_ACKTO_OFDM(x)				(((x) >> BIT_SHIFT_ACKTO_OFDM) & BIT_MASK_ACKTO_OFDM)
#define BIT_SET_ACKTO_OFDM(x, v)			(BIT_CLEAR_ACKTO_OFDM(x) | BIT_ACKTO_OFDM(v))

/* 2 REG_ACKTO				(Offset 0x0640) */

#define BIT_SHIFT_EIFS					16
#define BIT_MASK_EIFS					0xffff
#define BIT_EIFS(x)					(((x) & BIT_MASK_EIFS) << BIT_SHIFT_EIFS)
#define BITS_EIFS					(BIT_MASK_EIFS << BIT_SHIFT_EIFS)
#define BIT_CLEAR_EIFS(x)				((x) & (~BITS_EIFS))
#define BIT_GET_EIFS(x)				(((x) >> BIT_SHIFT_EIFS) & BIT_MASK_EIFS)
#define BIT_SET_EIFS(x, v)				(BIT_CLEAR_EIFS(x) | BIT_EIFS(v))

#define BIT_SHIFT_CTS2TO				0
#define BIT_MASK_CTS2TO				0xfff
#define BIT_CTS2TO(x)					(((x) & BIT_MASK_CTS2TO) << BIT_SHIFT_CTS2TO)
#define BITS_CTS2TO					(BIT_MASK_CTS2TO << BIT_SHIFT_CTS2TO)
#define BIT_CLEAR_CTS2TO(x)				((x) & (~BITS_CTS2TO))
#define BIT_GET_CTS2TO(x)				(((x) >> BIT_SHIFT_CTS2TO) & BIT_MASK_CTS2TO)
#define BIT_SET_CTS2TO(x, v)				(BIT_CLEAR_CTS2TO(x) | BIT_CTS2TO(v))

/* 2 REG_RPFM_MAP				(Offset 0x0644) */

#define BIT_SHIFT_PRFM_MAP1				16
#define BIT_MASK_PRFM_MAP1				0xffff
#define BIT_PRFM_MAP1(x)				(((x) & BIT_MASK_PRFM_MAP1) << BIT_SHIFT_PRFM_MAP1)
#define BITS_PRFM_MAP1					(BIT_MASK_PRFM_MAP1 << BIT_SHIFT_PRFM_MAP1)
#define BIT_CLEAR_PRFM_MAP1(x)				((x) & (~BITS_PRFM_MAP1))
#define BIT_GET_PRFM_MAP1(x)				(((x) >> BIT_SHIFT_PRFM_MAP1) & BIT_MASK_PRFM_MAP1)
#define BIT_SET_PRFM_MAP1(x, v)			(BIT_CLEAR_PRFM_MAP1(x) | BIT_PRFM_MAP1(v))

#define BIT_SHIFT_PRFM_MAP0				0
#define BIT_MASK_PRFM_MAP0				0xffff
#define BIT_PRFM_MAP0(x)				(((x) & BIT_MASK_PRFM_MAP0) << BIT_SHIFT_PRFM_MAP0)
#define BITS_PRFM_MAP0					(BIT_MASK_PRFM_MAP0 << BIT_SHIFT_PRFM_MAP0)
#define BIT_CLEAR_PRFM_MAP0(x)				((x) & (~BITS_PRFM_MAP0))
#define BIT_GET_PRFM_MAP0(x)				(((x) >> BIT_SHIFT_PRFM_MAP0) & BIT_MASK_PRFM_MAP0)
#define BIT_SET_PRFM_MAP0(x, v)			(BIT_CLEAR_PRFM_MAP0(x) | BIT_PRFM_MAP0(v))

/* 2 REG_RPFMCAM_CMD				(Offset 0x0648) */

#define BIT_RPFMCAM_WE					BIT(16)

#define BIT_SHIFT_RPFMCAM_ADD				0
#define BIT_MASK_RPFMCAM_ADD				0x7f
#define BIT_RPFMCAM_ADD(x)				(((x) & BIT_MASK_RPFMCAM_ADD) << BIT_SHIFT_RPFMCAM_ADD)
#define BITS_RPFMCAM_ADD				(BIT_MASK_RPFMCAM_ADD << BIT_SHIFT_RPFMCAM_ADD)
#define BIT_CLEAR_RPFMCAM_ADD(x)			((x) & (~BITS_RPFMCAM_ADD))
#define BIT_GET_RPFMCAM_ADD(x)				(((x) >> BIT_SHIFT_RPFMCAM_ADD) & BIT_MASK_RPFMCAM_ADD)
#define BIT_SET_RPFMCAM_ADD(x, v)			(BIT_CLEAR_RPFMCAM_ADD(x) | BIT_RPFMCAM_ADD(v))

/* 2 REG_RPFMCAM_WD				(Offset 0x064C) */

#define BIT_SHIFT_RPFMCAM_WD				0
#define BIT_MASK_RPFMCAM_WD				0xffffffffL
#define BIT_RPFMCAM_WD(x)				(((x) & BIT_MASK_RPFMCAM_WD) << BIT_SHIFT_RPFMCAM_WD)
#define BITS_RPFMCAM_WD				(BIT_MASK_RPFMCAM_WD << BIT_SHIFT_RPFMCAM_WD)
#define BIT_CLEAR_RPFMCAM_WD(x)			((x) & (~BITS_RPFMCAM_WD))
#define BIT_GET_RPFMCAM_WD(x)				(((x) >> BIT_SHIFT_RPFMCAM_WD) & BIT_MASK_RPFMCAM_WD)
#define BIT_SET_RPFMCAM_WD(x, v)			(BIT_CLEAR_RPFMCAM_WD(x) | BIT_RPFMCAM_WD(v))

/* 2 REG_NAV_THRSHOLD			(Offset 0x0650) */

#define BIT_SHIFT_NAV_UPBDY				16
#define BIT_MASK_NAV_UPBDY				0xff
#define BIT_NAV_UPBDY(x)				(((x) & BIT_MASK_NAV_UPBDY) << BIT_SHIFT_NAV_UPBDY)
#define BITS_NAV_UPBDY					(BIT_MASK_NAV_UPBDY << BIT_SHIFT_NAV_UPBDY)
#define BIT_CLEAR_NAV_UPBDY(x)				((x) & (~BITS_NAV_UPBDY))
#define BIT_GET_NAV_UPBDY(x)				(((x) >> BIT_SHIFT_NAV_UPBDY) & BIT_MASK_NAV_UPBDY)
#define BIT_SET_NAV_UPBDY(x, v)			(BIT_CLEAR_NAV_UPBDY(x) | BIT_NAV_UPBDY(v))

#define BIT_SHIFT_RXMYRTS_NAV				8
#define BIT_MASK_RXMYRTS_NAV				0xf
#define BIT_RXMYRTS_NAV(x)				(((x) & BIT_MASK_RXMYRTS_NAV) << BIT_SHIFT_RXMYRTS_NAV)
#define BITS_RXMYRTS_NAV				(BIT_MASK_RXMYRTS_NAV << BIT_SHIFT_RXMYRTS_NAV)
#define BIT_CLEAR_RXMYRTS_NAV(x)			((x) & (~BITS_RXMYRTS_NAV))
#define BIT_GET_RXMYRTS_NAV(x)				(((x) >> BIT_SHIFT_RXMYRTS_NAV) & BIT_MASK_RXMYRTS_NAV)
#define BIT_SET_RXMYRTS_NAV(x, v)			(BIT_CLEAR_RXMYRTS_NAV(x) | BIT_RXMYRTS_NAV(v))

#define BIT_SHIFT_RTS_RST_DUR				0
#define BIT_MASK_RTS_RST_DUR				0xff
#define BIT_RTS_RST_DUR(x)				(((x) & BIT_MASK_RTS_RST_DUR) << BIT_SHIFT_RTS_RST_DUR)
#define BITS_RTS_RST_DUR				(BIT_MASK_RTS_RST_DUR << BIT_SHIFT_RTS_RST_DUR)
#define BIT_CLEAR_RTS_RST_DUR(x)			((x) & (~BITS_RTS_RST_DUR))
#define BIT_GET_RTS_RST_DUR(x)				(((x) >> BIT_SHIFT_RTS_RST_DUR) & BIT_MASK_RTS_RST_DUR)
#define BIT_SET_RTS_RST_DUR(x, v)			(BIT_CLEAR_RTS_RST_DUR(x) | BIT_RTS_RST_DUR(v))

/* 2 REG_BACAMCMD				(Offset 0x0654) */

#define BIT_BACAM_POLL					BIT(31)
#define BIT_BACAM_RST					BIT(17)
#define BIT_BACAM_RW					BIT(16)

#define BIT_SHIFT_TXSBMPMOD				14
#define BIT_MASK_TXSBMPMOD				0x3
#define BIT_TXSBMPMOD(x)				(((x) & BIT_MASK_TXSBMPMOD) << BIT_SHIFT_TXSBMPMOD)
#define BITS_TXSBMPMOD					(BIT_MASK_TXSBMPMOD << BIT_SHIFT_TXSBMPMOD)
#define BIT_CLEAR_TXSBMPMOD(x)				((x) & (~BITS_TXSBMPMOD))
#define BIT_GET_TXSBMPMOD(x)				(((x) >> BIT_SHIFT_TXSBMPMOD) & BIT_MASK_TXSBMPMOD)
#define BIT_SET_TXSBMPMOD(x, v)			(BIT_CLEAR_TXSBMPMOD(x) | BIT_TXSBMPMOD(v))

#define BIT_RXBACAM_DA_EN				BIT(13)

#define BIT_SHIFT_BACAM_AD				0
#define BIT_MASK_BACAM_AD				0x3f
#define BIT_BACAM_AD(x)				(((x) & BIT_MASK_BACAM_AD) << BIT_SHIFT_BACAM_AD)
#define BITS_BACAM_AD					(BIT_MASK_BACAM_AD << BIT_SHIFT_BACAM_AD)
#define BIT_CLEAR_BACAM_AD(x)				((x) & (~BITS_BACAM_AD))
#define BIT_GET_BACAM_AD(x)				(((x) >> BIT_SHIFT_BACAM_AD) & BIT_MASK_BACAM_AD)
#define BIT_SET_BACAM_AD(x, v)				(BIT_CLEAR_BACAM_AD(x) | BIT_BACAM_AD(v))

/* 2 REG_BACAM_WD				(Offset 0x0658) */

#define BIT_SHIFT_BA_CONTENT_L				0
#define BIT_MASK_BA_CONTENT_L				0xffffffffL
#define BIT_BA_CONTENT_L(x)				(((x) & BIT_MASK_BA_CONTENT_L) << BIT_SHIFT_BA_CONTENT_L)
#define BITS_BA_CONTENT_L				(BIT_MASK_BA_CONTENT_L << BIT_SHIFT_BA_CONTENT_L)
#define BIT_CLEAR_BA_CONTENT_L(x)			((x) & (~BITS_BA_CONTENT_L))
#define BIT_GET_BA_CONTENT_L(x)			(((x) >> BIT_SHIFT_BA_CONTENT_L) & BIT_MASK_BA_CONTENT_L)
#define BIT_SET_BA_CONTENT_L(x, v)			(BIT_CLEAR_BA_CONTENT_L(x) | BIT_BA_CONTENT_L(v))

/* 2 REG_BACAM_WD_H				(Offset 0x065C) */

#define BIT_SHIFT_BA_CONTENT_H				0
#define BIT_MASK_BA_CONTENT_H				0xffffffffL
#define BIT_BA_CONTENT_H(x)				(((x) & BIT_MASK_BA_CONTENT_H) << BIT_SHIFT_BA_CONTENT_H)
#define BITS_BA_CONTENT_H				(BIT_MASK_BA_CONTENT_H << BIT_SHIFT_BA_CONTENT_H)
#define BIT_CLEAR_BA_CONTENT_H(x)			((x) & (~BITS_BA_CONTENT_H))
#define BIT_GET_BA_CONTENT_H(x)			(((x) >> BIT_SHIFT_BA_CONTENT_H) & BIT_MASK_BA_CONTENT_H)
#define BIT_SET_BA_CONTENT_H(x, v)			(BIT_CLEAR_BA_CONTENT_H(x) | BIT_BA_CONTENT_H(v))

/* 2 REG_LBK_DLY				(Offset 0x0660) */

#define BIT_BITMAP_FLAG_VO				BIT(31)
#define BIT_BITMAP_FLAG_VI				BIT(30)
#define BIT_BITMAP_FLAG_BE				BIT(29)
#define BIT_BITMAP_FLAG_BK				BIT(28)

#define BIT_SHIFT_BITMAP_CONDITION			26
#define BIT_MASK_BITMAP_CONDITION			0x3
#define BIT_BITMAP_CONDITION(x)			(((x) & BIT_MASK_BITMAP_CONDITION) << BIT_SHIFT_BITMAP_CONDITION)
#define BITS_BITMAP_CONDITION				(BIT_MASK_BITMAP_CONDITION << BIT_SHIFT_BITMAP_CONDITION)
#define BIT_CLEAR_BITMAP_CONDITION(x)			((x) & (~BITS_BITMAP_CONDITION))
#define BIT_GET_BITMAP_CONDITION(x)			(((x) >> BIT_SHIFT_BITMAP_CONDITION) & BIT_MASK_BITMAP_CONDITION)
#define BIT_SET_BITMAP_CONDITION(x, v)			(BIT_CLEAR_BITMAP_CONDITION(x) | BIT_BITMAP_CONDITION(v))

#define BIT_BITMAP_SSNBK_COUNTER_CLR			BIT(25)
#define BIT_BITMAP_FORCE				BIT(24)

#define BIT_SHIFT_RXPKT_TYPE				18
#define BIT_MASK_RXPKT_TYPE				0x3f
#define BIT_RXPKT_TYPE(x)				(((x) & BIT_MASK_RXPKT_TYPE) << BIT_SHIFT_RXPKT_TYPE)
#define BITS_RXPKT_TYPE				(BIT_MASK_RXPKT_TYPE << BIT_SHIFT_RXPKT_TYPE)
#define BIT_CLEAR_RXPKT_TYPE(x)			((x) & (~BITS_RXPKT_TYPE))
#define BIT_GET_RXPKT_TYPE(x)				(((x) >> BIT_SHIFT_RXPKT_TYPE) & BIT_MASK_RXPKT_TYPE)
#define BIT_SET_RXPKT_TYPE(x, v)			(BIT_CLEAR_RXPKT_TYPE(x) | BIT_RXPKT_TYPE(v))

#define BIT_TXACT_IND					BIT(17)
#define BIT_RXACT_IND					BIT(16)

#define BIT_SHIFT_BITMAP_SSNBK_COUNTER			10
#define BIT_MASK_BITMAP_SSNBK_COUNTER			0x3f
#define BIT_BITMAP_SSNBK_COUNTER(x)			(((x) & BIT_MASK_BITMAP_SSNBK_COUNTER) << BIT_SHIFT_BITMAP_SSNBK_COUNTER)
#define BITS_BITMAP_SSNBK_COUNTER			(BIT_MASK_BITMAP_SSNBK_COUNTER << BIT_SHIFT_BITMAP_SSNBK_COUNTER)
#define BIT_CLEAR_BITMAP_SSNBK_COUNTER(x)		((x) & (~BITS_BITMAP_SSNBK_COUNTER))
#define BIT_GET_BITMAP_SSNBK_COUNTER(x)		(((x) >> BIT_SHIFT_BITMAP_SSNBK_COUNTER) & BIT_MASK_BITMAP_SSNBK_COUNTER)
#define BIT_SET_BITMAP_SSNBK_COUNTER(x, v)		(BIT_CLEAR_BITMAP_SSNBK_COUNTER(x) | BIT_BITMAP_SSNBK_COUNTER(v))

#define BIT_BITMAP_EN					BIT(9)
#define BIT_BACAM_RPMEN				BIT(8)

#define BIT_SHIFT_LBK_DLY				0
#define BIT_MASK_LBK_DLY				0x1f
#define BIT_LBK_DLY(x)					(((x) & BIT_MASK_LBK_DLY) << BIT_SHIFT_LBK_DLY)
#define BITS_LBK_DLY					(BIT_MASK_LBK_DLY << BIT_SHIFT_LBK_DLY)
#define BIT_CLEAR_LBK_DLY(x)				((x) & (~BITS_LBK_DLY))
#define BIT_GET_LBK_DLY(x)				(((x) >> BIT_SHIFT_LBK_DLY) & BIT_MASK_LBK_DLY)
#define BIT_SET_LBK_DLY(x, v)				(BIT_CLEAR_LBK_DLY(x) | BIT_LBK_DLY(v))

/* 2 REG_RXERR_RPT				(Offset 0x0664) */

#define BIT_SHIFT_RXERR_RPT_SEL_V1_3_0			28
#define BIT_MASK_RXERR_RPT_SEL_V1_3_0			0xf
#define BIT_RXERR_RPT_SEL_V1_3_0(x)			(((x) & BIT_MASK_RXERR_RPT_SEL_V1_3_0) << BIT_SHIFT_RXERR_RPT_SEL_V1_3_0)
#define BITS_RXERR_RPT_SEL_V1_3_0			(BIT_MASK_RXERR_RPT_SEL_V1_3_0 << BIT_SHIFT_RXERR_RPT_SEL_V1_3_0)
#define BIT_CLEAR_RXERR_RPT_SEL_V1_3_0(x)		((x) & (~BITS_RXERR_RPT_SEL_V1_3_0))
#define BIT_GET_RXERR_RPT_SEL_V1_3_0(x)		(((x) >> BIT_SHIFT_RXERR_RPT_SEL_V1_3_0) & BIT_MASK_RXERR_RPT_SEL_V1_3_0)
#define BIT_SET_RXERR_RPT_SEL_V1_3_0(x, v)		(BIT_CLEAR_RXERR_RPT_SEL_V1_3_0(x) | BIT_RXERR_RPT_SEL_V1_3_0(v))

#define BIT_RXERR_RPT_RST				BIT(27)
#define BIT_RXERR_RPT_SEL_V1_4				BIT(26)
#define BIT_RXERR_RPT_SEL_V1_5				BIT(25)
#define BIT_UD_SELECT_BSSID_1				BIT(24)
#define BIT_W1S					BIT(23)
#define BIT_UD_SELECT_BSSID_0				BIT(22)

#define BIT_SHIFT_UD_SUB_TYPE				18
#define BIT_MASK_UD_SUB_TYPE				0xf
#define BIT_UD_SUB_TYPE(x)				(((x) & BIT_MASK_UD_SUB_TYPE) << BIT_SHIFT_UD_SUB_TYPE)
#define BITS_UD_SUB_TYPE				(BIT_MASK_UD_SUB_TYPE << BIT_SHIFT_UD_SUB_TYPE)
#define BIT_CLEAR_UD_SUB_TYPE(x)			((x) & (~BITS_UD_SUB_TYPE))
#define BIT_GET_UD_SUB_TYPE(x)				(((x) >> BIT_SHIFT_UD_SUB_TYPE) & BIT_MASK_UD_SUB_TYPE)
#define BIT_SET_UD_SUB_TYPE(x, v)			(BIT_CLEAR_UD_SUB_TYPE(x) | BIT_UD_SUB_TYPE(v))

#define BIT_SHIFT_UD_TYPE				16
#define BIT_MASK_UD_TYPE				0x3
#define BIT_UD_TYPE(x)					(((x) & BIT_MASK_UD_TYPE) << BIT_SHIFT_UD_TYPE)
#define BITS_UD_TYPE					(BIT_MASK_UD_TYPE << BIT_SHIFT_UD_TYPE)
#define BIT_CLEAR_UD_TYPE(x)				((x) & (~BITS_UD_TYPE))
#define BIT_GET_UD_TYPE(x)				(((x) >> BIT_SHIFT_UD_TYPE) & BIT_MASK_UD_TYPE)
#define BIT_SET_UD_TYPE(x, v)				(BIT_CLEAR_UD_TYPE(x) | BIT_UD_TYPE(v))

#define BIT_SHIFT_RPT_COUNTER				0
#define BIT_MASK_RPT_COUNTER				0xffff
#define BIT_RPT_COUNTER(x)				(((x) & BIT_MASK_RPT_COUNTER) << BIT_SHIFT_RPT_COUNTER)
#define BITS_RPT_COUNTER				(BIT_MASK_RPT_COUNTER << BIT_SHIFT_RPT_COUNTER)
#define BIT_CLEAR_RPT_COUNTER(x)			((x) & (~BITS_RPT_COUNTER))
#define BIT_GET_RPT_COUNTER(x)				(((x) >> BIT_SHIFT_RPT_COUNTER) & BIT_MASK_RPT_COUNTER)
#define BIT_SET_RPT_COUNTER(x, v)			(BIT_CLEAR_RPT_COUNTER(x) | BIT_RPT_COUNTER(v))

/* 2 REG_WMAC_TRXPTCL_CTL			(Offset 0x0668) */

#define BIT_BLK_EDCA_BBSLP				BIT(31)
#define BIT_BLK_EDCA_BBSBY				BIT(30)
#define BIT_EN_STOP_UPDNAV				BIT(28)
#define BIT_RST_EDCA_ACKTO				BIT(27)
#define BIT_RST_EDCA_EIFS				BIT(26)
#define BIT_PLCPCHK_RST_EIFS				BIT(25)
#define BIT_CCA_RST_EIFS				BIT(24)
#define BIT_DIS_UPD_MYRXPKTNAV				BIT(23)
#define BIT_EARLY_TXBA					BIT(22)

#define BIT_SHIFT_RESP_CHNBUSY				20
#define BIT_MASK_RESP_CHNBUSY				0x3
#define BIT_RESP_CHNBUSY(x)				(((x) & BIT_MASK_RESP_CHNBUSY) << BIT_SHIFT_RESP_CHNBUSY)
#define BITS_RESP_CHNBUSY				(BIT_MASK_RESP_CHNBUSY << BIT_SHIFT_RESP_CHNBUSY)
#define BIT_CLEAR_RESP_CHNBUSY(x)			((x) & (~BITS_RESP_CHNBUSY))
#define BIT_GET_RESP_CHNBUSY(x)			(((x) >> BIT_SHIFT_RESP_CHNBUSY) & BIT_MASK_RESP_CHNBUSY)
#define BIT_SET_RESP_CHNBUSY(x, v)			(BIT_CLEAR_RESP_CHNBUSY(x) | BIT_RESP_CHNBUSY(v))

#define BIT_RESP_DCTS_EN				BIT(19)
#define BIT_RESP_DCFE_EN				BIT(18)
#define BIT_RESP_SPLCPEN				BIT(17)
#define BIT_RESP_SGIEN					BIT(16)
#define BIT_RESP_LDPC_EN				BIT(15)
#define BIT_DIS_RESP_ACKINCCA				BIT(14)
#define BIT_DIS_RESP_CTSINCCA				BIT(13)

#define BIT_SHIFT_SECOND_CCA_TIMER			10
#define BIT_MASK_SECOND_CCA_TIMER			0x7
#define BIT_SECOND_CCA_TIMER(x)			(((x) & BIT_MASK_SECOND_CCA_TIMER) << BIT_SHIFT_SECOND_CCA_TIMER)
#define BITS_SECOND_CCA_TIMER				(BIT_MASK_SECOND_CCA_TIMER << BIT_SHIFT_SECOND_CCA_TIMER)
#define BIT_CLEAR_SECOND_CCA_TIMER(x)			((x) & (~BITS_SECOND_CCA_TIMER))
#define BIT_GET_SECOND_CCA_TIMER(x)			(((x) >> BIT_SHIFT_SECOND_CCA_TIMER) & BIT_MASK_SECOND_CCA_TIMER)
#define BIT_SET_SECOND_CCA_TIMER(x, v)			(BIT_CLEAR_SECOND_CCA_TIMER(x) | BIT_SECOND_CCA_TIMER(v))

#define BIT_SHIFT_RFMOD				7
#define BIT_MASK_RFMOD					0x3
#define BIT_RFMOD(x)					(((x) & BIT_MASK_RFMOD) << BIT_SHIFT_RFMOD)
#define BITS_RFMOD					(BIT_MASK_RFMOD << BIT_SHIFT_RFMOD)
#define BIT_CLEAR_RFMOD(x)				((x) & (~BITS_RFMOD))
#define BIT_GET_RFMOD(x)				(((x) >> BIT_SHIFT_RFMOD) & BIT_MASK_RFMOD)
#define BIT_SET_RFMOD(x, v)				(BIT_CLEAR_RFMOD(x) | BIT_RFMOD(v))

#define BIT_SHIFT_RESP_CTS_DYNBW_SEL			5
#define BIT_MASK_RESP_CTS_DYNBW_SEL			0x3
#define BIT_RESP_CTS_DYNBW_SEL(x)			(((x) & BIT_MASK_RESP_CTS_DYNBW_SEL) << BIT_SHIFT_RESP_CTS_DYNBW_SEL)
#define BITS_RESP_CTS_DYNBW_SEL			(BIT_MASK_RESP_CTS_DYNBW_SEL << BIT_SHIFT_RESP_CTS_DYNBW_SEL)
#define BIT_CLEAR_RESP_CTS_DYNBW_SEL(x)		((x) & (~BITS_RESP_CTS_DYNBW_SEL))
#define BIT_GET_RESP_CTS_DYNBW_SEL(x)			(((x) >> BIT_SHIFT_RESP_CTS_DYNBW_SEL) & BIT_MASK_RESP_CTS_DYNBW_SEL)
#define BIT_SET_RESP_CTS_DYNBW_SEL(x, v)		(BIT_CLEAR_RESP_CTS_DYNBW_SEL(x) | BIT_RESP_CTS_DYNBW_SEL(v))

#define BIT_DLY_TX_WAIT_RXANTSEL			BIT(4)
#define BIT_TXRESP_BY_RXANTSEL				BIT(3)
#define BIT_TXACK_WITH_A1MATCH				BIT(2)

#define BIT_SHIFT_ORIG_DCTS_CHK			0
#define BIT_MASK_ORIG_DCTS_CHK				0x3
#define BIT_ORIG_DCTS_CHK(x)				(((x) & BIT_MASK_ORIG_DCTS_CHK) << BIT_SHIFT_ORIG_DCTS_CHK)
#define BITS_ORIG_DCTS_CHK				(BIT_MASK_ORIG_DCTS_CHK << BIT_SHIFT_ORIG_DCTS_CHK)
#define BIT_CLEAR_ORIG_DCTS_CHK(x)			((x) & (~BITS_ORIG_DCTS_CHK))
#define BIT_GET_ORIG_DCTS_CHK(x)			(((x) >> BIT_SHIFT_ORIG_DCTS_CHK) & BIT_MASK_ORIG_DCTS_CHK)
#define BIT_SET_ORIG_DCTS_CHK(x, v)			(BIT_CLEAR_ORIG_DCTS_CHK(x) | BIT_ORIG_DCTS_CHK(v))

/* 2 REG_WMAC_TRXPTCL_CTL_H			(Offset 0x066C) */

#define BIT_SHIFT_ACKBA_TYPSEL				28
#define BIT_MASK_ACKBA_TYPSEL				0xf
#define BIT_ACKBA_TYPSEL(x)				(((x) & BIT_MASK_ACKBA_TYPSEL) << BIT_SHIFT_ACKBA_TYPSEL)
#define BITS_ACKBA_TYPSEL				(BIT_MASK_ACKBA_TYPSEL << BIT_SHIFT_ACKBA_TYPSEL)
#define BIT_CLEAR_ACKBA_TYPSEL(x)			((x) & (~BITS_ACKBA_TYPSEL))
#define BIT_GET_ACKBA_TYPSEL(x)			(((x) >> BIT_SHIFT_ACKBA_TYPSEL) & BIT_MASK_ACKBA_TYPSEL)
#define BIT_SET_ACKBA_TYPSEL(x, v)			(BIT_CLEAR_ACKBA_TYPSEL(x) | BIT_ACKBA_TYPSEL(v))

#define BIT_SHIFT_ACKBA_ACKPCHK			24
#define BIT_MASK_ACKBA_ACKPCHK				0xf
#define BIT_ACKBA_ACKPCHK(x)				(((x) & BIT_MASK_ACKBA_ACKPCHK) << BIT_SHIFT_ACKBA_ACKPCHK)
#define BITS_ACKBA_ACKPCHK				(BIT_MASK_ACKBA_ACKPCHK << BIT_SHIFT_ACKBA_ACKPCHK)
#define BIT_CLEAR_ACKBA_ACKPCHK(x)			((x) & (~BITS_ACKBA_ACKPCHK))
#define BIT_GET_ACKBA_ACKPCHK(x)			(((x) >> BIT_SHIFT_ACKBA_ACKPCHK) & BIT_MASK_ACKBA_ACKPCHK)
#define BIT_SET_ACKBA_ACKPCHK(x, v)			(BIT_CLEAR_ACKBA_ACKPCHK(x) | BIT_ACKBA_ACKPCHK(v))

#define BIT_SHIFT_ACKBAR_TYPESEL			16
#define BIT_MASK_ACKBAR_TYPESEL			0xff
#define BIT_ACKBAR_TYPESEL(x)				(((x) & BIT_MASK_ACKBAR_TYPESEL) << BIT_SHIFT_ACKBAR_TYPESEL)
#define BITS_ACKBAR_TYPESEL				(BIT_MASK_ACKBAR_TYPESEL << BIT_SHIFT_ACKBAR_TYPESEL)
#define BIT_CLEAR_ACKBAR_TYPESEL(x)			((x) & (~BITS_ACKBAR_TYPESEL))
#define BIT_GET_ACKBAR_TYPESEL(x)			(((x) >> BIT_SHIFT_ACKBAR_TYPESEL) & BIT_MASK_ACKBAR_TYPESEL)
#define BIT_SET_ACKBAR_TYPESEL(x, v)			(BIT_CLEAR_ACKBAR_TYPESEL(x) | BIT_ACKBAR_TYPESEL(v))

#define BIT_SHIFT_ACKBAR_ACKPCHK			12
#define BIT_MASK_ACKBAR_ACKPCHK			0xf
#define BIT_ACKBAR_ACKPCHK(x)				(((x) & BIT_MASK_ACKBAR_ACKPCHK) << BIT_SHIFT_ACKBAR_ACKPCHK)
#define BITS_ACKBAR_ACKPCHK				(BIT_MASK_ACKBAR_ACKPCHK << BIT_SHIFT_ACKBAR_ACKPCHK)
#define BIT_CLEAR_ACKBAR_ACKPCHK(x)			((x) & (~BITS_ACKBAR_ACKPCHK))
#define BIT_GET_ACKBAR_ACKPCHK(x)			(((x) >> BIT_SHIFT_ACKBAR_ACKPCHK) & BIT_MASK_ACKBAR_ACKPCHK)
#define BIT_SET_ACKBAR_ACKPCHK(x, v)			(BIT_CLEAR_ACKBAR_ACKPCHK(x) | BIT_ACKBAR_ACKPCHK(v))

#define BIT_RXBA_IGNOREA2_V1				BIT(10)
#define BIT_EN_SAVE_ALL_TXOPADDR_V1			BIT(9)
#define BIT_EN_TXCTS_TO_TXOPOWNER_INRXNAV_V1		BIT(8)
#define BIT_DIS_TXBA_AMPDUFCSERR_V1			BIT(7)
#define BIT_DIS_TXBA_RXBARINFULL_V1			BIT(6)
#define BIT_DIS_TXCFE_INFULL_V1			BIT(5)
#define BIT_DIS_TXCTS_INFULL_V1			BIT(4)
#define BIT_EN_TXACKBA_INTX_RDG_V1			BIT(3)
#define BIT_EN_TXACKBA_INTXOP_V1			BIT(2)
#define BIT_EN_TXCTS_INRXNAV_V1			BIT(1)
#define BIT_EN_TXCTS_INTXOP_V1				BIT(0)

/* 2 REG_KEYCAMCMD				(Offset 0x0670) */

#define BIT_KEYCAM_POLLING				BIT(31)
#define BIT_KEYCAM_CLEAR				BIT(30)
#define BIT_MFBCAM_CLEAR				BIT(29)
#define BIT_KEYCAM_DA_EN				BIT(17)
#define BIT_SECCAM_WE					BIT(16)

#define BIT_SHIFT_KEYCAM_AD				0
#define BIT_MASK_KEYCAM_AD				0x3ff
#define BIT_KEYCAM_AD(x)				(((x) & BIT_MASK_KEYCAM_AD) << BIT_SHIFT_KEYCAM_AD)
#define BITS_KEYCAM_AD					(BIT_MASK_KEYCAM_AD << BIT_SHIFT_KEYCAM_AD)
#define BIT_CLEAR_KEYCAM_AD(x)				((x) & (~BITS_KEYCAM_AD))
#define BIT_GET_KEYCAM_AD(x)				(((x) >> BIT_SHIFT_KEYCAM_AD) & BIT_MASK_KEYCAM_AD)
#define BIT_SET_KEYCAM_AD(x, v)			(BIT_CLEAR_KEYCAM_AD(x) | BIT_KEYCAM_AD(v))

/* 2 REG_KEYCAM_WD				(Offset 0x0674) */

#define BIT_SHIFT_KEYCAM_WDATA				0
#define BIT_MASK_KEYCAM_WDATA				0xffffffffL
#define BIT_KEYCAM_WDATA(x)				(((x) & BIT_MASK_KEYCAM_WDATA) << BIT_SHIFT_KEYCAM_WDATA)
#define BITS_KEYCAM_WDATA				(BIT_MASK_KEYCAM_WDATA << BIT_SHIFT_KEYCAM_WDATA)
#define BIT_CLEAR_KEYCAM_WDATA(x)			((x) & (~BITS_KEYCAM_WDATA))
#define BIT_GET_KEYCAM_WDATA(x)			(((x) >> BIT_SHIFT_KEYCAM_WDATA) & BIT_MASK_KEYCAM_WDATA)
#define BIT_SET_KEYCAM_WDATA(x, v)			(BIT_CLEAR_KEYCAM_WDATA(x) | BIT_KEYCAM_WDATA(v))

/* 2 REG_CAMREAD				(Offset 0x0678) */

#define BIT_SHIFT_CAMR_DATA				0
#define BIT_MASK_CAMR_DATA				0xffffffffL
#define BIT_CAMR_DATA(x)				(((x) & BIT_MASK_CAMR_DATA) << BIT_SHIFT_CAMR_DATA)
#define BITS_CAMR_DATA					(BIT_MASK_CAMR_DATA << BIT_SHIFT_CAMR_DATA)
#define BIT_CLEAR_CAMR_DATA(x)				((x) & (~BITS_CAMR_DATA))
#define BIT_GET_CAMR_DATA(x)				(((x) >> BIT_SHIFT_CAMR_DATA) & BIT_MASK_CAMR_DATA)
#define BIT_SET_CAMR_DATA(x, v)			(BIT_CLEAR_CAMR_DATA(x) | BIT_CAMR_DATA(v))

/* 2 REG_CAMDBG				(Offset 0x067C) */

#define BIT_KEYCAM_DBGSEL				BIT(31)
#define BIT_SEC_KEYFOUND_V1				BIT(15)

#define BIT_SHIFT_CAMDBG_SEC_TYPE_V1			12
#define BIT_MASK_CAMDBG_SEC_TYPE_V1			0x7
#define BIT_CAMDBG_SEC_TYPE_V1(x)			(((x) & BIT_MASK_CAMDBG_SEC_TYPE_V1) << BIT_SHIFT_CAMDBG_SEC_TYPE_V1)
#define BITS_CAMDBG_SEC_TYPE_V1			(BIT_MASK_CAMDBG_SEC_TYPE_V1 << BIT_SHIFT_CAMDBG_SEC_TYPE_V1)
#define BIT_CLEAR_CAMDBG_SEC_TYPE_V1(x)		((x) & (~BITS_CAMDBG_SEC_TYPE_V1))
#define BIT_GET_CAMDBG_SEC_TYPE_V1(x)			(((x) >> BIT_SHIFT_CAMDBG_SEC_TYPE_V1) & BIT_MASK_CAMDBG_SEC_TYPE_V1)
#define BIT_SET_CAMDBG_SEC_TYPE_V1(x, v)		(BIT_CLEAR_CAMDBG_SEC_TYPE_V1(x) | BIT_CAMDBG_SEC_TYPE_V1(v))

#define BIT_EXT_SECTYPE				BIT(11)

#define BIT_SHIFT_CAMDBG_MIC_KEY_IDX_V3		5
#define BIT_MASK_CAMDBG_MIC_KEY_IDX_V3			0x1f
#define BIT_CAMDBG_MIC_KEY_IDX_V3(x)			(((x) & BIT_MASK_CAMDBG_MIC_KEY_IDX_V3) << BIT_SHIFT_CAMDBG_MIC_KEY_IDX_V3)
#define BITS_CAMDBG_MIC_KEY_IDX_V3			(BIT_MASK_CAMDBG_MIC_KEY_IDX_V3 << BIT_SHIFT_CAMDBG_MIC_KEY_IDX_V3)
#define BIT_CLEAR_CAMDBG_MIC_KEY_IDX_V3(x)		((x) & (~BITS_CAMDBG_MIC_KEY_IDX_V3))
#define BIT_GET_CAMDBG_MIC_KEY_IDX_V3(x)		(((x) >> BIT_SHIFT_CAMDBG_MIC_KEY_IDX_V3) & BIT_MASK_CAMDBG_MIC_KEY_IDX_V3)
#define BIT_SET_CAMDBG_MIC_KEY_IDX_V3(x, v)		(BIT_CLEAR_CAMDBG_MIC_KEY_IDX_V3(x) | BIT_CAMDBG_MIC_KEY_IDX_V3(v))

#define BIT_SHIFT_CAMDBG_SEC_KEY_IDX_V2		0
#define BIT_MASK_CAMDBG_SEC_KEY_IDX_V2			0x1f
#define BIT_CAMDBG_SEC_KEY_IDX_V2(x)			(((x) & BIT_MASK_CAMDBG_SEC_KEY_IDX_V2) << BIT_SHIFT_CAMDBG_SEC_KEY_IDX_V2)
#define BITS_CAMDBG_SEC_KEY_IDX_V2			(BIT_MASK_CAMDBG_SEC_KEY_IDX_V2 << BIT_SHIFT_CAMDBG_SEC_KEY_IDX_V2)
#define BIT_CLEAR_CAMDBG_SEC_KEY_IDX_V2(x)		((x) & (~BITS_CAMDBG_SEC_KEY_IDX_V2))
#define BIT_GET_CAMDBG_SEC_KEY_IDX_V2(x)		(((x) >> BIT_SHIFT_CAMDBG_SEC_KEY_IDX_V2) & BIT_MASK_CAMDBG_SEC_KEY_IDX_V2)
#define BIT_SET_CAMDBG_SEC_KEY_IDX_V2(x, v)		(BIT_CLEAR_CAMDBG_SEC_KEY_IDX_V2(x) | BIT_CAMDBG_SEC_KEY_IDX_V2(v))

/* 2 REG_SECCFG				(Offset 0x0680) */

#define BIT_SHIFT_RXFILTER_ACTION_1			24
#define BIT_MASK_RXFILTER_ACTION_1			0xff
#define BIT_RXFILTER_ACTION_1(x)			(((x) & BIT_MASK_RXFILTER_ACTION_1) << BIT_SHIFT_RXFILTER_ACTION_1)
#define BITS_RXFILTER_ACTION_1				(BIT_MASK_RXFILTER_ACTION_1 << BIT_SHIFT_RXFILTER_ACTION_1)
#define BIT_CLEAR_RXFILTER_ACTION_1(x)			((x) & (~BITS_RXFILTER_ACTION_1))
#define BIT_GET_RXFILTER_ACTION_1(x)			(((x) >> BIT_SHIFT_RXFILTER_ACTION_1) & BIT_MASK_RXFILTER_ACTION_1)
#define BIT_SET_RXFILTER_ACTION_1(x, v)		(BIT_CLEAR_RXFILTER_ACTION_1(x) | BIT_RXFILTER_ACTION_1(v))

#define BIT_SHIFT_RXFILTER_CATEGORY_1			16
#define BIT_MASK_RXFILTER_CATEGORY_1			0xff
#define BIT_RXFILTER_CATEGORY_1(x)			(((x) & BIT_MASK_RXFILTER_CATEGORY_1) << BIT_SHIFT_RXFILTER_CATEGORY_1)
#define BITS_RXFILTER_CATEGORY_1			(BIT_MASK_RXFILTER_CATEGORY_1 << BIT_SHIFT_RXFILTER_CATEGORY_1)
#define BIT_CLEAR_RXFILTER_CATEGORY_1(x)		((x) & (~BITS_RXFILTER_CATEGORY_1))
#define BIT_GET_RXFILTER_CATEGORY_1(x)			(((x) >> BIT_SHIFT_RXFILTER_CATEGORY_1) & BIT_MASK_RXFILTER_CATEGORY_1)
#define BIT_SET_RXFILTER_CATEGORY_1(x, v)		(BIT_CLEAR_RXFILTER_CATEGORY_1(x) | BIT_RXFILTER_CATEGORY_1(v))

#define BIT_DIS_GCLK_WAPI				BIT(15)
#define BIT_DIS_GCLK_AES				BIT(14)
#define BIT_DIS_GCLK_TKIP				BIT(13)
#define BIT_AES_SEL_QC_1				BIT(12)
#define BIT_AES_SEL_QC_0				BIT(11)
#define BIT_WMAC_CKECK_BMC				BIT(9)
#define BIT_CHK_KEYID					BIT(8)
#define BIT_RXBCUSEDK					BIT(7)
#define BIT_TXBCUSEDK					BIT(6)
#define BIT_NOSKMC					BIT(5)
#define BIT_SKBYA2					BIT(4)
#define BIT_RXDEC					BIT(3)
#define BIT_TXENC					BIT(2)
#define BIT_RXUHUSEDK					BIT(1)
#define BIT_TXUHUSEDK					BIT(0)

/* 2 REG_RXFILTER_CATEGORY_ACTION		(Offset 0x0684) */

#define BIT_SHIFT_RXFILTER_ACTION_3			24
#define BIT_MASK_RXFILTER_ACTION_3			0xff
#define BIT_RXFILTER_ACTION_3(x)			(((x) & BIT_MASK_RXFILTER_ACTION_3) << BIT_SHIFT_RXFILTER_ACTION_3)
#define BITS_RXFILTER_ACTION_3				(BIT_MASK_RXFILTER_ACTION_3 << BIT_SHIFT_RXFILTER_ACTION_3)
#define BIT_CLEAR_RXFILTER_ACTION_3(x)			((x) & (~BITS_RXFILTER_ACTION_3))
#define BIT_GET_RXFILTER_ACTION_3(x)			(((x) >> BIT_SHIFT_RXFILTER_ACTION_3) & BIT_MASK_RXFILTER_ACTION_3)
#define BIT_SET_RXFILTER_ACTION_3(x, v)		(BIT_CLEAR_RXFILTER_ACTION_3(x) | BIT_RXFILTER_ACTION_3(v))

#define BIT_SHIFT_RXFILTER_CATEGORY_3			16
#define BIT_MASK_RXFILTER_CATEGORY_3			0xff
#define BIT_RXFILTER_CATEGORY_3(x)			(((x) & BIT_MASK_RXFILTER_CATEGORY_3) << BIT_SHIFT_RXFILTER_CATEGORY_3)
#define BITS_RXFILTER_CATEGORY_3			(BIT_MASK_RXFILTER_CATEGORY_3 << BIT_SHIFT_RXFILTER_CATEGORY_3)
#define BIT_CLEAR_RXFILTER_CATEGORY_3(x)		((x) & (~BITS_RXFILTER_CATEGORY_3))
#define BIT_GET_RXFILTER_CATEGORY_3(x)			(((x) >> BIT_SHIFT_RXFILTER_CATEGORY_3) & BIT_MASK_RXFILTER_CATEGORY_3)
#define BIT_SET_RXFILTER_CATEGORY_3(x, v)		(BIT_CLEAR_RXFILTER_CATEGORY_3(x) | BIT_RXFILTER_CATEGORY_3(v))

#define BIT_SHIFT_RXFILTER_ACTION_2			8
#define BIT_MASK_RXFILTER_ACTION_2			0xff
#define BIT_RXFILTER_ACTION_2(x)			(((x) & BIT_MASK_RXFILTER_ACTION_2) << BIT_SHIFT_RXFILTER_ACTION_2)
#define BITS_RXFILTER_ACTION_2				(BIT_MASK_RXFILTER_ACTION_2 << BIT_SHIFT_RXFILTER_ACTION_2)
#define BIT_CLEAR_RXFILTER_ACTION_2(x)			((x) & (~BITS_RXFILTER_ACTION_2))
#define BIT_GET_RXFILTER_ACTION_2(x)			(((x) >> BIT_SHIFT_RXFILTER_ACTION_2) & BIT_MASK_RXFILTER_ACTION_2)
#define BIT_SET_RXFILTER_ACTION_2(x, v)		(BIT_CLEAR_RXFILTER_ACTION_2(x) | BIT_RXFILTER_ACTION_2(v))

#define BIT_SHIFT_RXFILTER_CATEGORY_2			0
#define BIT_MASK_RXFILTER_CATEGORY_2			0xff
#define BIT_RXFILTER_CATEGORY_2(x)			(((x) & BIT_MASK_RXFILTER_CATEGORY_2) << BIT_SHIFT_RXFILTER_CATEGORY_2)
#define BITS_RXFILTER_CATEGORY_2			(BIT_MASK_RXFILTER_CATEGORY_2 << BIT_SHIFT_RXFILTER_CATEGORY_2)
#define BIT_CLEAR_RXFILTER_CATEGORY_2(x)		((x) & (~BITS_RXFILTER_CATEGORY_2))
#define BIT_GET_RXFILTER_CATEGORY_2(x)			(((x) >> BIT_SHIFT_RXFILTER_CATEGORY_2) & BIT_MASK_RXFILTER_CATEGORY_2)
#define BIT_SET_RXFILTER_CATEGORY_2(x, v)		(BIT_CLEAR_RXFILTER_CATEGORY_2(x) | BIT_RXFILTER_CATEGORY_2(v))

/* 2 REG_RXFLTMAP3				(Offset 0x0688) */

#define BIT_CTRLFLT15EN_FW				BIT(31)
#define BIT_CTRLFLT14EN_FW				BIT(30)
#define BIT_CTRLFLT13EN_FW				BIT(29)
#define BIT_CTRLFLT12EN_FW				BIT(28)
#define BIT_CTRLFLT11EN_FW				BIT(27)
#define BIT_CTRLFLT10EN_FW				BIT(26)
#define BIT_CTRLFLT9EN_FW				BIT(25)
#define BIT_CTRLFLT8EN_FW				BIT(24)
#define BIT_CTRLFLT7EN_FW				BIT(23)
#define BIT_CTRLFLT6EN_FW				BIT(22)
#define BIT_CTRLFLT5EN_FW				BIT(21)
#define BIT_CTRLFLT4EN_FW				BIT(20)
#define BIT_CTRLFLT3EN_FW				BIT(19)
#define BIT_CTRLFLT2EN_FW				BIT(18)
#define BIT_CTRLFLT1EN_FW				BIT(17)
#define BIT_CTRLFLT0EN_FW				BIT(16)
#define BIT_MGTFLT15EN_FW				BIT(15)
#define BIT_MGTFLT14EN_FW				BIT(14)
#define BIT_MGTFLT13EN_FW				BIT(13)
#define BIT_MGTFLT12EN_FW				BIT(12)
#define BIT_MGTFLT11EN_FW				BIT(11)
#define BIT_MGTFLT10EN_FW				BIT(10)
#define BIT_MGTFLT9EN_FW				BIT(9)
#define BIT_MGTFLT8EN_FW				BIT(8)
#define BIT_MGTFLT7EN_FW				BIT(7)
#define BIT_MGTFLT6EN_FW				BIT(6)
#define BIT_MGTFLT5EN_FW				BIT(5)
#define BIT_MGTFLT4EN_FW				BIT(4)
#define BIT_MGTFLT3EN_FW				BIT(3)
#define BIT_MGTFLT2EN_FW				BIT(2)
#define BIT_MGTFLT1EN_FW				BIT(1)
#define BIT_MGTFLT0EN_FW				BIT(0)

/* 2 REG_RXFLTMAP5				(Offset 0x068C) */

#define BIT_ACTIONFLT15EN_FW				BIT(31)
#define BIT_ACTIONFLT14EN_FW				BIT(30)
#define BIT_ACTIONFLT13EN_FW				BIT(29)
#define BIT_ACTIONFLT12EN_FW				BIT(28)
#define BIT_ACTIONFLT11EN_FW				BIT(27)
#define BIT_ACTIONFLT10EN_FW				BIT(26)
#define BIT_ACTIONFLT9EN_FW				BIT(25)
#define BIT_ACTIONFLT8EN_FW				BIT(24)
#define BIT_ACTIONFLT7EN_FW				BIT(23)
#define BIT_ACTIONFLT6EN_FW				BIT(22)
#define BIT_ACTIONFLT5EN_FW				BIT(21)
#define BIT_ACTIONFLT4EN_FW				BIT(20)
#define BIT_ACTIONFLT3EN_FW				BIT(19)
#define BIT_ACTIONFLT2EN_FW				BIT(18)
#define BIT_ACTIONFLT1EN_FW				BIT(17)
#define BIT_ACTIONFLT0EN_FW				BIT(16)
#define BIT_DATAFLT15EN_FW				BIT(15)
#define BIT_DATAFLT14EN_FW				BIT(14)
#define BIT_DATAFLT13EN_FW				BIT(13)
#define BIT_DATAFLT12EN_FW				BIT(12)
#define BIT_DATAFLT11EN_FW				BIT(11)
#define BIT_DATAFLT10EN_FW				BIT(10)
#define BIT_DATAFLT9EN_FW				BIT(9)
#define BIT_DATAFLT8EN_FW				BIT(8)
#define BIT_DATAFLT7EN_FW				BIT(7)
#define BIT_DATAFLT6EN_FW				BIT(6)
#define BIT_DATAFLT5EN_FW				BIT(5)
#define BIT_DATAFLT4EN_FW				BIT(4)
#define BIT_DATAFLT3EN_FW				BIT(3)
#define BIT_DATAFLT2EN_FW				BIT(2)
#define BIT_DATAFLT1EN_FW				BIT(1)
#define BIT_DATAFLT0EN_FW				BIT(0)

/* 2 REG_WOW_NAN_CTRL			(Offset 0x0690) */

#define BIT_WMMPS_UAPSD_TID7				BIT(31)
#define BIT_WMMPS_UAPSD_TID6				BIT(30)
#define BIT_WMMPS_UAPSD_TID5				BIT(29)
#define BIT_WMMPS_UAPSD_TID4				BIT(28)
#define BIT_WMMPS_UAPSD_TID3				BIT(27)
#define BIT_WMMPS_UAPSD_TID2				BIT(26)
#define BIT_WMMPS_UAPSD_TID1				BIT(25)
#define BIT_WMMPS_UAPSD_TID0				BIT(24)

#define BIT_SHIFT_PORTSEL_PS_RX_INFO			21
#define BIT_MASK_PORTSEL_PS_RX_INFO			0x7
#define BIT_PORTSEL_PS_RX_INFO(x)			(((x) & BIT_MASK_PORTSEL_PS_RX_INFO) << BIT_SHIFT_PORTSEL_PS_RX_INFO)
#define BITS_PORTSEL_PS_RX_INFO			(BIT_MASK_PORTSEL_PS_RX_INFO << BIT_SHIFT_PORTSEL_PS_RX_INFO)
#define BIT_CLEAR_PORTSEL_PS_RX_INFO(x)		((x) & (~BITS_PORTSEL_PS_RX_INFO))
#define BIT_GET_PORTSEL_PS_RX_INFO(x)			(((x) >> BIT_SHIFT_PORTSEL_PS_RX_INFO) & BIT_MASK_PORTSEL_PS_RX_INFO)
#define BIT_SET_PORTSEL_PS_RX_INFO(x, v)		(BIT_CLEAR_PORTSEL_PS_RX_INFO(x) | BIT_PORTSEL_PS_RX_INFO(v))

#define BIT_RXCTRLIN0					BIT(20)
#define BIT_RXMGTIN0					BIT(19)
#define BIT_RXDATAIN2					BIT(18)
#define BIT_RXDATAIN1					BIT(17)
#define BIT_RXDATAIN0					BIT(16)
#define BIT_NAN_RX_CHKTA				BIT(10)
#define BIT_NAN_RX_CHKBSSID				BIT(9)
#define BIT_NAN_RX_FILTER_EN				BIT(8)

#define BIT_SHIFT_PSF_BSSIDSEL_H			6
#define BIT_MASK_PSF_BSSIDSEL_H			0x3
#define BIT_PSF_BSSIDSEL_H(x)				(((x) & BIT_MASK_PSF_BSSIDSEL_H) << BIT_SHIFT_PSF_BSSIDSEL_H)
#define BITS_PSF_BSSIDSEL_H				(BIT_MASK_PSF_BSSIDSEL_H << BIT_SHIFT_PSF_BSSIDSEL_H)
#define BIT_CLEAR_PSF_BSSIDSEL_H(x)			((x) & (~BITS_PSF_BSSIDSEL_H))
#define BIT_GET_PSF_BSSIDSEL_H(x)			(((x) >> BIT_SHIFT_PSF_BSSIDSEL_H) & BIT_MASK_PSF_BSSIDSEL_H)
#define BIT_SET_PSF_BSSIDSEL_H(x, v)			(BIT_CLEAR_PSF_BSSIDSEL_H(x) | BIT_PSF_BSSIDSEL_H(v))

#define BIT_WOWHCI					BIT(5)
#define BIT_PSF_BSSIDSEL_L				BIT(4)
#define BIT_UWF					BIT(3)
#define BIT_MAGIC					BIT(2)
#define BIT_WFMSK					BIT(1)

/* 2 REG_LPNAV_CTRL				(Offset 0x0694) */

#define BIT_LPNAV_EN					BIT(31)

#define BIT_SHIFT_LPNAV_EARLY				16
#define BIT_MASK_LPNAV_EARLY				0x7fff
#define BIT_LPNAV_EARLY(x)				(((x) & BIT_MASK_LPNAV_EARLY) << BIT_SHIFT_LPNAV_EARLY)
#define BITS_LPNAV_EARLY				(BIT_MASK_LPNAV_EARLY << BIT_SHIFT_LPNAV_EARLY)
#define BIT_CLEAR_LPNAV_EARLY(x)			((x) & (~BITS_LPNAV_EARLY))
#define BIT_GET_LPNAV_EARLY(x)				(((x) >> BIT_SHIFT_LPNAV_EARLY) & BIT_MASK_LPNAV_EARLY)
#define BIT_SET_LPNAV_EARLY(x, v)			(BIT_CLEAR_LPNAV_EARLY(x) | BIT_LPNAV_EARLY(v))

#define BIT_SHIFT_LPNAV_THR				0
#define BIT_MASK_LPNAV_THR				0xffff
#define BIT_LPNAV_THR(x)				(((x) & BIT_MASK_LPNAV_THR) << BIT_SHIFT_LPNAV_THR)
#define BITS_LPNAV_THR					(BIT_MASK_LPNAV_THR << BIT_SHIFT_LPNAV_THR)
#define BIT_CLEAR_LPNAV_THR(x)				((x) & (~BITS_LPNAV_THR))
#define BIT_GET_LPNAV_THR(x)				(((x) >> BIT_SHIFT_LPNAV_THR) & BIT_MASK_LPNAV_THR)
#define BIT_SET_LPNAV_THR(x, v)			(BIT_CLEAR_LPNAV_THR(x) | BIT_LPNAV_THR(v))

/* 2 REG_WKFMCAM_CMD				(Offset 0x0698) */

#define BIT_WKFMCAM_WE					BIT(16)

#define BIT_SHIFT_WKFMCAM_AD				8
#define BIT_MASK_WKFMCAM_AD				0xff
#define BIT_WKFMCAM_AD(x)				(((x) & BIT_MASK_WKFMCAM_AD) << BIT_SHIFT_WKFMCAM_AD)
#define BITS_WKFMCAM_AD				(BIT_MASK_WKFMCAM_AD << BIT_SHIFT_WKFMCAM_AD)
#define BIT_CLEAR_WKFMCAM_AD(x)			((x) & (~BITS_WKFMCAM_AD))
#define BIT_GET_WKFMCAM_AD(x)				(((x) >> BIT_SHIFT_WKFMCAM_AD) & BIT_MASK_WKFMCAM_AD)
#define BIT_SET_WKFMCAM_AD(x, v)			(BIT_CLEAR_WKFMCAM_AD(x) | BIT_WKFMCAM_AD(v))

#define BIT_SHIFT_CAM_NUM				0
#define BIT_MASK_CAM_NUM				0xff
#define BIT_CAM_NUM(x)					(((x) & BIT_MASK_CAM_NUM) << BIT_SHIFT_CAM_NUM)
#define BITS_CAM_NUM					(BIT_MASK_CAM_NUM << BIT_SHIFT_CAM_NUM)
#define BIT_CLEAR_CAM_NUM(x)				((x) & (~BITS_CAM_NUM))
#define BIT_GET_CAM_NUM(x)				(((x) >> BIT_SHIFT_CAM_NUM) & BIT_MASK_CAM_NUM)
#define BIT_SET_CAM_NUM(x, v)				(BIT_CLEAR_CAM_NUM(x) | BIT_CAM_NUM(v))

/* 2 REG_WKFMCAM_WD				(Offset 0x069C) */

#define BIT_SHIFT_WKFMCAM_WD				0
#define BIT_MASK_WKFMCAM_WD				0xffffffffL
#define BIT_WKFMCAM_WD(x)				(((x) & BIT_MASK_WKFMCAM_WD) << BIT_SHIFT_WKFMCAM_WD)
#define BITS_WKFMCAM_WD				(BIT_MASK_WKFMCAM_WD << BIT_SHIFT_WKFMCAM_WD)
#define BIT_CLEAR_WKFMCAM_WD(x)			((x) & (~BITS_WKFMCAM_WD))
#define BIT_GET_WKFMCAM_WD(x)				(((x) >> BIT_SHIFT_WKFMCAM_WD) & BIT_MASK_WKFMCAM_WD)
#define BIT_SET_WKFMCAM_WD(x, v)			(BIT_CLEAR_WKFMCAM_WD(x) | BIT_WKFMCAM_WD(v))

/* 2 REG_RXFLTMAP0				(Offset 0x06A0) */

#define BIT_CTRLFLT15EN				BIT(31)
#define BIT_CTRLFLT14EN				BIT(30)
#define BIT_CTRLFLT13EN				BIT(29)
#define BIT_CTRLFLT12EN				BIT(28)
#define BIT_CTRLFLT11EN				BIT(27)
#define BIT_CTRLFLT10EN				BIT(26)
#define BIT_CTRLFLT9EN					BIT(25)
#define BIT_CTRLFLT8EN					BIT(24)
#define BIT_CTRLFLT7EN					BIT(23)
#define BIT_CTRLFLT6EN					BIT(22)
#define BIT_CTRLFLT5EN					BIT(21)
#define BIT_CTRLFLT4EN					BIT(20)
#define BIT_CTRLFLT3EN					BIT(19)
#define BIT_CTRLFLT2EN					BIT(18)
#define BIT_CTRLFLT1EN					BIT(17)
#define BIT_CTRLFLT0EN					BIT(16)
#define BIT_MGTFLT15EN					BIT(15)
#define BIT_MGTFLT14EN					BIT(14)
#define BIT_MGTFLT13EN					BIT(13)
#define BIT_MGTFLT12EN					BIT(12)
#define BIT_MGTFLT11EN					BIT(11)
#define BIT_MGTFLT10EN					BIT(10)
#define BIT_MGTFLT9EN					BIT(9)
#define BIT_MGTFLT8EN					BIT(8)
#define BIT_MGTFLT7EN					BIT(7)
#define BIT_MGTFLT6EN					BIT(6)
#define BIT_MGTFLT5EN					BIT(5)
#define BIT_MGTFLT4EN					BIT(4)
#define BIT_MGTFLT3EN					BIT(3)
#define BIT_MGTFLT2EN					BIT(2)
#define BIT_MGTFLT1EN					BIT(1)
#define BIT_MGTFLT0EN					BIT(0)

/* 2 REG_RXFLTMAP				(Offset 0x06A4) */

#define BIT_DATAFLT15EN				BIT(15)
#define BIT_DATAFLT14EN				BIT(14)
#define BIT_DATAFLT13EN				BIT(13)
#define BIT_DATAFLT12EN				BIT(12)
#define BIT_DATAFLT11EN				BIT(11)
#define BIT_DATAFLT10EN				BIT(10)
#define BIT_DATAFLT9EN					BIT(9)
#define BIT_DATAFLT8EN					BIT(8)
#define BIT_DATAFLT7EN					BIT(7)
#define BIT_DATAFLT6EN					BIT(6)
#define BIT_DATAFLT5EN					BIT(5)
#define BIT_DATAFLT4EN					BIT(4)
#define BIT_DATAFLT3EN					BIT(3)
#define BIT_DATAFLT2EN					BIT(2)
#define BIT_DATAFLT1EN					BIT(1)
#define BIT_DATAFLT0EN					BIT(0)

/* 2 REG_BCN_PSR_RPT0			(Offset 0x06A8) */

#define BIT_SHIFT_DTIM_CNT0				24
#define BIT_MASK_DTIM_CNT0				0xff
#define BIT_DTIM_CNT0(x)				(((x) & BIT_MASK_DTIM_CNT0) << BIT_SHIFT_DTIM_CNT0)
#define BITS_DTIM_CNT0					(BIT_MASK_DTIM_CNT0 << BIT_SHIFT_DTIM_CNT0)
#define BIT_CLEAR_DTIM_CNT0(x)				((x) & (~BITS_DTIM_CNT0))
#define BIT_GET_DTIM_CNT0(x)				(((x) >> BIT_SHIFT_DTIM_CNT0) & BIT_MASK_DTIM_CNT0)
#define BIT_SET_DTIM_CNT0(x, v)			(BIT_CLEAR_DTIM_CNT0(x) | BIT_DTIM_CNT0(v))

#define BIT_SHIFT_DTIM_PERIOD0				16
#define BIT_MASK_DTIM_PERIOD0				0xff
#define BIT_DTIM_PERIOD0(x)				(((x) & BIT_MASK_DTIM_PERIOD0) << BIT_SHIFT_DTIM_PERIOD0)
#define BITS_DTIM_PERIOD0				(BIT_MASK_DTIM_PERIOD0 << BIT_SHIFT_DTIM_PERIOD0)
#define BIT_CLEAR_DTIM_PERIOD0(x)			((x) & (~BITS_DTIM_PERIOD0))
#define BIT_GET_DTIM_PERIOD0(x)			(((x) >> BIT_SHIFT_DTIM_PERIOD0) & BIT_MASK_DTIM_PERIOD0)
#define BIT_SET_DTIM_PERIOD0(x, v)			(BIT_CLEAR_DTIM_PERIOD0(x) | BIT_DTIM_PERIOD0(v))

#define BIT_HAS_MY_BC0					BIT(15)
#define BIT_HAS_MY_BSSID0				BIT(14)
#define BIT_HAS_MYAID0					BIT(13)
#define BIT_RPT_VALID0					BIT(12)

#define BIT_SHIFT_PS_AID_0				0
#define BIT_MASK_PS_AID_0				0x7ff
#define BIT_PS_AID_0(x)				(((x) & BIT_MASK_PS_AID_0) << BIT_SHIFT_PS_AID_0)
#define BITS_PS_AID_0					(BIT_MASK_PS_AID_0 << BIT_SHIFT_PS_AID_0)
#define BIT_CLEAR_PS_AID_0(x)				((x) & (~BITS_PS_AID_0))
#define BIT_GET_PS_AID_0(x)				(((x) >> BIT_SHIFT_PS_AID_0) & BIT_MASK_PS_AID_0)
#define BIT_SET_PS_AID_0(x, v)				(BIT_CLEAR_PS_AID_0(x) | BIT_PS_AID_0(v))

/* 2 REG_FLC_CTRL				(Offset 0x06AC) */

#define BIT_FLC_RPCT_V1				BIT(31)
#define BIT_FLC_MODSL					BIT(30)

#define BIT_SHIFT_TORRD				24
#define BIT_MASK_TORRD					0x3f
#define BIT_TORRD(x)					(((x) & BIT_MASK_TORRD) << BIT_SHIFT_TORRD)
#define BITS_TORRD					(BIT_MASK_TORRD << BIT_SHIFT_TORRD)
#define BIT_CLEAR_TORRD(x)				((x) & (~BITS_TORRD))
#define BIT_GET_TORRD(x)				(((x) >> BIT_SHIFT_TORRD) & BIT_MASK_TORRD)
#define BIT_SET_TORRD(x, v)				(BIT_CLEAR_TORRD(x) | BIT_TORRD(v))

#define BIT_FLC_CMFEN					BIT(18)
#define BIT_FLC_CCFEN					BIT(17)
#define BIT_FLC_CDFEN					BIT(16)

#define BIT_SHIFT_FLC_PKTTH				8
#define BIT_MASK_FLC_PKTTH				0xff
#define BIT_FLC_PKTTH(x)				(((x) & BIT_MASK_FLC_PKTTH) << BIT_SHIFT_FLC_PKTTH)
#define BITS_FLC_PKTTH					(BIT_MASK_FLC_PKTTH << BIT_SHIFT_FLC_PKTTH)
#define BIT_CLEAR_FLC_PKTTH(x)				((x) & (~BITS_FLC_PKTTH))
#define BIT_GET_FLC_PKTTH(x)				(((x) >> BIT_SHIFT_FLC_PKTTH) & BIT_MASK_FLC_PKTTH)
#define BIT_SET_FLC_PKTTH(x, v)			(BIT_CLEAR_FLC_PKTTH(x) | BIT_FLC_PKTTH(v))

#define BIT_SHIFT_FLC_RPC				0
#define BIT_MASK_FLC_RPC				0xff
#define BIT_FLC_RPC(x)					(((x) & BIT_MASK_FLC_RPC) << BIT_SHIFT_FLC_RPC)
#define BITS_FLC_RPC					(BIT_MASK_FLC_RPC << BIT_SHIFT_FLC_RPC)
#define BIT_CLEAR_FLC_RPC(x)				((x) & (~BITS_FLC_RPC))
#define BIT_GET_FLC_RPC(x)				(((x) >> BIT_SHIFT_FLC_RPC) & BIT_MASK_FLC_RPC)
#define BIT_SET_FLC_RPC(x, v)				(BIT_CLEAR_FLC_RPC(x) | BIT_FLC_RPC(v))

/* 2 REG_RXPKTMON_CTRL			(Offset 0x06B0) */

#define BIT_SHIFT_RXBKQPKT_SEQ				20
#define BIT_MASK_RXBKQPKT_SEQ				0xf
#define BIT_RXBKQPKT_SEQ(x)				(((x) & BIT_MASK_RXBKQPKT_SEQ) << BIT_SHIFT_RXBKQPKT_SEQ)
#define BITS_RXBKQPKT_SEQ				(BIT_MASK_RXBKQPKT_SEQ << BIT_SHIFT_RXBKQPKT_SEQ)
#define BIT_CLEAR_RXBKQPKT_SEQ(x)			((x) & (~BITS_RXBKQPKT_SEQ))
#define BIT_GET_RXBKQPKT_SEQ(x)			(((x) >> BIT_SHIFT_RXBKQPKT_SEQ) & BIT_MASK_RXBKQPKT_SEQ)
#define BIT_SET_RXBKQPKT_SEQ(x, v)			(BIT_CLEAR_RXBKQPKT_SEQ(x) | BIT_RXBKQPKT_SEQ(v))

#define BIT_SHIFT_RXBEQPKT_SEQ				16
#define BIT_MASK_RXBEQPKT_SEQ				0xf
#define BIT_RXBEQPKT_SEQ(x)				(((x) & BIT_MASK_RXBEQPKT_SEQ) << BIT_SHIFT_RXBEQPKT_SEQ)
#define BITS_RXBEQPKT_SEQ				(BIT_MASK_RXBEQPKT_SEQ << BIT_SHIFT_RXBEQPKT_SEQ)
#define BIT_CLEAR_RXBEQPKT_SEQ(x)			((x) & (~BITS_RXBEQPKT_SEQ))
#define BIT_GET_RXBEQPKT_SEQ(x)			(((x) >> BIT_SHIFT_RXBEQPKT_SEQ) & BIT_MASK_RXBEQPKT_SEQ)
#define BIT_SET_RXBEQPKT_SEQ(x, v)			(BIT_CLEAR_RXBEQPKT_SEQ(x) | BIT_RXBEQPKT_SEQ(v))

#define BIT_SHIFT_RXVIQPKT_SEQ				12
#define BIT_MASK_RXVIQPKT_SEQ				0xf
#define BIT_RXVIQPKT_SEQ(x)				(((x) & BIT_MASK_RXVIQPKT_SEQ) << BIT_SHIFT_RXVIQPKT_SEQ)
#define BITS_RXVIQPKT_SEQ				(BIT_MASK_RXVIQPKT_SEQ << BIT_SHIFT_RXVIQPKT_SEQ)
#define BIT_CLEAR_RXVIQPKT_SEQ(x)			((x) & (~BITS_RXVIQPKT_SEQ))
#define BIT_GET_RXVIQPKT_SEQ(x)			(((x) >> BIT_SHIFT_RXVIQPKT_SEQ) & BIT_MASK_RXVIQPKT_SEQ)
#define BIT_SET_RXVIQPKT_SEQ(x, v)			(BIT_CLEAR_RXVIQPKT_SEQ(x) | BIT_RXVIQPKT_SEQ(v))

#define BIT_SHIFT_RXVOQPKT_SEQ				8
#define BIT_MASK_RXVOQPKT_SEQ				0xf
#define BIT_RXVOQPKT_SEQ(x)				(((x) & BIT_MASK_RXVOQPKT_SEQ) << BIT_SHIFT_RXVOQPKT_SEQ)
#define BITS_RXVOQPKT_SEQ				(BIT_MASK_RXVOQPKT_SEQ << BIT_SHIFT_RXVOQPKT_SEQ)
#define BIT_CLEAR_RXVOQPKT_SEQ(x)			((x) & (~BITS_RXVOQPKT_SEQ))
#define BIT_GET_RXVOQPKT_SEQ(x)			(((x) >> BIT_SHIFT_RXVOQPKT_SEQ) & BIT_MASK_RXVOQPKT_SEQ)
#define BIT_SET_RXVOQPKT_SEQ(x, v)			(BIT_CLEAR_RXVOQPKT_SEQ(x) | BIT_RXVOQPKT_SEQ(v))

#define BIT_RXBKQPKT_ERR				BIT(7)
#define BIT_RXBEQPKT_ERR				BIT(6)
#define BIT_RXVIQPKT_ERR				BIT(5)
#define BIT_RXVOQPKT_ERR				BIT(4)
#define BIT_RXDMA_MON_EN				BIT(2)
#define BIT_RXPKT_MON_EN				BIT(0)

/* 2 REG_STATE_MON				(Offset 0x06B4) */

#define BIT_SHIFT_STATE_SEL				24
#define BIT_MASK_STATE_SEL				0x1f
#define BIT_STATE_SEL(x)				(((x) & BIT_MASK_STATE_SEL) << BIT_SHIFT_STATE_SEL)
#define BITS_STATE_SEL					(BIT_MASK_STATE_SEL << BIT_SHIFT_STATE_SEL)
#define BIT_CLEAR_STATE_SEL(x)				((x) & (~BITS_STATE_SEL))
#define BIT_GET_STATE_SEL(x)				(((x) >> BIT_SHIFT_STATE_SEL) & BIT_MASK_STATE_SEL)
#define BIT_SET_STATE_SEL(x, v)			(BIT_CLEAR_STATE_SEL(x) | BIT_STATE_SEL(v))

#define BIT_SHIFT_CUR_STATE1				8
#define BIT_MASK_CUR_STATE1				0xff
#define BIT_CUR_STATE1(x)				(((x) & BIT_MASK_CUR_STATE1) << BIT_SHIFT_CUR_STATE1)
#define BITS_CUR_STATE1				(BIT_MASK_CUR_STATE1 << BIT_SHIFT_CUR_STATE1)
#define BIT_CLEAR_CUR_STATE1(x)			((x) & (~BITS_CUR_STATE1))
#define BIT_GET_CUR_STATE1(x)				(((x) >> BIT_SHIFT_CUR_STATE1) & BIT_MASK_CUR_STATE1)
#define BIT_SET_CUR_STATE1(x, v)			(BIT_CLEAR_CUR_STATE1(x) | BIT_CUR_STATE1(v))

#define BIT_WRITE_FSM_EN				BIT(7)

#define BIT_SHIFT_CUR_STATE0				0
#define BIT_MASK_CUR_STATE0				0x7f
#define BIT_CUR_STATE0(x)				(((x) & BIT_MASK_CUR_STATE0) << BIT_SHIFT_CUR_STATE0)
#define BITS_CUR_STATE0				(BIT_MASK_CUR_STATE0 << BIT_SHIFT_CUR_STATE0)
#define BIT_CLEAR_CUR_STATE0(x)			((x) & (~BITS_CUR_STATE0))
#define BIT_GET_CUR_STATE0(x)				(((x) >> BIT_SHIFT_CUR_STATE0) & BIT_MASK_CUR_STATE0)
#define BIT_SET_CUR_STATE0(x, v)			(BIT_CLEAR_CUR_STATE0(x) | BIT_CUR_STATE0(v))

/* 2 REG_ERROR_EVT_CTL			(Offset 0x06B8) */

#define BIT_CSIRPT_LEN_BB_MORE_THAN_MAC		BIT(23)
#define BIT_CSI_CHKSUM_ERROR				BIT(22)
#define BIT_MACRX_ERR_4				BIT(20)
#define BIT_MACRX_ERR_3				BIT(19)
#define BIT_MACRX_ERR_2				BIT(18)
#define BIT_MACRX_ERR_1				BIT(17)
#define BIT_MACRX_ERR_0				BIT(16)
#define BIT_PRETX_ERRHDL_EN				BIT(15)
#define BIT_MACTX_ERR_3				BIT(3)
#define BIT_MACTX_ERR_2				BIT(2)
#define BIT_MACTX_ERR_1				BIT(1)
#define BIT_MACTX_ERR_0				BIT(0)

/* 2 REG_SEARCH_MACID			(Offset 0x06BC) */

#define BIT_EN_TXRPTBUF_CLK				BIT(31)

#define BIT_SHIFT_INFO_INDEX_OFFSET			16
#define BIT_MASK_INFO_INDEX_OFFSET			0x1fff
#define BIT_INFO_INDEX_OFFSET(x)			(((x) & BIT_MASK_INFO_INDEX_OFFSET) << BIT_SHIFT_INFO_INDEX_OFFSET)
#define BITS_INFO_INDEX_OFFSET				(BIT_MASK_INFO_INDEX_OFFSET << BIT_SHIFT_INFO_INDEX_OFFSET)
#define BIT_CLEAR_INFO_INDEX_OFFSET(x)			((x) & (~BITS_INFO_INDEX_OFFSET))
#define BIT_GET_INFO_INDEX_OFFSET(x)			(((x) >> BIT_SHIFT_INFO_INDEX_OFFSET) & BIT_MASK_INFO_INDEX_OFFSET)
#define BIT_SET_INFO_INDEX_OFFSET(x, v)		(BIT_CLEAR_INFO_INDEX_OFFSET(x) | BIT_INFO_INDEX_OFFSET(v))

#define BIT_WMAC_SRCH_FIFOFULL				BIT(15)
#define BIT_DIS_INFOSRCH				BIT(14)
#define BIT_DISABLE_B0					BIT(13)

#define BIT_SHIFT_INFO_ADDR_OFFSET			0
#define BIT_MASK_INFO_ADDR_OFFSET			0x1fff
#define BIT_INFO_ADDR_OFFSET(x)			(((x) & BIT_MASK_INFO_ADDR_OFFSET) << BIT_SHIFT_INFO_ADDR_OFFSET)
#define BITS_INFO_ADDR_OFFSET				(BIT_MASK_INFO_ADDR_OFFSET << BIT_SHIFT_INFO_ADDR_OFFSET)
#define BIT_CLEAR_INFO_ADDR_OFFSET(x)			((x) & (~BITS_INFO_ADDR_OFFSET))
#define BIT_GET_INFO_ADDR_OFFSET(x)			(((x) >> BIT_SHIFT_INFO_ADDR_OFFSET) & BIT_MASK_INFO_ADDR_OFFSET)
#define BIT_SET_INFO_ADDR_OFFSET(x, v)			(BIT_CLEAR_INFO_ADDR_OFFSET(x) | BIT_INFO_ADDR_OFFSET(v))

/* 2 REG_BT_COEX_TABLE_V1			(Offset 0x06C0) */

#define BIT_SHIFT_COEX_TABLE_1				0
#define BIT_MASK_COEX_TABLE_1				0xffffffffL
#define BIT_COEX_TABLE_1(x)				(((x) & BIT_MASK_COEX_TABLE_1) << BIT_SHIFT_COEX_TABLE_1)
#define BITS_COEX_TABLE_1				(BIT_MASK_COEX_TABLE_1 << BIT_SHIFT_COEX_TABLE_1)
#define BIT_CLEAR_COEX_TABLE_1(x)			((x) & (~BITS_COEX_TABLE_1))
#define BIT_GET_COEX_TABLE_1(x)			(((x) >> BIT_SHIFT_COEX_TABLE_1) & BIT_MASK_COEX_TABLE_1)
#define BIT_SET_COEX_TABLE_1(x, v)			(BIT_CLEAR_COEX_TABLE_1(x) | BIT_COEX_TABLE_1(v))

/* 2 REG_BT_COEX_TABLE2_V1			(Offset 0x06C4) */

#define BIT_SHIFT_COEX_TABLE_2				0
#define BIT_MASK_COEX_TABLE_2				0xffffffffL
#define BIT_COEX_TABLE_2(x)				(((x) & BIT_MASK_COEX_TABLE_2) << BIT_SHIFT_COEX_TABLE_2)
#define BITS_COEX_TABLE_2				(BIT_MASK_COEX_TABLE_2 << BIT_SHIFT_COEX_TABLE_2)
#define BIT_CLEAR_COEX_TABLE_2(x)			((x) & (~BITS_COEX_TABLE_2))
#define BIT_GET_COEX_TABLE_2(x)			(((x) >> BIT_SHIFT_COEX_TABLE_2) & BIT_MASK_COEX_TABLE_2)
#define BIT_SET_COEX_TABLE_2(x, v)			(BIT_CLEAR_COEX_TABLE_2(x) | BIT_COEX_TABLE_2(v))

/* 2 REG_BT_COEX_BREAK_TABLE			(Offset 0x06C8) */

#define BIT_SHIFT_BREAK_TABLE_2			16
#define BIT_MASK_BREAK_TABLE_2				0xffff
#define BIT_BREAK_TABLE_2(x)				(((x) & BIT_MASK_BREAK_TABLE_2) << BIT_SHIFT_BREAK_TABLE_2)
#define BITS_BREAK_TABLE_2				(BIT_MASK_BREAK_TABLE_2 << BIT_SHIFT_BREAK_TABLE_2)
#define BIT_CLEAR_BREAK_TABLE_2(x)			((x) & (~BITS_BREAK_TABLE_2))
#define BIT_GET_BREAK_TABLE_2(x)			(((x) >> BIT_SHIFT_BREAK_TABLE_2) & BIT_MASK_BREAK_TABLE_2)
#define BIT_SET_BREAK_TABLE_2(x, v)			(BIT_CLEAR_BREAK_TABLE_2(x) | BIT_BREAK_TABLE_2(v))

#define BIT_SHIFT_BREAK_TABLE_1			0
#define BIT_MASK_BREAK_TABLE_1				0xffff
#define BIT_BREAK_TABLE_1(x)				(((x) & BIT_MASK_BREAK_TABLE_1) << BIT_SHIFT_BREAK_TABLE_1)
#define BITS_BREAK_TABLE_1				(BIT_MASK_BREAK_TABLE_1 << BIT_SHIFT_BREAK_TABLE_1)
#define BIT_CLEAR_BREAK_TABLE_1(x)			((x) & (~BITS_BREAK_TABLE_1))
#define BIT_GET_BREAK_TABLE_1(x)			(((x) >> BIT_SHIFT_BREAK_TABLE_1) & BIT_MASK_BREAK_TABLE_1)
#define BIT_SET_BREAK_TABLE_1(x, v)			(BIT_CLEAR_BREAK_TABLE_1(x) | BIT_BREAK_TABLE_1(v))

/* 2 REG_BT_COEX_TABLE_H_V1			(Offset 0x06CC) */

#define BIT_PRI_MASK_RX_RESP_V1			BIT(30)
#define BIT_PRI_MASK_RXOFDM_V1				BIT(29)
#define BIT_PRI_MASK_RXCCK_V1				BIT(28)

#define BIT_SHIFT_PRI_MASK_TXAC			21
#define BIT_MASK_PRI_MASK_TXAC				0x7f
#define BIT_PRI_MASK_TXAC(x)				(((x) & BIT_MASK_PRI_MASK_TXAC) << BIT_SHIFT_PRI_MASK_TXAC)
#define BITS_PRI_MASK_TXAC				(BIT_MASK_PRI_MASK_TXAC << BIT_SHIFT_PRI_MASK_TXAC)
#define BIT_CLEAR_PRI_MASK_TXAC(x)			((x) & (~BITS_PRI_MASK_TXAC))
#define BIT_GET_PRI_MASK_TXAC(x)			(((x) >> BIT_SHIFT_PRI_MASK_TXAC) & BIT_MASK_PRI_MASK_TXAC)
#define BIT_SET_PRI_MASK_TXAC(x, v)			(BIT_CLEAR_PRI_MASK_TXAC(x) | BIT_PRI_MASK_TXAC(v))

#define BIT_SHIFT_PRI_MASK_NAV				13
#define BIT_MASK_PRI_MASK_NAV				0xff
#define BIT_PRI_MASK_NAV(x)				(((x) & BIT_MASK_PRI_MASK_NAV) << BIT_SHIFT_PRI_MASK_NAV)
#define BITS_PRI_MASK_NAV				(BIT_MASK_PRI_MASK_NAV << BIT_SHIFT_PRI_MASK_NAV)
#define BIT_CLEAR_PRI_MASK_NAV(x)			((x) & (~BITS_PRI_MASK_NAV))
#define BIT_GET_PRI_MASK_NAV(x)			(((x) >> BIT_SHIFT_PRI_MASK_NAV) & BIT_MASK_PRI_MASK_NAV)
#define BIT_SET_PRI_MASK_NAV(x, v)			(BIT_CLEAR_PRI_MASK_NAV(x) | BIT_PRI_MASK_NAV(v))

#define BIT_PRI_MASK_CCK_V1				BIT(12)
#define BIT_PRI_MASK_OFDM_V1				BIT(11)
#define BIT_PRI_MASK_RTY_V1				BIT(10)

#define BIT_SHIFT_PRI_MASK_NUM				6
#define BIT_MASK_PRI_MASK_NUM				0xf
#define BIT_PRI_MASK_NUM(x)				(((x) & BIT_MASK_PRI_MASK_NUM) << BIT_SHIFT_PRI_MASK_NUM)
#define BITS_PRI_MASK_NUM				(BIT_MASK_PRI_MASK_NUM << BIT_SHIFT_PRI_MASK_NUM)
#define BIT_CLEAR_PRI_MASK_NUM(x)			((x) & (~BITS_PRI_MASK_NUM))
#define BIT_GET_PRI_MASK_NUM(x)			(((x) >> BIT_SHIFT_PRI_MASK_NUM) & BIT_MASK_PRI_MASK_NUM)
#define BIT_SET_PRI_MASK_NUM(x, v)			(BIT_CLEAR_PRI_MASK_NUM(x) | BIT_PRI_MASK_NUM(v))

#define BIT_SHIFT_PRI_MASK_TYPE			2
#define BIT_MASK_PRI_MASK_TYPE				0xf
#define BIT_PRI_MASK_TYPE(x)				(((x) & BIT_MASK_PRI_MASK_TYPE) << BIT_SHIFT_PRI_MASK_TYPE)
#define BITS_PRI_MASK_TYPE				(BIT_MASK_PRI_MASK_TYPE << BIT_SHIFT_PRI_MASK_TYPE)
#define BIT_CLEAR_PRI_MASK_TYPE(x)			((x) & (~BITS_PRI_MASK_TYPE))
#define BIT_GET_PRI_MASK_TYPE(x)			(((x) >> BIT_SHIFT_PRI_MASK_TYPE) & BIT_MASK_PRI_MASK_TYPE)
#define BIT_SET_PRI_MASK_TYPE(x, v)			(BIT_CLEAR_PRI_MASK_TYPE(x) | BIT_PRI_MASK_TYPE(v))

#define BIT_OOB_V1					BIT(1)
#define BIT_ANT_SEL_V1					BIT(0)

/* 2 REG_RXCMD_0				(Offset 0x06D0) */

#define BIT_RXCMD_EN					BIT(31)

#define BIT_SHIFT_RXCMD_INFO				0
#define BIT_MASK_RXCMD_INFO				0x7fffffffL
#define BIT_RXCMD_INFO(x)				(((x) & BIT_MASK_RXCMD_INFO) << BIT_SHIFT_RXCMD_INFO)
#define BITS_RXCMD_INFO				(BIT_MASK_RXCMD_INFO << BIT_SHIFT_RXCMD_INFO)
#define BIT_CLEAR_RXCMD_INFO(x)			((x) & (~BITS_RXCMD_INFO))
#define BIT_GET_RXCMD_INFO(x)				(((x) >> BIT_SHIFT_RXCMD_INFO) & BIT_MASK_RXCMD_INFO)
#define BIT_SET_RXCMD_INFO(x, v)			(BIT_CLEAR_RXCMD_INFO(x) | BIT_RXCMD_INFO(v))

/* 2 REG_RXCMD_1				(Offset 0x06D4) */

#define BIT_SHIFT_RXCMD_PRD				0
#define BIT_MASK_RXCMD_PRD				0xffff
#define BIT_RXCMD_PRD(x)				(((x) & BIT_MASK_RXCMD_PRD) << BIT_SHIFT_RXCMD_PRD)
#define BITS_RXCMD_PRD					(BIT_MASK_RXCMD_PRD << BIT_SHIFT_RXCMD_PRD)
#define BIT_CLEAR_RXCMD_PRD(x)				((x) & (~BITS_RXCMD_PRD))
#define BIT_GET_RXCMD_PRD(x)				(((x) >> BIT_SHIFT_RXCMD_PRD) & BIT_MASK_RXCMD_PRD)
#define BIT_SET_RXCMD_PRD(x, v)			(BIT_CLEAR_RXCMD_PRD(x) | BIT_RXCMD_PRD(v))

/* 2 REG_RESP_TXINFO_CFG			(Offset 0x06D8) */

#define BIT_SHIFT_RESP_MFB				25
#define BIT_MASK_RESP_MFB				0x7f
#define BIT_RESP_MFB(x)				(((x) & BIT_MASK_RESP_MFB) << BIT_SHIFT_RESP_MFB)
#define BITS_RESP_MFB					(BIT_MASK_RESP_MFB << BIT_SHIFT_RESP_MFB)
#define BIT_CLEAR_RESP_MFB(x)				((x) & (~BITS_RESP_MFB))
#define BIT_GET_RESP_MFB(x)				(((x) >> BIT_SHIFT_RESP_MFB) & BIT_MASK_RESP_MFB)
#define BIT_SET_RESP_MFB(x, v)				(BIT_CLEAR_RESP_MFB(x) | BIT_RESP_MFB(v))

#define BIT_SHIFT_ANTINF_SEL				23
#define BIT_MASK_ANTINF_SEL				0x3
#define BIT_ANTINF_SEL(x)				(((x) & BIT_MASK_ANTINF_SEL) << BIT_SHIFT_ANTINF_SEL)
#define BITS_ANTINF_SEL				(BIT_MASK_ANTINF_SEL << BIT_SHIFT_ANTINF_SEL)
#define BIT_CLEAR_ANTINF_SEL(x)			((x) & (~BITS_ANTINF_SEL))
#define BIT_GET_ANTINF_SEL(x)				(((x) >> BIT_SHIFT_ANTINF_SEL) & BIT_MASK_ANTINF_SEL)
#define BIT_SET_ANTINF_SEL(x, v)			(BIT_CLEAR_ANTINF_SEL(x) | BIT_ANTINF_SEL(v))

#define BIT_SHIFT_ANTSEL_SEL				21
#define BIT_MASK_ANTSEL_SEL				0x3
#define BIT_ANTSEL_SEL(x)				(((x) & BIT_MASK_ANTSEL_SEL) << BIT_SHIFT_ANTSEL_SEL)
#define BITS_ANTSEL_SEL				(BIT_MASK_ANTSEL_SEL << BIT_SHIFT_ANTSEL_SEL)
#define BIT_CLEAR_ANTSEL_SEL(x)			((x) & (~BITS_ANTSEL_SEL))
#define BIT_GET_ANTSEL_SEL(x)				(((x) >> BIT_SHIFT_ANTSEL_SEL) & BIT_MASK_ANTSEL_SEL)
#define BIT_SET_ANTSEL_SEL(x, v)			(BIT_CLEAR_ANTSEL_SEL(x) | BIT_ANTSEL_SEL(v))

#define BIT_SHIFT_RESP_TXPOWER				18
#define BIT_MASK_RESP_TXPOWER				0x7
#define BIT_RESP_TXPOWER(x)				(((x) & BIT_MASK_RESP_TXPOWER) << BIT_SHIFT_RESP_TXPOWER)
#define BITS_RESP_TXPOWER				(BIT_MASK_RESP_TXPOWER << BIT_SHIFT_RESP_TXPOWER)
#define BIT_CLEAR_RESP_TXPOWER(x)			((x) & (~BITS_RESP_TXPOWER))
#define BIT_GET_RESP_TXPOWER(x)			(((x) >> BIT_SHIFT_RESP_TXPOWER) & BIT_MASK_RESP_TXPOWER)
#define BIT_SET_RESP_TXPOWER(x, v)			(BIT_CLEAR_RESP_TXPOWER(x) | BIT_RESP_TXPOWER(v))

#define BIT_SHIFT_RESP_TXANT				0
#define BIT_MASK_RESP_TXANT				0x3ffff
#define BIT_RESP_TXANT(x)				(((x) & BIT_MASK_RESP_TXANT) << BIT_SHIFT_RESP_TXANT)
#define BITS_RESP_TXANT				(BIT_MASK_RESP_TXANT << BIT_SHIFT_RESP_TXANT)
#define BIT_CLEAR_RESP_TXANT(x)			((x) & (~BITS_RESP_TXANT))
#define BIT_GET_RESP_TXANT(x)				(((x) >> BIT_SHIFT_RESP_TXANT) & BIT_MASK_RESP_TXANT)
#define BIT_SET_RESP_TXANT(x, v)			(BIT_CLEAR_RESP_TXANT(x) | BIT_RESP_TXANT(v))

/* 2 REG_CSI_CTRL				(Offset 0x06DC) */

#define BIT_CTL_IDLE_CLR_CSI_RPT_V1			BIT(31)
#define BIT_USE_NDPARATE				BIT(30)

#define BIT_SHIFT_CSI_RATE				24
#define BIT_MASK_CSI_RATE				0x3f
#define BIT_CSI_RATE(x)				(((x) & BIT_MASK_CSI_RATE) << BIT_SHIFT_CSI_RATE)
#define BITS_CSI_RATE					(BIT_MASK_CSI_RATE << BIT_SHIFT_CSI_RATE)
#define BIT_CLEAR_CSI_RATE(x)				((x) & (~BITS_CSI_RATE))
#define BIT_GET_CSI_RATE(x)				(((x) >> BIT_SHIFT_CSI_RATE) & BIT_MASK_CSI_RATE)
#define BIT_SET_CSI_RATE(x, v)				(BIT_CLEAR_CSI_RATE(x) | BIT_CSI_RATE(v))

#define BIT_SHIFT_RESP_TXRATE				16
#define BIT_MASK_RESP_TXRATE				0xff
#define BIT_RESP_TXRATE(x)				(((x) & BIT_MASK_RESP_TXRATE) << BIT_SHIFT_RESP_TXRATE)
#define BITS_RESP_TXRATE				(BIT_MASK_RESP_TXRATE << BIT_SHIFT_RESP_TXRATE)
#define BIT_CLEAR_RESP_TXRATE(x)			((x) & (~BITS_RESP_TXRATE))
#define BIT_GET_RESP_TXRATE(x)				(((x) >> BIT_SHIFT_RESP_TXRATE) & BIT_MASK_RESP_TXRATE)
#define BIT_SET_RESP_TXRATE(x, v)			(BIT_CLEAR_RESP_TXRATE(x) | BIT_RESP_TXRATE(v))

#define BIT_WMAC_CSI_RATE_FORCE_EN			BIT(15)

#define BIT_SHIFT_WMAC_CSI_RSC_FORCE			13
#define BIT_MASK_WMAC_CSI_RSC_FORCE			0x3
#define BIT_WMAC_CSI_RSC_FORCE(x)			(((x) & BIT_MASK_WMAC_CSI_RSC_FORCE) << BIT_SHIFT_WMAC_CSI_RSC_FORCE)
#define BITS_WMAC_CSI_RSC_FORCE			(BIT_MASK_WMAC_CSI_RSC_FORCE << BIT_SHIFT_WMAC_CSI_RSC_FORCE)
#define BIT_CLEAR_WMAC_CSI_RSC_FORCE(x)		((x) & (~BITS_WMAC_CSI_RSC_FORCE))
#define BIT_GET_WMAC_CSI_RSC_FORCE(x)			(((x) >> BIT_SHIFT_WMAC_CSI_RSC_FORCE) & BIT_MASK_WMAC_CSI_RSC_FORCE)
#define BIT_SET_WMAC_CSI_RSC_FORCE(x, v)		(BIT_CLEAR_WMAC_CSI_RSC_FORCE(x) | BIT_WMAC_CSI_RSC_FORCE(v))

#define BIT_CSI_GID_SEL				BIT(12)
#define BIT_RDCSIMD_FLAG_TRIG_SEL			BIT(11)
#define BIT_NDPVLD_POS_RST_FFPTR_DIS_V1		BIT(10)
#define BIT_NDPVLD_PROTECT_RDRDY_DIS			BIT(9)
#define BIT_CSIRD_EMPTY_APPZERO			BIT(8)
#define BIT_WMC_CSI_RATE_FB_EN				BIT(7)
#define BIT_RXFIFO_WRPTR_WO_CHKSUM			BIT(6)

/* 2 REG_P2P_RX_BCN_NOA			(Offset 0x06E0) */

#define BIT_P2P_NOA_PARSER_EN				BIT(15)

#define BIT_SHIFT_P2P_BSSID_SEL_V1			12
#define BIT_MASK_P2P_BSSID_SEL_V1			0x7
#define BIT_P2P_BSSID_SEL_V1(x)			(((x) & BIT_MASK_P2P_BSSID_SEL_V1) << BIT_SHIFT_P2P_BSSID_SEL_V1)
#define BITS_P2P_BSSID_SEL_V1				(BIT_MASK_P2P_BSSID_SEL_V1 << BIT_SHIFT_P2P_BSSID_SEL_V1)
#define BIT_CLEAR_P2P_BSSID_SEL_V1(x)			((x) & (~BITS_P2P_BSSID_SEL_V1))
#define BIT_GET_P2P_BSSID_SEL_V1(x)			(((x) >> BIT_SHIFT_P2P_BSSID_SEL_V1) & BIT_MASK_P2P_BSSID_SEL_V1)
#define BIT_SET_P2P_BSSID_SEL_V1(x, v)			(BIT_CLEAR_P2P_BSSID_SEL_V1(x) | BIT_P2P_BSSID_SEL_V1(v))

#define BIT_SHIFT_P2P_OUI_TYPE				0
#define BIT_MASK_P2P_OUI_TYPE				0xff
#define BIT_P2P_OUI_TYPE(x)				(((x) & BIT_MASK_P2P_OUI_TYPE) << BIT_SHIFT_P2P_OUI_TYPE)
#define BITS_P2P_OUI_TYPE				(BIT_MASK_P2P_OUI_TYPE << BIT_SHIFT_P2P_OUI_TYPE)
#define BIT_CLEAR_P2P_OUI_TYPE(x)			((x) & (~BITS_P2P_OUI_TYPE))
#define BIT_GET_P2P_OUI_TYPE(x)			(((x) >> BIT_SHIFT_P2P_OUI_TYPE) & BIT_MASK_P2P_OUI_TYPE)
#define BIT_SET_P2P_OUI_TYPE(x, v)			(BIT_CLEAR_P2P_OUI_TYPE(x) | BIT_P2P_OUI_TYPE(v))

/* 2 REG_ASSOCIATED_BFMER0_INFO		(Offset 0x06E4) */

#define BIT_SHIFT_R_WMAC_SOUNDING_RXADD_R0_V1		0
#define BIT_MASK_R_WMAC_SOUNDING_RXADD_R0_V1		0xffffffffL
#define BIT_R_WMAC_SOUNDING_RXADD_R0_V1(x)		(((x) & BIT_MASK_R_WMAC_SOUNDING_RXADD_R0_V1) << BIT_SHIFT_R_WMAC_SOUNDING_RXADD_R0_V1)
#define BITS_R_WMAC_SOUNDING_RXADD_R0_V1		(BIT_MASK_R_WMAC_SOUNDING_RXADD_R0_V1 << BIT_SHIFT_R_WMAC_SOUNDING_RXADD_R0_V1)
#define BIT_CLEAR_R_WMAC_SOUNDING_RXADD_R0_V1(x)	((x) & (~BITS_R_WMAC_SOUNDING_RXADD_R0_V1))
#define BIT_GET_R_WMAC_SOUNDING_RXADD_R0_V1(x)	(((x) >> BIT_SHIFT_R_WMAC_SOUNDING_RXADD_R0_V1) & BIT_MASK_R_WMAC_SOUNDING_RXADD_R0_V1)
#define BIT_SET_R_WMAC_SOUNDING_RXADD_R0_V1(x, v)	(BIT_CLEAR_R_WMAC_SOUNDING_RXADD_R0_V1(x) | BIT_R_WMAC_SOUNDING_RXADD_R0_V1(v))

/* 2 REG_SOUNDING_CFG1			(Offset 0x06E8) */

#define BIT_SHIFT_R_WMAC_TXCSI_AID0			16
#define BIT_MASK_R_WMAC_TXCSI_AID0			0x1ff
#define BIT_R_WMAC_TXCSI_AID0(x)			(((x) & BIT_MASK_R_WMAC_TXCSI_AID0) << BIT_SHIFT_R_WMAC_TXCSI_AID0)
#define BITS_R_WMAC_TXCSI_AID0				(BIT_MASK_R_WMAC_TXCSI_AID0 << BIT_SHIFT_R_WMAC_TXCSI_AID0)
#define BIT_CLEAR_R_WMAC_TXCSI_AID0(x)			((x) & (~BITS_R_WMAC_TXCSI_AID0))
#define BIT_GET_R_WMAC_TXCSI_AID0(x)			(((x) >> BIT_SHIFT_R_WMAC_TXCSI_AID0) & BIT_MASK_R_WMAC_TXCSI_AID0)
#define BIT_SET_R_WMAC_TXCSI_AID0(x, v)		(BIT_CLEAR_R_WMAC_TXCSI_AID0(x) | BIT_R_WMAC_TXCSI_AID0(v))

#define BIT_SHIFT_R_WMAC_SOUNDING_RXADD_R0_H		0
#define BIT_MASK_R_WMAC_SOUNDING_RXADD_R0_H		0xffff
#define BIT_R_WMAC_SOUNDING_RXADD_R0_H(x)		(((x) & BIT_MASK_R_WMAC_SOUNDING_RXADD_R0_H) << BIT_SHIFT_R_WMAC_SOUNDING_RXADD_R0_H)
#define BITS_R_WMAC_SOUNDING_RXADD_R0_H		(BIT_MASK_R_WMAC_SOUNDING_RXADD_R0_H << BIT_SHIFT_R_WMAC_SOUNDING_RXADD_R0_H)
#define BIT_CLEAR_R_WMAC_SOUNDING_RXADD_R0_H(x)	((x) & (~BITS_R_WMAC_SOUNDING_RXADD_R0_H))
#define BIT_GET_R_WMAC_SOUNDING_RXADD_R0_H(x)		(((x) >> BIT_SHIFT_R_WMAC_SOUNDING_RXADD_R0_H) & BIT_MASK_R_WMAC_SOUNDING_RXADD_R0_H)
#define BIT_SET_R_WMAC_SOUNDING_RXADD_R0_H(x, v)	(BIT_CLEAR_R_WMAC_SOUNDING_RXADD_R0_H(x) | BIT_R_WMAC_SOUNDING_RXADD_R0_H(v))

/* 2 REG_SOUNDING_CFG2			(Offset 0x06EC) */

#define BIT_SHIFT_R_WMAC_SOUNDING_RXADD_L		0
#define BIT_MASK_R_WMAC_SOUNDING_RXADD_L		0xffffffffL
#define BIT_R_WMAC_SOUNDING_RXADD_L(x)			(((x) & BIT_MASK_R_WMAC_SOUNDING_RXADD_L) << BIT_SHIFT_R_WMAC_SOUNDING_RXADD_L)
#define BITS_R_WMAC_SOUNDING_RXADD_L			(BIT_MASK_R_WMAC_SOUNDING_RXADD_L << BIT_SHIFT_R_WMAC_SOUNDING_RXADD_L)
#define BIT_CLEAR_R_WMAC_SOUNDING_RXADD_L(x)		((x) & (~BITS_R_WMAC_SOUNDING_RXADD_L))
#define BIT_GET_R_WMAC_SOUNDING_RXADD_L(x)		(((x) >> BIT_SHIFT_R_WMAC_SOUNDING_RXADD_L) & BIT_MASK_R_WMAC_SOUNDING_RXADD_L)
#define BIT_SET_R_WMAC_SOUNDING_RXADD_L(x, v)		(BIT_CLEAR_R_WMAC_SOUNDING_RXADD_L(x) | BIT_R_WMAC_SOUNDING_RXADD_L(v))

/* 2 REG_SOUNDING_CFG3			(Offset 0x06F0) */

#define BIT_SHIFT_R_WMAC_TXCSI_AID1			16
#define BIT_MASK_R_WMAC_TXCSI_AID1			0x1ff
#define BIT_R_WMAC_TXCSI_AID1(x)			(((x) & BIT_MASK_R_WMAC_TXCSI_AID1) << BIT_SHIFT_R_WMAC_TXCSI_AID1)
#define BITS_R_WMAC_TXCSI_AID1				(BIT_MASK_R_WMAC_TXCSI_AID1 << BIT_SHIFT_R_WMAC_TXCSI_AID1)
#define BIT_CLEAR_R_WMAC_TXCSI_AID1(x)			((x) & (~BITS_R_WMAC_TXCSI_AID1))
#define BIT_GET_R_WMAC_TXCSI_AID1(x)			(((x) >> BIT_SHIFT_R_WMAC_TXCSI_AID1) & BIT_MASK_R_WMAC_TXCSI_AID1)
#define BIT_SET_R_WMAC_TXCSI_AID1(x, v)		(BIT_CLEAR_R_WMAC_TXCSI_AID1(x) | BIT_R_WMAC_TXCSI_AID1(v))

#define BIT_SHIFT_R_WMAC_SOUNDING_RXADD_H		0
#define BIT_MASK_R_WMAC_SOUNDING_RXADD_H		0xffff
#define BIT_R_WMAC_SOUNDING_RXADD_H(x)			(((x) & BIT_MASK_R_WMAC_SOUNDING_RXADD_H) << BIT_SHIFT_R_WMAC_SOUNDING_RXADD_H)
#define BITS_R_WMAC_SOUNDING_RXADD_H			(BIT_MASK_R_WMAC_SOUNDING_RXADD_H << BIT_SHIFT_R_WMAC_SOUNDING_RXADD_H)
#define BIT_CLEAR_R_WMAC_SOUNDING_RXADD_H(x)		((x) & (~BITS_R_WMAC_SOUNDING_RXADD_H))
#define BIT_GET_R_WMAC_SOUNDING_RXADD_H(x)		(((x) >> BIT_SHIFT_R_WMAC_SOUNDING_RXADD_H) & BIT_MASK_R_WMAC_SOUNDING_RXADD_H)
#define BIT_SET_R_WMAC_SOUNDING_RXADD_H(x, v)		(BIT_CLEAR_R_WMAC_SOUNDING_RXADD_H(x) | BIT_R_WMAC_SOUNDING_RXADD_H(v))

/* 2 REG_SOUNDING_CFG0			(Offset 0x06F4) */

#define BIT_SHIFT_R_WMAC_BFINFO_20M_1			16
#define BIT_MASK_R_WMAC_BFINFO_20M_1			0xfff
#define BIT_R_WMAC_BFINFO_20M_1(x)			(((x) & BIT_MASK_R_WMAC_BFINFO_20M_1) << BIT_SHIFT_R_WMAC_BFINFO_20M_1)
#define BITS_R_WMAC_BFINFO_20M_1			(BIT_MASK_R_WMAC_BFINFO_20M_1 << BIT_SHIFT_R_WMAC_BFINFO_20M_1)
#define BIT_CLEAR_R_WMAC_BFINFO_20M_1(x)		((x) & (~BITS_R_WMAC_BFINFO_20M_1))
#define BIT_GET_R_WMAC_BFINFO_20M_1(x)			(((x) >> BIT_SHIFT_R_WMAC_BFINFO_20M_1) & BIT_MASK_R_WMAC_BFINFO_20M_1)
#define BIT_SET_R_WMAC_BFINFO_20M_1(x, v)		(BIT_CLEAR_R_WMAC_BFINFO_20M_1(x) | BIT_R_WMAC_BFINFO_20M_1(v))

#define BIT_SHIFT_R_WMAC_BFINFO_20M_0			0
#define BIT_MASK_R_WMAC_BFINFO_20M_0			0xfff
#define BIT_R_WMAC_BFINFO_20M_0(x)			(((x) & BIT_MASK_R_WMAC_BFINFO_20M_0) << BIT_SHIFT_R_WMAC_BFINFO_20M_0)
#define BITS_R_WMAC_BFINFO_20M_0			(BIT_MASK_R_WMAC_BFINFO_20M_0 << BIT_SHIFT_R_WMAC_BFINFO_20M_0)
#define BIT_CLEAR_R_WMAC_BFINFO_20M_0(x)		((x) & (~BITS_R_WMAC_BFINFO_20M_0))
#define BIT_GET_R_WMAC_BFINFO_20M_0(x)			(((x) >> BIT_SHIFT_R_WMAC_BFINFO_20M_0) & BIT_MASK_R_WMAC_BFINFO_20M_0)
#define BIT_SET_R_WMAC_BFINFO_20M_0(x, v)		(BIT_CLEAR_R_WMAC_BFINFO_20M_0(x) | BIT_R_WMAC_BFINFO_20M_0(v))

/* 2 REG_ANTCD_INFO				(Offset 0x06F8) */

#define BIT_SHIFT_WMAC_RESP_ANTD			12
#define BIT_MASK_WMAC_RESP_ANTD			0xf
#define BIT_WMAC_RESP_ANTD(x)				(((x) & BIT_MASK_WMAC_RESP_ANTD) << BIT_SHIFT_WMAC_RESP_ANTD)
#define BITS_WMAC_RESP_ANTD				(BIT_MASK_WMAC_RESP_ANTD << BIT_SHIFT_WMAC_RESP_ANTD)
#define BIT_CLEAR_WMAC_RESP_ANTD(x)			((x) & (~BITS_WMAC_RESP_ANTD))
#define BIT_GET_WMAC_RESP_ANTD(x)			(((x) >> BIT_SHIFT_WMAC_RESP_ANTD) & BIT_MASK_WMAC_RESP_ANTD)
#define BIT_SET_WMAC_RESP_ANTD(x, v)			(BIT_CLEAR_WMAC_RESP_ANTD(x) | BIT_WMAC_RESP_ANTD(v))

#define BIT_SHIFT_WMAC_RESP_ANTC			8
#define BIT_MASK_WMAC_RESP_ANTC			0xf
#define BIT_WMAC_RESP_ANTC(x)				(((x) & BIT_MASK_WMAC_RESP_ANTC) << BIT_SHIFT_WMAC_RESP_ANTC)
#define BITS_WMAC_RESP_ANTC				(BIT_MASK_WMAC_RESP_ANTC << BIT_SHIFT_WMAC_RESP_ANTC)
#define BIT_CLEAR_WMAC_RESP_ANTC(x)			((x) & (~BITS_WMAC_RESP_ANTC))
#define BIT_GET_WMAC_RESP_ANTC(x)			(((x) >> BIT_SHIFT_WMAC_RESP_ANTC) & BIT_MASK_WMAC_RESP_ANTC)
#define BIT_SET_WMAC_RESP_ANTC(x, v)			(BIT_CLEAR_WMAC_RESP_ANTC(x) | BIT_WMAC_RESP_ANTC(v))

#define BIT_SHIFT_WMAC_RESP_ANTB			4
#define BIT_MASK_WMAC_RESP_ANTB			0xf
#define BIT_WMAC_RESP_ANTB(x)				(((x) & BIT_MASK_WMAC_RESP_ANTB) << BIT_SHIFT_WMAC_RESP_ANTB)
#define BITS_WMAC_RESP_ANTB				(BIT_MASK_WMAC_RESP_ANTB << BIT_SHIFT_WMAC_RESP_ANTB)
#define BIT_CLEAR_WMAC_RESP_ANTB(x)			((x) & (~BITS_WMAC_RESP_ANTB))
#define BIT_GET_WMAC_RESP_ANTB(x)			(((x) >> BIT_SHIFT_WMAC_RESP_ANTB) & BIT_MASK_WMAC_RESP_ANTB)
#define BIT_SET_WMAC_RESP_ANTB(x, v)			(BIT_CLEAR_WMAC_RESP_ANTB(x) | BIT_WMAC_RESP_ANTB(v))

#define BIT_SHIFT_WMAC_RESP_ANTA			0
#define BIT_MASK_WMAC_RESP_ANTA			0xf
#define BIT_WMAC_RESP_ANTA(x)				(((x) & BIT_MASK_WMAC_RESP_ANTA) << BIT_SHIFT_WMAC_RESP_ANTA)
#define BITS_WMAC_RESP_ANTA				(BIT_MASK_WMAC_RESP_ANTA << BIT_SHIFT_WMAC_RESP_ANTA)
#define BIT_CLEAR_WMAC_RESP_ANTA(x)			((x) & (~BITS_WMAC_RESP_ANTA))
#define BIT_GET_WMAC_RESP_ANTA(x)			(((x) >> BIT_SHIFT_WMAC_RESP_ANTA) & BIT_MASK_WMAC_RESP_ANTA)
#define BIT_SET_WMAC_RESP_ANTA(x, v)			(BIT_CLEAR_WMAC_RESP_ANTA(x) | BIT_WMAC_RESP_ANTA(v))

/* 2 REG_CSI_PTR				(Offset 0x06FC) */

#define BIT_SHIFT_CSI_RADDR_LATCH_V2			16
#define BIT_MASK_CSI_RADDR_LATCH_V2			0xffff
#define BIT_CSI_RADDR_LATCH_V2(x)			(((x) & BIT_MASK_CSI_RADDR_LATCH_V2) << BIT_SHIFT_CSI_RADDR_LATCH_V2)
#define BITS_CSI_RADDR_LATCH_V2			(BIT_MASK_CSI_RADDR_LATCH_V2 << BIT_SHIFT_CSI_RADDR_LATCH_V2)
#define BIT_CLEAR_CSI_RADDR_LATCH_V2(x)		((x) & (~BITS_CSI_RADDR_LATCH_V2))
#define BIT_GET_CSI_RADDR_LATCH_V2(x)			(((x) >> BIT_SHIFT_CSI_RADDR_LATCH_V2) & BIT_MASK_CSI_RADDR_LATCH_V2)
#define BIT_SET_CSI_RADDR_LATCH_V2(x, v)		(BIT_CLEAR_CSI_RADDR_LATCH_V2(x) | BIT_CSI_RADDR_LATCH_V2(v))

#define BIT_SHIFT_CSI_WADDR_LATCH_V2			0
#define BIT_MASK_CSI_WADDR_LATCH_V2			0xffff
#define BIT_CSI_WADDR_LATCH_V2(x)			(((x) & BIT_MASK_CSI_WADDR_LATCH_V2) << BIT_SHIFT_CSI_WADDR_LATCH_V2)
#define BITS_CSI_WADDR_LATCH_V2			(BIT_MASK_CSI_WADDR_LATCH_V2 << BIT_SHIFT_CSI_WADDR_LATCH_V2)
#define BIT_CLEAR_CSI_WADDR_LATCH_V2(x)		((x) & (~BITS_CSI_WADDR_LATCH_V2))
#define BIT_GET_CSI_WADDR_LATCH_V2(x)			(((x) >> BIT_SHIFT_CSI_WADDR_LATCH_V2) & BIT_MASK_CSI_WADDR_LATCH_V2)
#define BIT_SET_CSI_WADDR_LATCH_V2(x, v)		(BIT_CLEAR_CSI_WADDR_LATCH_V2(x) | BIT_CSI_WADDR_LATCH_V2(v))

/* 2 REG_MACID1				(Offset 0x0700) */

#define BIT_SHIFT_MACID1_0				0
#define BIT_MASK_MACID1_0				0xffffffffL
#define BIT_MACID1_0(x)				(((x) & BIT_MASK_MACID1_0) << BIT_SHIFT_MACID1_0)
#define BITS_MACID1_0					(BIT_MASK_MACID1_0 << BIT_SHIFT_MACID1_0)
#define BIT_CLEAR_MACID1_0(x)				((x) & (~BITS_MACID1_0))
#define BIT_GET_MACID1_0(x)				(((x) >> BIT_SHIFT_MACID1_0) & BIT_MASK_MACID1_0)
#define BIT_SET_MACID1_0(x, v)				(BIT_CLEAR_MACID1_0(x) | BIT_MACID1_0(v))

/* 2 REG_MACID1_1				(Offset 0x0704) */

#define BIT_SHIFT_MACID1_1				0
#define BIT_MASK_MACID1_1				0xffff
#define BIT_MACID1_1(x)				(((x) & BIT_MASK_MACID1_1) << BIT_SHIFT_MACID1_1)
#define BITS_MACID1_1					(BIT_MASK_MACID1_1 << BIT_SHIFT_MACID1_1)
#define BIT_CLEAR_MACID1_1(x)				((x) & (~BITS_MACID1_1))
#define BIT_GET_MACID1_1(x)				(((x) >> BIT_SHIFT_MACID1_1) & BIT_MASK_MACID1_1)
#define BIT_SET_MACID1_1(x, v)				(BIT_CLEAR_MACID1_1(x) | BIT_MACID1_1(v))

/* 2 REG_BSSID1				(Offset 0x0708) */

#define BIT_SHIFT_BSSID1_0				0
#define BIT_MASK_BSSID1_0				0xffffffffL
#define BIT_BSSID1_0(x)				(((x) & BIT_MASK_BSSID1_0) << BIT_SHIFT_BSSID1_0)
#define BITS_BSSID1_0					(BIT_MASK_BSSID1_0 << BIT_SHIFT_BSSID1_0)
#define BIT_CLEAR_BSSID1_0(x)				((x) & (~BITS_BSSID1_0))
#define BIT_GET_BSSID1_0(x)				(((x) >> BIT_SHIFT_BSSID1_0) & BIT_MASK_BSSID1_0)
#define BIT_SET_BSSID1_0(x, v)				(BIT_CLEAR_BSSID1_0(x) | BIT_BSSID1_0(v))

/* 2 REG_BSSID1_1				(Offset 0x070C) */

#define BIT_SHIFT_BSSID1_1				0
#define BIT_MASK_BSSID1_1				0xffff
#define BIT_BSSID1_1(x)				(((x) & BIT_MASK_BSSID1_1) << BIT_SHIFT_BSSID1_1)
#define BITS_BSSID1_1					(BIT_MASK_BSSID1_1 << BIT_SHIFT_BSSID1_1)
#define BIT_CLEAR_BSSID1_1(x)				((x) & (~BITS_BSSID1_1))
#define BIT_GET_BSSID1_1(x)				(((x) >> BIT_SHIFT_BSSID1_1) & BIT_MASK_BSSID1_1)
#define BIT_SET_BSSID1_1(x, v)				(BIT_CLEAR_BSSID1_1(x) | BIT_BSSID1_1(v))

/* 2 REG_BCN_PSR_RPT1			(Offset 0x0710) */

#define BIT_SHIFT_DTIM_CNT1				24
#define BIT_MASK_DTIM_CNT1				0xff
#define BIT_DTIM_CNT1(x)				(((x) & BIT_MASK_DTIM_CNT1) << BIT_SHIFT_DTIM_CNT1)
#define BITS_DTIM_CNT1					(BIT_MASK_DTIM_CNT1 << BIT_SHIFT_DTIM_CNT1)
#define BIT_CLEAR_DTIM_CNT1(x)				((x) & (~BITS_DTIM_CNT1))
#define BIT_GET_DTIM_CNT1(x)				(((x) >> BIT_SHIFT_DTIM_CNT1) & BIT_MASK_DTIM_CNT1)
#define BIT_SET_DTIM_CNT1(x, v)			(BIT_CLEAR_DTIM_CNT1(x) | BIT_DTIM_CNT1(v))

#define BIT_SHIFT_DTIM_PERIOD1				16
#define BIT_MASK_DTIM_PERIOD1				0xff
#define BIT_DTIM_PERIOD1(x)				(((x) & BIT_MASK_DTIM_PERIOD1) << BIT_SHIFT_DTIM_PERIOD1)
#define BITS_DTIM_PERIOD1				(BIT_MASK_DTIM_PERIOD1 << BIT_SHIFT_DTIM_PERIOD1)
#define BIT_CLEAR_DTIM_PERIOD1(x)			((x) & (~BITS_DTIM_PERIOD1))
#define BIT_GET_DTIM_PERIOD1(x)			(((x) >> BIT_SHIFT_DTIM_PERIOD1) & BIT_MASK_DTIM_PERIOD1)
#define BIT_SET_DTIM_PERIOD1(x, v)			(BIT_CLEAR_DTIM_PERIOD1(x) | BIT_DTIM_PERIOD1(v))

#define BIT_TIM_HAS_AID				BIT(15)
#define BIT_TIM_HAS_MY_BSSID				BIT(14)
#define BIT_TIM_HAS_MYAID				BIT(13)
#define BIT_TIM_VALID					BIT(12)

#define BIT_SHIFT_PS_AID_1				0
#define BIT_MASK_PS_AID_1				0x7ff
#define BIT_PS_AID_1(x)				(((x) & BIT_MASK_PS_AID_1) << BIT_SHIFT_PS_AID_1)
#define BITS_PS_AID_1					(BIT_MASK_PS_AID_1 << BIT_SHIFT_PS_AID_1)
#define BIT_CLEAR_PS_AID_1(x)				((x) & (~BITS_PS_AID_1))
#define BIT_GET_PS_AID_1(x)				(((x) >> BIT_SHIFT_PS_AID_1) & BIT_MASK_PS_AID_1)
#define BIT_SET_PS_AID_1(x, v)				(BIT_CLEAR_PS_AID_1(x) | BIT_PS_AID_1(v))

/* 2 REG_ASSOCIATED_BFMEE_SEL		(Offset 0x0714) */

#define BIT_BFMEE1_EN					BIT(25)

#define BIT_SHIFT_BFMEE1_AID				16
#define BIT_MASK_BFMEE1_AID				0x1ff
#define BIT_BFMEE1_AID(x)				(((x) & BIT_MASK_BFMEE1_AID) << BIT_SHIFT_BFMEE1_AID)
#define BITS_BFMEE1_AID				(BIT_MASK_BFMEE1_AID << BIT_SHIFT_BFMEE1_AID)
#define BIT_CLEAR_BFMEE1_AID(x)			((x) & (~BITS_BFMEE1_AID))
#define BIT_GET_BFMEE1_AID(x)				(((x) >> BIT_SHIFT_BFMEE1_AID) & BIT_MASK_BFMEE1_AID)
#define BIT_SET_BFMEE1_AID(x, v)			(BIT_CLEAR_BFMEE1_AID(x) | BIT_BFMEE1_AID(v))

#define BIT_BFMEE0_EN					BIT(9)

#define BIT_SHIFT_BFMEE0_AID				0
#define BIT_MASK_BFMEE0_AID				0x1ff
#define BIT_BFMEE0_AID(x)				(((x) & BIT_MASK_BFMEE0_AID) << BIT_SHIFT_BFMEE0_AID)
#define BITS_BFMEE0_AID				(BIT_MASK_BFMEE0_AID << BIT_SHIFT_BFMEE0_AID)
#define BIT_CLEAR_BFMEE0_AID(x)			((x) & (~BITS_BFMEE0_AID))
#define BIT_GET_BFMEE0_AID(x)				(((x) >> BIT_SHIFT_BFMEE0_AID) & BIT_MASK_BFMEE0_AID)
#define BIT_SET_BFMEE0_AID(x, v)			(BIT_CLEAR_BFMEE0_AID(x) | BIT_BFMEE0_AID(v))

/* 2 REG_SND_PTCL_CTRL			(Offset 0x0718) */

#define BIT_SHIFT_NDP_RX_STANDBY_TIMER			24
#define BIT_MASK_NDP_RX_STANDBY_TIMER			0xff
#define BIT_NDP_RX_STANDBY_TIMER(x)			(((x) & BIT_MASK_NDP_RX_STANDBY_TIMER) << BIT_SHIFT_NDP_RX_STANDBY_TIMER)
#define BITS_NDP_RX_STANDBY_TIMER			(BIT_MASK_NDP_RX_STANDBY_TIMER << BIT_SHIFT_NDP_RX_STANDBY_TIMER)
#define BIT_CLEAR_NDP_RX_STANDBY_TIMER(x)		((x) & (~BITS_NDP_RX_STANDBY_TIMER))
#define BIT_GET_NDP_RX_STANDBY_TIMER(x)		(((x) >> BIT_SHIFT_NDP_RX_STANDBY_TIMER) & BIT_MASK_NDP_RX_STANDBY_TIMER)
#define BIT_SET_NDP_RX_STANDBY_TIMER(x, v)		(BIT_CLEAR_NDP_RX_STANDBY_TIMER(x) | BIT_NDP_RX_STANDBY_TIMER(v))

#define BIT_R_WMAC_CHK_RPTPOLL_A2_DIS			BIT(23)
#define BIT_R_WMAC_CHK_UCNDPA_A2_DIS			BIT(22)

#define BIT_SHIFT_R_WMAC_HT_CATEGORY			16
#define BIT_MASK_R_WMAC_HT_CATEGORY			0x3f
#define BIT_R_WMAC_HT_CATEGORY(x)			(((x) & BIT_MASK_R_WMAC_HT_CATEGORY) << BIT_SHIFT_R_WMAC_HT_CATEGORY)
#define BITS_R_WMAC_HT_CATEGORY			(BIT_MASK_R_WMAC_HT_CATEGORY << BIT_SHIFT_R_WMAC_HT_CATEGORY)
#define BIT_CLEAR_R_WMAC_HT_CATEGORY(x)		((x) & (~BITS_R_WMAC_HT_CATEGORY))
#define BIT_GET_R_WMAC_HT_CATEGORY(x)			(((x) >> BIT_SHIFT_R_WMAC_HT_CATEGORY) & BIT_MASK_R_WMAC_HT_CATEGORY)
#define BIT_SET_R_WMAC_HT_CATEGORY(x, v)		(BIT_CLEAR_R_WMAC_HT_CATEGORY(x) | BIT_R_WMAC_HT_CATEGORY(v))

#define BIT_R_WMAC_OFFSET_RPTPOLL_EN			BIT(15)
#define BIT_R_WMAC_CSI_CHKSUM_DIS			BIT(14)

#define BIT_SHIFT_R_WMAC_VHT_CATEGORY			8
#define BIT_MASK_R_WMAC_VHT_CATEGORY			0x3f
#define BIT_R_WMAC_VHT_CATEGORY(x)			(((x) & BIT_MASK_R_WMAC_VHT_CATEGORY) << BIT_SHIFT_R_WMAC_VHT_CATEGORY)
#define BITS_R_WMAC_VHT_CATEGORY			(BIT_MASK_R_WMAC_VHT_CATEGORY << BIT_SHIFT_R_WMAC_VHT_CATEGORY)
#define BIT_CLEAR_R_WMAC_VHT_CATEGORY(x)		((x) & (~BITS_R_WMAC_VHT_CATEGORY))
#define BIT_GET_R_WMAC_VHT_CATEGORY(x)			(((x) >> BIT_SHIFT_R_WMAC_VHT_CATEGORY) & BIT_MASK_R_WMAC_VHT_CATEGORY)
#define BIT_SET_R_WMAC_VHT_CATEGORY(x, v)		(BIT_CLEAR_R_WMAC_VHT_CATEGORY(x) | BIT_R_WMAC_VHT_CATEGORY(v))

#define BIT_R_WMAC_USE_NSTS				BIT(7)
#define BIT_R_DISABLE_CHECK_VHTSIGB_CRC		BIT(6)
#define BIT_R_DISABLE_CHECK_VHTSIGA_CRC		BIT(5)
#define BIT_R_WMAC_BFPARAM_SEL				BIT(4)
#define BIT_R_WMAC_CSISEQ_SEL				BIT(3)
#define BIT_R_WMAC_CSI_WITHHTC_EN			BIT(2)
#define BIT_R_WMAC_HT_NDPA_EN				BIT(1)
#define BIT_R_WMAC_VHT_NDPA_EN				BIT(0)

/* 2 REG_BEAMFORM_STATUS			(Offset 0x071C) */

#define BIT_WRITE_ENABLE				BIT(31)
#define BIT_WMAC_CHECK_SOUNDING_SEQ			BIT(30)

#define BIT_SHIFT_VHTHT_MIMO_CTRL_FIELD		1
#define BIT_MASK_VHTHT_MIMO_CTRL_FIELD			0xffffff
#define BIT_VHTHT_MIMO_CTRL_FIELD(x)			(((x) & BIT_MASK_VHTHT_MIMO_CTRL_FIELD) << BIT_SHIFT_VHTHT_MIMO_CTRL_FIELD)
#define BITS_VHTHT_MIMO_CTRL_FIELD			(BIT_MASK_VHTHT_MIMO_CTRL_FIELD << BIT_SHIFT_VHTHT_MIMO_CTRL_FIELD)
#define BIT_CLEAR_VHTHT_MIMO_CTRL_FIELD(x)		((x) & (~BITS_VHTHT_MIMO_CTRL_FIELD))
#define BIT_GET_VHTHT_MIMO_CTRL_FIELD(x)		(((x) >> BIT_SHIFT_VHTHT_MIMO_CTRL_FIELD) & BIT_MASK_VHTHT_MIMO_CTRL_FIELD)
#define BIT_SET_VHTHT_MIMO_CTRL_FIELD(x, v)		(BIT_CLEAR_VHTHT_MIMO_CTRL_FIELD(x) | BIT_VHTHT_MIMO_CTRL_FIELD(v))

#define BIT_CSI_INTRRUPT_STATUS			BIT(0)

/* 2 REG_NSARP_CFG				(Offset 0x0720) */

#define BIT_NSARP_RESPEN				BIT(15)
#define BIT_NSARP_PARP					BIT(9)
#define BIT_NSARP_RIPV6				BIT(8)

#define BIT_SHIFT_NSARP_MODEN				6
#define BIT_MASK_NSARP_MODEN				0x3
#define BIT_NSARP_MODEN(x)				(((x) & BIT_MASK_NSARP_MODEN) << BIT_SHIFT_NSARP_MODEN)
#define BITS_NSARP_MODEN				(BIT_MASK_NSARP_MODEN << BIT_SHIFT_NSARP_MODEN)
#define BIT_CLEAR_NSARP_MODEN(x)			((x) & (~BITS_NSARP_MODEN))
#define BIT_GET_NSARP_MODEN(x)				(((x) >> BIT_SHIFT_NSARP_MODEN) & BIT_MASK_NSARP_MODEN)
#define BIT_SET_NSARP_MODEN(x, v)			(BIT_CLEAR_NSARP_MODEN(x) | BIT_NSARP_MODEN(v))

#define BIT_SHIFT_NSARP_RSPFTP				4
#define BIT_MASK_NSARP_RSPFTP				0x3
#define BIT_NSARP_RSPFTP(x)				(((x) & BIT_MASK_NSARP_RSPFTP) << BIT_SHIFT_NSARP_RSPFTP)
#define BITS_NSARP_RSPFTP				(BIT_MASK_NSARP_RSPFTP << BIT_SHIFT_NSARP_RSPFTP)
#define BIT_CLEAR_NSARP_RSPFTP(x)			((x) & (~BITS_NSARP_RSPFTP))
#define BIT_GET_NSARP_RSPFTP(x)			(((x) >> BIT_SHIFT_NSARP_RSPFTP) & BIT_MASK_NSARP_RSPFTP)
#define BIT_SET_NSARP_RSPFTP(x, v)			(BIT_CLEAR_NSARP_RSPFTP(x) | BIT_NSARP_RSPFTP(v))

#define BIT_SHIFT_NSARP_RSPSEC				0
#define BIT_MASK_NSARP_RSPSEC				0xf
#define BIT_NSARP_RSPSEC(x)				(((x) & BIT_MASK_NSARP_RSPSEC) << BIT_SHIFT_NSARP_RSPSEC)
#define BITS_NSARP_RSPSEC				(BIT_MASK_NSARP_RSPSEC << BIT_SHIFT_NSARP_RSPSEC)
#define BIT_CLEAR_NSARP_RSPSEC(x)			((x) & (~BITS_NSARP_RSPSEC))
#define BIT_GET_NSARP_RSPSEC(x)			(((x) >> BIT_SHIFT_NSARP_RSPSEC) & BIT_MASK_NSARP_RSPSEC)
#define BIT_SET_NSARP_RSPSEC(x, v)			(BIT_CLEAR_NSARP_RSPSEC(x) | BIT_NSARP_RSPSEC(v))

/* 2 REG_ZB_STATISTIC_1			(Offset 0x0724) */

#define BIT_SHIFT_ZB_HI_RX				16
#define BIT_MASK_ZB_HI_RX				0xffff
#define BIT_ZB_HI_RX(x)				(((x) & BIT_MASK_ZB_HI_RX) << BIT_SHIFT_ZB_HI_RX)
#define BITS_ZB_HI_RX					(BIT_MASK_ZB_HI_RX << BIT_SHIFT_ZB_HI_RX)
#define BIT_CLEAR_ZB_HI_RX(x)				((x) & (~BITS_ZB_HI_RX))
#define BIT_GET_ZB_HI_RX(x)				(((x) >> BIT_SHIFT_ZB_HI_RX) & BIT_MASK_ZB_HI_RX)
#define BIT_SET_ZB_HI_RX(x, v)				(BIT_CLEAR_ZB_HI_RX(x) | BIT_ZB_HI_RX(v))

#define BIT_SHIFT_ZB_HI_TX				0
#define BIT_MASK_ZB_HI_TX				0xffff
#define BIT_ZB_HI_TX(x)				(((x) & BIT_MASK_ZB_HI_TX) << BIT_SHIFT_ZB_HI_TX)
#define BITS_ZB_HI_TX					(BIT_MASK_ZB_HI_TX << BIT_SHIFT_ZB_HI_TX)
#define BIT_CLEAR_ZB_HI_TX(x)				((x) & (~BITS_ZB_HI_TX))
#define BIT_GET_ZB_HI_TX(x)				(((x) >> BIT_SHIFT_ZB_HI_TX) & BIT_MASK_ZB_HI_TX)
#define BIT_SET_ZB_HI_TX(x, v)				(BIT_CLEAR_ZB_HI_TX(x) | BIT_ZB_HI_TX(v))

/* 2 REG_ZB_STATISTIC_2			(Offset 0x0728) */

#define BIT_SHIFT_ZB_LO_RX				16
#define BIT_MASK_ZB_LO_RX				0xffff
#define BIT_ZB_LO_RX(x)				(((x) & BIT_MASK_ZB_LO_RX) << BIT_SHIFT_ZB_LO_RX)
#define BITS_ZB_LO_RX					(BIT_MASK_ZB_LO_RX << BIT_SHIFT_ZB_LO_RX)
#define BIT_CLEAR_ZB_LO_RX(x)				((x) & (~BITS_ZB_LO_RX))
#define BIT_GET_ZB_LO_RX(x)				(((x) >> BIT_SHIFT_ZB_LO_RX) & BIT_MASK_ZB_LO_RX)
#define BIT_SET_ZB_LO_RX(x, v)				(BIT_CLEAR_ZB_LO_RX(x) | BIT_ZB_LO_RX(v))

#define BIT_SHIFT_ZB_LO_TX				0
#define BIT_MASK_ZB_LO_TX				0xffff
#define BIT_ZB_LO_TX(x)				(((x) & BIT_MASK_ZB_LO_TX) << BIT_SHIFT_ZB_LO_TX)
#define BITS_ZB_LO_TX					(BIT_MASK_ZB_LO_TX << BIT_SHIFT_ZB_LO_TX)
#define BIT_CLEAR_ZB_LO_TX(x)				((x) & (~BITS_ZB_LO_TX))
#define BIT_GET_ZB_LO_TX(x)				(((x) >> BIT_SHIFT_ZB_LO_TX) & BIT_MASK_ZB_LO_TX)
#define BIT_SET_ZB_LO_TX(x, v)				(BIT_CLEAR_ZB_LO_TX(x) | BIT_ZB_LO_TX(v))

/* 2 REG_BEAMFORMING_INFO_NSARP		(Offset 0x072C) */

#define BIT_SHIFT_UPD_BFMEE_USERID			13
#define BIT_MASK_UPD_BFMEE_USERID			0x7
#define BIT_UPD_BFMEE_USERID(x)			(((x) & BIT_MASK_UPD_BFMEE_USERID) << BIT_SHIFT_UPD_BFMEE_USERID)
#define BITS_UPD_BFMEE_USERID				(BIT_MASK_UPD_BFMEE_USERID << BIT_SHIFT_UPD_BFMEE_USERID)
#define BIT_CLEAR_UPD_BFMEE_USERID(x)			((x) & (~BITS_UPD_BFMEE_USERID))
#define BIT_GET_UPD_BFMEE_USERID(x)			(((x) >> BIT_SHIFT_UPD_BFMEE_USERID) & BIT_MASK_UPD_BFMEE_USERID)
#define BIT_SET_UPD_BFMEE_USERID(x, v)			(BIT_CLEAR_UPD_BFMEE_USERID(x) | BIT_UPD_BFMEE_USERID(v))

#define BIT_UPD_BFMEE_FBTP				BIT(12)

#define BIT_SHIFT_UPD_BFMEE_BW				10
#define BIT_MASK_UPD_BFMEE_BW				0x3
#define BIT_UPD_BFMEE_BW(x)				(((x) & BIT_MASK_UPD_BFMEE_BW) << BIT_SHIFT_UPD_BFMEE_BW)
#define BITS_UPD_BFMEE_BW				(BIT_MASK_UPD_BFMEE_BW << BIT_SHIFT_UPD_BFMEE_BW)
#define BIT_CLEAR_UPD_BFMEE_BW(x)			((x) & (~BITS_UPD_BFMEE_BW))
#define BIT_GET_UPD_BFMEE_BW(x)			(((x) >> BIT_SHIFT_UPD_BFMEE_BW) & BIT_MASK_UPD_BFMEE_BW)
#define BIT_SET_UPD_BFMEE_BW(x, v)			(BIT_CLEAR_UPD_BFMEE_BW(x) | BIT_UPD_BFMEE_BW(v))

#define BIT_SHIFT_UPD_BFMEE_CB				8
#define BIT_MASK_UPD_BFMEE_CB				0x3
#define BIT_UPD_BFMEE_CB(x)				(((x) & BIT_MASK_UPD_BFMEE_CB) << BIT_SHIFT_UPD_BFMEE_CB)
#define BITS_UPD_BFMEE_CB				(BIT_MASK_UPD_BFMEE_CB << BIT_SHIFT_UPD_BFMEE_CB)
#define BIT_CLEAR_UPD_BFMEE_CB(x)			((x) & (~BITS_UPD_BFMEE_CB))
#define BIT_GET_UPD_BFMEE_CB(x)			(((x) >> BIT_SHIFT_UPD_BFMEE_CB) & BIT_MASK_UPD_BFMEE_CB)
#define BIT_SET_UPD_BFMEE_CB(x, v)			(BIT_CLEAR_UPD_BFMEE_CB(x) | BIT_UPD_BFMEE_CB(v))

#define BIT_SHIFT_UPD_BFMEE_NG				6
#define BIT_MASK_UPD_BFMEE_NG				0x3
#define BIT_UPD_BFMEE_NG(x)				(((x) & BIT_MASK_UPD_BFMEE_NG) << BIT_SHIFT_UPD_BFMEE_NG)
#define BITS_UPD_BFMEE_NG				(BIT_MASK_UPD_BFMEE_NG << BIT_SHIFT_UPD_BFMEE_NG)
#define BIT_CLEAR_UPD_BFMEE_NG(x)			((x) & (~BITS_UPD_BFMEE_NG))
#define BIT_GET_UPD_BFMEE_NG(x)			(((x) >> BIT_SHIFT_UPD_BFMEE_NG) & BIT_MASK_UPD_BFMEE_NG)
#define BIT_SET_UPD_BFMEE_NG(x, v)			(BIT_CLEAR_UPD_BFMEE_NG(x) | BIT_UPD_BFMEE_NG(v))

#define BIT_SHIFT_UPD_BFMEE_NR				3
#define BIT_MASK_UPD_BFMEE_NR				0x7
#define BIT_UPD_BFMEE_NR(x)				(((x) & BIT_MASK_UPD_BFMEE_NR) << BIT_SHIFT_UPD_BFMEE_NR)
#define BITS_UPD_BFMEE_NR				(BIT_MASK_UPD_BFMEE_NR << BIT_SHIFT_UPD_BFMEE_NR)
#define BIT_CLEAR_UPD_BFMEE_NR(x)			((x) & (~BITS_UPD_BFMEE_NR))
#define BIT_GET_UPD_BFMEE_NR(x)			(((x) >> BIT_SHIFT_UPD_BFMEE_NR) & BIT_MASK_UPD_BFMEE_NR)
#define BIT_SET_UPD_BFMEE_NR(x, v)			(BIT_CLEAR_UPD_BFMEE_NR(x) | BIT_UPD_BFMEE_NR(v))

#define BIT_SHIFT_UPD_BFMEE_NC				0
#define BIT_MASK_UPD_BFMEE_NC				0x7
#define BIT_UPD_BFMEE_NC(x)				(((x) & BIT_MASK_UPD_BFMEE_NC) << BIT_SHIFT_UPD_BFMEE_NC)
#define BITS_UPD_BFMEE_NC				(BIT_MASK_UPD_BFMEE_NC << BIT_SHIFT_UPD_BFMEE_NC)
#define BIT_CLEAR_UPD_BFMEE_NC(x)			((x) & (~BITS_UPD_BFMEE_NC))
#define BIT_GET_UPD_BFMEE_NC(x)			(((x) >> BIT_SHIFT_UPD_BFMEE_NC) & BIT_MASK_UPD_BFMEE_NC)
#define BIT_SET_UPD_BFMEE_NC(x, v)			(BIT_CLEAR_UPD_BFMEE_NC(x) | BIT_UPD_BFMEE_NC(v))

/* 2 REG_IPV6_0				(Offset 0x0730) */

#define BIT_SHIFT_IPV6_MYIPAD_0			0
#define BIT_MASK_IPV6_MYIPAD_0				0xffffffffL
#define BIT_IPV6_MYIPAD_0(x)				(((x) & BIT_MASK_IPV6_MYIPAD_0) << BIT_SHIFT_IPV6_MYIPAD_0)
#define BITS_IPV6_MYIPAD_0				(BIT_MASK_IPV6_MYIPAD_0 << BIT_SHIFT_IPV6_MYIPAD_0)
#define BIT_CLEAR_IPV6_MYIPAD_0(x)			((x) & (~BITS_IPV6_MYIPAD_0))
#define BIT_GET_IPV6_MYIPAD_0(x)			(((x) >> BIT_SHIFT_IPV6_MYIPAD_0) & BIT_MASK_IPV6_MYIPAD_0)
#define BIT_SET_IPV6_MYIPAD_0(x, v)			(BIT_CLEAR_IPV6_MYIPAD_0(x) | BIT_IPV6_MYIPAD_0(v))

/* 2 REG_IPV6_1				(Offset 0x0734) */

#define BIT_SHIFT_IPV6_MYIPAD_1			0
#define BIT_MASK_IPV6_MYIPAD_1				0xffffffffL
#define BIT_IPV6_MYIPAD_1(x)				(((x) & BIT_MASK_IPV6_MYIPAD_1) << BIT_SHIFT_IPV6_MYIPAD_1)
#define BITS_IPV6_MYIPAD_1				(BIT_MASK_IPV6_MYIPAD_1 << BIT_SHIFT_IPV6_MYIPAD_1)
#define BIT_CLEAR_IPV6_MYIPAD_1(x)			((x) & (~BITS_IPV6_MYIPAD_1))
#define BIT_GET_IPV6_MYIPAD_1(x)			(((x) >> BIT_SHIFT_IPV6_MYIPAD_1) & BIT_MASK_IPV6_MYIPAD_1)
#define BIT_SET_IPV6_MYIPAD_1(x, v)			(BIT_CLEAR_IPV6_MYIPAD_1(x) | BIT_IPV6_MYIPAD_1(v))

/* 2 REG_IPV6_2				(Offset 0x0738) */

#define BIT_SHIFT_IPV6_MYIPAD_2			0
#define BIT_MASK_IPV6_MYIPAD_2				0xffffffffL
#define BIT_IPV6_MYIPAD_2(x)				(((x) & BIT_MASK_IPV6_MYIPAD_2) << BIT_SHIFT_IPV6_MYIPAD_2)
#define BITS_IPV6_MYIPAD_2				(BIT_MASK_IPV6_MYIPAD_2 << BIT_SHIFT_IPV6_MYIPAD_2)
#define BIT_CLEAR_IPV6_MYIPAD_2(x)			((x) & (~BITS_IPV6_MYIPAD_2))
#define BIT_GET_IPV6_MYIPAD_2(x)			(((x) >> BIT_SHIFT_IPV6_MYIPAD_2) & BIT_MASK_IPV6_MYIPAD_2)
#define BIT_SET_IPV6_MYIPAD_2(x, v)			(BIT_CLEAR_IPV6_MYIPAD_2(x) | BIT_IPV6_MYIPAD_2(v))

/* 2 REG_IPV6_3				(Offset 0x073C) */

#define BIT_SHIFT_IPV6_MYIPAD_3			0
#define BIT_MASK_IPV6_MYIPAD_3				0xffffffffL
#define BIT_IPV6_MYIPAD_3(x)				(((x) & BIT_MASK_IPV6_MYIPAD_3) << BIT_SHIFT_IPV6_MYIPAD_3)
#define BITS_IPV6_MYIPAD_3				(BIT_MASK_IPV6_MYIPAD_3 << BIT_SHIFT_IPV6_MYIPAD_3)
#define BIT_CLEAR_IPV6_MYIPAD_3(x)			((x) & (~BITS_IPV6_MYIPAD_3))
#define BIT_GET_IPV6_MYIPAD_3(x)			(((x) >> BIT_SHIFT_IPV6_MYIPAD_3) & BIT_MASK_IPV6_MYIPAD_3)
#define BIT_SET_IPV6_MYIPAD_3(x, v)			(BIT_CLEAR_IPV6_MYIPAD_3(x) | BIT_IPV6_MYIPAD_3(v))

/* 2 REG_ZB_COEX_TABLE_1			(Offset 0x0740) */

#define BIT_SHIFT_ZB_COEX_TABLE_1			0
#define BIT_MASK_ZB_COEX_TABLE_1			0xffffffffL
#define BIT_ZB_COEX_TABLE_1(x)				(((x) & BIT_MASK_ZB_COEX_TABLE_1) << BIT_SHIFT_ZB_COEX_TABLE_1)
#define BITS_ZB_COEX_TABLE_1				(BIT_MASK_ZB_COEX_TABLE_1 << BIT_SHIFT_ZB_COEX_TABLE_1)
#define BIT_CLEAR_ZB_COEX_TABLE_1(x)			((x) & (~BITS_ZB_COEX_TABLE_1))
#define BIT_GET_ZB_COEX_TABLE_1(x)			(((x) >> BIT_SHIFT_ZB_COEX_TABLE_1) & BIT_MASK_ZB_COEX_TABLE_1)
#define BIT_SET_ZB_COEX_TABLE_1(x, v)			(BIT_CLEAR_ZB_COEX_TABLE_1(x) | BIT_ZB_COEX_TABLE_1(v))

/* 2 REG_ZB_COEX_TABLE_2			(Offset 0x0744) */

#define BIT_SHIFT_ZB_COEX_TABLE_2			0
#define BIT_MASK_ZB_COEX_TABLE_2			0xffffffffL
#define BIT_ZB_COEX_TABLE_2(x)				(((x) & BIT_MASK_ZB_COEX_TABLE_2) << BIT_SHIFT_ZB_COEX_TABLE_2)
#define BITS_ZB_COEX_TABLE_2				(BIT_MASK_ZB_COEX_TABLE_2 << BIT_SHIFT_ZB_COEX_TABLE_2)
#define BIT_CLEAR_ZB_COEX_TABLE_2(x)			((x) & (~BITS_ZB_COEX_TABLE_2))
#define BIT_GET_ZB_COEX_TABLE_2(x)			(((x) >> BIT_SHIFT_ZB_COEX_TABLE_2) & BIT_MASK_ZB_COEX_TABLE_2)
#define BIT_SET_ZB_COEX_TABLE_2(x, v)			(BIT_CLEAR_ZB_COEX_TABLE_2(x) | BIT_ZB_COEX_TABLE_2(v))

/* 2 REG_ZB_BREAK_TABLE			(Offset 0x0748) */

#define BIT_SHIFT_ZB_BREAK_TABLE_2			16
#define BIT_MASK_ZB_BREAK_TABLE_2			0xffff
#define BIT_ZB_BREAK_TABLE_2(x)			(((x) & BIT_MASK_ZB_BREAK_TABLE_2) << BIT_SHIFT_ZB_BREAK_TABLE_2)
#define BITS_ZB_BREAK_TABLE_2				(BIT_MASK_ZB_BREAK_TABLE_2 << BIT_SHIFT_ZB_BREAK_TABLE_2)
#define BIT_CLEAR_ZB_BREAK_TABLE_2(x)			((x) & (~BITS_ZB_BREAK_TABLE_2))
#define BIT_GET_ZB_BREAK_TABLE_2(x)			(((x) >> BIT_SHIFT_ZB_BREAK_TABLE_2) & BIT_MASK_ZB_BREAK_TABLE_2)
#define BIT_SET_ZB_BREAK_TABLE_2(x, v)			(BIT_CLEAR_ZB_BREAK_TABLE_2(x) | BIT_ZB_BREAK_TABLE_2(v))

#define BIT_SHIFT_ZB_BREAK_TABLE_1			0
#define BIT_MASK_ZB_BREAK_TABLE_1			0xffff
#define BIT_ZB_BREAK_TABLE_1(x)			(((x) & BIT_MASK_ZB_BREAK_TABLE_1) << BIT_SHIFT_ZB_BREAK_TABLE_1)
#define BITS_ZB_BREAK_TABLE_1				(BIT_MASK_ZB_BREAK_TABLE_1 << BIT_SHIFT_ZB_BREAK_TABLE_1)
#define BIT_CLEAR_ZB_BREAK_TABLE_1(x)			((x) & (~BITS_ZB_BREAK_TABLE_1))
#define BIT_GET_ZB_BREAK_TABLE_1(x)			(((x) >> BIT_SHIFT_ZB_BREAK_TABLE_1) & BIT_MASK_ZB_BREAK_TABLE_1)
#define BIT_SET_ZB_BREAK_TABLE_1(x, v)			(BIT_CLEAR_ZB_BREAK_TABLE_1(x) | BIT_ZB_BREAK_TABLE_1(v))

/* 2 REG_EXT_ZB_DETEC_CTRL			(Offset 0x074C) */

#define BIT_SHIFT_ZB_TRX_DETECT_TIME			24
#define BIT_MASK_ZB_TRX_DETECT_TIME			0xff
#define BIT_ZB_TRX_DETECT_TIME(x)			(((x) & BIT_MASK_ZB_TRX_DETECT_TIME) << BIT_SHIFT_ZB_TRX_DETECT_TIME)
#define BITS_ZB_TRX_DETECT_TIME			(BIT_MASK_ZB_TRX_DETECT_TIME << BIT_SHIFT_ZB_TRX_DETECT_TIME)
#define BIT_CLEAR_ZB_TRX_DETECT_TIME(x)		((x) & (~BITS_ZB_TRX_DETECT_TIME))
#define BIT_GET_ZB_TRX_DETECT_TIME(x)			(((x) >> BIT_SHIFT_ZB_TRX_DETECT_TIME) & BIT_MASK_ZB_TRX_DETECT_TIME)
#define BIT_SET_ZB_TRX_DETECT_TIME(x, v)		(BIT_CLEAR_ZB_TRX_DETECT_TIME(x) | BIT_ZB_TRX_DETECT_TIME(v))

#define BIT_SHIFT_ZB_PRI_DETECT_TIME			16
#define BIT_MASK_ZB_PRI_DETECT_TIME			0xff
#define BIT_ZB_PRI_DETECT_TIME(x)			(((x) & BIT_MASK_ZB_PRI_DETECT_TIME) << BIT_SHIFT_ZB_PRI_DETECT_TIME)
#define BITS_ZB_PRI_DETECT_TIME			(BIT_MASK_ZB_PRI_DETECT_TIME << BIT_SHIFT_ZB_PRI_DETECT_TIME)
#define BIT_CLEAR_ZB_PRI_DETECT_TIME(x)		((x) & (~BITS_ZB_PRI_DETECT_TIME))
#define BIT_GET_ZB_PRI_DETECT_TIME(x)			(((x) >> BIT_SHIFT_ZB_PRI_DETECT_TIME) & BIT_MASK_ZB_PRI_DETECT_TIME)
#define BIT_SET_ZB_PRI_DETECT_TIME(x, v)		(BIT_CLEAR_ZB_PRI_DETECT_TIME(x) | BIT_ZB_PRI_DETECT_TIME(v))

#define BIT_SHIFT_ZB_CNT_THR				8
#define BIT_MASK_ZB_CNT_THR				0xff
#define BIT_ZB_CNT_THR(x)				(((x) & BIT_MASK_ZB_CNT_THR) << BIT_SHIFT_ZB_CNT_THR)
#define BITS_ZB_CNT_THR				(BIT_MASK_ZB_CNT_THR << BIT_SHIFT_ZB_CNT_THR)
#define BIT_CLEAR_ZB_CNT_THR(x)			((x) & (~BITS_ZB_CNT_THR))
#define BIT_GET_ZB_CNT_THR(x)				(((x) >> BIT_SHIFT_ZB_CNT_THR) & BIT_MASK_ZB_CNT_THR)
#define BIT_SET_ZB_CNT_THR(x, v)			(BIT_CLEAR_ZB_CNT_THR(x) | BIT_ZB_CNT_THR(v))

#define BIT_SHIFT_ZB_ARB_TIME				0
#define BIT_MASK_ZB_ARB_TIME				0xff
#define BIT_ZB_ARB_TIME(x)				(((x) & BIT_MASK_ZB_ARB_TIME) << BIT_SHIFT_ZB_ARB_TIME)
#define BITS_ZB_ARB_TIME				(BIT_MASK_ZB_ARB_TIME << BIT_SHIFT_ZB_ARB_TIME)
#define BIT_CLEAR_ZB_ARB_TIME(x)			((x) & (~BITS_ZB_ARB_TIME))
#define BIT_GET_ZB_ARB_TIME(x)				(((x) >> BIT_SHIFT_ZB_ARB_TIME) & BIT_MASK_ZB_ARB_TIME)
#define BIT_SET_ZB_ARB_TIME(x, v)			(BIT_CLEAR_ZB_ARB_TIME(x) | BIT_ZB_ARB_TIME(v))

/* 2 REG_WMAC_RTX_CTX_SUBTYPE		(Offset 0x0750) */

#define BIT_SHIFT_R_WMAC_CTX_SUBTYPE			4
#define BIT_MASK_R_WMAC_CTX_SUBTYPE			0xf
#define BIT_R_WMAC_CTX_SUBTYPE(x)			(((x) & BIT_MASK_R_WMAC_CTX_SUBTYPE) << BIT_SHIFT_R_WMAC_CTX_SUBTYPE)
#define BITS_R_WMAC_CTX_SUBTYPE			(BIT_MASK_R_WMAC_CTX_SUBTYPE << BIT_SHIFT_R_WMAC_CTX_SUBTYPE)
#define BIT_CLEAR_R_WMAC_CTX_SUBTYPE(x)		((x) & (~BITS_R_WMAC_CTX_SUBTYPE))
#define BIT_GET_R_WMAC_CTX_SUBTYPE(x)			(((x) >> BIT_SHIFT_R_WMAC_CTX_SUBTYPE) & BIT_MASK_R_WMAC_CTX_SUBTYPE)
#define BIT_SET_R_WMAC_CTX_SUBTYPE(x, v)		(BIT_CLEAR_R_WMAC_CTX_SUBTYPE(x) | BIT_R_WMAC_CTX_SUBTYPE(v))

#define BIT_SHIFT_R_WMAC_RTX_SUBTYPE			0
#define BIT_MASK_R_WMAC_RTX_SUBTYPE			0xf
#define BIT_R_WMAC_RTX_SUBTYPE(x)			(((x) & BIT_MASK_R_WMAC_RTX_SUBTYPE) << BIT_SHIFT_R_WMAC_RTX_SUBTYPE)
#define BITS_R_WMAC_RTX_SUBTYPE			(BIT_MASK_R_WMAC_RTX_SUBTYPE << BIT_SHIFT_R_WMAC_RTX_SUBTYPE)
#define BIT_CLEAR_R_WMAC_RTX_SUBTYPE(x)		((x) & (~BITS_R_WMAC_RTX_SUBTYPE))
#define BIT_GET_R_WMAC_RTX_SUBTYPE(x)			(((x) >> BIT_SHIFT_R_WMAC_RTX_SUBTYPE) & BIT_MASK_R_WMAC_RTX_SUBTYPE)
#define BIT_SET_R_WMAC_RTX_SUBTYPE(x, v)		(BIT_CLEAR_R_WMAC_RTX_SUBTYPE(x) | BIT_R_WMAC_RTX_SUBTYPE(v))

/* 2 REG_WMAC_RTX_SWAES_RD_1			(Offset 0x0754) */

#define BIT_SHIFT_WMAC_SWAES_RD_0			0
#define BIT_MASK_WMAC_SWAES_RD_0			0xffffffffL
#define BIT_WMAC_SWAES_RD_0(x)				(((x) & BIT_MASK_WMAC_SWAES_RD_0) << BIT_SHIFT_WMAC_SWAES_RD_0)
#define BITS_WMAC_SWAES_RD_0				(BIT_MASK_WMAC_SWAES_RD_0 << BIT_SHIFT_WMAC_SWAES_RD_0)
#define BIT_CLEAR_WMAC_SWAES_RD_0(x)			((x) & (~BITS_WMAC_SWAES_RD_0))
#define BIT_GET_WMAC_SWAES_RD_0(x)			(((x) >> BIT_SHIFT_WMAC_SWAES_RD_0) & BIT_MASK_WMAC_SWAES_RD_0)
#define BIT_SET_WMAC_SWAES_RD_0(x, v)			(BIT_CLEAR_WMAC_SWAES_RD_0(x) | BIT_WMAC_SWAES_RD_0(v))

/* 2 REG_WMAC_RTX_SWAES_RD_2			(Offset 0x0758) */

#define BIT_SHIFT_WMAC_SWAES_RD_1			0
#define BIT_MASK_WMAC_SWAES_RD_1			0xffffffffL
#define BIT_WMAC_SWAES_RD_1(x)				(((x) & BIT_MASK_WMAC_SWAES_RD_1) << BIT_SHIFT_WMAC_SWAES_RD_1)
#define BITS_WMAC_SWAES_RD_1				(BIT_MASK_WMAC_SWAES_RD_1 << BIT_SHIFT_WMAC_SWAES_RD_1)
#define BIT_CLEAR_WMAC_SWAES_RD_1(x)			((x) & (~BITS_WMAC_SWAES_RD_1))
#define BIT_GET_WMAC_SWAES_RD_1(x)			(((x) >> BIT_SHIFT_WMAC_SWAES_RD_1) & BIT_MASK_WMAC_SWAES_RD_1)
#define BIT_SET_WMAC_SWAES_RD_1(x, v)			(BIT_CLEAR_WMAC_SWAES_RD_1(x) | BIT_WMAC_SWAES_RD_1(v))

/* 2 REG_WMAC_RTX_SWAES_RD_3			(Offset 0x075C) */

#define BIT_SHIFT_WMAC_SWAES_RD_2			0
#define BIT_MASK_WMAC_SWAES_RD_2			0xffffffffL
#define BIT_WMAC_SWAES_RD_2(x)				(((x) & BIT_MASK_WMAC_SWAES_RD_2) << BIT_SHIFT_WMAC_SWAES_RD_2)
#define BITS_WMAC_SWAES_RD_2				(BIT_MASK_WMAC_SWAES_RD_2 << BIT_SHIFT_WMAC_SWAES_RD_2)
#define BIT_CLEAR_WMAC_SWAES_RD_2(x)			((x) & (~BITS_WMAC_SWAES_RD_2))
#define BIT_GET_WMAC_SWAES_RD_2(x)			(((x) >> BIT_SHIFT_WMAC_SWAES_RD_2) & BIT_MASK_WMAC_SWAES_RD_2)
#define BIT_SET_WMAC_SWAES_RD_2(x, v)			(BIT_CLEAR_WMAC_SWAES_RD_2(x) | BIT_WMAC_SWAES_RD_2(v))

/* 2 REG_WMAC_SWAES_CFG			(Offset 0x0760) */

#define BIT_BTCOEX_SW_RST				BIT(31)
#define BIT_GNT_BOTH_POL				BIT(28)
#define BIT_BT_ARB_INST_EN				BIT(24)

#define BIT_SHIFT_BT_ARB_TIME				16
#define BIT_MASK_BT_ARB_TIME				0xff
#define BIT_BT_ARB_TIME(x)				(((x) & BIT_MASK_BT_ARB_TIME) << BIT_SHIFT_BT_ARB_TIME)
#define BITS_BT_ARB_TIME				(BIT_MASK_BT_ARB_TIME << BIT_SHIFT_BT_ARB_TIME)
#define BIT_CLEAR_BT_ARB_TIME(x)			((x) & (~BITS_BT_ARB_TIME))
#define BIT_GET_BT_ARB_TIME(x)				(((x) >> BIT_SHIFT_BT_ARB_TIME) & BIT_MASK_BT_ARB_TIME)
#define BIT_SET_BT_ARB_TIME(x, v)			(BIT_CLEAR_BT_ARB_TIME(x) | BIT_BT_ARB_TIME(v))

#define BIT_SWAES_REQ					BIT(7)
#define BIT_R_WMAC_SWAES_WE				BIT(3)
#define BIT_R_WMAC_SWAES_SEL				BIT(0)

/* 2 REG_BT_COEX_ENH				(Offset 0x0764) */

#define BIT_ZIGBEE_EN					BIT(31)
#define BIT_ZIGBEE_MODE				BIT(30)
#define BIT_EXT_ZIGBEE_MODE				BIT(29)
#define BIT_COEX_TABLE_SEL				BIT(28)
#define BIT_EXT_ZB_GNT_POLAR				BIT(27)
#define BIT_ZB_ARB_INST_EN				BIT(26)
#define BIT_ZB_CNT_THREN				BIT(25)
#define BIT_ZB_STATISTIC_EN				BIT(24)
#define BIT_GNT_ZB_BB_SW_EN				BIT(23)
#define BIT_GNT_ZB_BB_SW				BIT(22)
#define BIT_GNT_ZB_RFC_SW_EN				BIT(21)
#define BIT_GNT_ZB_RFC_SW				BIT(20)
#define BIT_GNT_ZB_EXT_SW_EN				BIT(19)
#define BIT_GNT_ZB_EXT_SW				BIT(18)
#define BIT_EXT_ZB_REQ_POLAR				BIT(17)
#define BIT_DIS_BT_DONT_CARE				BIT(16)
#define BIT_DIS_ZB_DONT_CARE				BIT(15)
#define BIT_BTG_LNA1_GAIN_SEL				BIT(14)
#define BIT_R_GNT_BT_RFC_SW				BIT(12)
#define BIT_R_GNT_BT_RFC_SW_EN				BIT(11)
#define BIT_R_GNT_BT_BB_SW				BIT(10)
#define BIT_R_GNT_BT_BB_SW_EN				BIT(9)
#define BIT_R_BT_CNT_THREN				BIT(8)

#define BIT_SHIFT_R_BT_CNT_THR				0
#define BIT_MASK_R_BT_CNT_THR				0xff
#define BIT_R_BT_CNT_THR(x)				(((x) & BIT_MASK_R_BT_CNT_THR) << BIT_SHIFT_R_BT_CNT_THR)
#define BITS_R_BT_CNT_THR				(BIT_MASK_R_BT_CNT_THR << BIT_SHIFT_R_BT_CNT_THR)
#define BIT_CLEAR_R_BT_CNT_THR(x)			((x) & (~BITS_R_BT_CNT_THR))
#define BIT_GET_R_BT_CNT_THR(x)			(((x) >> BIT_SHIFT_R_BT_CNT_THR) & BIT_MASK_R_BT_CNT_THR)
#define BIT_SET_R_BT_CNT_THR(x, v)			(BIT_CLEAR_R_BT_CNT_THR(x) | BIT_R_BT_CNT_THR(v))

/* 2 REG_WLAN_ACT_MASK_CTRL			(Offset 0x0768) */

#define BIT_SHIFT_RO_PTA_GNT_INFO			27
#define BIT_MASK_RO_PTA_GNT_INFO			0x1f
#define BIT_RO_PTA_GNT_INFO(x)				(((x) & BIT_MASK_RO_PTA_GNT_INFO) << BIT_SHIFT_RO_PTA_GNT_INFO)
#define BITS_RO_PTA_GNT_INFO				(BIT_MASK_RO_PTA_GNT_INFO << BIT_SHIFT_RO_PTA_GNT_INFO)
#define BIT_CLEAR_RO_PTA_GNT_INFO(x)			((x) & (~BITS_RO_PTA_GNT_INFO))
#define BIT_GET_RO_PTA_GNT_INFO(x)			(((x) >> BIT_SHIFT_RO_PTA_GNT_INFO) & BIT_MASK_RO_PTA_GNT_INFO)
#define BIT_SET_RO_PTA_GNT_INFO(x, v)			(BIT_CLEAR_RO_PTA_GNT_INFO(x) | BIT_RO_PTA_GNT_INFO(v))

#define BIT_SHIFT_CYC_PTA_EN_RFC			16
#define BIT_MASK_CYC_PTA_EN_RFC			0x1f
#define BIT_CYC_PTA_EN_RFC(x)				(((x) & BIT_MASK_CYC_PTA_EN_RFC) << BIT_SHIFT_CYC_PTA_EN_RFC)
#define BITS_CYC_PTA_EN_RFC				(BIT_MASK_CYC_PTA_EN_RFC << BIT_SHIFT_CYC_PTA_EN_RFC)
#define BIT_CLEAR_CYC_PTA_EN_RFC(x)			((x) & (~BITS_CYC_PTA_EN_RFC))
#define BIT_GET_CYC_PTA_EN_RFC(x)			(((x) >> BIT_SHIFT_CYC_PTA_EN_RFC) & BIT_MASK_CYC_PTA_EN_RFC)
#define BIT_SET_CYC_PTA_EN_RFC(x, v)			(BIT_CLEAR_CYC_PTA_EN_RFC(x) | BIT_CYC_PTA_EN_RFC(v))

#define BIT_SHIFT_WACTMSK_OFF_DUR			8
#define BIT_MASK_WACTMSK_OFF_DUR			0xff
#define BIT_WACTMSK_OFF_DUR(x)				(((x) & BIT_MASK_WACTMSK_OFF_DUR) << BIT_SHIFT_WACTMSK_OFF_DUR)
#define BITS_WACTMSK_OFF_DUR				(BIT_MASK_WACTMSK_OFF_DUR << BIT_SHIFT_WACTMSK_OFF_DUR)
#define BIT_CLEAR_WACTMSK_OFF_DUR(x)			((x) & (~BITS_WACTMSK_OFF_DUR))
#define BIT_GET_WACTMSK_OFF_DUR(x)			(((x) >> BIT_SHIFT_WACTMSK_OFF_DUR) & BIT_MASK_WACTMSK_OFF_DUR)
#define BIT_SET_WACTMSK_OFF_DUR(x, v)			(BIT_CLEAR_WACTMSK_OFF_DUR(x) | BIT_WACTMSK_OFF_DUR(v))

#define BIT_SHIFT_WACTMSK_ON_DUR			0
#define BIT_MASK_WACTMSK_ON_DUR			0xff
#define BIT_WACTMSK_ON_DUR(x)				(((x) & BIT_MASK_WACTMSK_ON_DUR) << BIT_SHIFT_WACTMSK_ON_DUR)
#define BITS_WACTMSK_ON_DUR				(BIT_MASK_WACTMSK_ON_DUR << BIT_SHIFT_WACTMSK_ON_DUR)
#define BIT_CLEAR_WACTMSK_ON_DUR(x)			((x) & (~BITS_WACTMSK_ON_DUR))
#define BIT_GET_WACTMSK_ON_DUR(x)			(((x) >> BIT_SHIFT_WACTMSK_ON_DUR) & BIT_MASK_WACTMSK_ON_DUR)
#define BIT_SET_WACTMSK_ON_DUR(x, v)			(BIT_CLEAR_WACTMSK_ON_DUR(x) | BIT_WACTMSK_ON_DUR(v))

/* 2 REG_WLAN_ACT_MASK_CTRL_1		(Offset 0x076C) */

#define BIT_SHIFT_BT_STAT_DELAY			28
#define BIT_MASK_BT_STAT_DELAY				0xf
#define BIT_BT_STAT_DELAY(x)				(((x) & BIT_MASK_BT_STAT_DELAY) << BIT_SHIFT_BT_STAT_DELAY)
#define BITS_BT_STAT_DELAY				(BIT_MASK_BT_STAT_DELAY << BIT_SHIFT_BT_STAT_DELAY)
#define BIT_CLEAR_BT_STAT_DELAY(x)			((x) & (~BITS_BT_STAT_DELAY))
#define BIT_GET_BT_STAT_DELAY(x)			(((x) >> BIT_SHIFT_BT_STAT_DELAY) & BIT_MASK_BT_STAT_DELAY)
#define BIT_SET_BT_STAT_DELAY(x, v)			(BIT_CLEAR_BT_STAT_DELAY(x) | BIT_BT_STAT_DELAY(v))

#define BIT_SHIFT_BT_TRX_INIT_DETECT			24
#define BIT_MASK_BT_TRX_INIT_DETECT			0xf
#define BIT_BT_TRX_INIT_DETECT(x)			(((x) & BIT_MASK_BT_TRX_INIT_DETECT) << BIT_SHIFT_BT_TRX_INIT_DETECT)
#define BITS_BT_TRX_INIT_DETECT			(BIT_MASK_BT_TRX_INIT_DETECT << BIT_SHIFT_BT_TRX_INIT_DETECT)
#define BIT_CLEAR_BT_TRX_INIT_DETECT(x)		((x) & (~BITS_BT_TRX_INIT_DETECT))
#define BIT_GET_BT_TRX_INIT_DETECT(x)			(((x) >> BIT_SHIFT_BT_TRX_INIT_DETECT) & BIT_MASK_BT_TRX_INIT_DETECT)
#define BIT_SET_BT_TRX_INIT_DETECT(x, v)		(BIT_CLEAR_BT_TRX_INIT_DETECT(x) | BIT_BT_TRX_INIT_DETECT(v))

#define BIT_SHIFT_BT_PRI_DETECT_TO			20
#define BIT_MASK_BT_PRI_DETECT_TO			0xf
#define BIT_BT_PRI_DETECT_TO(x)			(((x) & BIT_MASK_BT_PRI_DETECT_TO) << BIT_SHIFT_BT_PRI_DETECT_TO)
#define BITS_BT_PRI_DETECT_TO				(BIT_MASK_BT_PRI_DETECT_TO << BIT_SHIFT_BT_PRI_DETECT_TO)
#define BIT_CLEAR_BT_PRI_DETECT_TO(x)			((x) & (~BITS_BT_PRI_DETECT_TO))
#define BIT_GET_BT_PRI_DETECT_TO(x)			(((x) >> BIT_SHIFT_BT_PRI_DETECT_TO) & BIT_MASK_BT_PRI_DETECT_TO)
#define BIT_SET_BT_PRI_DETECT_TO(x, v)			(BIT_CLEAR_BT_PRI_DETECT_TO(x) | BIT_BT_PRI_DETECT_TO(v))

#define BIT_R_GRANTALL_WLMASK				BIT(19)
#define BIT_STATIS_BT_EN				BIT(18)
#define BIT_EN_WL_ACT_MASK				BIT(17)
#define BIT_ENHBT					BIT(16)
#define BIT_WLRX_TER_BY_CTL_1				BIT(11)
#define BIT_WLRX_TER_BY_AD_1				BIT(10)
#define BIT_ANT_DIVERSITY_SEL_1			BIT(9)
#define BIT_ANTSEL_FOR_BT_CTRL_EN_1			BIT(8)
#define BIT_WLACT_LOW_GNTWL_EN_1			BIT(2)
#define BIT_WLACT_HIGH_GNTBT_EN_1			BIT(1)
#define BIT_EN_WLACT_MASK_SYNC				BIT(0)

#define BIT_SHIFT_STATIS_BT				0
#define BIT_MASK_STATIS_BT				0xffffffffL
#define BIT_STATIS_BT(x)				(((x) & BIT_MASK_STATIS_BT) << BIT_SHIFT_STATIS_BT)
#define BITS_STATIS_BT					(BIT_MASK_STATIS_BT << BIT_SHIFT_STATIS_BT)
#define BIT_CLEAR_STATIS_BT(x)				((x) & (~BITS_STATIS_BT))
#define BIT_GET_STATIS_BT(x)				(((x) >> BIT_SHIFT_STATIS_BT) & BIT_MASK_STATIS_BT)
#define BIT_SET_STATIS_BT(x, v)			(BIT_CLEAR_STATIS_BT(x) | BIT_STATIS_BT(v))

/* 2 REG_BT_PROPRI				(Offset 0x0778) */

#define BIT_SHIFT_BT_CMD_RPT				16
#define BIT_MASK_BT_CMD_RPT				0xffff
#define BIT_BT_CMD_RPT(x)				(((x) & BIT_MASK_BT_CMD_RPT) << BIT_SHIFT_BT_CMD_RPT)
#define BITS_BT_CMD_RPT				(BIT_MASK_BT_CMD_RPT << BIT_SHIFT_BT_CMD_RPT)
#define BIT_CLEAR_BT_CMD_RPT(x)			((x) & (~BITS_BT_CMD_RPT))
#define BIT_GET_BT_CMD_RPT(x)				(((x) >> BIT_SHIFT_BT_CMD_RPT) & BIT_MASK_BT_CMD_RPT)
#define BIT_SET_BT_CMD_RPT(x, v)			(BIT_CLEAR_BT_CMD_RPT(x) | BIT_BT_CMD_RPT(v))

#define BIT_SHIFT_RPT_FROM_BT				8
#define BIT_MASK_RPT_FROM_BT				0xff
#define BIT_RPT_FROM_BT(x)				(((x) & BIT_MASK_RPT_FROM_BT) << BIT_SHIFT_RPT_FROM_BT)
#define BITS_RPT_FROM_BT				(BIT_MASK_RPT_FROM_BT << BIT_SHIFT_RPT_FROM_BT)
#define BIT_CLEAR_RPT_FROM_BT(x)			((x) & (~BITS_RPT_FROM_BT))
#define BIT_GET_RPT_FROM_BT(x)				(((x) >> BIT_SHIFT_RPT_FROM_BT) & BIT_MASK_RPT_FROM_BT)
#define BIT_SET_RPT_FROM_BT(x, v)			(BIT_CLEAR_RPT_FROM_BT(x) | BIT_RPT_FROM_BT(v))

#define BIT_SHIFT_BT_HID_ISR_SET			6
#define BIT_MASK_BT_HID_ISR_SET			0x3
#define BIT_BT_HID_ISR_SET(x)				(((x) & BIT_MASK_BT_HID_ISR_SET) << BIT_SHIFT_BT_HID_ISR_SET)
#define BITS_BT_HID_ISR_SET				(BIT_MASK_BT_HID_ISR_SET << BIT_SHIFT_BT_HID_ISR_SET)
#define BIT_CLEAR_BT_HID_ISR_SET(x)			((x) & (~BITS_BT_HID_ISR_SET))
#define BIT_GET_BT_HID_ISR_SET(x)			(((x) >> BIT_SHIFT_BT_HID_ISR_SET) & BIT_MASK_BT_HID_ISR_SET)
#define BIT_SET_BT_HID_ISR_SET(x, v)			(BIT_CLEAR_BT_HID_ISR_SET(x) | BIT_BT_HID_ISR_SET(v))

#define BIT_TDMA_BT_START_NOTIFY			BIT(5)
#define BIT_ENABLE_TDMA_HW_MODE			BIT(4)
#define BIT_ENABLE_PTA_TDMA_MODE			BIT(3)
#define BIT_ENABLE_COEXIST_TAB_IN_TDMA			BIT(2)
#define BIT_GPIO2_GPIO3_EXANGE_OR_NO_BT_CCA		BIT(1)
#define BIT_RTK_BT_ENABLE				BIT(0)

/* 2 REG_BT_STATUS_REPORT_REGISTER		(Offset 0x077C) */

#define BIT_SHIFT_BT_PROFILE				24
#define BIT_MASK_BT_PROFILE				0xff
#define BIT_BT_PROFILE(x)				(((x) & BIT_MASK_BT_PROFILE) << BIT_SHIFT_BT_PROFILE)
#define BITS_BT_PROFILE				(BIT_MASK_BT_PROFILE << BIT_SHIFT_BT_PROFILE)
#define BIT_CLEAR_BT_PROFILE(x)			((x) & (~BITS_BT_PROFILE))
#define BIT_GET_BT_PROFILE(x)				(((x) >> BIT_SHIFT_BT_PROFILE) & BIT_MASK_BT_PROFILE)
#define BIT_SET_BT_PROFILE(x, v)			(BIT_CLEAR_BT_PROFILE(x) | BIT_BT_PROFILE(v))

#define BIT_SHIFT_BT_POWER				16
#define BIT_MASK_BT_POWER				0xff
#define BIT_BT_POWER(x)				(((x) & BIT_MASK_BT_POWER) << BIT_SHIFT_BT_POWER)
#define BITS_BT_POWER					(BIT_MASK_BT_POWER << BIT_SHIFT_BT_POWER)
#define BIT_CLEAR_BT_POWER(x)				((x) & (~BITS_BT_POWER))
#define BIT_GET_BT_POWER(x)				(((x) >> BIT_SHIFT_BT_POWER) & BIT_MASK_BT_POWER)
#define BIT_SET_BT_POWER(x, v)				(BIT_CLEAR_BT_POWER(x) | BIT_BT_POWER(v))

#define BIT_SHIFT_BT_PREDECT_STATUS			8
#define BIT_MASK_BT_PREDECT_STATUS			0xff
#define BIT_BT_PREDECT_STATUS(x)			(((x) & BIT_MASK_BT_PREDECT_STATUS) << BIT_SHIFT_BT_PREDECT_STATUS)
#define BITS_BT_PREDECT_STATUS				(BIT_MASK_BT_PREDECT_STATUS << BIT_SHIFT_BT_PREDECT_STATUS)
#define BIT_CLEAR_BT_PREDECT_STATUS(x)			((x) & (~BITS_BT_PREDECT_STATUS))
#define BIT_GET_BT_PREDECT_STATUS(x)			(((x) >> BIT_SHIFT_BT_PREDECT_STATUS) & BIT_MASK_BT_PREDECT_STATUS)
#define BIT_SET_BT_PREDECT_STATUS(x, v)		(BIT_CLEAR_BT_PREDECT_STATUS(x) | BIT_BT_PREDECT_STATUS(v))

#define BIT_SHIFT_BT_CMD_ID				0
#define BIT_MASK_BT_CMD_ID				0xff
#define BIT_BT_CMD_ID(x)				(((x) & BIT_MASK_BT_CMD_ID) << BIT_SHIFT_BT_CMD_ID)
#define BITS_BT_CMD_ID					(BIT_MASK_BT_CMD_ID << BIT_SHIFT_BT_CMD_ID)
#define BIT_CLEAR_BT_CMD_ID(x)				((x) & (~BITS_BT_CMD_ID))
#define BIT_GET_BT_CMD_ID(x)				(((x) >> BIT_SHIFT_BT_CMD_ID) & BIT_MASK_BT_CMD_ID)
#define BIT_SET_BT_CMD_ID(x, v)			(BIT_CLEAR_BT_CMD_ID(x) | BIT_BT_CMD_ID(v))

/* 2 REG_BT_INTERRUPT_CONTROL_REGISTER	(Offset 0x0780) */

#define BIT_WLAN_RPT_NOTIFY				BIT(31)
#define BIT_EN_WLAN_RPT_AND_BT_QUERY			BIT(30)
#define BIT_EN_MAC_NULL_PKT_NOTIFY			BIT(29)
#define BIT_EN_BT_STSTUS_RPT				BIT(28)
#define BIT_EN_BT_POWER				BIT(27)
#define BIT_EN_BT_CHANNEL				BIT(26)
#define BIT_EN_BT_SLOT_CHANGE				BIT(25)
#define BIT_EN_BT_PROFILE_OR_HID			BIT(24)

#define BIT_SHIFT_WLAN_RPT_DATA			16
#define BIT_MASK_WLAN_RPT_DATA				0xff
#define BIT_WLAN_RPT_DATA(x)				(((x) & BIT_MASK_WLAN_RPT_DATA) << BIT_SHIFT_WLAN_RPT_DATA)
#define BITS_WLAN_RPT_DATA				(BIT_MASK_WLAN_RPT_DATA << BIT_SHIFT_WLAN_RPT_DATA)
#define BIT_CLEAR_WLAN_RPT_DATA(x)			((x) & (~BITS_WLAN_RPT_DATA))
#define BIT_GET_WLAN_RPT_DATA(x)			(((x) >> BIT_SHIFT_WLAN_RPT_DATA) & BIT_MASK_WLAN_RPT_DATA)
#define BIT_SET_WLAN_RPT_DATA(x, v)			(BIT_CLEAR_WLAN_RPT_DATA(x) | BIT_WLAN_RPT_DATA(v))

#define BIT_SHIFT_TO_BT_CMDID				8
#define BIT_MASK_TO_BT_CMDID				0xff
#define BIT_TO_BT_CMDID(x)				(((x) & BIT_MASK_TO_BT_CMDID) << BIT_SHIFT_TO_BT_CMDID)
#define BITS_TO_BT_CMDID				(BIT_MASK_TO_BT_CMDID << BIT_SHIFT_TO_BT_CMDID)
#define BIT_CLEAR_TO_BT_CMDID(x)			((x) & (~BITS_TO_BT_CMDID))
#define BIT_GET_TO_BT_CMDID(x)				(((x) >> BIT_SHIFT_TO_BT_CMDID) & BIT_MASK_TO_BT_CMDID)
#define BIT_SET_TO_BT_CMDID(x, v)			(BIT_CLEAR_TO_BT_CMDID(x) | BIT_TO_BT_CMDID(v))

#define BIT_SHIFT_BT_DATA				0
#define BIT_MASK_BT_DATA				0xff
#define BIT_BT_DATA(x)					(((x) & BIT_MASK_BT_DATA) << BIT_SHIFT_BT_DATA)
#define BITS_BT_DATA					(BIT_MASK_BT_DATA << BIT_SHIFT_BT_DATA)
#define BIT_CLEAR_BT_DATA(x)				((x) & (~BITS_BT_DATA))
#define BIT_GET_BT_DATA(x)				(((x) >> BIT_SHIFT_BT_DATA) & BIT_MASK_BT_DATA)
#define BIT_SET_BT_DATA(x, v)				(BIT_CLEAR_BT_DATA(x) | BIT_BT_DATA(v))

/* 2 REG_WLAN_REPORT_TIME_OUT_CONTROL_REGISTER (Offset 0x0784) */

#define BIT_SHIFT_ISOLATION_CHK_0			9
#define BIT_MASK_ISOLATION_CHK_0			0x7fffff
#define BIT_ISOLATION_CHK_0(x)				(((x) & BIT_MASK_ISOLATION_CHK_0) << BIT_SHIFT_ISOLATION_CHK_0)
#define BITS_ISOLATION_CHK_0				(BIT_MASK_ISOLATION_CHK_0 << BIT_SHIFT_ISOLATION_CHK_0)
#define BIT_CLEAR_ISOLATION_CHK_0(x)			((x) & (~BITS_ISOLATION_CHK_0))
#define BIT_GET_ISOLATION_CHK_0(x)			(((x) >> BIT_SHIFT_ISOLATION_CHK_0) & BIT_MASK_ISOLATION_CHK_0)
#define BIT_SET_ISOLATION_CHK_0(x, v)			(BIT_CLEAR_ISOLATION_CHK_0(x) | BIT_ISOLATION_CHK_0(v))

#define BIT_ISOLATION_EN				BIT(8)

#define BIT_SHIFT_WLAN_RPT_TO				0
#define BIT_MASK_WLAN_RPT_TO				0xff
#define BIT_WLAN_RPT_TO(x)				(((x) & BIT_MASK_WLAN_RPT_TO) << BIT_SHIFT_WLAN_RPT_TO)
#define BITS_WLAN_RPT_TO				(BIT_MASK_WLAN_RPT_TO << BIT_SHIFT_WLAN_RPT_TO)
#define BIT_CLEAR_WLAN_RPT_TO(x)			((x) & (~BITS_WLAN_RPT_TO))
#define BIT_GET_WLAN_RPT_TO(x)				(((x) >> BIT_SHIFT_WLAN_RPT_TO) & BIT_MASK_WLAN_RPT_TO)
#define BIT_SET_WLAN_RPT_TO(x, v)			(BIT_CLEAR_WLAN_RPT_TO(x) | BIT_WLAN_RPT_TO(v))

/* 2 REG_BT_ISOLATION_TABLE_REGISTER_REGISTER_1 (Offset 0x0788) */

#define BIT_SHIFT_ISOLATION_CHK_1			0
#define BIT_MASK_ISOLATION_CHK_1			0xffffffffL
#define BIT_ISOLATION_CHK_1(x)				(((x) & BIT_MASK_ISOLATION_CHK_1) << BIT_SHIFT_ISOLATION_CHK_1)
#define BITS_ISOLATION_CHK_1				(BIT_MASK_ISOLATION_CHK_1 << BIT_SHIFT_ISOLATION_CHK_1)
#define BIT_CLEAR_ISOLATION_CHK_1(x)			((x) & (~BITS_ISOLATION_CHK_1))
#define BIT_GET_ISOLATION_CHK_1(x)			(((x) >> BIT_SHIFT_ISOLATION_CHK_1) & BIT_MASK_ISOLATION_CHK_1)
#define BIT_SET_ISOLATION_CHK_1(x, v)			(BIT_CLEAR_ISOLATION_CHK_1(x) | BIT_ISOLATION_CHK_1(v))

/* 2 REG_BT_INTERRUPT_STATUS_REGISTER	(Offset 0x078C) */

#define BIT_BT_HID_ISR					BIT(31)
#define BIT_BT_QUERY_ISR				BIT(30)
#define BIT_MAC_NULL_PKT_NOTIFY_ISR			BIT(29)
#define BIT_WLAN_RPT_ISR				BIT(28)
#define BIT_BT_POWER_ISR				BIT(27)
#define BIT_BT_CHANNEL_ISR				BIT(26)
#define BIT_BT_SLOT_CHANGE_ISR				BIT(25)
#define BIT_BT_PROFILE_ISR				BIT(24)

#define BIT_SHIFT_ISOLATION_CHK_2			0
#define BIT_MASK_ISOLATION_CHK_2			0xffffff
#define BIT_ISOLATION_CHK_2(x)				(((x) & BIT_MASK_ISOLATION_CHK_2) << BIT_SHIFT_ISOLATION_CHK_2)
#define BITS_ISOLATION_CHK_2				(BIT_MASK_ISOLATION_CHK_2 << BIT_SHIFT_ISOLATION_CHK_2)
#define BIT_CLEAR_ISOLATION_CHK_2(x)			((x) & (~BITS_ISOLATION_CHK_2))
#define BIT_GET_ISOLATION_CHK_2(x)			(((x) >> BIT_SHIFT_ISOLATION_CHK_2) & BIT_MASK_ISOLATION_CHK_2)
#define BIT_SET_ISOLATION_CHK_2(x, v)			(BIT_CLEAR_ISOLATION_CHK_2(x) | BIT_ISOLATION_CHK_2(v))

/* 2 REG_BT_TDMA_TIME_REGISTER		(Offset 0x0790) */

#define BIT_SHIFT_BT_TIME				6
#define BIT_MASK_BT_TIME				0x3ffffff
#define BIT_BT_TIME(x)					(((x) & BIT_MASK_BT_TIME) << BIT_SHIFT_BT_TIME)
#define BITS_BT_TIME					(BIT_MASK_BT_TIME << BIT_SHIFT_BT_TIME)
#define BIT_CLEAR_BT_TIME(x)				((x) & (~BITS_BT_TIME))
#define BIT_GET_BT_TIME(x)				(((x) >> BIT_SHIFT_BT_TIME) & BIT_MASK_BT_TIME)
#define BIT_SET_BT_TIME(x, v)				(BIT_CLEAR_BT_TIME(x) | BIT_BT_TIME(v))

#define BIT_SHIFT_BT_RPT_SAMPLE_RATE			0
#define BIT_MASK_BT_RPT_SAMPLE_RATE			0x3f
#define BIT_BT_RPT_SAMPLE_RATE(x)			(((x) & BIT_MASK_BT_RPT_SAMPLE_RATE) << BIT_SHIFT_BT_RPT_SAMPLE_RATE)
#define BITS_BT_RPT_SAMPLE_RATE			(BIT_MASK_BT_RPT_SAMPLE_RATE << BIT_SHIFT_BT_RPT_SAMPLE_RATE)
#define BIT_CLEAR_BT_RPT_SAMPLE_RATE(x)		((x) & (~BITS_BT_RPT_SAMPLE_RATE))
#define BIT_GET_BT_RPT_SAMPLE_RATE(x)			(((x) >> BIT_SHIFT_BT_RPT_SAMPLE_RATE) & BIT_MASK_BT_RPT_SAMPLE_RATE)
#define BIT_SET_BT_RPT_SAMPLE_RATE(x, v)		(BIT_CLEAR_BT_RPT_SAMPLE_RATE(x) | BIT_BT_RPT_SAMPLE_RATE(v))

/* 2 REG_BT_ACT_REGISTER			(Offset 0x0794) */

#define BIT_B_AX_BT_BLE_EN				BIT(24)

#define BIT_SHIFT_BT_EISR_EN				16
#define BIT_MASK_BT_EISR_EN				0xff
#define BIT_BT_EISR_EN(x)				(((x) & BIT_MASK_BT_EISR_EN) << BIT_SHIFT_BT_EISR_EN)
#define BITS_BT_EISR_EN				(BIT_MASK_BT_EISR_EN << BIT_SHIFT_BT_EISR_EN)
#define BIT_CLEAR_BT_EISR_EN(x)			((x) & (~BITS_BT_EISR_EN))
#define BIT_GET_BT_EISR_EN(x)				(((x) >> BIT_SHIFT_BT_EISR_EN) & BIT_MASK_BT_EISR_EN)
#define BIT_SET_BT_EISR_EN(x, v)			(BIT_CLEAR_BT_EISR_EN(x) | BIT_BT_EISR_EN(v))

#define BIT_BT_ACT_FALLING_ISR				BIT(10)
#define BIT_BT_ACT_RISING_ISR				BIT(9)
#define BIT_TDMA_TO_ISR				BIT(8)

#define BIT_SHIFT_BT_CH				0
#define BIT_MASK_BT_CH					0x7f
#define BIT_BT_CH(x)					(((x) & BIT_MASK_BT_CH) << BIT_SHIFT_BT_CH)
#define BITS_BT_CH					(BIT_MASK_BT_CH << BIT_SHIFT_BT_CH)
#define BIT_CLEAR_BT_CH(x)				((x) & (~BITS_BT_CH))
#define BIT_GET_BT_CH(x)				(((x) >> BIT_SHIFT_BT_CH) & BIT_MASK_BT_CH)
#define BIT_SET_BT_CH(x, v)				(BIT_CLEAR_BT_CH(x) | BIT_BT_CH(v))

/* 2 REG_LTR_IDLE_LATENCY_V2			(Offset 0x0798) */

#define BIT_SHIFT_LTR_IDLE_LATENCY			30
#define BIT_MASK_LTR_IDLE_LATENCY			0x3
#define BIT_LTR_IDLE_LATENCY(x)			(((x) & BIT_MASK_LTR_IDLE_LATENCY) << BIT_SHIFT_LTR_IDLE_LATENCY)
#define BITS_LTR_IDLE_LATENCY				(BIT_MASK_LTR_IDLE_LATENCY << BIT_SHIFT_LTR_IDLE_LATENCY)
#define BIT_CLEAR_LTR_IDLE_LATENCY(x)			((x) & (~BITS_LTR_IDLE_LATENCY))
#define BIT_GET_LTR_IDLE_LATENCY(x)			(((x) >> BIT_SHIFT_LTR_IDLE_LATENCY) & BIT_MASK_LTR_IDLE_LATENCY)
#define BIT_SET_LTR_IDLE_LATENCY(x, v)			(BIT_CLEAR_LTR_IDLE_LATENCY(x) | BIT_LTR_IDLE_LATENCY(v))

#define BIT_SHIFT_OBFF_STATE				28
#define BIT_MASK_OBFF_STATE				0x3
#define BIT_OBFF_STATE(x)				(((x) & BIT_MASK_OBFF_STATE) << BIT_SHIFT_OBFF_STATE)
#define BITS_OBFF_STATE				(BIT_MASK_OBFF_STATE << BIT_SHIFT_OBFF_STATE)
#define BIT_CLEAR_OBFF_STATE(x)			((x) & (~BITS_OBFF_STATE))
#define BIT_GET_OBFF_STATE(x)				(((x) >> BIT_SHIFT_OBFF_STATE) & BIT_MASK_OBFF_STATE)
#define BIT_SET_OBFF_STATE(x, v)			(BIT_CLEAR_OBFF_STATE(x) | BIT_OBFF_STATE(v))

#define BIT_SHIFT_OBFF_CTRL_1				4
#define BIT_MASK_OBFF_CTRL_1				0xffffff
#define BIT_OBFF_CTRL_1(x)				(((x) & BIT_MASK_OBFF_CTRL_1) << BIT_SHIFT_OBFF_CTRL_1)
#define BITS_OBFF_CTRL_1				(BIT_MASK_OBFF_CTRL_1 << BIT_SHIFT_OBFF_CTRL_1)
#define BIT_CLEAR_OBFF_CTRL_1(x)			((x) & (~BITS_OBFF_CTRL_1))
#define BIT_GET_OBFF_CTRL_1(x)				(((x) >> BIT_SHIFT_OBFF_CTRL_1) & BIT_MASK_OBFF_CTRL_1)
#define BIT_SET_OBFF_CTRL_1(x, v)			(BIT_CLEAR_OBFF_CTRL_1(x) | BIT_OBFF_CTRL_1(v))

#define BIT_SHIFT_OBFF_CTRL_0				0
#define BIT_MASK_OBFF_CTRL_0				0xf
#define BIT_OBFF_CTRL_0(x)				(((x) & BIT_MASK_OBFF_CTRL_0) << BIT_SHIFT_OBFF_CTRL_0)
#define BITS_OBFF_CTRL_0				(BIT_MASK_OBFF_CTRL_0 << BIT_SHIFT_OBFF_CTRL_0)
#define BIT_CLEAR_OBFF_CTRL_0(x)			((x) & (~BITS_OBFF_CTRL_0))
#define BIT_GET_OBFF_CTRL_0(x)				(((x) >> BIT_SHIFT_OBFF_CTRL_0) & BIT_MASK_OBFF_CTRL_0)
#define BIT_SET_OBFF_CTRL_0(x, v)			(BIT_CLEAR_OBFF_CTRL_0(x) | BIT_OBFF_CTRL_0(v))

/* 2 REG_LTR_ACTIVE_LATENCY_V2		(Offset 0x079C) */

#define BIT_SHIFT_LTR_ACTIVE_LATENCY			0
#define BIT_MASK_LTR_ACTIVE_LATENCY			0xffffffffL
#define BIT_LTR_ACTIVE_LATENCY(x)			(((x) & BIT_MASK_LTR_ACTIVE_LATENCY) << BIT_SHIFT_LTR_ACTIVE_LATENCY)
#define BITS_LTR_ACTIVE_LATENCY			(BIT_MASK_LTR_ACTIVE_LATENCY << BIT_SHIFT_LTR_ACTIVE_LATENCY)
#define BIT_CLEAR_LTR_ACTIVE_LATENCY(x)		((x) & (~BITS_LTR_ACTIVE_LATENCY))
#define BIT_GET_LTR_ACTIVE_LATENCY(x)			(((x) >> BIT_SHIFT_LTR_ACTIVE_LATENCY) & BIT_MASK_LTR_ACTIVE_LATENCY)
#define BIT_SET_LTR_ACTIVE_LATENCY(x, v)		(BIT_CLEAR_LTR_ACTIVE_LATENCY(x) | BIT_LTR_ACTIVE_LATENCY(v))

/* 2 REG_OBFF_CTRL				(Offset 0x07A0) */

#define BIT_SHIFT_LTR_CTRL				24
#define BIT_MASK_LTR_CTRL				0xff
#define BIT_LTR_CTRL(x)				(((x) & BIT_MASK_LTR_CTRL) << BIT_SHIFT_LTR_CTRL)
#define BITS_LTR_CTRL					(BIT_MASK_LTR_CTRL << BIT_SHIFT_LTR_CTRL)
#define BIT_CLEAR_LTR_CTRL(x)				((x) & (~BITS_LTR_CTRL))
#define BIT_GET_LTR_CTRL(x)				(((x) >> BIT_SHIFT_LTR_CTRL) & BIT_MASK_LTR_CTRL)
#define BIT_SET_LTR_CTRL(x, v)				(BIT_CLEAR_LTR_CTRL(x) | BIT_LTR_CTRL(v))

#define BIT_LTR_IDLE_FLAG				BIT(23)
#define BIT_LTR_ACT_FLAG				BIT(22)

#define BIT_SHIFT_OBFF_CTRL				0
#define BIT_MASK_OBFF_CTRL				0x3fffff
#define BIT_OBFF_CTRL(x)				(((x) & BIT_MASK_OBFF_CTRL) << BIT_SHIFT_OBFF_CTRL)
#define BITS_OBFF_CTRL					(BIT_MASK_OBFF_CTRL << BIT_SHIFT_OBFF_CTRL)
#define BIT_CLEAR_OBFF_CTRL(x)				((x) & (~BITS_OBFF_CTRL))
#define BIT_GET_OBFF_CTRL(x)				(((x) >> BIT_SHIFT_OBFF_CTRL) & BIT_MASK_OBFF_CTRL)
#define BIT_SET_OBFF_CTRL(x, v)			(BIT_CLEAR_OBFF_CTRL(x) | BIT_OBFF_CTRL(v))

/* 2 REG_LTR_CTRL				(Offset 0x07A4) */

#define BIT_RX_VENDOR_ADV_EN				BIT(25)
#define BIT_TX_VENDOR_ADV_EN				BIT(24)

#define BIT_SHIFT_WMAC_OPT_SIG2			16
#define BIT_MASK_WMAC_OPT_SIG2				0xff
#define BIT_WMAC_OPT_SIG2(x)				(((x) & BIT_MASK_WMAC_OPT_SIG2) << BIT_SHIFT_WMAC_OPT_SIG2)
#define BITS_WMAC_OPT_SIG2				(BIT_MASK_WMAC_OPT_SIG2 << BIT_SHIFT_WMAC_OPT_SIG2)
#define BIT_CLEAR_WMAC_OPT_SIG2(x)			((x) & (~BITS_WMAC_OPT_SIG2))
#define BIT_GET_WMAC_OPT_SIG2(x)			(((x) >> BIT_SHIFT_WMAC_OPT_SIG2) & BIT_MASK_WMAC_OPT_SIG2)
#define BIT_SET_WMAC_OPT_SIG2(x, v)			(BIT_CLEAR_WMAC_OPT_SIG2(x) | BIT_WMAC_OPT_SIG2(v))

#define BIT_SHIFT_WMAC_OPT_SIG1			8
#define BIT_MASK_WMAC_OPT_SIG1				0xff
#define BIT_WMAC_OPT_SIG1(x)				(((x) & BIT_MASK_WMAC_OPT_SIG1) << BIT_SHIFT_WMAC_OPT_SIG1)
#define BITS_WMAC_OPT_SIG1				(BIT_MASK_WMAC_OPT_SIG1 << BIT_SHIFT_WMAC_OPT_SIG1)
#define BIT_CLEAR_WMAC_OPT_SIG1(x)			((x) & (~BITS_WMAC_OPT_SIG1))
#define BIT_GET_WMAC_OPT_SIG1(x)			(((x) >> BIT_SHIFT_WMAC_OPT_SIG1) & BIT_MASK_WMAC_OPT_SIG1)
#define BIT_SET_WMAC_OPT_SIG1(x, v)			(BIT_CLEAR_WMAC_OPT_SIG1(x) | BIT_WMAC_OPT_SIG1(v))

#define BIT_SHIFT_WMAC_INI_SIG				0
#define BIT_MASK_WMAC_INI_SIG				0xff
#define BIT_WMAC_INI_SIG(x)				(((x) & BIT_MASK_WMAC_INI_SIG) << BIT_SHIFT_WMAC_INI_SIG)
#define BITS_WMAC_INI_SIG				(BIT_MASK_WMAC_INI_SIG << BIT_SHIFT_WMAC_INI_SIG)
#define BIT_CLEAR_WMAC_INI_SIG(x)			((x) & (~BITS_WMAC_INI_SIG))
#define BIT_GET_WMAC_INI_SIG(x)			(((x) >> BIT_SHIFT_WMAC_INI_SIG) & BIT_MASK_WMAC_INI_SIG)
#define BIT_SET_WMAC_INI_SIG(x, v)			(BIT_CLEAR_WMAC_INI_SIG(x) | BIT_WMAC_INI_SIG(v))

/* 2 REG_LTR_CTRL2				(Offset 0x07A8) */

#define BIT_SHIFT_OBFF_TIMER_ID_HIGH			29
#define BIT_MASK_OBFF_TIMER_ID_HIGH			0x7
#define BIT_OBFF_TIMER_ID_HIGH(x)			(((x) & BIT_MASK_OBFF_TIMER_ID_HIGH) << BIT_SHIFT_OBFF_TIMER_ID_HIGH)
#define BITS_OBFF_TIMER_ID_HIGH			(BIT_MASK_OBFF_TIMER_ID_HIGH << BIT_SHIFT_OBFF_TIMER_ID_HIGH)
#define BIT_CLEAR_OBFF_TIMER_ID_HIGH(x)		((x) & (~BITS_OBFF_TIMER_ID_HIGH))
#define BIT_GET_OBFF_TIMER_ID_HIGH(x)			(((x) >> BIT_SHIFT_OBFF_TIMER_ID_HIGH) & BIT_MASK_OBFF_TIMER_ID_HIGH)
#define BIT_SET_OBFF_TIMER_ID_HIGH(x, v)		(BIT_CLEAR_OBFF_TIMER_ID_HIGH(x) | BIT_OBFF_TIMER_ID_HIGH(v))

#define BIT_SHIFT_HIGH_RATE_BDRY			16
#define BIT_MASK_HIGH_RATE_BDRY			0x7f
#define BIT_HIGH_RATE_BDRY(x)				(((x) & BIT_MASK_HIGH_RATE_BDRY) << BIT_SHIFT_HIGH_RATE_BDRY)
#define BITS_HIGH_RATE_BDRY				(BIT_MASK_HIGH_RATE_BDRY << BIT_SHIFT_HIGH_RATE_BDRY)
#define BIT_CLEAR_HIGH_RATE_BDRY(x)			((x) & (~BITS_HIGH_RATE_BDRY))
#define BIT_GET_HIGH_RATE_BDRY(x)			(((x) >> BIT_SHIFT_HIGH_RATE_BDRY) & BIT_MASK_HIGH_RATE_BDRY)
#define BIT_SET_HIGH_RATE_BDRY(x, v)			(BIT_CLEAR_HIGH_RATE_BDRY(x) | BIT_HIGH_RATE_BDRY(v))

#define BIT_SHIFT_LOW_RATE_BDRY			9
#define BIT_MASK_LOW_RATE_BDRY				0x7f
#define BIT_LOW_RATE_BDRY(x)				(((x) & BIT_MASK_LOW_RATE_BDRY) << BIT_SHIFT_LOW_RATE_BDRY)
#define BITS_LOW_RATE_BDRY				(BIT_MASK_LOW_RATE_BDRY << BIT_SHIFT_LOW_RATE_BDRY)
#define BIT_CLEAR_LOW_RATE_BDRY(x)			((x) & (~BITS_LOW_RATE_BDRY))
#define BIT_GET_LOW_RATE_BDRY(x)			(((x) >> BIT_SHIFT_LOW_RATE_BDRY) & BIT_MASK_LOW_RATE_BDRY)
#define BIT_SET_LOW_RATE_BDRY(x, v)			(BIT_CLEAR_LOW_RATE_BDRY(x) | BIT_LOW_RATE_BDRY(v))

#define BIT_SHIFT_HIGH_RATE_TRIGS			7
#define BIT_MASK_HIGH_RATE_TRIGS			0x3
#define BIT_HIGH_RATE_TRIGS(x)				(((x) & BIT_MASK_HIGH_RATE_TRIGS) << BIT_SHIFT_HIGH_RATE_TRIGS)
#define BITS_HIGH_RATE_TRIGS				(BIT_MASK_HIGH_RATE_TRIGS << BIT_SHIFT_HIGH_RATE_TRIGS)
#define BIT_CLEAR_HIGH_RATE_TRIGS(x)			((x) & (~BITS_HIGH_RATE_TRIGS))
#define BIT_GET_HIGH_RATE_TRIGS(x)			(((x) >> BIT_SHIFT_HIGH_RATE_TRIGS) & BIT_MASK_HIGH_RATE_TRIGS)
#define BIT_SET_HIGH_RATE_TRIGS(x, v)			(BIT_CLEAR_HIGH_RATE_TRIGS(x) | BIT_HIGH_RATE_TRIGS(v))

#define BIT_SHIFT_MEDIA_RATE_TRIGS			5
#define BIT_MASK_MEDIA_RATE_TRIGS			0x3
#define BIT_MEDIA_RATE_TRIGS(x)			(((x) & BIT_MASK_MEDIA_RATE_TRIGS) << BIT_SHIFT_MEDIA_RATE_TRIGS)
#define BITS_MEDIA_RATE_TRIGS				(BIT_MASK_MEDIA_RATE_TRIGS << BIT_SHIFT_MEDIA_RATE_TRIGS)
#define BIT_CLEAR_MEDIA_RATE_TRIGS(x)			((x) & (~BITS_MEDIA_RATE_TRIGS))
#define BIT_GET_MEDIA_RATE_TRIGS(x)			(((x) >> BIT_SHIFT_MEDIA_RATE_TRIGS) & BIT_MASK_MEDIA_RATE_TRIGS)
#define BIT_SET_MEDIA_RATE_TRIGS(x, v)			(BIT_CLEAR_MEDIA_RATE_TRIGS(x) | BIT_MEDIA_RATE_TRIGS(v))

#define BIT_SHIFT_LOW_RATE_TRIGS			3
#define BIT_MASK_LOW_RATE_TRIGS			0x3
#define BIT_LOW_RATE_TRIGS(x)				(((x) & BIT_MASK_LOW_RATE_TRIGS) << BIT_SHIFT_LOW_RATE_TRIGS)
#define BITS_LOW_RATE_TRIGS				(BIT_MASK_LOW_RATE_TRIGS << BIT_SHIFT_LOW_RATE_TRIGS)
#define BIT_CLEAR_LOW_RATE_TRIGS(x)			((x) & (~BITS_LOW_RATE_TRIGS))
#define BIT_GET_LOW_RATE_TRIGS(x)			(((x) >> BIT_SHIFT_LOW_RATE_TRIGS) & BIT_MASK_LOW_RATE_TRIGS)
#define BIT_SET_LOW_RATE_TRIGS(x, v)			(BIT_CLEAR_LOW_RATE_TRIGS(x) | BIT_LOW_RATE_TRIGS(v))

#define BIT_SHIFT_RX_EXHAUST_ID			0
#define BIT_MASK_RX_EXHAUST_ID				0x7
#define BIT_RX_EXHAUST_ID(x)				(((x) & BIT_MASK_RX_EXHAUST_ID) << BIT_SHIFT_RX_EXHAUST_ID)
#define BITS_RX_EXHAUST_ID				(BIT_MASK_RX_EXHAUST_ID << BIT_SHIFT_RX_EXHAUST_ID)
#define BIT_CLEAR_RX_EXHAUST_ID(x)			((x) & (~BITS_RX_EXHAUST_ID))
#define BIT_GET_RX_EXHAUST_ID(x)			(((x) >> BIT_SHIFT_RX_EXHAUST_ID) & BIT_MASK_RX_EXHAUST_ID)
#define BIT_SET_RX_EXHAUST_ID(x, v)			(BIT_CLEAR_RX_EXHAUST_ID(x) | BIT_RX_EXHAUST_ID(v))

/* 2 REG_ANTTRN_CTR_V1			(Offset 0x07B0) */

#define BIT_SHIFT_TRAIN_STA_ADDR1			0
#define BIT_MASK_TRAIN_STA_ADDR1			0xffffffffL
#define BIT_TRAIN_STA_ADDR1(x)				(((x) & BIT_MASK_TRAIN_STA_ADDR1) << BIT_SHIFT_TRAIN_STA_ADDR1)
#define BITS_TRAIN_STA_ADDR1				(BIT_MASK_TRAIN_STA_ADDR1 << BIT_SHIFT_TRAIN_STA_ADDR1)
#define BIT_CLEAR_TRAIN_STA_ADDR1(x)			((x) & (~BITS_TRAIN_STA_ADDR1))
#define BIT_GET_TRAIN_STA_ADDR1(x)			(((x) >> BIT_SHIFT_TRAIN_STA_ADDR1) & BIT_MASK_TRAIN_STA_ADDR1)
#define BIT_SET_TRAIN_STA_ADDR1(x, v)			(BIT_CLEAR_TRAIN_STA_ADDR1(x) | BIT_TRAIN_STA_ADDR1(v))

/* 2 REG_ANTTRN_CTR_1_V1			(Offset 0x07B4) */

#define BIT_ANTTRN_SWITCH				BIT(19)
#define BIT_APPEND_MACID_IN_RESP_EN			BIT(18)
#define BIT_ADDR2_MATCH_EN				BIT(17)
#define BIT_ANTTRN_EN					BIT(16)

#define BIT_SHIFT_TRAIN_STA_ADDR2			0
#define BIT_MASK_TRAIN_STA_ADDR2			0xffff
#define BIT_TRAIN_STA_ADDR2(x)				(((x) & BIT_MASK_TRAIN_STA_ADDR2) << BIT_SHIFT_TRAIN_STA_ADDR2)
#define BITS_TRAIN_STA_ADDR2				(BIT_MASK_TRAIN_STA_ADDR2 << BIT_SHIFT_TRAIN_STA_ADDR2)
#define BIT_CLEAR_TRAIN_STA_ADDR2(x)			((x) & (~BITS_TRAIN_STA_ADDR2))
#define BIT_GET_TRAIN_STA_ADDR2(x)			(((x) >> BIT_SHIFT_TRAIN_STA_ADDR2) & BIT_MASK_TRAIN_STA_ADDR2)
#define BIT_SET_TRAIN_STA_ADDR2(x, v)			(BIT_CLEAR_TRAIN_STA_ADDR2(x) | BIT_TRAIN_STA_ADDR2(v))

/* 2 REG_WMAC_PKTCNT_RWD			(Offset 0x07B8) */

#define BIT_SHIFT_PKTCNT_BSSIDMAP			4
#define BIT_MASK_PKTCNT_BSSIDMAP			0xf
#define BIT_PKTCNT_BSSIDMAP(x)				(((x) & BIT_MASK_PKTCNT_BSSIDMAP) << BIT_SHIFT_PKTCNT_BSSIDMAP)
#define BITS_PKTCNT_BSSIDMAP				(BIT_MASK_PKTCNT_BSSIDMAP << BIT_SHIFT_PKTCNT_BSSIDMAP)
#define BIT_CLEAR_PKTCNT_BSSIDMAP(x)			((x) & (~BITS_PKTCNT_BSSIDMAP))
#define BIT_GET_PKTCNT_BSSIDMAP(x)			(((x) >> BIT_SHIFT_PKTCNT_BSSIDMAP) & BIT_MASK_PKTCNT_BSSIDMAP)
#define BIT_SET_PKTCNT_BSSIDMAP(x, v)			(BIT_CLEAR_PKTCNT_BSSIDMAP(x) | BIT_PKTCNT_BSSIDMAP(v))

#define BIT_PKTCNT_CNTRST				BIT(1)

/* 2 REG_WMAC_PKTCNT_CTRL			(Offset 0x07BC) */

#define BIT_WMAC_PKTCNT_FEN				BIT(8)

#define BIT_SHIFT_WMAC_PKTCNT_CFGAD			0
#define BIT_MASK_WMAC_PKTCNT_CFGAD			0xff
#define BIT_WMAC_PKTCNT_CFGAD(x)			(((x) & BIT_MASK_WMAC_PKTCNT_CFGAD) << BIT_SHIFT_WMAC_PKTCNT_CFGAD)
#define BITS_WMAC_PKTCNT_CFGAD				(BIT_MASK_WMAC_PKTCNT_CFGAD << BIT_SHIFT_WMAC_PKTCNT_CFGAD)
#define BIT_CLEAR_WMAC_PKTCNT_CFGAD(x)			((x) & (~BITS_WMAC_PKTCNT_CFGAD))
#define BIT_GET_WMAC_PKTCNT_CFGAD(x)			(((x) >> BIT_SHIFT_WMAC_PKTCNT_CFGAD) & BIT_MASK_WMAC_PKTCNT_CFGAD)
#define BIT_SET_WMAC_PKTCNT_CFGAD(x, v)		(BIT_CLEAR_WMAC_PKTCNT_CFGAD(x) | BIT_WMAC_PKTCNT_CFGAD(v))

/* 2 REG_IQ_DUMP				(Offset 0x07C0) */

#define BIT_SHIFT_DUMP_OK_ADDR				16
#define BIT_MASK_DUMP_OK_ADDR				0xffff
#define BIT_DUMP_OK_ADDR(x)				(((x) & BIT_MASK_DUMP_OK_ADDR) << BIT_SHIFT_DUMP_OK_ADDR)
#define BITS_DUMP_OK_ADDR				(BIT_MASK_DUMP_OK_ADDR << BIT_SHIFT_DUMP_OK_ADDR)
#define BIT_CLEAR_DUMP_OK_ADDR(x)			((x) & (~BITS_DUMP_OK_ADDR))
#define BIT_GET_DUMP_OK_ADDR(x)			(((x) >> BIT_SHIFT_DUMP_OK_ADDR) & BIT_MASK_DUMP_OK_ADDR)
#define BIT_SET_DUMP_OK_ADDR(x, v)			(BIT_CLEAR_DUMP_OK_ADDR(x) | BIT_DUMP_OK_ADDR(v))

#define BIT_MACDBG_TRIG_IQDUMP				BIT(15)

#define BIT_SHIFT_R_TRIG_TIME_SEL			8
#define BIT_MASK_R_TRIG_TIME_SEL			0x7f
#define BIT_R_TRIG_TIME_SEL(x)				(((x) & BIT_MASK_R_TRIG_TIME_SEL) << BIT_SHIFT_R_TRIG_TIME_SEL)
#define BITS_R_TRIG_TIME_SEL				(BIT_MASK_R_TRIG_TIME_SEL << BIT_SHIFT_R_TRIG_TIME_SEL)
#define BIT_CLEAR_R_TRIG_TIME_SEL(x)			((x) & (~BITS_R_TRIG_TIME_SEL))
#define BIT_GET_R_TRIG_TIME_SEL(x)			(((x) >> BIT_SHIFT_R_TRIG_TIME_SEL) & BIT_MASK_R_TRIG_TIME_SEL)
#define BIT_SET_R_TRIG_TIME_SEL(x, v)			(BIT_CLEAR_R_TRIG_TIME_SEL(x) | BIT_R_TRIG_TIME_SEL(v))

#define BIT_SHIFT_R_MAC_TRIG_SEL			6
#define BIT_MASK_R_MAC_TRIG_SEL			0x3
#define BIT_R_MAC_TRIG_SEL(x)				(((x) & BIT_MASK_R_MAC_TRIG_SEL) << BIT_SHIFT_R_MAC_TRIG_SEL)
#define BITS_R_MAC_TRIG_SEL				(BIT_MASK_R_MAC_TRIG_SEL << BIT_SHIFT_R_MAC_TRIG_SEL)
#define BIT_CLEAR_R_MAC_TRIG_SEL(x)			((x) & (~BITS_R_MAC_TRIG_SEL))
#define BIT_GET_R_MAC_TRIG_SEL(x)			(((x) >> BIT_SHIFT_R_MAC_TRIG_SEL) & BIT_MASK_R_MAC_TRIG_SEL)
#define BIT_SET_R_MAC_TRIG_SEL(x, v)			(BIT_CLEAR_R_MAC_TRIG_SEL(x) | BIT_R_MAC_TRIG_SEL(v))

#define BIT_MAC_TRIG_REG				BIT(5)

#define BIT_SHIFT_R_LEVEL_PULSE_SEL			3
#define BIT_MASK_R_LEVEL_PULSE_SEL			0x3
#define BIT_R_LEVEL_PULSE_SEL(x)			(((x) & BIT_MASK_R_LEVEL_PULSE_SEL) << BIT_SHIFT_R_LEVEL_PULSE_SEL)
#define BITS_R_LEVEL_PULSE_SEL				(BIT_MASK_R_LEVEL_PULSE_SEL << BIT_SHIFT_R_LEVEL_PULSE_SEL)
#define BIT_CLEAR_R_LEVEL_PULSE_SEL(x)			((x) & (~BITS_R_LEVEL_PULSE_SEL))
#define BIT_GET_R_LEVEL_PULSE_SEL(x)			(((x) >> BIT_SHIFT_R_LEVEL_PULSE_SEL) & BIT_MASK_R_LEVEL_PULSE_SEL)
#define BIT_SET_R_LEVEL_PULSE_SEL(x, v)		(BIT_CLEAR_R_LEVEL_PULSE_SEL(x) | BIT_R_LEVEL_PULSE_SEL(v))

#define BIT_EN_LA_MAC					BIT(2)
#define BIT_R_EN_IQDUMP				BIT(1)
#define BIT_R_IQDATA_DUMP				BIT(0)

/* 2 REG_MASK_LA_MAC				(Offset 0x07C4) */

#define BIT_SHIFT_MASK_LA_MAC				0
#define BIT_MASK_MASK_LA_MAC				0xffffffffL
#define BIT_MASK_LA_MAC(x)				(((x) & BIT_MASK_MASK_LA_MAC) << BIT_SHIFT_MASK_LA_MAC)
#define BITS_MASK_LA_MAC				(BIT_MASK_MASK_LA_MAC << BIT_SHIFT_MASK_LA_MAC)
#define BIT_CLEAR_MASK_LA_MAC(x)			((x) & (~BITS_MASK_LA_MAC))
#define BIT_GET_MASK_LA_MAC(x)				(((x) >> BIT_SHIFT_MASK_LA_MAC) & BIT_MASK_MASK_LA_MAC)
#define BIT_SET_MASK_LA_MAC(x, v)			(BIT_CLEAR_MASK_LA_MAC(x) | BIT_MASK_LA_MAC(v))

/* 2 REG_MATCH_REF_MAC			(Offset 0x07C8) */

#define BIT_SHIFT_MATCH_REF_MAC			0
#define BIT_MASK_MATCH_REF_MAC				0xffffffffL
#define BIT_MATCH_REF_MAC(x)				(((x) & BIT_MASK_MATCH_REF_MAC) << BIT_SHIFT_MATCH_REF_MAC)
#define BITS_MATCH_REF_MAC				(BIT_MASK_MATCH_REF_MAC << BIT_SHIFT_MATCH_REF_MAC)
#define BIT_CLEAR_MATCH_REF_MAC(x)			((x) & (~BITS_MATCH_REF_MAC))
#define BIT_GET_MATCH_REF_MAC(x)			(((x) >> BIT_SHIFT_MATCH_REF_MAC) & BIT_MASK_MATCH_REF_MAC)
#define BIT_SET_MATCH_REF_MAC(x, v)			(BIT_CLEAR_MATCH_REF_MAC(x) | BIT_MATCH_REF_MAC(v))

/* 2 REG_WMAC_DBG_FTM_CTL			(Offset 0x07CC) */

#define BIT_SHIFT_SEL_DEBUG_DATA			30
#define BIT_MASK_SEL_DEBUG_DATA			0x3
#define BIT_SEL_DEBUG_DATA(x)				(((x) & BIT_MASK_SEL_DEBUG_DATA) << BIT_SHIFT_SEL_DEBUG_DATA)
#define BITS_SEL_DEBUG_DATA				(BIT_MASK_SEL_DEBUG_DATA << BIT_SHIFT_SEL_DEBUG_DATA)
#define BIT_CLEAR_SEL_DEBUG_DATA(x)			((x) & (~BITS_SEL_DEBUG_DATA))
#define BIT_GET_SEL_DEBUG_DATA(x)			(((x) >> BIT_SHIFT_SEL_DEBUG_DATA) & BIT_MASK_SEL_DEBUG_DATA)
#define BIT_SET_SEL_DEBUG_DATA(x, v)			(BIT_CLEAR_SEL_DEBUG_DATA(x) | BIT_SEL_DEBUG_DATA(v))

#define BIT_EN_TIMEOUT					BIT(29)
#define BIT_EN_RE_START				BIT(28)

#define BIT_SHIFT_LA_MAC_TIMEOUT_UNIT_SEL		26
#define BIT_MASK_LA_MAC_TIMEOUT_UNIT_SEL		0x3
#define BIT_LA_MAC_TIMEOUT_UNIT_SEL(x)			(((x) & BIT_MASK_LA_MAC_TIMEOUT_UNIT_SEL) << BIT_SHIFT_LA_MAC_TIMEOUT_UNIT_SEL)
#define BITS_LA_MAC_TIMEOUT_UNIT_SEL			(BIT_MASK_LA_MAC_TIMEOUT_UNIT_SEL << BIT_SHIFT_LA_MAC_TIMEOUT_UNIT_SEL)
#define BIT_CLEAR_LA_MAC_TIMEOUT_UNIT_SEL(x)		((x) & (~BITS_LA_MAC_TIMEOUT_UNIT_SEL))
#define BIT_GET_LA_MAC_TIMEOUT_UNIT_SEL(x)		(((x) >> BIT_SHIFT_LA_MAC_TIMEOUT_UNIT_SEL) & BIT_MASK_LA_MAC_TIMEOUT_UNIT_SEL)
#define BIT_SET_LA_MAC_TIMEOUT_UNIT_SEL(x, v)		(BIT_CLEAR_LA_MAC_TIMEOUT_UNIT_SEL(x) | BIT_LA_MAC_TIMEOUT_UNIT_SEL(v))

#define BIT_SHIFT_LA_MAC_TIMEOUT_VALUE			20
#define BIT_MASK_LA_MAC_TIMEOUT_VALUE			0x3f
#define BIT_LA_MAC_TIMEOUT_VALUE(x)			(((x) & BIT_MASK_LA_MAC_TIMEOUT_VALUE) << BIT_SHIFT_LA_MAC_TIMEOUT_VALUE)
#define BITS_LA_MAC_TIMEOUT_VALUE			(BIT_MASK_LA_MAC_TIMEOUT_VALUE << BIT_SHIFT_LA_MAC_TIMEOUT_VALUE)
#define BIT_CLEAR_LA_MAC_TIMEOUT_VALUE(x)		((x) & (~BITS_LA_MAC_TIMEOUT_VALUE))
#define BIT_GET_LA_MAC_TIMEOUT_VALUE(x)		(((x) >> BIT_SHIFT_LA_MAC_TIMEOUT_VALUE) & BIT_MASK_LA_MAC_TIMEOUT_VALUE)
#define BIT_SET_LA_MAC_TIMEOUT_VALUE(x, v)		(BIT_CLEAR_LA_MAC_TIMEOUT_VALUE(x) | BIT_LA_MAC_TIMEOUT_VALUE(v))

#define BIT_LEVEL_PULSE_SEL_EXT			BIT(19)

#define BIT_SHIFT_TRIG_TIME_UNIT_SEL			16
#define BIT_MASK_TRIG_TIME_UNIT_SEL			0x7
#define BIT_TRIG_TIME_UNIT_SEL(x)			(((x) & BIT_MASK_TRIG_TIME_UNIT_SEL) << BIT_SHIFT_TRIG_TIME_UNIT_SEL)
#define BITS_TRIG_TIME_UNIT_SEL			(BIT_MASK_TRIG_TIME_UNIT_SEL << BIT_SHIFT_TRIG_TIME_UNIT_SEL)
#define BIT_CLEAR_TRIG_TIME_UNIT_SEL(x)		((x) & (~BITS_TRIG_TIME_UNIT_SEL))
#define BIT_GET_TRIG_TIME_UNIT_SEL(x)			(((x) >> BIT_SHIFT_TRIG_TIME_UNIT_SEL) & BIT_MASK_TRIG_TIME_UNIT_SEL)
#define BIT_SET_TRIG_TIME_UNIT_SEL(x, v)		(BIT_CLEAR_TRIG_TIME_UNIT_SEL(x) | BIT_TRIG_TIME_UNIT_SEL(v))

#define BIT_EN_TXD_DEBUG				BIT(15)
#define BIT_EN_RXD_DEBUG				BIT(14)
#define BIT_TRX_TRIG_SEL_DEBUG				BIT(13)
#define BIT_TRX_TRIG_SEL_PATT				BIT(12)
#define BIT_EN_IQD_LEN_BREAK				BIT(11)

#define BIT_SHIFT_IQD_LENGTH_REF			8
#define BIT_MASK_IQD_LENGTH_REF			0x7
#define BIT_IQD_LENGTH_REF(x)				(((x) & BIT_MASK_IQD_LENGTH_REF) << BIT_SHIFT_IQD_LENGTH_REF)
#define BITS_IQD_LENGTH_REF				(BIT_MASK_IQD_LENGTH_REF << BIT_SHIFT_IQD_LENGTH_REF)
#define BIT_CLEAR_IQD_LENGTH_REF(x)			((x) & (~BITS_IQD_LENGTH_REF))
#define BIT_GET_IQD_LENGTH_REF(x)			(((x) >> BIT_SHIFT_IQD_LENGTH_REF) & BIT_MASK_IQD_LENGTH_REF)
#define BIT_SET_IQD_LENGTH_REF(x, v)			(BIT_CLEAR_IQD_LENGTH_REF(x) | BIT_IQD_LENGTH_REF(v))

#define BIT_TRX_TRIG_SEL_WMAC				BIT(7)
#define BIT_RXFTM_TXACK_SC				BIT(6)
#define BIT_RXFTM_TXACK_BW				BIT(5)
#define BIT_RXFTM_EN					BIT(3)
#define BIT_RXFTMREQ_BYDRV				BIT(2)
#define BIT_RXFTMREQ_EN				BIT(1)
#define BIT_FTM_EN					BIT(0)

/* 2 REG_OFDM_CCK_LEN_MASK			(Offset 0x07D0) */

#define BIT_SHIFT_RX_OFDM_LEN_TH			16
#define BIT_MASK_RX_OFDM_LEN_TH			0xffff
#define BIT_RX_OFDM_LEN_TH(x)				(((x) & BIT_MASK_RX_OFDM_LEN_TH) << BIT_SHIFT_RX_OFDM_LEN_TH)
#define BITS_RX_OFDM_LEN_TH				(BIT_MASK_RX_OFDM_LEN_TH << BIT_SHIFT_RX_OFDM_LEN_TH)
#define BIT_CLEAR_RX_OFDM_LEN_TH(x)			((x) & (~BITS_RX_OFDM_LEN_TH))
#define BIT_GET_RX_OFDM_LEN_TH(x)			(((x) >> BIT_SHIFT_RX_OFDM_LEN_TH) & BIT_MASK_RX_OFDM_LEN_TH)
#define BIT_SET_RX_OFDM_LEN_TH(x, v)			(BIT_CLEAR_RX_OFDM_LEN_TH(x) | BIT_RX_OFDM_LEN_TH(v))

#define BIT_SHIFT_RX_CCK_LEN_TH			0
#define BIT_MASK_RX_CCK_LEN_TH				0xffff
#define BIT_RX_CCK_LEN_TH(x)				(((x) & BIT_MASK_RX_CCK_LEN_TH) << BIT_SHIFT_RX_CCK_LEN_TH)
#define BITS_RX_CCK_LEN_TH				(BIT_MASK_RX_CCK_LEN_TH << BIT_SHIFT_RX_CCK_LEN_TH)
#define BIT_CLEAR_RX_CCK_LEN_TH(x)			((x) & (~BITS_RX_CCK_LEN_TH))
#define BIT_GET_RX_CCK_LEN_TH(x)			(((x) >> BIT_SHIFT_RX_CCK_LEN_TH) & BIT_MASK_RX_CCK_LEN_TH)
#define BIT_SET_RX_CCK_LEN_TH(x, v)			(BIT_CLEAR_RX_CCK_LEN_TH(x) | BIT_RX_CCK_LEN_TH(v))

/* 2 REG_WMAC_OPTION_FUNCTION_1		(Offset 0x07D4) */

#define BIT_SHIFT_R_WMAC_RXFIFO_FULL_TH_1		24
#define BIT_MASK_R_WMAC_RXFIFO_FULL_TH_1		0xff
#define BIT_R_WMAC_RXFIFO_FULL_TH_1(x)			(((x) & BIT_MASK_R_WMAC_RXFIFO_FULL_TH_1) << BIT_SHIFT_R_WMAC_RXFIFO_FULL_TH_1)
#define BITS_R_WMAC_RXFIFO_FULL_TH_1			(BIT_MASK_R_WMAC_RXFIFO_FULL_TH_1 << BIT_SHIFT_R_WMAC_RXFIFO_FULL_TH_1)
#define BIT_CLEAR_R_WMAC_RXFIFO_FULL_TH_1(x)		((x) & (~BITS_R_WMAC_RXFIFO_FULL_TH_1))
#define BIT_GET_R_WMAC_RXFIFO_FULL_TH_1(x)		(((x) >> BIT_SHIFT_R_WMAC_RXFIFO_FULL_TH_1) & BIT_MASK_R_WMAC_RXFIFO_FULL_TH_1)
#define BIT_SET_R_WMAC_RXFIFO_FULL_TH_1(x, v)		(BIT_CLEAR_R_WMAC_RXFIFO_FULL_TH_1(x) | BIT_R_WMAC_RXFIFO_FULL_TH_1(v))

#define BIT_R_WMAC_RX_SYNCFIFO_SYNC_1			BIT(23)
#define BIT_R_WMAC_RXRST_DLY_1				BIT(22)
#define BIT_R_WMAC_SRCH_TXRPT_REF_DROP_1		BIT(21)
#define BIT_R_WMAC_SRCH_TXRPT_UA1_1			BIT(20)
#define BIT_R_WMAC_SRCH_TXRPT_TYPE_1			BIT(19)
#define BIT_R_WMAC_NDP_RST_1				BIT(18)
#define BIT_R_WMAC_POWINT_EN_1				BIT(17)
#define BIT_R_WMAC_SRCH_TXRPT_PERPKT_1			BIT(16)
#define BIT_R_WMAC_SRCH_TXRPT_MID_1			BIT(15)
#define BIT_R_WMAC_PFIN_TOEN_1				BIT(14)
#define BIT_R_WMAC_FIL_SECERR_1			BIT(13)
#define BIT_R_WMAC_FIL_CTLPKTLEN_1			BIT(12)
#define BIT_R_WMAC_FIL_FCTYPE_1			BIT(11)
#define BIT_R_WMAC_FIL_FCPROVER_1			BIT(10)
#define BIT_R_WMAC_PHYSTS_SNIF_1			BIT(9)
#define BIT_R_WMAC_PHYSTS_PLCP_1			BIT(8)
#define BIT_R_MAC_TCR_VBONF_RD_1			BIT(7)
#define BIT_R_WMAC_TCR_MPAR_NDP_1			BIT(6)
#define BIT_R_WMAC_NDP_FILTER_1			BIT(5)
#define BIT_R_WMAC_RXLEN_SEL_1				BIT(4)
#define BIT_R_WMAC_RXLEN_SEL1_1			BIT(3)
#define BIT_R_OFDM_FILTER_1				BIT(2)
#define BIT_R_WMAC_CHK_OFDM_LEN_1			BIT(1)
#define BIT_R_WMAC_CHK_CCK_LEN_1			BIT(0)

/* 2 REG_RX_FILTER_FUNCTION			(Offset 0x07D8) */

#define BIT_RXHANG_EN					BIT(31)
#define BIT_R_WMAC_MHRDDY_LATCH			BIT(30)
#define BIT_R_WMAC_MHRDDY_CLR				BIT(29)
#define BIT_R_RXPKTCTL_FSM_BASED_MPDURDY1		BIT(28)
#define BIT_WMAC_DIS_VHT_PLCP_CHK_MU			BIT(27)
#define BIT_R_CHK_DELIMIT_LEN				BIT(26)
#define BIT_R_REAPTER_ADDR_MATCH			BIT(25)
#define BIT_R_RXPKTCTL_FSM_BASED_MPDURDY		BIT(24)
#define BIT_R_LATCH_MACHRDY				BIT(23)
#define BIT_R_WMAC_RXFIL_REND				BIT(22)
#define BIT_R_WMAC_MPDURDY_CLR				BIT(21)
#define BIT_R_WMAC_CLRRXSEC				BIT(20)
#define BIT_R_WMAC_RXFIL_RDEL				BIT(19)
#define BIT_R_WMAC_RXFIL_FCSE				BIT(18)
#define BIT_R_WMAC_RXFIL_MESH_DEL			BIT(17)
#define BIT_R_WMAC_RXFIL_MASKM				BIT(16)

#define BIT_SHIFT_R_WMAC_RX_FIL_LEN_2			0
#define BIT_MASK_R_WMAC_RX_FIL_LEN_2			0xffff
#define BIT_R_WMAC_RX_FIL_LEN_2(x)			(((x) & BIT_MASK_R_WMAC_RX_FIL_LEN_2) << BIT_SHIFT_R_WMAC_RX_FIL_LEN_2)
#define BITS_R_WMAC_RX_FIL_LEN_2			(BIT_MASK_R_WMAC_RX_FIL_LEN_2 << BIT_SHIFT_R_WMAC_RX_FIL_LEN_2)
#define BIT_CLEAR_R_WMAC_RX_FIL_LEN_2(x)		((x) & (~BITS_R_WMAC_RX_FIL_LEN_2))
#define BIT_GET_R_WMAC_RX_FIL_LEN_2(x)			(((x) >> BIT_SHIFT_R_WMAC_RX_FIL_LEN_2) & BIT_MASK_R_WMAC_RX_FIL_LEN_2)
#define BIT_SET_R_WMAC_RX_FIL_LEN_2(x, v)		(BIT_CLEAR_R_WMAC_RX_FIL_LEN_2(x) | BIT_R_WMAC_RX_FIL_LEN_2(v))

/* 2 REG_WMAC_OPTION_FUNCTION_3		(Offset 0x07E0) */

#define BIT_SHIFT_R_WMAC_TXNDP_SIGB			0
#define BIT_MASK_R_WMAC_TXNDP_SIGB			0x1fffff
#define BIT_R_WMAC_TXNDP_SIGB(x)			(((x) & BIT_MASK_R_WMAC_TXNDP_SIGB) << BIT_SHIFT_R_WMAC_TXNDP_SIGB)
#define BITS_R_WMAC_TXNDP_SIGB				(BIT_MASK_R_WMAC_TXNDP_SIGB << BIT_SHIFT_R_WMAC_TXNDP_SIGB)
#define BIT_CLEAR_R_WMAC_TXNDP_SIGB(x)			((x) & (~BITS_R_WMAC_TXNDP_SIGB))
#define BIT_GET_R_WMAC_TXNDP_SIGB(x)			(((x) >> BIT_SHIFT_R_WMAC_TXNDP_SIGB) & BIT_MASK_R_WMAC_TXNDP_SIGB)
#define BIT_SET_R_WMAC_TXNDP_SIGB(x, v)		(BIT_CLEAR_R_WMAC_TXNDP_SIGB(x) | BIT_R_WMAC_TXNDP_SIGB(v))

/* 2 REG_WMAC_DBG_SEL			(Offset 0x07E4) */

#define BIT_SHIFT_MAC_DBG_SHIFT			8
#define BIT_MASK_MAC_DBG_SHIFT				0x7
#define BIT_MAC_DBG_SHIFT(x)				(((x) & BIT_MASK_MAC_DBG_SHIFT) << BIT_SHIFT_MAC_DBG_SHIFT)
#define BITS_MAC_DBG_SHIFT				(BIT_MASK_MAC_DBG_SHIFT << BIT_SHIFT_MAC_DBG_SHIFT)
#define BIT_CLEAR_MAC_DBG_SHIFT(x)			((x) & (~BITS_MAC_DBG_SHIFT))
#define BIT_GET_MAC_DBG_SHIFT(x)			(((x) >> BIT_SHIFT_MAC_DBG_SHIFT) & BIT_MASK_MAC_DBG_SHIFT)
#define BIT_SET_MAC_DBG_SHIFT(x, v)			(BIT_CLEAR_MAC_DBG_SHIFT(x) | BIT_MAC_DBG_SHIFT(v))

#define BIT_SHIFT_MAC_DBG_SEL				0
#define BIT_MASK_MAC_DBG_SEL				0x3
#define BIT_MAC_DBG_SEL(x)				(((x) & BIT_MASK_MAC_DBG_SEL) << BIT_SHIFT_MAC_DBG_SEL)
#define BITS_MAC_DBG_SEL				(BIT_MASK_MAC_DBG_SEL << BIT_SHIFT_MAC_DBG_SEL)
#define BIT_CLEAR_MAC_DBG_SEL(x)			((x) & (~BITS_MAC_DBG_SEL))
#define BIT_GET_MAC_DBG_SEL(x)				(((x) >> BIT_SHIFT_MAC_DBG_SEL) & BIT_MASK_MAC_DBG_SEL)
#define BIT_SET_MAC_DBG_SEL(x, v)			(BIT_CLEAR_MAC_DBG_SEL(x) | BIT_MAC_DBG_SEL(v))

/* 2 REG_WMAC_DBG_SHIFT			(Offset 0x07E8) */

#define BIT_SHIFT_MACTX_CMD_SHIFT			0
#define BIT_MASK_MACTX_CMD_SHIFT			0xffffffffL
#define BIT_MACTX_CMD_SHIFT(x)				(((x) & BIT_MASK_MACTX_CMD_SHIFT) << BIT_SHIFT_MACTX_CMD_SHIFT)
#define BITS_MACTX_CMD_SHIFT				(BIT_MASK_MACTX_CMD_SHIFT << BIT_SHIFT_MACTX_CMD_SHIFT)
#define BIT_CLEAR_MACTX_CMD_SHIFT(x)			((x) & (~BITS_MACTX_CMD_SHIFT))
#define BIT_GET_MACTX_CMD_SHIFT(x)			(((x) >> BIT_SHIFT_MACTX_CMD_SHIFT) & BIT_MASK_MACTX_CMD_SHIFT)
#define BIT_SET_MACTX_CMD_SHIFT(x, v)			(BIT_CLEAR_MACTX_CMD_SHIFT(x) | BIT_MACTX_CMD_SHIFT(v))

/* 2 REG_WSEC_OPTION				(Offset 0x07EC) */

#define BIT_RXDEC_BM_MGNT				BIT(22)
#define BIT_TXENC_BM_MGNT				BIT(21)
#define BIT_RXDEC_UNI_MGNT				BIT(20)
#define BIT_TXENC_UNI_MGNT				BIT(19)
#define BIT_WMAC_SEC_MASKIV				BIT(18)

#define BIT_SHIFT_WMAC_SEC_PN_SEL			16
#define BIT_MASK_WMAC_SEC_PN_SEL			0x3
#define BIT_WMAC_SEC_PN_SEL(x)				(((x) & BIT_MASK_WMAC_SEC_PN_SEL) << BIT_SHIFT_WMAC_SEC_PN_SEL)
#define BITS_WMAC_SEC_PN_SEL				(BIT_MASK_WMAC_SEC_PN_SEL << BIT_SHIFT_WMAC_SEC_PN_SEL)
#define BIT_CLEAR_WMAC_SEC_PN_SEL(x)			((x) & (~BITS_WMAC_SEC_PN_SEL))
#define BIT_GET_WMAC_SEC_PN_SEL(x)			(((x) >> BIT_SHIFT_WMAC_SEC_PN_SEL) & BIT_MASK_WMAC_SEC_PN_SEL)
#define BIT_SET_WMAC_SEC_PN_SEL(x, v)			(BIT_CLEAR_WMAC_SEC_PN_SEL(x) | BIT_WMAC_SEC_PN_SEL(v))

#define BIT_WAPI_FC_NOMASK				BIT(15)
#define BIT_WAPI_QC_NOMASK				BIT(14)
#define BIT_GCM_WAPI_FC_NOMASK				BIT(13)

#define BIT_SHIFT_BT_TIME_CNT				0
#define BIT_MASK_BT_TIME_CNT				0xff
#define BIT_BT_TIME_CNT(x)				(((x) & BIT_MASK_BT_TIME_CNT) << BIT_SHIFT_BT_TIME_CNT)
#define BITS_BT_TIME_CNT				(BIT_MASK_BT_TIME_CNT << BIT_SHIFT_BT_TIME_CNT)
#define BIT_CLEAR_BT_TIME_CNT(x)			((x) & (~BITS_BT_TIME_CNT))
#define BIT_GET_BT_TIME_CNT(x)				(((x) >> BIT_SHIFT_BT_TIME_CNT) & BIT_MASK_BT_TIME_CNT)
#define BIT_SET_BT_TIME_CNT(x, v)			(BIT_CLEAR_BT_TIME_CNT(x) | BIT_BT_TIME_CNT(v))

/* 2 REG_RTS_ADDRESS_0			(Offset 0x07F0) */

#define BIT_SHIFT_R_WMAC_RTS_ADDR0			0
#define BIT_MASK_R_WMAC_RTS_ADDR0			0xffffffffL
#define BIT_R_WMAC_RTS_ADDR0(x)			(((x) & BIT_MASK_R_WMAC_RTS_ADDR0) << BIT_SHIFT_R_WMAC_RTS_ADDR0)
#define BITS_R_WMAC_RTS_ADDR0				(BIT_MASK_R_WMAC_RTS_ADDR0 << BIT_SHIFT_R_WMAC_RTS_ADDR0)
#define BIT_CLEAR_R_WMAC_RTS_ADDR0(x)			((x) & (~BITS_R_WMAC_RTS_ADDR0))
#define BIT_GET_R_WMAC_RTS_ADDR0(x)			(((x) >> BIT_SHIFT_R_WMAC_RTS_ADDR0) & BIT_MASK_R_WMAC_RTS_ADDR0)
#define BIT_SET_R_WMAC_RTS_ADDR0(x, v)			(BIT_CLEAR_R_WMAC_RTS_ADDR0(x) | BIT_R_WMAC_RTS_ADDR0(v))

/* 2 REG_RTS_ADDRESS_0_1			(Offset 0x07F4) */

#define BIT_SHIFT_R_WMAC_RTS_ADDR0_1			0
#define BIT_MASK_R_WMAC_RTS_ADDR0_1			0xffff
#define BIT_R_WMAC_RTS_ADDR0_1(x)			(((x) & BIT_MASK_R_WMAC_RTS_ADDR0_1) << BIT_SHIFT_R_WMAC_RTS_ADDR0_1)
#define BITS_R_WMAC_RTS_ADDR0_1			(BIT_MASK_R_WMAC_RTS_ADDR0_1 << BIT_SHIFT_R_WMAC_RTS_ADDR0_1)
#define BIT_CLEAR_R_WMAC_RTS_ADDR0_1(x)		((x) & (~BITS_R_WMAC_RTS_ADDR0_1))
#define BIT_GET_R_WMAC_RTS_ADDR0_1(x)			(((x) >> BIT_SHIFT_R_WMAC_RTS_ADDR0_1) & BIT_MASK_R_WMAC_RTS_ADDR0_1)
#define BIT_SET_R_WMAC_RTS_ADDR0_1(x, v)		(BIT_CLEAR_R_WMAC_RTS_ADDR0_1(x) | BIT_R_WMAC_RTS_ADDR0_1(v))

/* 2 REG_RTS_ADDRESS_1			(Offset 0x07F8) */

#define BIT_SHIFT_R_WMAC_RTS_ADDR1			0
#define BIT_MASK_R_WMAC_RTS_ADDR1			0xffffffffL
#define BIT_R_WMAC_RTS_ADDR1(x)			(((x) & BIT_MASK_R_WMAC_RTS_ADDR1) << BIT_SHIFT_R_WMAC_RTS_ADDR1)
#define BITS_R_WMAC_RTS_ADDR1				(BIT_MASK_R_WMAC_RTS_ADDR1 << BIT_SHIFT_R_WMAC_RTS_ADDR1)
#define BIT_CLEAR_R_WMAC_RTS_ADDR1(x)			((x) & (~BITS_R_WMAC_RTS_ADDR1))
#define BIT_GET_R_WMAC_RTS_ADDR1(x)			(((x) >> BIT_SHIFT_R_WMAC_RTS_ADDR1) & BIT_MASK_R_WMAC_RTS_ADDR1)
#define BIT_SET_R_WMAC_RTS_ADDR1(x, v)			(BIT_CLEAR_R_WMAC_RTS_ADDR1(x) | BIT_R_WMAC_RTS_ADDR1(v))

/* 2 REG_RTS_ADDRESS_1_1			(Offset 0x07FC) */

#define BIT_SHIFT_R_WMAC_RTS_ADDR1_1			0
#define BIT_MASK_R_WMAC_RTS_ADDR1_1			0xffff
#define BIT_R_WMAC_RTS_ADDR1_1(x)			(((x) & BIT_MASK_R_WMAC_RTS_ADDR1_1) << BIT_SHIFT_R_WMAC_RTS_ADDR1_1)
#define BITS_R_WMAC_RTS_ADDR1_1			(BIT_MASK_R_WMAC_RTS_ADDR1_1 << BIT_SHIFT_R_WMAC_RTS_ADDR1_1)
#define BIT_CLEAR_R_WMAC_RTS_ADDR1_1(x)		((x) & (~BITS_R_WMAC_RTS_ADDR1_1))
#define BIT_GET_R_WMAC_RTS_ADDR1_1(x)			(((x) >> BIT_SHIFT_R_WMAC_RTS_ADDR1_1) & BIT_MASK_R_WMAC_RTS_ADDR1_1)
#define BIT_SET_R_WMAC_RTS_ADDR1_1(x, v)		(BIT_CLEAR_R_WMAC_RTS_ADDR1_1(x) | BIT_R_WMAC_RTS_ADDR1_1(v))

/* 2 REG_FS_FW_DEBUG_0			(Offset 0x1100) */

#define BIT_SHIFT_FS_FW_DEBUG_0			0
#define BIT_MASK_FS_FW_DEBUG_0				0xffffffffL
#define BIT_FS_FW_DEBUG_0(x)				(((x) & BIT_MASK_FS_FW_DEBUG_0) << BIT_SHIFT_FS_FW_DEBUG_0)
#define BITS_FS_FW_DEBUG_0				(BIT_MASK_FS_FW_DEBUG_0 << BIT_SHIFT_FS_FW_DEBUG_0)
#define BIT_CLEAR_FS_FW_DEBUG_0(x)			((x) & (~BITS_FS_FW_DEBUG_0))
#define BIT_GET_FS_FW_DEBUG_0(x)			(((x) >> BIT_SHIFT_FS_FW_DEBUG_0) & BIT_MASK_FS_FW_DEBUG_0)
#define BIT_SET_FS_FW_DEBUG_0(x, v)			(BIT_CLEAR_FS_FW_DEBUG_0(x) | BIT_FS_FW_DEBUG_0(v))

/* 2 REG_FS_FW_DEBUG_1			(Offset 0x1104) */

#define BIT_SHIFT_FS_FW_DEBUG_1			0
#define BIT_MASK_FS_FW_DEBUG_1				0xffffffffL
#define BIT_FS_FW_DEBUG_1(x)				(((x) & BIT_MASK_FS_FW_DEBUG_1) << BIT_SHIFT_FS_FW_DEBUG_1)
#define BITS_FS_FW_DEBUG_1				(BIT_MASK_FS_FW_DEBUG_1 << BIT_SHIFT_FS_FW_DEBUG_1)
#define BIT_CLEAR_FS_FW_DEBUG_1(x)			((x) & (~BITS_FS_FW_DEBUG_1))
#define BIT_GET_FS_FW_DEBUG_1(x)			(((x) >> BIT_SHIFT_FS_FW_DEBUG_1) & BIT_MASK_FS_FW_DEBUG_1)
#define BIT_SET_FS_FW_DEBUG_1(x, v)			(BIT_CLEAR_FS_FW_DEBUG_1(x) | BIT_FS_FW_DEBUG_1(v))

/* 2 REG_FS_FW_DEBUG_2			(Offset 0x1108) */

#define BIT_SHIFT_FS_FW_DEBUG_2			0
#define BIT_MASK_FS_FW_DEBUG_2				0xffffffffL
#define BIT_FS_FW_DEBUG_2(x)				(((x) & BIT_MASK_FS_FW_DEBUG_2) << BIT_SHIFT_FS_FW_DEBUG_2)
#define BITS_FS_FW_DEBUG_2				(BIT_MASK_FS_FW_DEBUG_2 << BIT_SHIFT_FS_FW_DEBUG_2)
#define BIT_CLEAR_FS_FW_DEBUG_2(x)			((x) & (~BITS_FS_FW_DEBUG_2))
#define BIT_GET_FS_FW_DEBUG_2(x)			(((x) >> BIT_SHIFT_FS_FW_DEBUG_2) & BIT_MASK_FS_FW_DEBUG_2)
#define BIT_SET_FS_FW_DEBUG_2(x, v)			(BIT_CLEAR_FS_FW_DEBUG_2(x) | BIT_FS_FW_DEBUG_2(v))

/* 2 REG_FS_FW_DEBUG_3			(Offset 0x110C) */

#define BIT_SHIFT_FS_FW_DEBUG_3			0
#define BIT_MASK_FS_FW_DEBUG_3				0xffffffffL
#define BIT_FS_FW_DEBUG_3(x)				(((x) & BIT_MASK_FS_FW_DEBUG_3) << BIT_SHIFT_FS_FW_DEBUG_3)
#define BITS_FS_FW_DEBUG_3				(BIT_MASK_FS_FW_DEBUG_3 << BIT_SHIFT_FS_FW_DEBUG_3)
#define BIT_CLEAR_FS_FW_DEBUG_3(x)			((x) & (~BITS_FS_FW_DEBUG_3))
#define BIT_GET_FS_FW_DEBUG_3(x)			(((x) >> BIT_SHIFT_FS_FW_DEBUG_3) & BIT_MASK_FS_FW_DEBUG_3)
#define BIT_SET_FS_FW_DEBUG_3(x, v)			(BIT_CLEAR_FS_FW_DEBUG_3(x) | BIT_FS_FW_DEBUG_3(v))

/* 2 REG_ZB2WL_MAILBOX			(Offset 0x1110) */

#define BIT_SHIFT_ZB2WL_MAILBOX			0
#define BIT_MASK_ZB2WL_MAILBOX				0xffffffffL
#define BIT_ZB2WL_MAILBOX(x)				(((x) & BIT_MASK_ZB2WL_MAILBOX) << BIT_SHIFT_ZB2WL_MAILBOX)
#define BITS_ZB2WL_MAILBOX				(BIT_MASK_ZB2WL_MAILBOX << BIT_SHIFT_ZB2WL_MAILBOX)
#define BIT_CLEAR_ZB2WL_MAILBOX(x)			((x) & (~BITS_ZB2WL_MAILBOX))
#define BIT_GET_ZB2WL_MAILBOX(x)			(((x) >> BIT_SHIFT_ZB2WL_MAILBOX) & BIT_MASK_ZB2WL_MAILBOX)
#define BIT_SET_ZB2WL_MAILBOX(x, v)			(BIT_CLEAR_ZB2WL_MAILBOX(x) | BIT_ZB2WL_MAILBOX(v))

/* 2 REG_WL2ZB_MAILBOX			(Offset 0x1114) */

#define BIT_SHIFT_WL2ZB_MAILBOX			0
#define BIT_MASK_WL2ZB_MAILBOX				0xffffffffL
#define BIT_WL2ZB_MAILBOX(x)				(((x) & BIT_MASK_WL2ZB_MAILBOX) << BIT_SHIFT_WL2ZB_MAILBOX)
#define BITS_WL2ZB_MAILBOX				(BIT_MASK_WL2ZB_MAILBOX << BIT_SHIFT_WL2ZB_MAILBOX)
#define BIT_CLEAR_WL2ZB_MAILBOX(x)			((x) & (~BITS_WL2ZB_MAILBOX))
#define BIT_GET_WL2ZB_MAILBOX(x)			(((x) >> BIT_SHIFT_WL2ZB_MAILBOX) & BIT_MASK_WL2ZB_MAILBOX)
#define BIT_SET_WL2ZB_MAILBOX(x, v)			(BIT_CLEAR_WL2ZB_MAILBOX(x) | BIT_WL2ZB_MAILBOX(v))

/* 2 REG_FE2IMR				(Offset 0x1120) */

#define BIT__FE3ISR__INT_EN				BIT(29)
#define BIT_FS_ATIM_PORT1_INT_EN			BIT(24)
#define BIT_FS_ATIM_MB7_INT_EN				BIT(23)
#define BIT_FS_ATIM_MB6_INT_EN				BIT(22)
#define BIT_FS_ATIM_MB5_INT_EN				BIT(21)
#define BIT_FS_ATIM_MB4_INT_EN				BIT(20)
#define BIT_FS_ATIM_MB3_INT_EN				BIT(19)
#define BIT_FS_ATIM_MB2_INT_EN				BIT(18)
#define BIT_FS_ATIM_MB1_INT_EN				BIT(17)
#define BIT_FS_ATIM_MB0_INT_EN				BIT(16)
#define BIT_FS_CTWE_INT2_EN				BIT(15)
#define BIT_FS_CTWE_INT_EN0				BIT(14)
#define BIT_FS_CTWE_INT_EN1				BIT(13)
#define BIT_FS_TBTTALL_INT_EN				BIT(12)
#define BIT_FS_PO_TBTT_AGG_INT_EN			BIT(10)
#define BIT_FS_TBTT2INT_EN				BIT(9)
#define BIT_FS_TBTT1INT_EN				BIT(8)
#define BIT_FS_TBTT0_MB7INT_EN				BIT(7)
#define BIT_FS_TBTT0_MB6INT_EN				BIT(6)
#define BIT_FS_TBTT0_MB5INT_EN				BIT(5)
#define BIT_FS_TBTT0_MB4INT_EN				BIT(4)
#define BIT_FS_TBTT0_MB3INT_EN				BIT(3)
#define BIT_FS_TBTT0_MB2INT_EN				BIT(2)
#define BIT_FS_TBTT0_MB1INT_EN				BIT(1)
#define BIT_FS_TBTT0_INT_EN				BIT(0)

/* 2 REG_FE2ISR				(Offset 0x1124) */

#define BIT__FE3ISR__INT				BIT(29)
#define BIT_FS_ATIM_PORT1_INT				BIT(24)
#define BIT_FS_ATIM_MB7_INT				BIT(23)
#define BIT_FS_ATIM_MB6_INT				BIT(22)
#define BIT_FS_ATIM_MB5_INT				BIT(21)
#define BIT_FS_ATIM_MB4_INT				BIT(20)
#define BIT_FS_ATIM_MB3_INT				BIT(19)
#define BIT_FS_ATIM_MB2_INT				BIT(18)
#define BIT_FS_ATIM_MB1_INT				BIT(17)
#define BIT_FS_ATIM_MB0_INT				BIT(16)
#define BIT_FS_CTWE_INT2				BIT(15)
#define BIT_FS_CTWE_INT0				BIT(14)
#define BIT_FS_CTWE_INT1				BIT(13)
#define BIT_FS_TBTTALL_INT				BIT(12)
#define BIT_FS_PO_TBTT_AGG_INT				BIT(10)
#define BIT_FS_TBTT2INT				BIT(9)
#define BIT_FS_TBTT1INT				BIT(8)
#define BIT_FS_TBTT0_MB7INT				BIT(7)
#define BIT_FS_TBTT0_MB6INT				BIT(6)
#define BIT_FS_TBTT0_MB5INT				BIT(5)
#define BIT_FS_TBTT0_MB4INT				BIT(4)
#define BIT_FS_TBTT0_MB3INT				BIT(3)
#define BIT_FS_TBTT0_MB2INT				BIT(2)
#define BIT_FS_TBTT0_MB1INT				BIT(1)
#define BIT_FS_TBTT0_INT				BIT(0)

/* 2 REG_FE3IMR				(Offset 0x1128) */

#define BIT_FE1ISR_INT_EN				BIT(31)
#define BIT_FE2ISR_INT_EN				BIT(30)
#define BIT_FE4ISR_INT_EN				BIT(29)
#define BIT_FE5ISR_INT_EN				BIT(28)
#define BIT_FE6ISR_INT_EN				BIT(27)
#define BIT_FISR_INT_EN				BIT(26)
#define BIT_FISR1_INT_EN				BIT(25)
#define BIT_FS_BCNELY2_AGGR_INT_EN			BIT(17)
#define BIT_FS_BCNELY1_AGGR_INT_EN			BIT(16)
#define BIT_FS_BCNELY0_AGGR_INT_EN			BIT(15)
#define BIT_FS_ON_SCK_INT_EN				BIT(14)
#define BIT_FS_BCNERLY4_INT_EN				BIT(11)
#define BIT_FS_BCNERLY3_INT_EN				BIT(10)
#define BIT_FS_BCNERLY2_INT_EN				BIT(9)
#define BIT_FS_BCNERLY1_INT_EN				BIT(8)
#define BIT_FS_BCNERLY0_MB7INT_EN			BIT(7)
#define BIT_FS_BCNERLY0_MB6INT_EN			BIT(6)
#define BIT_FS_BCNERLY0_MB5INT_EN			BIT(5)
#define BIT_FS_BCNERLY0_MB4INT_EN			BIT(4)
#define BIT_FS_BCNERLY0_MB3INT_EN			BIT(3)
#define BIT_FS_BCNERLY0_MB2INT_EN			BIT(2)
#define BIT_FS_BCNERLY0_MB1INT_EN			BIT(1)
#define BIT_FS_BCNERLY0_INT_EN				BIT(0)

/* 2 REG_FE3ISR				(Offset 0x112C) */

#define BIT_FE1ISR_INT					BIT(31)
#define BIT_FE2ISR_INT					BIT(30)
#define BIT_FE4ISR_INT					BIT(29)
#define BIT_FE5ISR_INT					BIT(28)
#define BIT_FE6ISR_INT					BIT(27)
#define BIT_FISR_INT					BIT(26)
#define BIT_FISR1_INT					BIT(25)
#define BIT_FS_BCNELY2_AGGR_INT			BIT(17)
#define BIT_FS_BCNELY1_AGGR_INT			BIT(16)
#define BIT_FS_BCNELY0_AGGR_INT			BIT(15)
#define BIT_FS_ON_SCK_INT				BIT(14)
#define BIT_FS_BCNERLY4_INT				BIT(11)
#define BIT_FS_BCNERLY3_INT				BIT(10)
#define BIT_FS_BCNERLY2_INT				BIT(9)
#define BIT_FS_BCNERLY1_INT				BIT(8)
#define BIT_FS_BCNERLY0_MB7INT				BIT(7)
#define BIT_FS_BCNERLY0_MB6INT				BIT(6)
#define BIT_FS_BCNERLY0_MB5INT				BIT(5)
#define BIT_FS_BCNERLY0_MB4INT				BIT(4)
#define BIT_FS_BCNERLY0_MB3INT				BIT(3)
#define BIT_FS_BCNERLY0_MB2INT				BIT(2)
#define BIT_FS_BCNERLY0_MB1INT				BIT(1)
#define BIT_FS_BCNERLY0_INT				BIT(0)

/* 2 REG_FE4IMR				(Offset 0x1130) */

#define BIT_FS_PCIE_BCNDMAERR_INT_EN			BIT(31)
#define BIT_FS_BCNDMA1_INT_EN				BIT(30)
#define BIT_FS_BCNDMA0_MB7_INT_EN			BIT(29)
#define BIT_FS_BCNDMA0_MB6_INT_EN			BIT(28)
#define BIT_FS_BCNDMA0_MB5_INT_EN			BIT(27)
#define BIT_FS_BCNDMA0_MB4_INT_EN			BIT(26)
#define BIT_FS_BCNDMA0_MB3_INT_EN			BIT(25)
#define BIT_FS_BCNDMA0_MB2_INT_EN			BIT(24)
#define BIT_FS_BCNDMA0_MB1_INT_EN			BIT(23)
#define BIT_FS_BCNDMA0_INT_EN				BIT(22)
#define BIT_FS_BCNDMA2_INT_EN				BIT(21)
#define BIT_PORT4_PKTIN_INT_EN				BIT(19)
#define BIT_PORT3_PKTIN_INT_EN				BIT(18)
#define BIT_PORT0_PKTIN_INT_EN				BIT(17)
#define BIT_PORT1_PKTIN_INT_EN				BIT(16)
#define BIT_PORT4_RXUCMD0_OK_INT_EN			BIT(15)
#define BIT_PORT4_RXUCMD1_OK_INT_EN			BIT(14)
#define BIT_PORT4_RXBCMD0_OK_INT_EN			BIT(13)
#define BIT_PORT4_RXBCMD1_OK_INT_EN			BIT(12)
#define BIT_PORT3_RXUCMD0_OK_INT_EN			BIT(11)
#define BIT_PORT3_RXUCMD1_OK_INT_EN			BIT(10)
#define BIT_PORT3_RXBCMD0_OK_INT_EN			BIT(9)
#define BIT_PORT3_RXBCMD1_OK_INT_EN			BIT(8)
#define BIT_PORT2_RXUCMD0_OK_INT_EN			BIT(7)
#define BIT_PORT2_RXUCMD1_OK_INT_EN			BIT(6)
#define BIT_PORT2_RXBCMD0_OK_INT_EN			BIT(5)
#define BIT_PORT2_RXBCMD1_OK_INT_EN			BIT(4)
#define BIT_PORT1_RXUCMD0_OK_INT_EN			BIT(3)
#define BIT_PORT1_RXUCMD1_OK_INT_EN			BIT(2)
#define BIT_PORT1_RXBCMD0_OK_INT_EN			BIT(1)
#define BIT_PORT1_RXBCMD1_OK_INT_EN			BIT(0)

/* 2 REG_FE4ISR				(Offset 0x1134) */

#define BIT_FS_PCIE_BCNDMAERR_INT			BIT(31)
#define BIT_FS_BCNDMA1_INT				BIT(30)
#define BIT_FS_BCNDMA0_MB7_INT				BIT(29)
#define BIT_FS_BCNDMA0_MB6_INT				BIT(28)
#define BIT_FS_BCNDMA0_MB5_INT				BIT(27)
#define BIT_FS_BCNDMA0_MB4_INT				BIT(26)
#define BIT_FS_BCNDMA0_MB3_INT				BIT(25)
#define BIT_FS_BCNDMA0_MB2_INT				BIT(24)
#define BIT_FS_BCNDMA0_MB1_INT				BIT(23)
#define BIT_FS_BCNDMA0_INT				BIT(22)
#define BIT_FS_BCNDMA2_INT				BIT(21)
#define BIT_PORT4_PKTIN_INT				BIT(19)
#define BIT_PORT3_PKTIN_INT				BIT(18)
#define BIT_PORT0_PKTIN_INT				BIT(17)
#define BIT_PORT1_PKTIN_INT				BIT(16)
#define BIT_PORT4_RXUCMD0_OK_INT			BIT(15)
#define BIT_PORT4_RXUCMD1_OK_INT			BIT(14)
#define BIT_PORT4_RXBCMD0_OK_INT			BIT(13)
#define BIT_PORT4_RXBCMD1_OK_INT			BIT(12)
#define BIT_PORT3_RXUCMD0_OK_INT			BIT(11)
#define BIT_PORT3_RXUCMD1_OK_INT			BIT(10)
#define BIT_PORT3_RXBCMD0_OK_INT			BIT(9)
#define BIT_PORT3_RXBCMD1_OK_INT			BIT(8)
#define BIT_PORT2_RXUCMD0_OK_INT			BIT(7)
#define BIT_PORT2_RXUCMD1_OK_INT			BIT(6)
#define BIT_PORT2_RXBCMD0_OK_INT			BIT(5)
#define BIT_PORT2_RXBCMD1_OK_INT			BIT(4)
#define BIT_PORT1_RXUCMD0_OK_INT			BIT(3)
#define BIT_PORT1_RXUCMD1_OK_INT			BIT(2)
#define BIT_PORT1_RXBCMD0_OK_INT			BIT(1)
#define BIT_PORT1_RXBCMD1_OK_INT			BIT(0)

/* 2 REG_FT1IMR				(Offset 0x1138) */

#define BIT_FT2ISR__INT_EN				BIT(30)
#define BIT_FS_RXFTMREQ_INT_EN				BIT(28)
#define BIT_FS_RXFTM_INT_EN				BIT(27)
#define BIT_FS_TXFTM_INT_EN				BIT(26)
#define BIT_FS_RXTMREQ_INT_EN				BIT(25)
#define BIT_FS_RXTM_INT_EN				BIT(24)
#define BIT_FS_TXTM_INT_EN				BIT(23)
#define BIT_FS_CTWEND2_INT_EN				BIT(17)
#define BIT_FS_CTWEND1_INT_EN				BIT(16)
#define BIT_FS_CTWEND0_INT_EN				BIT(15)
#define BIT_FS_TX_NULL1_P0_INT_EN			BIT(14)
#define BIT_FS_TX_NULL0_P0_INT_EN			BIT(13)
#define BIT_FS_NOA0_TSF_BIT32_INT_EN			BIT(12)
#define BIT_FS_P2P_RFON2_INT_EN			BIT(11)
#define BIT_FS_P2P_RFOFF2_INT_EN			BIT(10)
#define BIT_FS_P2P_RFON1_INT_EN			BIT(9)
#define BIT_FS_P2P_RFOFF1_INT_EN			BIT(8)
#define BIT_FS_P2P_RFON0_INT_EN			BIT(7)
#define BIT_FS_P2P_RFOFF0_INT_EN			BIT(6)
#define BIT_FS_RX_UAPSDMD1_INT_EN			BIT(5)
#define BIT_FS_RX_UAPSDMD0_INT_EN			BIT(4)
#define BIT_FS_TRIGGER_PKT_INT_EN			BIT(3)
#define BIT_FS_EOSP_INT_EN				BIT(2)

/* 2 REG_FT1ISR				(Offset 0x113C) */

#define BIT_FT2ISR__INT				BIT(30)
#define BIT_FS_RXFTMREQ_INT				BIT(28)
#define BIT_FS_RXFTM_INT				BIT(27)
#define BIT_FS_TXFTM_INT				BIT(26)
#define BIT_FS_RXTMREQ_INT				BIT(25)
#define BIT_FS_RXTM_INT				BIT(24)
#define BIT_FS_TXTM_INT				BIT(23)
#define BIT_FS_CTWEND2_INT				BIT(17)
#define BIT_FS_CTWEND1_INT				BIT(16)
#define BIT_FS_CTWEND0_INT				BIT(15)
#define BIT_FS_TX_NULL1_P0_INT				BIT(14)
#define BIT_FS_TX_NULL0_P0_INT				BIT(13)
#define BIT_FS_NOA0_TSF_BIT32_INT			BIT(12)
#define BIT_FS_P2P_RFON2_INT				BIT(11)
#define BIT_FS_P2P_RFOFF2_INT				BIT(10)
#define BIT_FS_P2P_RFON1_INT				BIT(9)
#define BIT_FS_P2P_RFOFF1_INT				BIT(8)
#define BIT_FS_P2P_RFON0_INT				BIT(7)
#define BIT_FS_P2P_RFOFF0_INT				BIT(6)
#define BIT_FS_RX_UAPSDMD1_INT				BIT(5)
#define BIT_FS_RX_UAPSDMD0_INT				BIT(4)
#define BIT_FS_TRIGGER_PKT_INT				BIT(3)
#define BIT_FS_EOSP_INT				BIT(2)

/* 2 REG_TWT_CTRL				(Offset 0x1140) */

#define BIT_RX_ACKMD_EN				BIT(1)
#define BIT_RX_MORE_TF_EN				BIT(0)

/* 2 REG_FE5IMR				(Offset 0x1168) */

#define BIT_FS_ZIGBEE2WLAN_MAILBOX_MSK			BIT(31)
#define BIT_FS_EXT_INTF4_EN_MSK			BIT(5)
#define BIT_FS_GNT_BT_BB_FALL_MSK			BIT(4)
#define BIT_FS_GNT_BT_BB_RISE_MSK			BIT(3)
#define BIT_FS_BT2WL_STS_INT_MSK			BIT(2)
#define BIT_FS_BT_MAILBOX_I2C_MSK			BIT(1)
#define BIT_FS_I2C_INTF4_EN_MSK			BIT(0)

/* 2 REG_FE5ISR				(Offset 0x116C) */

#define BIT_FS_ZIGBEE2WLAN_MAILBOX			BIT(31)
#define BIT_FS_EXT_INTF4_EN				BIT(5)
#define BIT_FS_GNT_BT_BB_FALL				BIT(4)
#define BIT_FS_GNT_BT_BB_RISE				BIT(3)
#define BIT_FS_BT2WL_STS_INT				BIT(2)
#define BIT_FS_BT_MAILBOX_I2C				BIT(1)
#define BIT_FS_I2C_INTF4_EN				BIT(0)

/* 2 REG_FE6IMR				(Offset 0x1170) */

#define BIT_PORT0_RXUCMD0_ACK_INT_EN			BIT(9)
#define BIT_PORT0_RXUCMD1_ACK_INT_EN			BIT(8)
#define BIT_PORT0_RXBCMD0_ACK_INT_EN			BIT(7)
#define BIT_PORT0_RXBCMD1_ACK_INT_EN			BIT(6)
#define BIT_PORT1_RXUCMD0_ACK_INT_EN			BIT(5)
#define BIT_PORT1_RXUCMD1_ACK_INT_EN			BIT(4)
#define BIT_PORT1_RXBCMD0_ACK_INT_EN			BIT(3)
#define BIT_PORT1_RXBCMD1_ACK_INT_EN			BIT(2)
#define BIT_RX_MORE_TF0_INT_EN				BIT(1)
#define BIT_RX_MORE_TF1_INT_EN				BIT(0)

/* 2 REG_FE6ISR				(Offset 0x1174) */

#define BIT_I2C_MAILBOX_IN_RDY_INTEN			BIT(17)
#define BIT_EXT_MAILBOX_IN_RDY_INTEN			BIT(17)
#define BIT_I2C_MAILBOX_IN_RDY				BIT(16)
#define BIT_EXT_MAILBOX_IN_RDY				BIT(16)
#define BIT_PORT0_RXUCMD0_ACK_INT			BIT(9)
#define BIT_PORT0_RXUCMD1_ACK_INT			BIT(8)
#define BIT_PORT0_RXBCMD0_ACK_INT			BIT(7)
#define BIT_PORT0_RXBCMD1_ACK_INT			BIT(6)
#define BIT_PORT1_RXUCMD0_ACK_INT			BIT(5)
#define BIT_PORT1_RXUCMD1_ACK_INT			BIT(4)
#define BIT_PORT1_RXBCMD0_ACK_INT			BIT(3)

#define BIT_SHIFT_TXBUF_WKCAM_OFFSET			3
#define BIT_MASK_TXBUF_WKCAM_OFFSET			0x1fff
#define BIT_TXBUF_WKCAM_OFFSET(x)			(((x) & BIT_MASK_TXBUF_WKCAM_OFFSET) << BIT_SHIFT_TXBUF_WKCAM_OFFSET)
#define BITS_TXBUF_WKCAM_OFFSET			(BIT_MASK_TXBUF_WKCAM_OFFSET << BIT_SHIFT_TXBUF_WKCAM_OFFSET)
#define BIT_CLEAR_TXBUF_WKCAM_OFFSET(x)		((x) & (~BITS_TXBUF_WKCAM_OFFSET))
#define BIT_GET_TXBUF_WKCAM_OFFSET(x)			(((x) >> BIT_SHIFT_TXBUF_WKCAM_OFFSET) & BIT_MASK_TXBUF_WKCAM_OFFSET)
#define BIT_SET_TXBUF_WKCAM_OFFSET(x, v)		(BIT_CLEAR_TXBUF_WKCAM_OFFSET(x) | BIT_TXBUF_WKCAM_OFFSET(v))

#define BIT_PORT1_RXBCMD1_ACK_INT			BIT(2)
#define BIT_RX_MORE_TF0_INT				BIT(1)
#define BIT_I2C_MAILBOX_OUTEMPTY_INTEN			BIT(1)
#define BIT_EXT_MAILBOX_OUTEMPTY_INTEN			BIT(1)
#define BIT_RX_MORE_TF1_INT				BIT(0)

#define BIT_SHIFT_H2CQ_PRI				0
#define BIT_MASK_H2CQ_PRI				0x3
#define BIT_H2CQ_PRI(x)				(((x) & BIT_MASK_H2CQ_PRI) << BIT_SHIFT_H2CQ_PRI)
#define BITS_H2CQ_PRI					(BIT_MASK_H2CQ_PRI << BIT_SHIFT_H2CQ_PRI)
#define BIT_CLEAR_H2CQ_PRI(x)				((x) & (~BITS_H2CQ_PRI))
#define BIT_GET_H2CQ_PRI(x)				(((x) >> BIT_SHIFT_H2CQ_PRI) & BIT_MASK_H2CQ_PRI)
#define BIT_SET_H2CQ_PRI(x, v)				(BIT_CLEAR_H2CQ_PRI(x) | BIT_H2CQ_PRI(v))

#define BIT_SHIFT_I2C_MAILBOX_DATA_51TO81_L		0
#define BIT_MASK_I2C_MAILBOX_DATA_51TO81_L		0xffffffffL
#define BIT_I2C_MAILBOX_DATA_51TO81_L(x)		(((x) & BIT_MASK_I2C_MAILBOX_DATA_51TO81_L) << BIT_SHIFT_I2C_MAILBOX_DATA_51TO81_L)
#define BITS_I2C_MAILBOX_DATA_51TO81_L			(BIT_MASK_I2C_MAILBOX_DATA_51TO81_L << BIT_SHIFT_I2C_MAILBOX_DATA_51TO81_L)
#define BIT_CLEAR_I2C_MAILBOX_DATA_51TO81_L(x)	((x) & (~BITS_I2C_MAILBOX_DATA_51TO81_L))
#define BIT_GET_I2C_MAILBOX_DATA_51TO81_L(x)		(((x) >> BIT_SHIFT_I2C_MAILBOX_DATA_51TO81_L) & BIT_MASK_I2C_MAILBOX_DATA_51TO81_L)
#define BIT_SET_I2C_MAILBOX_DATA_51TO81_L(x, v)	(BIT_CLEAR_I2C_MAILBOX_DATA_51TO81_L(x) | BIT_I2C_MAILBOX_DATA_51TO81_L(v))

#define BIT_SHIFT_I2C_MAILBOX_DATA_51TO81_H		0
#define BIT_MASK_I2C_MAILBOX_DATA_51TO81_H		0xffffffffL
#define BIT_I2C_MAILBOX_DATA_51TO81_H(x)		(((x) & BIT_MASK_I2C_MAILBOX_DATA_51TO81_H) << BIT_SHIFT_I2C_MAILBOX_DATA_51TO81_H)
#define BITS_I2C_MAILBOX_DATA_51TO81_H			(BIT_MASK_I2C_MAILBOX_DATA_51TO81_H << BIT_SHIFT_I2C_MAILBOX_DATA_51TO81_H)
#define BIT_CLEAR_I2C_MAILBOX_DATA_51TO81_H(x)	((x) & (~BITS_I2C_MAILBOX_DATA_51TO81_H))
#define BIT_GET_I2C_MAILBOX_DATA_51TO81_H(x)		(((x) >> BIT_SHIFT_I2C_MAILBOX_DATA_51TO81_H) & BIT_MASK_I2C_MAILBOX_DATA_51TO81_H)
#define BIT_SET_I2C_MAILBOX_DATA_51TO81_H(x, v)	(BIT_CLEAR_I2C_MAILBOX_DATA_51TO81_H(x) | BIT_I2C_MAILBOX_DATA_51TO81_H(v))

#define BIT_I2C_MAILBOX_OUT_VLD			BIT(0)

#define BIT_SHIFT_I2C_MAILBOX_DATA_81TO51_L		0
#define BIT_MASK_I2C_MAILBOX_DATA_81TO51_L		0xffffffffL
#define BIT_I2C_MAILBOX_DATA_81TO51_L(x)		(((x) & BIT_MASK_I2C_MAILBOX_DATA_81TO51_L) << BIT_SHIFT_I2C_MAILBOX_DATA_81TO51_L)
#define BITS_I2C_MAILBOX_DATA_81TO51_L			(BIT_MASK_I2C_MAILBOX_DATA_81TO51_L << BIT_SHIFT_I2C_MAILBOX_DATA_81TO51_L)
#define BIT_CLEAR_I2C_MAILBOX_DATA_81TO51_L(x)	((x) & (~BITS_I2C_MAILBOX_DATA_81TO51_L))
#define BIT_GET_I2C_MAILBOX_DATA_81TO51_L(x)		(((x) >> BIT_SHIFT_I2C_MAILBOX_DATA_81TO51_L) & BIT_MASK_I2C_MAILBOX_DATA_81TO51_L)
#define BIT_SET_I2C_MAILBOX_DATA_81TO51_L(x, v)	(BIT_CLEAR_I2C_MAILBOX_DATA_81TO51_L(x) | BIT_I2C_MAILBOX_DATA_81TO51_L(v))

#define BIT_SHIFT_I2C_MAILBOX_DATA_81TO51_H		0
#define BIT_MASK_I2C_MAILBOX_DATA_81TO51_H		0xffffffffL
#define BIT_I2C_MAILBOX_DATA_81TO51_H(x)		(((x) & BIT_MASK_I2C_MAILBOX_DATA_81TO51_H) << BIT_SHIFT_I2C_MAILBOX_DATA_81TO51_H)
#define BITS_I2C_MAILBOX_DATA_81TO51_H			(BIT_MASK_I2C_MAILBOX_DATA_81TO51_H << BIT_SHIFT_I2C_MAILBOX_DATA_81TO51_H)
#define BIT_CLEAR_I2C_MAILBOX_DATA_81TO51_H(x)	((x) & (~BITS_I2C_MAILBOX_DATA_81TO51_H))
#define BIT_GET_I2C_MAILBOX_DATA_81TO51_H(x)		(((x) >> BIT_SHIFT_I2C_MAILBOX_DATA_81TO51_H) & BIT_MASK_I2C_MAILBOX_DATA_81TO51_H)
#define BIT_SET_I2C_MAILBOX_DATA_81TO51_H(x, v)	(BIT_CLEAR_I2C_MAILBOX_DATA_81TO51_H(x) | BIT_I2C_MAILBOX_DATA_81TO51_H(v))

#define BIT_SHIFT_EXT_MAILBOX_DATA_51TO81_L		0
#define BIT_MASK_EXT_MAILBOX_DATA_51TO81_L		0xffffffffL
#define BIT_EXT_MAILBOX_DATA_51TO81_L(x)		(((x) & BIT_MASK_EXT_MAILBOX_DATA_51TO81_L) << BIT_SHIFT_EXT_MAILBOX_DATA_51TO81_L)
#define BITS_EXT_MAILBOX_DATA_51TO81_L			(BIT_MASK_EXT_MAILBOX_DATA_51TO81_L << BIT_SHIFT_EXT_MAILBOX_DATA_51TO81_L)
#define BIT_CLEAR_EXT_MAILBOX_DATA_51TO81_L(x)	((x) & (~BITS_EXT_MAILBOX_DATA_51TO81_L))
#define BIT_GET_EXT_MAILBOX_DATA_51TO81_L(x)		(((x) >> BIT_SHIFT_EXT_MAILBOX_DATA_51TO81_L) & BIT_MASK_EXT_MAILBOX_DATA_51TO81_L)
#define BIT_SET_EXT_MAILBOX_DATA_51TO81_L(x, v)	(BIT_CLEAR_EXT_MAILBOX_DATA_51TO81_L(x) | BIT_EXT_MAILBOX_DATA_51TO81_L(v))

#define BIT_SHIFT_EXT_MAILBOX_DATA_51TO81_H		0
#define BIT_MASK_EXT_MAILBOX_DATA_51TO81_H		0xffffffffL
#define BIT_EXT_MAILBOX_DATA_51TO81_H(x)		(((x) & BIT_MASK_EXT_MAILBOX_DATA_51TO81_H) << BIT_SHIFT_EXT_MAILBOX_DATA_51TO81_H)
#define BITS_EXT_MAILBOX_DATA_51TO81_H			(BIT_MASK_EXT_MAILBOX_DATA_51TO81_H << BIT_SHIFT_EXT_MAILBOX_DATA_51TO81_H)
#define BIT_CLEAR_EXT_MAILBOX_DATA_51TO81_H(x)	((x) & (~BITS_EXT_MAILBOX_DATA_51TO81_H))
#define BIT_GET_EXT_MAILBOX_DATA_51TO81_H(x)		(((x) >> BIT_SHIFT_EXT_MAILBOX_DATA_51TO81_H) & BIT_MASK_EXT_MAILBOX_DATA_51TO81_H)
#define BIT_SET_EXT_MAILBOX_DATA_51TO81_H(x, v)	(BIT_CLEAR_EXT_MAILBOX_DATA_51TO81_H(x) | BIT_EXT_MAILBOX_DATA_51TO81_H(v))

#define BIT_EXT_MAILBOX_OUT_VLD			BIT(0)

#define BIT_SHIFT_EXT_MAILBOX_DATA_81TO51_L		0
#define BIT_MASK_EXT_MAILBOX_DATA_81TO51_L		0xffffffffL
#define BIT_EXT_MAILBOX_DATA_81TO51_L(x)		(((x) & BIT_MASK_EXT_MAILBOX_DATA_81TO51_L) << BIT_SHIFT_EXT_MAILBOX_DATA_81TO51_L)
#define BITS_EXT_MAILBOX_DATA_81TO51_L			(BIT_MASK_EXT_MAILBOX_DATA_81TO51_L << BIT_SHIFT_EXT_MAILBOX_DATA_81TO51_L)
#define BIT_CLEAR_EXT_MAILBOX_DATA_81TO51_L(x)	((x) & (~BITS_EXT_MAILBOX_DATA_81TO51_L))
#define BIT_GET_EXT_MAILBOX_DATA_81TO51_L(x)		(((x) >> BIT_SHIFT_EXT_MAILBOX_DATA_81TO51_L) & BIT_MASK_EXT_MAILBOX_DATA_81TO51_L)
#define BIT_SET_EXT_MAILBOX_DATA_81TO51_L(x, v)	(BIT_CLEAR_EXT_MAILBOX_DATA_81TO51_L(x) | BIT_EXT_MAILBOX_DATA_81TO51_L(v))

#define BIT_SHIFT_EXT_MAILBOX_DATA_81_TO51_H		0
#define BIT_MASK_EXT_MAILBOX_DATA_81_TO51_H		0xffffffffL
#define BIT_EXT_MAILBOX_DATA_81_TO51_H(x)		(((x) & BIT_MASK_EXT_MAILBOX_DATA_81_TO51_H) << BIT_SHIFT_EXT_MAILBOX_DATA_81_TO51_H)
#define BITS_EXT_MAILBOX_DATA_81_TO51_H		(BIT_MASK_EXT_MAILBOX_DATA_81_TO51_H << BIT_SHIFT_EXT_MAILBOX_DATA_81_TO51_H)
#define BIT_CLEAR_EXT_MAILBOX_DATA_81_TO51_H(x)	((x) & (~BITS_EXT_MAILBOX_DATA_81_TO51_H))
#define BIT_GET_EXT_MAILBOX_DATA_81_TO51_H(x)		(((x) >> BIT_SHIFT_EXT_MAILBOX_DATA_81_TO51_H) & BIT_MASK_EXT_MAILBOX_DATA_81_TO51_H)
#define BIT_SET_EXT_MAILBOX_DATA_81_TO51_H(x, v)	(BIT_CLEAR_EXT_MAILBOX_DATA_81_TO51_H(x) | BIT_EXT_MAILBOX_DATA_81_TO51_H(v))

/* 2 REG_FWIMR1				(Offset 0x11C0) */

#define BIT_FS_TXBCNOK_PORT1_INT_EN			BIT(31)
#define BIT_FS_TXBCNERR_PORT1_INT_EN			BIT(30)
#define BIT_FS_TXBCNOK_PORT2_INT_EN			BIT(29)
#define BIT_FS_TXBCNERR_PORT2_INT_EN			BIT(28)
#define BIT_FS_EVTQ_TXDONE_INT_EN			BIT(27)
#define BIT_FS_EVTQ_START_INT_EN			BIT(26)
#define BIT_FS_DWWIN_END_INT_EN			BIT(25)
#define BIT_FS_BCN_IE_0_HIT_INT_EN			BIT(24)
#define BIT_FS_BCN_IE_1_HIT_INT_EN			BIT(23)
#define BIT_FS_RXBCN_NAN_RPT_OK_EN			BIT(22)
#define BIT_FS_TIM_NO_HIT_INT_EN			BIT(21)
#define BIT_FS_BC_TWT_PARA_CHG_INT_EN			BIT(20)
#define BIT_FS_TIM_HIT_INT_EN				BIT(19)
#define BIT_FS_HIOE_CHN0_INT_EN			BIT(18)
#define BIT_FS_HIOE_CHN1_INT_EN			BIT(17)
#define BIT_FS_HIOE_CHN_ON_INT_EN			BIT(16)
#define BIT_FS_HIOE_CHN_OFF_INT_EN			BIT(15)
#define BIT_FS_CHINFO_SEG_DONE_INT_NE			BIT(14)
#define BIT_FS_DFS_PKT_INT_EN				BIT(13)
#define BIT_FS_RX_PHYSTS_DONE_INT__EN			BIT(12)
#define BIT_FS_OPS_TIM_HIT_INT_EN			BIT(11)

/* 2 REG_FWISR1				(Offset 0x11C4) */

#define BIT_FS_TXBCNOK_PORT1_INT			BIT(31)
#define BIT_FS_TXBCNERR_PORT1_INT			BIT(30)
#define BIT_FS_TXBCNOK_PORT2_INT			BIT(29)
#define BIT_FS_TXBCNERR_PORT2_INT			BIT(28)
#define BIT_FS_EVTQ_TXDONE_INT				BIT(27)
#define BIT_FS_EVTQ_START_INT				BIT(26)
#define BIT_FS_DWWIN_END_INT				BIT(25)
#define BIT_FS_BCN_IE_0_HIT_INT			BIT(24)
#define BIT_FS_BCN_IE_1_HIT_INT			BIT(23)
#define BIT_FS_RXBCN_NAN_RPT_OK			BIT(22)
#define BIT_FS_TIM_NO_HIT_INT				BIT(21)
#define BIT_FS_BC_TWT_PARA_CHG_INT			BIT(20)
#define BIT_FS_TIM_HIT_INT				BIT(19)
#define BIT_FS_HIOE_CHN0_INT				BIT(18)
#define BIT_FS_HIOE_CHN1_INT				BIT(17)
#define BIT_FS_HIOE_CHN_ON_INT				BIT(16)
#define BIT_FS_HIOE_CHN_OFF_INT			BIT(15)
#define BIT_FS_CHINFO_SEG_DONE_INT			BIT(14)
#define BIT_FS_DFS_PKT_INT				BIT(13)
#define BIT_FS_RX_PHYSTS_DONE_INT			BIT(12)
#define BIT_FS_OPS_TIM_HIT_INT				BIT(11)

/* 2 REG_LPSOFFLOAD_IMR			(Offset 0x11C8) */

#define BIT_LPS_RXBCN_TSF_GT_THRES_INT_EN		BIT(10)
#define BIT_LPS_RX_PHYSTS_DONE_INT_EN			BIT(9)
#define BIT_LPS_HIOE_CHN_ON_INT_EN			BIT(8)
#define BIT_LPS_HIOE_CHN_OFF_INT_EN			BIT(7)
#define BIT_LPS_TIM_NO_HIT_INT_EN			BIT(6)
#define BIT_LPS_BCNERLY0_INT_EN			BIT(5)
#define BIT_LPS_BCNELY0_AGGR_INT_EN			BIT(4)
#define BIT_LPS_TBTT0_INT_EN				BIT(3)
#define BIT_LPS_RX_BCN_P0_INT_EN			BIT(2)
#define BIT_LPS_RX_BCN_ERR_P0_INT_EN			BIT(1)
#define BIT_LPS_RXBCN_TIMEUP_INT_EN			BIT(0)

/* 2 REG_FT2IMR				(Offset 0x11E0) */

#define BIT_PORT4_RX_UCMD1_UAPSD0_OK_INT_EN		BIT(31)
#define BIT_PORT4_RX_UCMD0_UAPSD0_OK_INT_EN		BIT(30)
#define BIT_PORT4_TRIPKT_OK_INT_EN			BIT(29)
#define BIT_PORT4_RX_EOSP_OK_INT_EN			BIT(28)
#define BIT_PORT3_RX_UCMD1_UAPSD0_OK_INT_EN		BIT(27)
#define BIT_PORT3_RX_UCMD0_UAPSD0_OK_INT_EN		BIT(26)
#define BIT_PORT3_TRIPKT_OK_INT_EN			BIT(25)
#define BIT_PORT3_RX_EOSP_OK_INT_EN			BIT(24)
#define BIT_PORT2_RX_UCMD1_UAPSD0_OK_INT_EN		BIT(23)
#define BIT_PORT2_RX_UCMD0_UAPSD0_OK_INT_EN		BIT(22)
#define BIT_PORT2_TRIPKT_OK_INT_EN			BIT(21)
#define BIT_PORT2_RX_EOSP_OK_INT_EN			BIT(20)
#define BIT_PORT1_RX_UCMD1_UAPSD0_OK_INT_EN		BIT(19)
#define BIT_PORT1_RX_UCMD0_UAPSD0_OK_INT_EN		BIT(18)
#define BIT_PORT1_TRIPKT_OK_INT_EN			BIT(17)
#define BIT_PORT1_RX_EOSP_OK_INT_EN			BIT(16)
#define BIT_FS_TXPRPT_CNT_FULL_INT_EN			BIT(10)
#define BIT_FS_NOA2_TSFT_BIT32_INT_EN			BIT(9)
#define BIT_FS_NOA1_TSFT_BIT32_INT_EN			BIT(8)
#define BIT_PORT4_TX_NULL1_DONE_INT_EN			BIT(7)
#define BIT_PORT4_TX_NULL0_DONE_INT_EN			BIT(6)
#define BIT_PORT3_TX_NULL1_DONE_INT_EN			BIT(5)
#define BIT_PORT3_TX_NULL0_DONE_INT_EN			BIT(4)
#define BIT_PORT2_TX_NULL1_DONE_INT_EN			BIT(3)
#define BIT_PORT2_TX_NULL0_DONE_INT_EN			BIT(2)
#define BIT_PORT1_TX_NULL1_DONE_INT_EN			BIT(1)
#define BIT_PORT1_TX_NULL0_DONE_INT_EN			BIT(0)

/* 2 REG_FT2ISR				(Offset 0x11E4) */

#define BIT_PORT4_RX_UCMD1_UAPSD0_OK_INT		BIT(31)
#define BIT_PORT4_RX_UCMD0_UAPSD0_OK_INT		BIT(30)
#define BIT_PORT4_TRIPKT_OK_INT			BIT(29)
#define BIT_PORT4_RX_EOSP_OK_INT			BIT(28)
#define BIT_PORT3_RX_UCMD1_UAPSD0_OK_INT		BIT(27)
#define BIT_PORT3_RX_UCMD0_UAPSD0_OK_INT		BIT(26)
#define BIT_PORT3_TRIPKT_OK_INT			BIT(25)
#define BIT_PORT3_RX_EOSP_OK_INT			BIT(24)
#define BIT_PORT2_RX_UCMD1_UAPSD0_OK_INT		BIT(23)
#define BIT_PORT2_RX_UCMD0_UAPSD0_OK_INT		BIT(22)
#define BIT_PORT2_TRIPKT_OK_INT			BIT(21)
#define BIT_PORT2_RX_EOSP_OK_INT			BIT(20)
#define BIT_PORT1_RX_UCMD1_UAPSD0_OK_INT		BIT(19)
#define BIT_PORT1_RX_UCMD0_UAPSD0_OK_INT		BIT(18)
#define BIT_PORT1_TRIPKT_OK_INT			BIT(17)
#define BIT_PORT1_RX_EOSP_OK_INT			BIT(16)
#define BIT_FS_TXPRPT_CNT_FULL_INT			BIT(10)
#define BIT_FS_NOA2_TSFT_BIT32_INT			BIT(9)
#define BIT_FS_NOA1_TSFT_BIT32_INT			BIT(8)
#define BIT_PORT4_TX_NULL1_DONE_INT			BIT(7)
#define BIT_PORT4_TX_NULL0_DONE_INT			BIT(6)
#define BIT_PORT3_TX_NULL1_DONE_INT			BIT(5)
#define BIT_PORT3_TX_NULL0_DONE_INT			BIT(4)
#define BIT_PORT2_TX_NULL1_DONE_INT			BIT(3)
#define BIT_PORT2_TX_NULL0_DONE_INT			BIT(2)
#define BIT_PORT1_TX_NULL1_DONE_INT			BIT(1)
#define BIT_PORT1_TX_NULL0_DONE_INT			BIT(0)

/* 2 REG_MSG2				(Offset 0x11F0) */

#define BIT_SHIFT_FW_MSG2				0
#define BIT_MASK_FW_MSG2				0xffffffffL
#define BIT_FW_MSG2(x)					(((x) & BIT_MASK_FW_MSG2) << BIT_SHIFT_FW_MSG2)
#define BITS_FW_MSG2					(BIT_MASK_FW_MSG2 << BIT_SHIFT_FW_MSG2)
#define BIT_CLEAR_FW_MSG2(x)				((x) & (~BITS_FW_MSG2))
#define BIT_GET_FW_MSG2(x)				(((x) >> BIT_SHIFT_FW_MSG2) & BIT_MASK_FW_MSG2)
#define BIT_SET_FW_MSG2(x, v)				(BIT_CLEAR_FW_MSG2(x) | BIT_FW_MSG2(v))

/* 2 REG_MSG3				(Offset 0x11F4) */

#define BIT_SHIFT_FW_MSG3				0
#define BIT_MASK_FW_MSG3				0xffffffffL
#define BIT_FW_MSG3(x)					(((x) & BIT_MASK_FW_MSG3) << BIT_SHIFT_FW_MSG3)
#define BITS_FW_MSG3					(BIT_MASK_FW_MSG3 << BIT_SHIFT_FW_MSG3)
#define BIT_CLEAR_FW_MSG3(x)				((x) & (~BITS_FW_MSG3))
#define BIT_GET_FW_MSG3(x)				(((x) >> BIT_SHIFT_FW_MSG3) & BIT_MASK_FW_MSG3)
#define BIT_SET_FW_MSG3(x, v)				(BIT_CLEAR_FW_MSG3(x) | BIT_FW_MSG3(v))

/* 2 REG_MSG4				(Offset 0x11F8) */

#define BIT_SHIFT_FW_MSG4				0
#define BIT_MASK_FW_MSG4				0xffffffffL
#define BIT_FW_MSG4(x)					(((x) & BIT_MASK_FW_MSG4) << BIT_SHIFT_FW_MSG4)
#define BITS_FW_MSG4					(BIT_MASK_FW_MSG4 << BIT_SHIFT_FW_MSG4)
#define BIT_CLEAR_FW_MSG4(x)				((x) & (~BITS_FW_MSG4))
#define BIT_GET_FW_MSG4(x)				(((x) >> BIT_SHIFT_FW_MSG4) & BIT_MASK_FW_MSG4)
#define BIT_SET_FW_MSG4(x, v)				(BIT_CLEAR_FW_MSG4(x) | BIT_FW_MSG4(v))

/* 2 REG_MSG5				(Offset 0x11FC) */

#define BIT_R_WMAC_BCN_TWT_PSR				BIT(26)

#define BIT_SHIFT_R_TWT_PERSISTENCE			18
#define BIT_MASK_R_TWT_PERSISTENCE			0xff
#define BIT_R_TWT_PERSISTENCE(x)			(((x) & BIT_MASK_R_TWT_PERSISTENCE) << BIT_SHIFT_R_TWT_PERSISTENCE)
#define BITS_R_TWT_PERSISTENCE				(BIT_MASK_R_TWT_PERSISTENCE << BIT_SHIFT_R_TWT_PERSISTENCE)
#define BIT_CLEAR_R_TWT_PERSISTENCE(x)			((x) & (~BITS_R_TWT_PERSISTENCE))
#define BIT_GET_R_TWT_PERSISTENCE(x)			(((x) >> BIT_SHIFT_R_TWT_PERSISTENCE) & BIT_MASK_R_TWT_PERSISTENCE)
#define BIT_SET_R_TWT_PERSISTENCE(x, v)		(BIT_CLEAR_R_TWT_PERSISTENCE(x) | BIT_R_TWT_PERSISTENCE(v))

#define BIT_SHIFT_TWT_RPT_2				16
#define BIT_MASK_TWT_RPT_2				0xffff
#define BIT_TWT_RPT_2(x)				(((x) & BIT_MASK_TWT_RPT_2) << BIT_SHIFT_TWT_RPT_2)
#define BITS_TWT_RPT_2					(BIT_MASK_TWT_RPT_2 << BIT_SHIFT_TWT_RPT_2)
#define BIT_CLEAR_TWT_RPT_2(x)				((x) & (~BITS_TWT_RPT_2))
#define BIT_GET_TWT_RPT_2(x)				(((x) >> BIT_SHIFT_TWT_RPT_2) & BIT_MASK_TWT_RPT_2)
#define BIT_SET_TWT_RPT_2(x, v)			(BIT_CLEAR_TWT_RPT_2(x) | BIT_TWT_RPT_2(v))

#define BIT_SHIFT_TWT_RPT_4				16
#define BIT_MASK_TWT_RPT_4				0xffff
#define BIT_TWT_RPT_4(x)				(((x) & BIT_MASK_TWT_RPT_4) << BIT_SHIFT_TWT_RPT_4)
#define BITS_TWT_RPT_4					(BIT_MASK_TWT_RPT_4 << BIT_SHIFT_TWT_RPT_4)
#define BIT_CLEAR_TWT_RPT_4(x)				((x) & (~BITS_TWT_RPT_4))
#define BIT_GET_TWT_RPT_4(x)				(((x) >> BIT_SHIFT_TWT_RPT_4) & BIT_MASK_TWT_RPT_4)
#define BIT_SET_TWT_RPT_4(x, v)			(BIT_CLEAR_TWT_RPT_4(x) | BIT_TWT_RPT_4(v))

#define BIT_SHIFT_MBSSID_N_MEM				8
#define BIT_MASK_MBSSID_N_MEM				0xff
#define BIT_MBSSID_N_MEM(x)				(((x) & BIT_MASK_MBSSID_N_MEM) << BIT_SHIFT_MBSSID_N_MEM)
#define BITS_MBSSID_N_MEM				(BIT_MASK_MBSSID_N_MEM << BIT_SHIFT_MBSSID_N_MEM)
#define BIT_CLEAR_MBSSID_N_MEM(x)			((x) & (~BITS_MBSSID_N_MEM))
#define BIT_GET_MBSSID_N_MEM(x)			(((x) >> BIT_SHIFT_MBSSID_N_MEM) & BIT_MASK_MBSSID_N_MEM)
#define BIT_SET_MBSSID_N_MEM(x, v)			(BIT_CLEAR_MBSSID_N_MEM(x) | BIT_MBSSID_N_MEM(v))

#define BIT_SHIFT_R_LASTOP_FCS_ERROR			3
#define BIT_MASK_R_LASTOP_FCS_ERROR			0x3
#define BIT_R_LASTOP_FCS_ERROR(x)			(((x) & BIT_MASK_R_LASTOP_FCS_ERROR) << BIT_SHIFT_R_LASTOP_FCS_ERROR)
#define BITS_R_LASTOP_FCS_ERROR			(BIT_MASK_R_LASTOP_FCS_ERROR << BIT_SHIFT_R_LASTOP_FCS_ERROR)
#define BIT_CLEAR_R_LASTOP_FCS_ERROR(x)		((x) & (~BITS_R_LASTOP_FCS_ERROR))
#define BIT_GET_R_LASTOP_FCS_ERROR(x)			(((x) >> BIT_SHIFT_R_LASTOP_FCS_ERROR) & BIT_MASK_R_LASTOP_FCS_ERROR)
#define BIT_SET_R_LASTOP_FCS_ERROR(x, v)		(BIT_CLEAR_R_LASTOP_FCS_ERROR(x) | BIT_R_LASTOP_FCS_ERROR(v))

#define BIT_R_LASTOP_RX_FSM_HANG			BIT(2)
#define BIT_R_LASTOP_PLCP_ERROR			BIT(1)

#define BIT_SHIFT_FW_MSG5				0
#define BIT_MASK_FW_MSG5				0xffffffffL
#define BIT_FW_MSG5(x)					(((x) & BIT_MASK_FW_MSG5) << BIT_SHIFT_FW_MSG5)
#define BITS_FW_MSG5					(BIT_MASK_FW_MSG5 << BIT_SHIFT_FW_MSG5)
#define BIT_CLEAR_FW_MSG5(x)				((x) & (~BITS_FW_MSG5))
#define BIT_GET_FW_MSG5(x)				(((x) >> BIT_SHIFT_FW_MSG5) & BIT_MASK_FW_MSG5)
#define BIT_SET_FW_MSG5(x, v)				(BIT_CLEAR_FW_MSG5(x) | BIT_FW_MSG5(v))

#define BIT_SHIFT_R_BC_TWT_ID				0
#define BIT_MASK_R_BC_TWT_ID				0xffffffffL
#define BIT_R_BC_TWT_ID(x)				(((x) & BIT_MASK_R_BC_TWT_ID) << BIT_SHIFT_R_BC_TWT_ID)
#define BITS_R_BC_TWT_ID				(BIT_MASK_R_BC_TWT_ID << BIT_SHIFT_R_BC_TWT_ID)
#define BIT_CLEAR_R_BC_TWT_ID(x)			((x) & (~BITS_R_BC_TWT_ID))
#define BIT_GET_R_BC_TWT_ID(x)				(((x) >> BIT_SHIFT_R_BC_TWT_ID) & BIT_MASK_R_BC_TWT_ID)
#define BIT_SET_R_BC_TWT_ID(x, v)			(BIT_CLEAR_R_BC_TWT_ID(x) | BIT_R_BC_TWT_ID(v))

#define BIT_SHIFT_TWT_RPT_0				0
#define BIT_MASK_TWT_RPT_0				0xffff
#define BIT_TWT_RPT_0(x)				(((x) & BIT_MASK_TWT_RPT_0) << BIT_SHIFT_TWT_RPT_0)
#define BITS_TWT_RPT_0					(BIT_MASK_TWT_RPT_0 << BIT_SHIFT_TWT_RPT_0)
#define BIT_CLEAR_TWT_RPT_0(x)				((x) & (~BITS_TWT_RPT_0))
#define BIT_GET_TWT_RPT_0(x)				(((x) >> BIT_SHIFT_TWT_RPT_0) & BIT_MASK_TWT_RPT_0)
#define BIT_SET_TWT_RPT_0(x, v)			(BIT_CLEAR_TWT_RPT_0(x) | BIT_TWT_RPT_0(v))

#define BIT_SHIFT_TWT_RPT_1				0
#define BIT_MASK_TWT_RPT_1				0xffff
#define BIT_TWT_RPT_1(x)				(((x) & BIT_MASK_TWT_RPT_1) << BIT_SHIFT_TWT_RPT_1)
#define BITS_TWT_RPT_1					(BIT_MASK_TWT_RPT_1 << BIT_SHIFT_TWT_RPT_1)
#define BIT_CLEAR_TWT_RPT_1(x)				((x) & (~BITS_TWT_RPT_1))
#define BIT_GET_TWT_RPT_1(x)				(((x) >> BIT_SHIFT_TWT_RPT_1) & BIT_MASK_TWT_RPT_1)
#define BIT_SET_TWT_RPT_1(x, v)			(BIT_CLEAR_TWT_RPT_1(x) | BIT_TWT_RPT_1(v))

#define BIT_SHIFT_TWT_RPT_3				0
#define BIT_MASK_TWT_RPT_3				0xffff
#define BIT_TWT_RPT_3(x)				(((x) & BIT_MASK_TWT_RPT_3) << BIT_SHIFT_TWT_RPT_3)
#define BITS_TWT_RPT_3					(BIT_MASK_TWT_RPT_3 << BIT_SHIFT_TWT_RPT_3)
#define BIT_CLEAR_TWT_RPT_3(x)				((x) & (~BITS_TWT_RPT_3))
#define BIT_GET_TWT_RPT_3(x)				(((x) >> BIT_SHIFT_TWT_RPT_3) & BIT_MASK_TWT_RPT_3)
#define BIT_SET_TWT_RPT_3(x, v)			(BIT_CLEAR_TWT_RPT_3(x) | BIT_TWT_RPT_3(v))

#define BIT_SHIFT_OPS_DURATION_RPT			0
#define BIT_MASK_OPS_DURATION_RPT			0xff
#define BIT_OPS_DURATION_RPT(x)			(((x) & BIT_MASK_OPS_DURATION_RPT) << BIT_SHIFT_OPS_DURATION_RPT)
#define BITS_OPS_DURATION_RPT				(BIT_MASK_OPS_DURATION_RPT << BIT_SHIFT_OPS_DURATION_RPT)
#define BIT_CLEAR_OPS_DURATION_RPT(x)			((x) & (~BITS_OPS_DURATION_RPT))
#define BIT_GET_OPS_DURATION_RPT(x)			(((x) >> BIT_SHIFT_OPS_DURATION_RPT) & BIT_MASK_OPS_DURATION_RPT)
#define BIT_SET_OPS_DURATION_RPT(x, v)			(BIT_CLEAR_OPS_DURATION_RPT(x) | BIT_OPS_DURATION_RPT(v))

#define BIT_R_LASTOP_RX_INCOMP				BIT(0)

#define BIT_SHIFT_AID11				0
#define BIT_MASK_AID11					0x7ff
#define BIT_AID11(x)					(((x) & BIT_MASK_AID11) << BIT_SHIFT_AID11)
#define BITS_AID11					(BIT_MASK_AID11 << BIT_SHIFT_AID11)
#define BIT_CLEAR_AID11(x)				((x) & (~BITS_AID11))
#define BIT_GET_AID11(x)				(((x) >> BIT_SHIFT_AID11) & BIT_MASK_AID11)
#define BIT_SET_AID11(x, v)				(BIT_CLEAR_AID11(x) | BIT_AID11(v))

/* 2 REG_DDMA_CH0SA				(Offset 0x1200) */

#define BIT_SHIFT_DDMACH0_SA				0
#define BIT_MASK_DDMACH0_SA				0xffffffffL
#define BIT_DDMACH0_SA(x)				(((x) & BIT_MASK_DDMACH0_SA) << BIT_SHIFT_DDMACH0_SA)
#define BITS_DDMACH0_SA				(BIT_MASK_DDMACH0_SA << BIT_SHIFT_DDMACH0_SA)
#define BIT_CLEAR_DDMACH0_SA(x)			((x) & (~BITS_DDMACH0_SA))
#define BIT_GET_DDMACH0_SA(x)				(((x) >> BIT_SHIFT_DDMACH0_SA) & BIT_MASK_DDMACH0_SA)
#define BIT_SET_DDMACH0_SA(x, v)			(BIT_CLEAR_DDMACH0_SA(x) | BIT_DDMACH0_SA(v))

/* 2 REG_DDMA_CH0DA				(Offset 0x1204) */

#define BIT_SHIFT_DDMACH0_DA				0
#define BIT_MASK_DDMACH0_DA				0xffffffffL
#define BIT_DDMACH0_DA(x)				(((x) & BIT_MASK_DDMACH0_DA) << BIT_SHIFT_DDMACH0_DA)
#define BITS_DDMACH0_DA				(BIT_MASK_DDMACH0_DA << BIT_SHIFT_DDMACH0_DA)
#define BIT_CLEAR_DDMACH0_DA(x)			((x) & (~BITS_DDMACH0_DA))
#define BIT_GET_DDMACH0_DA(x)				(((x) >> BIT_SHIFT_DDMACH0_DA) & BIT_MASK_DDMACH0_DA)
#define BIT_SET_DDMACH0_DA(x, v)			(BIT_CLEAR_DDMACH0_DA(x) | BIT_DDMACH0_DA(v))

/* 2 REG_DDMA_CH0CTRL			(Offset 0x1208) */

#define BIT_DDMACH0_OWN				BIT(31)
#define BIT_DDMACH0_IDMEM_ERR				BIT(30)
#define BIT_DDMACH0_CHKSUM_EN				BIT(29)
#define BIT_DDMACH0_DA_W_DISABLE			BIT(28)
#define BIT_DDMACH0_CHKSUM_STS				BIT(27)
#define BIT_DDMACH0_DDMA_MODE				BIT(26)
#define BIT_DDMACH0_RESET_CHKSUM_STS			BIT(25)
#define BIT_DDMACH0_CHKSUM_CONT			BIT(24)

#define BIT_SHIFT_DDMACH0_DLEN				0
#define BIT_MASK_DDMACH0_DLEN				0x3ffff
#define BIT_DDMACH0_DLEN(x)				(((x) & BIT_MASK_DDMACH0_DLEN) << BIT_SHIFT_DDMACH0_DLEN)
#define BITS_DDMACH0_DLEN				(BIT_MASK_DDMACH0_DLEN << BIT_SHIFT_DDMACH0_DLEN)
#define BIT_CLEAR_DDMACH0_DLEN(x)			((x) & (~BITS_DDMACH0_DLEN))
#define BIT_GET_DDMACH0_DLEN(x)			(((x) >> BIT_SHIFT_DDMACH0_DLEN) & BIT_MASK_DDMACH0_DLEN)
#define BIT_SET_DDMACH0_DLEN(x, v)			(BIT_CLEAR_DDMACH0_DLEN(x) | BIT_DDMACH0_DLEN(v))

/* 2 REG_DDMA_CH1SA				(Offset 0x1210) */

#define BIT_SHIFT_DDMACH1_SA				0
#define BIT_MASK_DDMACH1_SA				0xffffffffL
#define BIT_DDMACH1_SA(x)				(((x) & BIT_MASK_DDMACH1_SA) << BIT_SHIFT_DDMACH1_SA)
#define BITS_DDMACH1_SA				(BIT_MASK_DDMACH1_SA << BIT_SHIFT_DDMACH1_SA)
#define BIT_CLEAR_DDMACH1_SA(x)			((x) & (~BITS_DDMACH1_SA))
#define BIT_GET_DDMACH1_SA(x)				(((x) >> BIT_SHIFT_DDMACH1_SA) & BIT_MASK_DDMACH1_SA)
#define BIT_SET_DDMACH1_SA(x, v)			(BIT_CLEAR_DDMACH1_SA(x) | BIT_DDMACH1_SA(v))

/* 2 REG_DDMA_CH1DA				(Offset 0x1214) */

#define BIT_SHIFT_DDMACH1_DA				0
#define BIT_MASK_DDMACH1_DA				0xffffffffL
#define BIT_DDMACH1_DA(x)				(((x) & BIT_MASK_DDMACH1_DA) << BIT_SHIFT_DDMACH1_DA)
#define BITS_DDMACH1_DA				(BIT_MASK_DDMACH1_DA << BIT_SHIFT_DDMACH1_DA)
#define BIT_CLEAR_DDMACH1_DA(x)			((x) & (~BITS_DDMACH1_DA))
#define BIT_GET_DDMACH1_DA(x)				(((x) >> BIT_SHIFT_DDMACH1_DA) & BIT_MASK_DDMACH1_DA)
#define BIT_SET_DDMACH1_DA(x, v)			(BIT_CLEAR_DDMACH1_DA(x) | BIT_DDMACH1_DA(v))

/* 2 REG_DDMA_CH1CTRL			(Offset 0x1218) */

#define BIT_DDMACH1_OWN				BIT(31)
#define BIT_DDMACH1_IDMEM_ERR				BIT(30)
#define BIT_DDMACH1_CHKSUM_EN				BIT(29)
#define BIT_DDMACH1_DA_W_DISABLE			BIT(28)
#define BIT_DDMACH1_CHKSUM_STS				BIT(27)
#define BIT_DDMACH1_DDMA_MODE				BIT(26)
#define BIT_DDMACH1_RESET_CHKSUM_STS			BIT(25)
#define BIT_DDMACH1_CHKSUM_CONT			BIT(24)

#define BIT_SHIFT_DDMACH1_DLEN				0
#define BIT_MASK_DDMACH1_DLEN				0x3ffff
#define BIT_DDMACH1_DLEN(x)				(((x) & BIT_MASK_DDMACH1_DLEN) << BIT_SHIFT_DDMACH1_DLEN)
#define BITS_DDMACH1_DLEN				(BIT_MASK_DDMACH1_DLEN << BIT_SHIFT_DDMACH1_DLEN)
#define BIT_CLEAR_DDMACH1_DLEN(x)			((x) & (~BITS_DDMACH1_DLEN))
#define BIT_GET_DDMACH1_DLEN(x)			(((x) >> BIT_SHIFT_DDMACH1_DLEN) & BIT_MASK_DDMACH1_DLEN)
#define BIT_SET_DDMACH1_DLEN(x, v)			(BIT_CLEAR_DDMACH1_DLEN(x) | BIT_DDMACH1_DLEN(v))

/* 2 REG_DDMA_CH2SA				(Offset 0x1220) */

#define BIT_SHIFT_DDMACH2_SA				0
#define BIT_MASK_DDMACH2_SA				0xffffffffL
#define BIT_DDMACH2_SA(x)				(((x) & BIT_MASK_DDMACH2_SA) << BIT_SHIFT_DDMACH2_SA)
#define BITS_DDMACH2_SA				(BIT_MASK_DDMACH2_SA << BIT_SHIFT_DDMACH2_SA)
#define BIT_CLEAR_DDMACH2_SA(x)			((x) & (~BITS_DDMACH2_SA))
#define BIT_GET_DDMACH2_SA(x)				(((x) >> BIT_SHIFT_DDMACH2_SA) & BIT_MASK_DDMACH2_SA)
#define BIT_SET_DDMACH2_SA(x, v)			(BIT_CLEAR_DDMACH2_SA(x) | BIT_DDMACH2_SA(v))

/* 2 REG_DDMA_CH2DA				(Offset 0x1224) */

#define BIT_SHIFT_DDMACH2_DA				0
#define BIT_MASK_DDMACH2_DA				0xffffffffL
#define BIT_DDMACH2_DA(x)				(((x) & BIT_MASK_DDMACH2_DA) << BIT_SHIFT_DDMACH2_DA)
#define BITS_DDMACH2_DA				(BIT_MASK_DDMACH2_DA << BIT_SHIFT_DDMACH2_DA)
#define BIT_CLEAR_DDMACH2_DA(x)			((x) & (~BITS_DDMACH2_DA))
#define BIT_GET_DDMACH2_DA(x)				(((x) >> BIT_SHIFT_DDMACH2_DA) & BIT_MASK_DDMACH2_DA)
#define BIT_SET_DDMACH2_DA(x, v)			(BIT_CLEAR_DDMACH2_DA(x) | BIT_DDMACH2_DA(v))

/* 2 REG_DDMA_CH2CTRL			(Offset 0x1228) */

#define BIT_DDMACH2_OWN				BIT(31)
#define BIT_DDMACH2_IDMEM_ERR				BIT(30)
#define BIT_DDMACH2_CHKSUM_EN				BIT(29)
#define BIT_DDMACH2_DA_W_DISABLE			BIT(28)
#define BIT_DDMACH2_CHKSUM_STS				BIT(27)
#define BIT_DDMACH2_DDMA_MODE				BIT(26)
#define BIT_DDMACH2_RESET_CHKSUM_STS			BIT(25)
#define BIT_DDMACH2_CHKSUM_CONT			BIT(24)

#define BIT_SHIFT_DDMACH2_DLEN				0
#define BIT_MASK_DDMACH2_DLEN				0x3ffff
#define BIT_DDMACH2_DLEN(x)				(((x) & BIT_MASK_DDMACH2_DLEN) << BIT_SHIFT_DDMACH2_DLEN)
#define BITS_DDMACH2_DLEN				(BIT_MASK_DDMACH2_DLEN << BIT_SHIFT_DDMACH2_DLEN)
#define BIT_CLEAR_DDMACH2_DLEN(x)			((x) & (~BITS_DDMACH2_DLEN))
#define BIT_GET_DDMACH2_DLEN(x)			(((x) >> BIT_SHIFT_DDMACH2_DLEN) & BIT_MASK_DDMACH2_DLEN)
#define BIT_SET_DDMACH2_DLEN(x, v)			(BIT_CLEAR_DDMACH2_DLEN(x) | BIT_DDMACH2_DLEN(v))

/* 2 REG_DDMA_CH3SA				(Offset 0x1230) */

#define BIT_SHIFT_DDMACH3_SA				0
#define BIT_MASK_DDMACH3_SA				0xffffffffL
#define BIT_DDMACH3_SA(x)				(((x) & BIT_MASK_DDMACH3_SA) << BIT_SHIFT_DDMACH3_SA)
#define BITS_DDMACH3_SA				(BIT_MASK_DDMACH3_SA << BIT_SHIFT_DDMACH3_SA)
#define BIT_CLEAR_DDMACH3_SA(x)			((x) & (~BITS_DDMACH3_SA))
#define BIT_GET_DDMACH3_SA(x)				(((x) >> BIT_SHIFT_DDMACH3_SA) & BIT_MASK_DDMACH3_SA)
#define BIT_SET_DDMACH3_SA(x, v)			(BIT_CLEAR_DDMACH3_SA(x) | BIT_DDMACH3_SA(v))

/* 2 REG_DDMA_CH3DA				(Offset 0x1234) */

#define BIT_SHIFT_DDMACH3_DA				0
#define BIT_MASK_DDMACH3_DA				0xffffffffL
#define BIT_DDMACH3_DA(x)				(((x) & BIT_MASK_DDMACH3_DA) << BIT_SHIFT_DDMACH3_DA)
#define BITS_DDMACH3_DA				(BIT_MASK_DDMACH3_DA << BIT_SHIFT_DDMACH3_DA)
#define BIT_CLEAR_DDMACH3_DA(x)			((x) & (~BITS_DDMACH3_DA))
#define BIT_GET_DDMACH3_DA(x)				(((x) >> BIT_SHIFT_DDMACH3_DA) & BIT_MASK_DDMACH3_DA)
#define BIT_SET_DDMACH3_DA(x, v)			(BIT_CLEAR_DDMACH3_DA(x) | BIT_DDMACH3_DA(v))

/* 2 REG_DDMA_CH3CTRL			(Offset 0x1238) */

#define BIT_DDMACH3_OWN				BIT(31)
#define BIT_DDMACH3_IDMEM_ERR				BIT(30)
#define BIT_DDMACH3_CHKSUM_EN				BIT(29)
#define BIT_DDMACH3_DA_W_DISABLE			BIT(28)
#define BIT_DDMACH3_CHKSUM_STS				BIT(27)
#define BIT_DDMACH3_DDMA_MODE				BIT(26)
#define BIT_DDMACH3_RESET_CHKSUM_STS			BIT(25)
#define BIT_DDMACH3_CHKSUM_CONT			BIT(24)

#define BIT_SHIFT_DDMACH3_DLEN				0
#define BIT_MASK_DDMACH3_DLEN				0x3ffff
#define BIT_DDMACH3_DLEN(x)				(((x) & BIT_MASK_DDMACH3_DLEN) << BIT_SHIFT_DDMACH3_DLEN)
#define BITS_DDMACH3_DLEN				(BIT_MASK_DDMACH3_DLEN << BIT_SHIFT_DDMACH3_DLEN)
#define BIT_CLEAR_DDMACH3_DLEN(x)			((x) & (~BITS_DDMACH3_DLEN))
#define BIT_GET_DDMACH3_DLEN(x)			(((x) >> BIT_SHIFT_DDMACH3_DLEN) & BIT_MASK_DDMACH3_DLEN)
#define BIT_SET_DDMACH3_DLEN(x, v)			(BIT_CLEAR_DDMACH3_DLEN(x) | BIT_DDMACH3_DLEN(v))

/* 2 REG_DDMA_CH4SA				(Offset 0x1240) */

#define BIT_SHIFT_DDMACH4_SA				0
#define BIT_MASK_DDMACH4_SA				0xffffffffL
#define BIT_DDMACH4_SA(x)				(((x) & BIT_MASK_DDMACH4_SA) << BIT_SHIFT_DDMACH4_SA)
#define BITS_DDMACH4_SA				(BIT_MASK_DDMACH4_SA << BIT_SHIFT_DDMACH4_SA)
#define BIT_CLEAR_DDMACH4_SA(x)			((x) & (~BITS_DDMACH4_SA))
#define BIT_GET_DDMACH4_SA(x)				(((x) >> BIT_SHIFT_DDMACH4_SA) & BIT_MASK_DDMACH4_SA)
#define BIT_SET_DDMACH4_SA(x, v)			(BIT_CLEAR_DDMACH4_SA(x) | BIT_DDMACH4_SA(v))

/* 2 REG_DDMA_CH4DA				(Offset 0x1244) */

#define BIT_SHIFT_DDMACH4_DA				0
#define BIT_MASK_DDMACH4_DA				0xffffffffL
#define BIT_DDMACH4_DA(x)				(((x) & BIT_MASK_DDMACH4_DA) << BIT_SHIFT_DDMACH4_DA)
#define BITS_DDMACH4_DA				(BIT_MASK_DDMACH4_DA << BIT_SHIFT_DDMACH4_DA)
#define BIT_CLEAR_DDMACH4_DA(x)			((x) & (~BITS_DDMACH4_DA))
#define BIT_GET_DDMACH4_DA(x)				(((x) >> BIT_SHIFT_DDMACH4_DA) & BIT_MASK_DDMACH4_DA)
#define BIT_SET_DDMACH4_DA(x, v)			(BIT_CLEAR_DDMACH4_DA(x) | BIT_DDMACH4_DA(v))

/* 2 REG_DDMA_CH4CTRL			(Offset 0x1248) */

#define BIT_DDMACH4_OWN				BIT(31)
#define BIT_DDMACH4_IDMEM_ERR				BIT(30)
#define BIT_DDMACH4_CHKSUM_EN				BIT(29)
#define BIT_DDMACH4_DA_W_DISABLE			BIT(28)
#define BIT_DDMACH4_CHKSUM_STS				BIT(27)
#define BIT_DDMACH4_DDMA_MODE				BIT(26)
#define BIT_DDMACH4_RESET_CHKSUM_STS			BIT(25)
#define BIT_DDMACH4_CHKSUM_CONT			BIT(24)

#define BIT_SHIFT_DDMACH4_DLEN				0
#define BIT_MASK_DDMACH4_DLEN				0x3ffff
#define BIT_DDMACH4_DLEN(x)				(((x) & BIT_MASK_DDMACH4_DLEN) << BIT_SHIFT_DDMACH4_DLEN)
#define BITS_DDMACH4_DLEN				(BIT_MASK_DDMACH4_DLEN << BIT_SHIFT_DDMACH4_DLEN)
#define BIT_CLEAR_DDMACH4_DLEN(x)			((x) & (~BITS_DDMACH4_DLEN))
#define BIT_GET_DDMACH4_DLEN(x)			(((x) >> BIT_SHIFT_DDMACH4_DLEN) & BIT_MASK_DDMACH4_DLEN)
#define BIT_SET_DDMACH4_DLEN(x, v)			(BIT_CLEAR_DDMACH4_DLEN(x) | BIT_DDMACH4_DLEN(v))

/* 2 REG_DDMA_CH5SA				(Offset 0x1250) */

#define BIT_SHIFT_DDMACH5_SA				0
#define BIT_MASK_DDMACH5_SA				0xffffffffL
#define BIT_DDMACH5_SA(x)				(((x) & BIT_MASK_DDMACH5_SA) << BIT_SHIFT_DDMACH5_SA)
#define BITS_DDMACH5_SA				(BIT_MASK_DDMACH5_SA << BIT_SHIFT_DDMACH5_SA)
#define BIT_CLEAR_DDMACH5_SA(x)			((x) & (~BITS_DDMACH5_SA))
#define BIT_GET_DDMACH5_SA(x)				(((x) >> BIT_SHIFT_DDMACH5_SA) & BIT_MASK_DDMACH5_SA)
#define BIT_SET_DDMACH5_SA(x, v)			(BIT_CLEAR_DDMACH5_SA(x) | BIT_DDMACH5_SA(v))

/* 2 REG_DDMA_CH5DA				(Offset 0x1254) */

#define BIT_SHIFT_DDMACH5_DA				0
#define BIT_MASK_DDMACH5_DA				0xffffffffL
#define BIT_DDMACH5_DA(x)				(((x) & BIT_MASK_DDMACH5_DA) << BIT_SHIFT_DDMACH5_DA)
#define BITS_DDMACH5_DA				(BIT_MASK_DDMACH5_DA << BIT_SHIFT_DDMACH5_DA)
#define BIT_CLEAR_DDMACH5_DA(x)			((x) & (~BITS_DDMACH5_DA))
#define BIT_GET_DDMACH5_DA(x)				(((x) >> BIT_SHIFT_DDMACH5_DA) & BIT_MASK_DDMACH5_DA)
#define BIT_SET_DDMACH5_DA(x, v)			(BIT_CLEAR_DDMACH5_DA(x) | BIT_DDMACH5_DA(v))

/* 2 REG_DDMA_CH5CTRL			(Offset 0x1258) */

#define BIT_DDMACH5_OWN				BIT(31)
#define BIT_DDMACH5_IDMEM_ERR				BIT(30)
#define BIT_DDMACH5_CHKSUM_EN				BIT(29)
#define BIT_DDMACH5_DA_W_DISABLE			BIT(28)
#define BIT_DDMACH5_CHKSUM_STS				BIT(27)
#define BIT_DDMACH5_DDMA_MODE				BIT(26)
#define BIT_DDMACH5_RESET_CHKSUM_STS			BIT(25)
#define BIT_DDMACH5_CHKSUM_CONT			BIT(24)

#define BIT_SHIFT_DDMACH5_DLEN				0
#define BIT_MASK_DDMACH5_DLEN				0x3ffff
#define BIT_DDMACH5_DLEN(x)				(((x) & BIT_MASK_DDMACH5_DLEN) << BIT_SHIFT_DDMACH5_DLEN)
#define BITS_DDMACH5_DLEN				(BIT_MASK_DDMACH5_DLEN << BIT_SHIFT_DDMACH5_DLEN)
#define BIT_CLEAR_DDMACH5_DLEN(x)			((x) & (~BITS_DDMACH5_DLEN))
#define BIT_GET_DDMACH5_DLEN(x)			(((x) >> BIT_SHIFT_DDMACH5_DLEN) & BIT_MASK_DDMACH5_DLEN)
#define BIT_SET_DDMACH5_DLEN(x, v)			(BIT_CLEAR_DDMACH5_DLEN(x) | BIT_DDMACH5_DLEN(v))

/* 2 REG_DDMA_INT_MSK			(Offset 0x12E0) */

#define BIT_DDMACH5_MSK				BIT(5)
#define BIT_DDMACH4_MSK				BIT(4)
#define BIT_DDMACH3_MSK				BIT(3)
#define BIT_DDMACH2_MSK				BIT(2)
#define BIT_DDMACH1_MSK				BIT(1)
#define BIT_DDMACH0_MSK				BIT(0)

/* 2 REG_DDMA_INT_STS			(Offset 0x12E4) */

#define BIT_DDMACH5_DDMA_DONE				BIT(5)
#define BIT_DDMACH4_DDMA_DONE				BIT(4)
#define BIT_DDMACH3_DDMA_DONE				BIT(3)
#define BIT_DDMACH2_DDMA_DONE				BIT(2)
#define BIT_DDMACH1_DDMA_DONE				BIT(1)
#define BIT_DDMACH0_DDMA_DONE				BIT(0)

/* 2 REG_DDMA_CHSTATUS			(Offset 0x12E8) */

#define BIT_DDMACH5_REQ				BIT(5)
#define BIT_DDMACH4_REQ				BIT(4)
#define BIT_DDMACH3_REQ				BIT(3)
#define BIT_DDMACH2_REQ				BIT(2)
#define BIT_DDMACH1_REQ				BIT(1)
#define BIT_DDMACH0_REQ				BIT(0)

/* 2 REG_DDMA_CHKSUM				(Offset 0x12F0) */

#define BIT_SHIFT_DDMA_DST_CS				22
#define BIT_MASK_DDMA_DST_CS				0x3
#define BIT_DDMA_DST_CS(x)				(((x) & BIT_MASK_DDMA_DST_CS) << BIT_SHIFT_DDMA_DST_CS)
#define BITS_DDMA_DST_CS				(BIT_MASK_DDMA_DST_CS << BIT_SHIFT_DDMA_DST_CS)
#define BIT_CLEAR_DDMA_DST_CS(x)			((x) & (~BITS_DDMA_DST_CS))
#define BIT_GET_DDMA_DST_CS(x)				(((x) >> BIT_SHIFT_DDMA_DST_CS) & BIT_MASK_DDMA_DST_CS)
#define BIT_SET_DDMA_DST_CS(x, v)			(BIT_CLEAR_DDMA_DST_CS(x) | BIT_DDMA_DST_CS(v))

#define BIT_SHIFT_DDMA_SRC_CS				20
#define BIT_MASK_DDMA_SRC_CS				0x3
#define BIT_DDMA_SRC_CS(x)				(((x) & BIT_MASK_DDMA_SRC_CS) << BIT_SHIFT_DDMA_SRC_CS)
#define BITS_DDMA_SRC_CS				(BIT_MASK_DDMA_SRC_CS << BIT_SHIFT_DDMA_SRC_CS)
#define BIT_CLEAR_DDMA_SRC_CS(x)			((x) & (~BITS_DDMA_SRC_CS))
#define BIT_GET_DDMA_SRC_CS(x)				(((x) >> BIT_SHIFT_DDMA_SRC_CS) & BIT_MASK_DDMA_SRC_CS)
#define BIT_SET_DDMA_SRC_CS(x, v)			(BIT_CLEAR_DDMA_SRC_CS(x) | BIT_DDMA_SRC_CS(v))

#define BIT_SHIFT_DDMA_ARB_CS				16
#define BIT_MASK_DDMA_ARB_CS				0xf
#define BIT_DDMA_ARB_CS(x)				(((x) & BIT_MASK_DDMA_ARB_CS) << BIT_SHIFT_DDMA_ARB_CS)
#define BITS_DDMA_ARB_CS				(BIT_MASK_DDMA_ARB_CS << BIT_SHIFT_DDMA_ARB_CS)
#define BIT_CLEAR_DDMA_ARB_CS(x)			((x) & (~BITS_DDMA_ARB_CS))
#define BIT_GET_DDMA_ARB_CS(x)				(((x) >> BIT_SHIFT_DDMA_ARB_CS) & BIT_MASK_DDMA_ARB_CS)
#define BIT_SET_DDMA_ARB_CS(x, v)			(BIT_CLEAR_DDMA_ARB_CS(x) | BIT_DDMA_ARB_CS(v))

#define BIT_SHIFT_IDDMA0_CHKSUM			0
#define BIT_MASK_IDDMA0_CHKSUM				0xffff
#define BIT_IDDMA0_CHKSUM(x)				(((x) & BIT_MASK_IDDMA0_CHKSUM) << BIT_SHIFT_IDDMA0_CHKSUM)
#define BITS_IDDMA0_CHKSUM				(BIT_MASK_IDDMA0_CHKSUM << BIT_SHIFT_IDDMA0_CHKSUM)
#define BIT_CLEAR_IDDMA0_CHKSUM(x)			((x) & (~BITS_IDDMA0_CHKSUM))
#define BIT_GET_IDDMA0_CHKSUM(x)			(((x) >> BIT_SHIFT_IDDMA0_CHKSUM) & BIT_MASK_IDDMA0_CHKSUM)
#define BIT_SET_IDDMA0_CHKSUM(x, v)			(BIT_CLEAR_IDDMA0_CHKSUM(x) | BIT_IDDMA0_CHKSUM(v))

/* 2 REG_DDMA_MONITOR			(Offset 0x12FC) */

#define BIT_IDDMA0_PERMU_UNDERFLOW			BIT(14)
#define BIT_IDDMA0_FIFO_UNDERFLOW			BIT(13)
#define BIT_IDDMA0_FIFO_OVERFLOW			BIT(12)
#define BIT_CH5_ERR					BIT(5)
#define BIT_CH4_ERR					BIT(4)
#define BIT_CH3_ERR					BIT(3)
#define BIT_CH2_ERR					BIT(2)
#define BIT_CH1_ERR					BIT(1)
#define BIT_CH0_ERR					BIT(0)

/* 2 REG_H2CQ_TXBD_DESA			(Offset 0x1300) */

#define BIT_SHIFT_H2CQDESA				0
#define BIT_MASK_H2CQDESA				0xffffffffL
#define BIT_H2CQDESA(x)				(((x) & BIT_MASK_H2CQDESA) << BIT_SHIFT_H2CQDESA)
#define BITS_H2CQDESA					(BIT_MASK_H2CQDESA << BIT_SHIFT_H2CQDESA)
#define BIT_CLEAR_H2CQDESA(x)				((x) & (~BITS_H2CQDESA))
#define BIT_GET_H2CQDESA(x)				(((x) >> BIT_SHIFT_H2CQDESA) & BIT_MASK_H2CQDESA)
#define BIT_SET_H2CQDESA(x, v)				(BIT_CLEAR_H2CQDESA(x) | BIT_H2CQDESA(v))

/* 2 REG_H2CQ_TXBD_NUM			(Offset 0x1304) */

#define BIT_H2CQ_FLAG					BIT(14)

#define BIT_SHIFT_H2CQ_DESC_MODE			12
#define BIT_MASK_H2CQ_DESC_MODE			0x3
#define BIT_H2CQ_DESC_MODE(x)				(((x) & BIT_MASK_H2CQ_DESC_MODE) << BIT_SHIFT_H2CQ_DESC_MODE)
#define BITS_H2CQ_DESC_MODE				(BIT_MASK_H2CQ_DESC_MODE << BIT_SHIFT_H2CQ_DESC_MODE)
#define BIT_CLEAR_H2CQ_DESC_MODE(x)			((x) & (~BITS_H2CQ_DESC_MODE))
#define BIT_GET_H2CQ_DESC_MODE(x)			(((x) >> BIT_SHIFT_H2CQ_DESC_MODE) & BIT_MASK_H2CQ_DESC_MODE)
#define BIT_SET_H2CQ_DESC_MODE(x, v)			(BIT_CLEAR_H2CQ_DESC_MODE(x) | BIT_H2CQ_DESC_MODE(v))

#define BIT_SHIFT_H2CQDES_NUM				0
#define BIT_MASK_H2CQDES_NUM				0xfff
#define BIT_H2CQDES_NUM(x)				(((x) & BIT_MASK_H2CQDES_NUM) << BIT_SHIFT_H2CQDES_NUM)
#define BITS_H2CQDES_NUM				(BIT_MASK_H2CQDES_NUM << BIT_SHIFT_H2CQDES_NUM)
#define BIT_CLEAR_H2CQDES_NUM(x)			((x) & (~BITS_H2CQDES_NUM))
#define BIT_GET_H2CQDES_NUM(x)				(((x) >> BIT_SHIFT_H2CQDES_NUM) & BIT_MASK_H2CQDES_NUM)
#define BIT_SET_H2CQDES_NUM(x, v)			(BIT_CLEAR_H2CQDES_NUM(x) | BIT_H2CQDES_NUM(v))

/* 2 REG_H2CQ_TXBD_IDX			(Offset 0x1308) */

#define BIT_SHIFT_H2CQ_HW_IDX				16
#define BIT_MASK_H2CQ_HW_IDX				0xfff
#define BIT_H2CQ_HW_IDX(x)				(((x) & BIT_MASK_H2CQ_HW_IDX) << BIT_SHIFT_H2CQ_HW_IDX)
#define BITS_H2CQ_HW_IDX				(BIT_MASK_H2CQ_HW_IDX << BIT_SHIFT_H2CQ_HW_IDX)
#define BIT_CLEAR_H2CQ_HW_IDX(x)			((x) & (~BITS_H2CQ_HW_IDX))
#define BIT_GET_H2CQ_HW_IDX(x)				(((x) >> BIT_SHIFT_H2CQ_HW_IDX) & BIT_MASK_H2CQ_HW_IDX)
#define BIT_SET_H2CQ_HW_IDX(x, v)			(BIT_CLEAR_H2CQ_HW_IDX(x) | BIT_H2CQ_HW_IDX(v))

#define BIT_SHIFT_H2CQ_HOST_IDX			0
#define BIT_MASK_H2CQ_HOST_IDX				0xfff
#define BIT_H2CQ_HOST_IDX(x)				(((x) & BIT_MASK_H2CQ_HOST_IDX) << BIT_SHIFT_H2CQ_HOST_IDX)
#define BITS_H2CQ_HOST_IDX				(BIT_MASK_H2CQ_HOST_IDX << BIT_SHIFT_H2CQ_HOST_IDX)
#define BIT_CLEAR_H2CQ_HOST_IDX(x)			((x) & (~BITS_H2CQ_HOST_IDX))
#define BIT_GET_H2CQ_HOST_IDX(x)			(((x) >> BIT_SHIFT_H2CQ_HOST_IDX) & BIT_MASK_H2CQ_HOST_IDX)
#define BIT_SET_H2CQ_HOST_IDX(x, v)			(BIT_CLEAR_H2CQ_HOST_IDX(x) | BIT_H2CQ_HOST_IDX(v))

/* 2 REG_H2CQ_CSR				(Offset 0x130C) */

#define BIT_H2CQ_FULL					BIT(31)
#define BIT_CLR_H2CQ_HOST_IDX				BIT(2)
#define BIT_CLR_H2CQ_HW_IDX				BIT(1)
#define BIT_STOPH2C					BIT(0)

/* 2 REG_AESIV_SETTING			(Offset 0x1424) */

#define BIT_SHIFT_AESIV_OFFSET				0
#define BIT_MASK_AESIV_OFFSET				0xfff
#define BIT_AESIV_OFFSET(x)				(((x) & BIT_MASK_AESIV_OFFSET) << BIT_SHIFT_AESIV_OFFSET)
#define BITS_AESIV_OFFSET				(BIT_MASK_AESIV_OFFSET << BIT_SHIFT_AESIV_OFFSET)
#define BIT_CLEAR_AESIV_OFFSET(x)			((x) & (~BITS_AESIV_OFFSET))
#define BIT_GET_AESIV_OFFSET(x)			(((x) >> BIT_SHIFT_AESIV_OFFSET) & BIT_MASK_AESIV_OFFSET)
#define BIT_SET_AESIV_OFFSET(x, v)			(BIT_CLEAR_AESIV_OFFSET(x) | BIT_AESIV_OFFSET(v))

/* 2 REG_BF0_TIME_SETTING			(Offset 0x1428) */

#define BIT_BF0_TIMER_SET				BIT(31)
#define BIT_BF0_TIMER_CLR				BIT(30)
#define BIT_EN_BF0_UPDATE				BIT(29)
#define BIT_EN_BF0_TIMER				BIT(28)

#define BIT_SHIFT_BF0_PRETIME_OVER			16
#define BIT_MASK_BF0_PRETIME_OVER			0xfff
#define BIT_BF0_PRETIME_OVER(x)			(((x) & BIT_MASK_BF0_PRETIME_OVER) << BIT_SHIFT_BF0_PRETIME_OVER)
#define BITS_BF0_PRETIME_OVER				(BIT_MASK_BF0_PRETIME_OVER << BIT_SHIFT_BF0_PRETIME_OVER)
#define BIT_CLEAR_BF0_PRETIME_OVER(x)			((x) & (~BITS_BF0_PRETIME_OVER))
#define BIT_GET_BF0_PRETIME_OVER(x)			(((x) >> BIT_SHIFT_BF0_PRETIME_OVER) & BIT_MASK_BF0_PRETIME_OVER)
#define BIT_SET_BF0_PRETIME_OVER(x, v)			(BIT_CLEAR_BF0_PRETIME_OVER(x) | BIT_BF0_PRETIME_OVER(v))

#define BIT_SHIFT_BF0_LIFETIME				0
#define BIT_MASK_BF0_LIFETIME				0xffff
#define BIT_BF0_LIFETIME(x)				(((x) & BIT_MASK_BF0_LIFETIME) << BIT_SHIFT_BF0_LIFETIME)
#define BITS_BF0_LIFETIME				(BIT_MASK_BF0_LIFETIME << BIT_SHIFT_BF0_LIFETIME)
#define BIT_CLEAR_BF0_LIFETIME(x)			((x) & (~BITS_BF0_LIFETIME))
#define BIT_GET_BF0_LIFETIME(x)			(((x) >> BIT_SHIFT_BF0_LIFETIME) & BIT_MASK_BF0_LIFETIME)
#define BIT_SET_BF0_LIFETIME(x, v)			(BIT_CLEAR_BF0_LIFETIME(x) | BIT_BF0_LIFETIME(v))

/* 2 REG_BF1_TIME_SETTING			(Offset 0x142C) */

#define BIT_BF1_TIMER_SET				BIT(31)
#define BIT_BF1_TIMER_CLR				BIT(30)
#define BIT_EN_BF1_UPDATE				BIT(29)
#define BIT_EN_BF1_TIMER				BIT(28)

#define BIT_SHIFT_BF1_PRETIME_OVER			16
#define BIT_MASK_BF1_PRETIME_OVER			0xfff
#define BIT_BF1_PRETIME_OVER(x)			(((x) & BIT_MASK_BF1_PRETIME_OVER) << BIT_SHIFT_BF1_PRETIME_OVER)
#define BITS_BF1_PRETIME_OVER				(BIT_MASK_BF1_PRETIME_OVER << BIT_SHIFT_BF1_PRETIME_OVER)
#define BIT_CLEAR_BF1_PRETIME_OVER(x)			((x) & (~BITS_BF1_PRETIME_OVER))
#define BIT_GET_BF1_PRETIME_OVER(x)			(((x) >> BIT_SHIFT_BF1_PRETIME_OVER) & BIT_MASK_BF1_PRETIME_OVER)
#define BIT_SET_BF1_PRETIME_OVER(x, v)			(BIT_CLEAR_BF1_PRETIME_OVER(x) | BIT_BF1_PRETIME_OVER(v))

#define BIT_SHIFT_BF1_LIFETIME				0
#define BIT_MASK_BF1_LIFETIME				0xffff
#define BIT_BF1_LIFETIME(x)				(((x) & BIT_MASK_BF1_LIFETIME) << BIT_SHIFT_BF1_LIFETIME)
#define BITS_BF1_LIFETIME				(BIT_MASK_BF1_LIFETIME << BIT_SHIFT_BF1_LIFETIME)
#define BIT_CLEAR_BF1_LIFETIME(x)			((x) & (~BITS_BF1_LIFETIME))
#define BIT_GET_BF1_LIFETIME(x)			(((x) >> BIT_SHIFT_BF1_LIFETIME) & BIT_MASK_BF1_LIFETIME)
#define BIT_SET_BF1_LIFETIME(x, v)			(BIT_CLEAR_BF1_LIFETIME(x) | BIT_BF1_LIFETIME(v))

/* 2 REG_BF_TIMEOUT_EN			(Offset 0x1430) */

#define BIT_EN_VHT_LDPC				BIT(9)
#define BIT_EN_HT_LDPC					BIT(8)
#define BIT_BF1_TIMEOUT_EN				BIT(1)
#define BIT_BF0_TIMEOUT_EN				BIT(0)

/* 2 REG_MACID_RELEASE0			(Offset 0x1434) */

#define BIT_SHIFT_MACID31_0_RELEASE			0
#define BIT_MASK_MACID31_0_RELEASE			0xffffffffL
#define BIT_MACID31_0_RELEASE(x)			(((x) & BIT_MASK_MACID31_0_RELEASE) << BIT_SHIFT_MACID31_0_RELEASE)
#define BITS_MACID31_0_RELEASE				(BIT_MASK_MACID31_0_RELEASE << BIT_SHIFT_MACID31_0_RELEASE)
#define BIT_CLEAR_MACID31_0_RELEASE(x)			((x) & (~BITS_MACID31_0_RELEASE))
#define BIT_GET_MACID31_0_RELEASE(x)			(((x) >> BIT_SHIFT_MACID31_0_RELEASE) & BIT_MASK_MACID31_0_RELEASE)
#define BIT_SET_MACID31_0_RELEASE(x, v)		(BIT_CLEAR_MACID31_0_RELEASE(x) | BIT_MACID31_0_RELEASE(v))

/* 2 REG_MACID_RELEASE1			(Offset 0x1438) */

#define BIT_SHIFT_MACID63_32_RELEASE			0
#define BIT_MASK_MACID63_32_RELEASE			0xffffffffL
#define BIT_MACID63_32_RELEASE(x)			(((x) & BIT_MASK_MACID63_32_RELEASE) << BIT_SHIFT_MACID63_32_RELEASE)
#define BITS_MACID63_32_RELEASE			(BIT_MASK_MACID63_32_RELEASE << BIT_SHIFT_MACID63_32_RELEASE)
#define BIT_CLEAR_MACID63_32_RELEASE(x)		((x) & (~BITS_MACID63_32_RELEASE))
#define BIT_GET_MACID63_32_RELEASE(x)			(((x) >> BIT_SHIFT_MACID63_32_RELEASE) & BIT_MASK_MACID63_32_RELEASE)
#define BIT_SET_MACID63_32_RELEASE(x, v)		(BIT_CLEAR_MACID63_32_RELEASE(x) | BIT_MACID63_32_RELEASE(v))

/* 2 REG_MACID_RELEASE2			(Offset 0x143C) */

#define BIT_SHIFT_MACID95_64_RELEASE			0
#define BIT_MASK_MACID95_64_RELEASE			0xffffffffL
#define BIT_MACID95_64_RELEASE(x)			(((x) & BIT_MASK_MACID95_64_RELEASE) << BIT_SHIFT_MACID95_64_RELEASE)
#define BITS_MACID95_64_RELEASE			(BIT_MASK_MACID95_64_RELEASE << BIT_SHIFT_MACID95_64_RELEASE)
#define BIT_CLEAR_MACID95_64_RELEASE(x)		((x) & (~BITS_MACID95_64_RELEASE))
#define BIT_GET_MACID95_64_RELEASE(x)			(((x) >> BIT_SHIFT_MACID95_64_RELEASE) & BIT_MASK_MACID95_64_RELEASE)
#define BIT_SET_MACID95_64_RELEASE(x, v)		(BIT_CLEAR_MACID95_64_RELEASE(x) | BIT_MACID95_64_RELEASE(v))

/* 2 REG_MACID_RELEASE3			(Offset 0x1440) */

#define BIT_SHIFT_MACID127_96_RELEASE			0
#define BIT_MASK_MACID127_96_RELEASE			0xffffffffL
#define BIT_MACID127_96_RELEASE(x)			(((x) & BIT_MASK_MACID127_96_RELEASE) << BIT_SHIFT_MACID127_96_RELEASE)
#define BITS_MACID127_96_RELEASE			(BIT_MASK_MACID127_96_RELEASE << BIT_SHIFT_MACID127_96_RELEASE)
#define BIT_CLEAR_MACID127_96_RELEASE(x)		((x) & (~BITS_MACID127_96_RELEASE))
#define BIT_GET_MACID127_96_RELEASE(x)			(((x) >> BIT_SHIFT_MACID127_96_RELEASE) & BIT_MASK_MACID127_96_RELEASE)
#define BIT_SET_MACID127_96_RELEASE(x, v)		(BIT_CLEAR_MACID127_96_RELEASE(x) | BIT_MACID127_96_RELEASE(v))

/* 2 REG_MACID_RELEASE_SETTING		(Offset 0x1444) */

#define BIT_MACID_VALUE				BIT(7)

#define BIT_SHIFT_MACID_OFFSET				0
#define BIT_MASK_MACID_OFFSET				0x7f
#define BIT_MACID_OFFSET(x)				(((x) & BIT_MASK_MACID_OFFSET) << BIT_SHIFT_MACID_OFFSET)
#define BITS_MACID_OFFSET				(BIT_MASK_MACID_OFFSET << BIT_SHIFT_MACID_OFFSET)
#define BIT_CLEAR_MACID_OFFSET(x)			((x) & (~BITS_MACID_OFFSET))
#define BIT_GET_MACID_OFFSET(x)			(((x) >> BIT_SHIFT_MACID_OFFSET) & BIT_MASK_MACID_OFFSET)
#define BIT_SET_MACID_OFFSET(x, v)			(BIT_CLEAR_MACID_OFFSET(x) | BIT_MACID_OFFSET(v))

/* 2 REG_FAST_EDCA_VOVI_SETTING		(Offset 0x1448) */

#define BIT_SHIFT_VI_FAST_EDCA_TO			24
#define BIT_MASK_VI_FAST_EDCA_TO			0xff
#define BIT_VI_FAST_EDCA_TO(x)				(((x) & BIT_MASK_VI_FAST_EDCA_TO) << BIT_SHIFT_VI_FAST_EDCA_TO)
#define BITS_VI_FAST_EDCA_TO				(BIT_MASK_VI_FAST_EDCA_TO << BIT_SHIFT_VI_FAST_EDCA_TO)
#define BIT_CLEAR_VI_FAST_EDCA_TO(x)			((x) & (~BITS_VI_FAST_EDCA_TO))
#define BIT_GET_VI_FAST_EDCA_TO(x)			(((x) >> BIT_SHIFT_VI_FAST_EDCA_TO) & BIT_MASK_VI_FAST_EDCA_TO)
#define BIT_SET_VI_FAST_EDCA_TO(x, v)			(BIT_CLEAR_VI_FAST_EDCA_TO(x) | BIT_VI_FAST_EDCA_TO(v))

#define BIT_VI_THRESHOLD_SEL				BIT(23)

#define BIT_SHIFT_VI_FAST_EDCA_PKT_TH			16
#define BIT_MASK_VI_FAST_EDCA_PKT_TH			0x7f
#define BIT_VI_FAST_EDCA_PKT_TH(x)			(((x) & BIT_MASK_VI_FAST_EDCA_PKT_TH) << BIT_SHIFT_VI_FAST_EDCA_PKT_TH)
#define BITS_VI_FAST_EDCA_PKT_TH			(BIT_MASK_VI_FAST_EDCA_PKT_TH << BIT_SHIFT_VI_FAST_EDCA_PKT_TH)
#define BIT_CLEAR_VI_FAST_EDCA_PKT_TH(x)		((x) & (~BITS_VI_FAST_EDCA_PKT_TH))
#define BIT_GET_VI_FAST_EDCA_PKT_TH(x)			(((x) >> BIT_SHIFT_VI_FAST_EDCA_PKT_TH) & BIT_MASK_VI_FAST_EDCA_PKT_TH)
#define BIT_SET_VI_FAST_EDCA_PKT_TH(x, v)		(BIT_CLEAR_VI_FAST_EDCA_PKT_TH(x) | BIT_VI_FAST_EDCA_PKT_TH(v))

#define BIT_SHIFT_VO_FAST_EDCA_TO			8
#define BIT_MASK_VO_FAST_EDCA_TO			0xff
#define BIT_VO_FAST_EDCA_TO(x)				(((x) & BIT_MASK_VO_FAST_EDCA_TO) << BIT_SHIFT_VO_FAST_EDCA_TO)
#define BITS_VO_FAST_EDCA_TO				(BIT_MASK_VO_FAST_EDCA_TO << BIT_SHIFT_VO_FAST_EDCA_TO)
#define BIT_CLEAR_VO_FAST_EDCA_TO(x)			((x) & (~BITS_VO_FAST_EDCA_TO))
#define BIT_GET_VO_FAST_EDCA_TO(x)			(((x) >> BIT_SHIFT_VO_FAST_EDCA_TO) & BIT_MASK_VO_FAST_EDCA_TO)
#define BIT_SET_VO_FAST_EDCA_TO(x, v)			(BIT_CLEAR_VO_FAST_EDCA_TO(x) | BIT_VO_FAST_EDCA_TO(v))

#define BIT_VO_THRESHOLD_SEL				BIT(7)

#define BIT_SHIFT_VO_FAST_EDCA_PKT_TH			0
#define BIT_MASK_VO_FAST_EDCA_PKT_TH			0x7f
#define BIT_VO_FAST_EDCA_PKT_TH(x)			(((x) & BIT_MASK_VO_FAST_EDCA_PKT_TH) << BIT_SHIFT_VO_FAST_EDCA_PKT_TH)
#define BITS_VO_FAST_EDCA_PKT_TH			(BIT_MASK_VO_FAST_EDCA_PKT_TH << BIT_SHIFT_VO_FAST_EDCA_PKT_TH)
#define BIT_CLEAR_VO_FAST_EDCA_PKT_TH(x)		((x) & (~BITS_VO_FAST_EDCA_PKT_TH))
#define BIT_GET_VO_FAST_EDCA_PKT_TH(x)			(((x) >> BIT_SHIFT_VO_FAST_EDCA_PKT_TH) & BIT_MASK_VO_FAST_EDCA_PKT_TH)
#define BIT_SET_VO_FAST_EDCA_PKT_TH(x, v)		(BIT_CLEAR_VO_FAST_EDCA_PKT_TH(x) | BIT_VO_FAST_EDCA_PKT_TH(v))

/* 2 REG_FAST_EDCA_BEBK_SETTING		(Offset 0x144C) */

#define BIT_SHIFT_BK_FAST_EDCA_TO			24
#define BIT_MASK_BK_FAST_EDCA_TO			0xff
#define BIT_BK_FAST_EDCA_TO(x)				(((x) & BIT_MASK_BK_FAST_EDCA_TO) << BIT_SHIFT_BK_FAST_EDCA_TO)
#define BITS_BK_FAST_EDCA_TO				(BIT_MASK_BK_FAST_EDCA_TO << BIT_SHIFT_BK_FAST_EDCA_TO)
#define BIT_CLEAR_BK_FAST_EDCA_TO(x)			((x) & (~BITS_BK_FAST_EDCA_TO))
#define BIT_GET_BK_FAST_EDCA_TO(x)			(((x) >> BIT_SHIFT_BK_FAST_EDCA_TO) & BIT_MASK_BK_FAST_EDCA_TO)
#define BIT_SET_BK_FAST_EDCA_TO(x, v)			(BIT_CLEAR_BK_FAST_EDCA_TO(x) | BIT_BK_FAST_EDCA_TO(v))

#define BIT_BK_THRESHOLD_SEL				BIT(23)

#define BIT_SHIFT_BK_FAST_EDCA_PKT_TH			16
#define BIT_MASK_BK_FAST_EDCA_PKT_TH			0x7f
#define BIT_BK_FAST_EDCA_PKT_TH(x)			(((x) & BIT_MASK_BK_FAST_EDCA_PKT_TH) << BIT_SHIFT_BK_FAST_EDCA_PKT_TH)
#define BITS_BK_FAST_EDCA_PKT_TH			(BIT_MASK_BK_FAST_EDCA_PKT_TH << BIT_SHIFT_BK_FAST_EDCA_PKT_TH)
#define BIT_CLEAR_BK_FAST_EDCA_PKT_TH(x)		((x) & (~BITS_BK_FAST_EDCA_PKT_TH))
#define BIT_GET_BK_FAST_EDCA_PKT_TH(x)			(((x) >> BIT_SHIFT_BK_FAST_EDCA_PKT_TH) & BIT_MASK_BK_FAST_EDCA_PKT_TH)
#define BIT_SET_BK_FAST_EDCA_PKT_TH(x, v)		(BIT_CLEAR_BK_FAST_EDCA_PKT_TH(x) | BIT_BK_FAST_EDCA_PKT_TH(v))

#define BIT_SHIFT_BE_FAST_EDCA_TO			8
#define BIT_MASK_BE_FAST_EDCA_TO			0xff
#define BIT_BE_FAST_EDCA_TO(x)				(((x) & BIT_MASK_BE_FAST_EDCA_TO) << BIT_SHIFT_BE_FAST_EDCA_TO)
#define BITS_BE_FAST_EDCA_TO				(BIT_MASK_BE_FAST_EDCA_TO << BIT_SHIFT_BE_FAST_EDCA_TO)
#define BIT_CLEAR_BE_FAST_EDCA_TO(x)			((x) & (~BITS_BE_FAST_EDCA_TO))
#define BIT_GET_BE_FAST_EDCA_TO(x)			(((x) >> BIT_SHIFT_BE_FAST_EDCA_TO) & BIT_MASK_BE_FAST_EDCA_TO)
#define BIT_SET_BE_FAST_EDCA_TO(x, v)			(BIT_CLEAR_BE_FAST_EDCA_TO(x) | BIT_BE_FAST_EDCA_TO(v))

#define BIT_BE_THRESHOLD_SEL				BIT(7)

#define BIT_SHIFT_BE_FAST_EDCA_PKT_TH			0
#define BIT_MASK_BE_FAST_EDCA_PKT_TH			0x7f
#define BIT_BE_FAST_EDCA_PKT_TH(x)			(((x) & BIT_MASK_BE_FAST_EDCA_PKT_TH) << BIT_SHIFT_BE_FAST_EDCA_PKT_TH)
#define BITS_BE_FAST_EDCA_PKT_TH			(BIT_MASK_BE_FAST_EDCA_PKT_TH << BIT_SHIFT_BE_FAST_EDCA_PKT_TH)
#define BIT_CLEAR_BE_FAST_EDCA_PKT_TH(x)		((x) & (~BITS_BE_FAST_EDCA_PKT_TH))
#define BIT_GET_BE_FAST_EDCA_PKT_TH(x)			(((x) >> BIT_SHIFT_BE_FAST_EDCA_PKT_TH) & BIT_MASK_BE_FAST_EDCA_PKT_TH)
#define BIT_SET_BE_FAST_EDCA_PKT_TH(x, v)		(BIT_CLEAR_BE_FAST_EDCA_PKT_TH(x) | BIT_BE_FAST_EDCA_PKT_TH(v))

/* 2 REG_MACID_DROP0				(Offset 0x1450) */

#define BIT_SHIFT_MACID31_0_DROP			0
#define BIT_MASK_MACID31_0_DROP			0xffffffffL
#define BIT_MACID31_0_DROP(x)				(((x) & BIT_MASK_MACID31_0_DROP) << BIT_SHIFT_MACID31_0_DROP)
#define BITS_MACID31_0_DROP				(BIT_MASK_MACID31_0_DROP << BIT_SHIFT_MACID31_0_DROP)
#define BIT_CLEAR_MACID31_0_DROP(x)			((x) & (~BITS_MACID31_0_DROP))
#define BIT_GET_MACID31_0_DROP(x)			(((x) >> BIT_SHIFT_MACID31_0_DROP) & BIT_MASK_MACID31_0_DROP)
#define BIT_SET_MACID31_0_DROP(x, v)			(BIT_CLEAR_MACID31_0_DROP(x) | BIT_MACID31_0_DROP(v))

/* 2 REG_MACID_DROP1				(Offset 0x1454) */

#define BIT_SHIFT_MACID63_32_DROP			0
#define BIT_MASK_MACID63_32_DROP			0xffffffffL
#define BIT_MACID63_32_DROP(x)				(((x) & BIT_MASK_MACID63_32_DROP) << BIT_SHIFT_MACID63_32_DROP)
#define BITS_MACID63_32_DROP				(BIT_MASK_MACID63_32_DROP << BIT_SHIFT_MACID63_32_DROP)
#define BIT_CLEAR_MACID63_32_DROP(x)			((x) & (~BITS_MACID63_32_DROP))
#define BIT_GET_MACID63_32_DROP(x)			(((x) >> BIT_SHIFT_MACID63_32_DROP) & BIT_MASK_MACID63_32_DROP)
#define BIT_SET_MACID63_32_DROP(x, v)			(BIT_CLEAR_MACID63_32_DROP(x) | BIT_MACID63_32_DROP(v))

/* 2 REG_MACID_DROP2				(Offset 0x1458) */

#define BIT_SHIFT_MACID95_64_DROP			0
#define BIT_MASK_MACID95_64_DROP			0xffffffffL
#define BIT_MACID95_64_DROP(x)				(((x) & BIT_MASK_MACID95_64_DROP) << BIT_SHIFT_MACID95_64_DROP)
#define BITS_MACID95_64_DROP				(BIT_MASK_MACID95_64_DROP << BIT_SHIFT_MACID95_64_DROP)
#define BIT_CLEAR_MACID95_64_DROP(x)			((x) & (~BITS_MACID95_64_DROP))
#define BIT_GET_MACID95_64_DROP(x)			(((x) >> BIT_SHIFT_MACID95_64_DROP) & BIT_MASK_MACID95_64_DROP)
#define BIT_SET_MACID95_64_DROP(x, v)			(BIT_CLEAR_MACID95_64_DROP(x) | BIT_MACID95_64_DROP(v))

/* 2 REG_MACID_DROP3				(Offset 0x145C) */

#define BIT_SHIFT_MACID127_96_DROP			0
#define BIT_MASK_MACID127_96_DROP			0xffffffffL
#define BIT_MACID127_96_DROP(x)			(((x) & BIT_MASK_MACID127_96_DROP) << BIT_SHIFT_MACID127_96_DROP)
#define BITS_MACID127_96_DROP				(BIT_MASK_MACID127_96_DROP << BIT_SHIFT_MACID127_96_DROP)
#define BIT_CLEAR_MACID127_96_DROP(x)			((x) & (~BITS_MACID127_96_DROP))
#define BIT_GET_MACID127_96_DROP(x)			(((x) >> BIT_SHIFT_MACID127_96_DROP) & BIT_MASK_MACID127_96_DROP)
#define BIT_SET_MACID127_96_DROP(x, v)			(BIT_CLEAR_MACID127_96_DROP(x) | BIT_MACID127_96_DROP(v))

/* 2 REG_R_MACID_RELEASE_SUCCESS_0		(Offset 0x1460) */

#define BIT_SHIFT_R_MACID_RELEASE_SUCCESS_0		0
#define BIT_MASK_R_MACID_RELEASE_SUCCESS_0		0xffffffffL
#define BIT_R_MACID_RELEASE_SUCCESS_0(x)		(((x) & BIT_MASK_R_MACID_RELEASE_SUCCESS_0) << BIT_SHIFT_R_MACID_RELEASE_SUCCESS_0)
#define BITS_R_MACID_RELEASE_SUCCESS_0			(BIT_MASK_R_MACID_RELEASE_SUCCESS_0 << BIT_SHIFT_R_MACID_RELEASE_SUCCESS_0)
#define BIT_CLEAR_R_MACID_RELEASE_SUCCESS_0(x)	((x) & (~BITS_R_MACID_RELEASE_SUCCESS_0))
#define BIT_GET_R_MACID_RELEASE_SUCCESS_0(x)		(((x) >> BIT_SHIFT_R_MACID_RELEASE_SUCCESS_0) & BIT_MASK_R_MACID_RELEASE_SUCCESS_0)
#define BIT_SET_R_MACID_RELEASE_SUCCESS_0(x, v)	(BIT_CLEAR_R_MACID_RELEASE_SUCCESS_0(x) | BIT_R_MACID_RELEASE_SUCCESS_0(v))

/* 2 REG_R_MACID_RELEASE_SUCCESS_1		(Offset 0x1464) */

#define BIT_SHIFT_R_MACID_RELEASE_SUCCESS_1		0
#define BIT_MASK_R_MACID_RELEASE_SUCCESS_1		0xffffffffL
#define BIT_R_MACID_RELEASE_SUCCESS_1(x)		(((x) & BIT_MASK_R_MACID_RELEASE_SUCCESS_1) << BIT_SHIFT_R_MACID_RELEASE_SUCCESS_1)
#define BITS_R_MACID_RELEASE_SUCCESS_1			(BIT_MASK_R_MACID_RELEASE_SUCCESS_1 << BIT_SHIFT_R_MACID_RELEASE_SUCCESS_1)
#define BIT_CLEAR_R_MACID_RELEASE_SUCCESS_1(x)	((x) & (~BITS_R_MACID_RELEASE_SUCCESS_1))
#define BIT_GET_R_MACID_RELEASE_SUCCESS_1(x)		(((x) >> BIT_SHIFT_R_MACID_RELEASE_SUCCESS_1) & BIT_MASK_R_MACID_RELEASE_SUCCESS_1)
#define BIT_SET_R_MACID_RELEASE_SUCCESS_1(x, v)	(BIT_CLEAR_R_MACID_RELEASE_SUCCESS_1(x) | BIT_R_MACID_RELEASE_SUCCESS_1(v))

/* 2 REG_R_MACID_RELEASE_SUCCESS_2		(Offset 0x1468) */

#define BIT_SHIFT_R_MACID_RELEASE_SUCCESS_2		0
#define BIT_MASK_R_MACID_RELEASE_SUCCESS_2		0xffffffffL
#define BIT_R_MACID_RELEASE_SUCCESS_2(x)		(((x) & BIT_MASK_R_MACID_RELEASE_SUCCESS_2) << BIT_SHIFT_R_MACID_RELEASE_SUCCESS_2)
#define BITS_R_MACID_RELEASE_SUCCESS_2			(BIT_MASK_R_MACID_RELEASE_SUCCESS_2 << BIT_SHIFT_R_MACID_RELEASE_SUCCESS_2)
#define BIT_CLEAR_R_MACID_RELEASE_SUCCESS_2(x)	((x) & (~BITS_R_MACID_RELEASE_SUCCESS_2))
#define BIT_GET_R_MACID_RELEASE_SUCCESS_2(x)		(((x) >> BIT_SHIFT_R_MACID_RELEASE_SUCCESS_2) & BIT_MASK_R_MACID_RELEASE_SUCCESS_2)
#define BIT_SET_R_MACID_RELEASE_SUCCESS_2(x, v)	(BIT_CLEAR_R_MACID_RELEASE_SUCCESS_2(x) | BIT_R_MACID_RELEASE_SUCCESS_2(v))

/* 2 REG_R_MACID_RELEASE_SUCCESS_3		(Offset 0x146C) */

#define BIT_SHIFT_R_MACID_RELEASE_SUCCESS_3		0
#define BIT_MASK_R_MACID_RELEASE_SUCCESS_3		0xffffffffL
#define BIT_R_MACID_RELEASE_SUCCESS_3(x)		(((x) & BIT_MASK_R_MACID_RELEASE_SUCCESS_3) << BIT_SHIFT_R_MACID_RELEASE_SUCCESS_3)
#define BITS_R_MACID_RELEASE_SUCCESS_3			(BIT_MASK_R_MACID_RELEASE_SUCCESS_3 << BIT_SHIFT_R_MACID_RELEASE_SUCCESS_3)
#define BIT_CLEAR_R_MACID_RELEASE_SUCCESS_3(x)	((x) & (~BITS_R_MACID_RELEASE_SUCCESS_3))
#define BIT_GET_R_MACID_RELEASE_SUCCESS_3(x)		(((x) >> BIT_SHIFT_R_MACID_RELEASE_SUCCESS_3) & BIT_MASK_R_MACID_RELEASE_SUCCESS_3)
#define BIT_SET_R_MACID_RELEASE_SUCCESS_3(x, v)	(BIT_CLEAR_R_MACID_RELEASE_SUCCESS_3(x) | BIT_R_MACID_RELEASE_SUCCESS_3(v))

/* 2 REG_MGQ_FIFO_CTRL			(Offset 0x1470) */

#define BIT_MGQ_FIFO_EN				BIT(31)

#define BIT_SHIFT_MGQ_FIFO_PG_SIZE			28
#define BIT_MASK_MGQ_FIFO_PG_SIZE			0x7
#define BIT_MGQ_FIFO_PG_SIZE(x)			(((x) & BIT_MASK_MGQ_FIFO_PG_SIZE) << BIT_SHIFT_MGQ_FIFO_PG_SIZE)
#define BITS_MGQ_FIFO_PG_SIZE				(BIT_MASK_MGQ_FIFO_PG_SIZE << BIT_SHIFT_MGQ_FIFO_PG_SIZE)
#define BIT_CLEAR_MGQ_FIFO_PG_SIZE(x)			((x) & (~BITS_MGQ_FIFO_PG_SIZE))
#define BIT_GET_MGQ_FIFO_PG_SIZE(x)			(((x) >> BIT_SHIFT_MGQ_FIFO_PG_SIZE) & BIT_MASK_MGQ_FIFO_PG_SIZE)
#define BIT_SET_MGQ_FIFO_PG_SIZE(x, v)			(BIT_CLEAR_MGQ_FIFO_PG_SIZE(x) | BIT_MGQ_FIFO_PG_SIZE(v))

#define BIT_SHIFT_MGQ_FIFO_START_PG			16
#define BIT_MASK_MGQ_FIFO_START_PG			0xfff
#define BIT_MGQ_FIFO_START_PG(x)			(((x) & BIT_MASK_MGQ_FIFO_START_PG) << BIT_SHIFT_MGQ_FIFO_START_PG)
#define BITS_MGQ_FIFO_START_PG				(BIT_MASK_MGQ_FIFO_START_PG << BIT_SHIFT_MGQ_FIFO_START_PG)
#define BIT_CLEAR_MGQ_FIFO_START_PG(x)			((x) & (~BITS_MGQ_FIFO_START_PG))
#define BIT_GET_MGQ_FIFO_START_PG(x)			(((x) >> BIT_SHIFT_MGQ_FIFO_START_PG) & BIT_MASK_MGQ_FIFO_START_PG)
#define BIT_SET_MGQ_FIFO_START_PG(x, v)		(BIT_CLEAR_MGQ_FIFO_START_PG(x) | BIT_MGQ_FIFO_START_PG(v))

#define BIT_SHIFT_MGQ_FIFO_SIZE			14
#define BIT_MASK_MGQ_FIFO_SIZE				0x3
#define BIT_MGQ_FIFO_SIZE(x)				(((x) & BIT_MASK_MGQ_FIFO_SIZE) << BIT_SHIFT_MGQ_FIFO_SIZE)
#define BITS_MGQ_FIFO_SIZE				(BIT_MASK_MGQ_FIFO_SIZE << BIT_SHIFT_MGQ_FIFO_SIZE)
#define BIT_CLEAR_MGQ_FIFO_SIZE(x)			((x) & (~BITS_MGQ_FIFO_SIZE))
#define BIT_GET_MGQ_FIFO_SIZE(x)			(((x) >> BIT_SHIFT_MGQ_FIFO_SIZE) & BIT_MASK_MGQ_FIFO_SIZE)
#define BIT_SET_MGQ_FIFO_SIZE(x, v)			(BIT_CLEAR_MGQ_FIFO_SIZE(x) | BIT_MGQ_FIFO_SIZE(v))

#define BIT_MGQ_FIFO_PAUSE				BIT(13)

#define BIT_SHIFT_MGQ_FIFO_RPTR			8
#define BIT_MASK_MGQ_FIFO_RPTR				0x1f
#define BIT_MGQ_FIFO_RPTR(x)				(((x) & BIT_MASK_MGQ_FIFO_RPTR) << BIT_SHIFT_MGQ_FIFO_RPTR)
#define BITS_MGQ_FIFO_RPTR				(BIT_MASK_MGQ_FIFO_RPTR << BIT_SHIFT_MGQ_FIFO_RPTR)
#define BIT_CLEAR_MGQ_FIFO_RPTR(x)			((x) & (~BITS_MGQ_FIFO_RPTR))
#define BIT_GET_MGQ_FIFO_RPTR(x)			(((x) >> BIT_SHIFT_MGQ_FIFO_RPTR) & BIT_MASK_MGQ_FIFO_RPTR)
#define BIT_SET_MGQ_FIFO_RPTR(x, v)			(BIT_CLEAR_MGQ_FIFO_RPTR(x) | BIT_MGQ_FIFO_RPTR(v))

#define BIT_MGQ_FIFO_OV				BIT(7)
#define BIT_MGQ_FIFO_WPTR_ERR				BIT(6)
#define BIT_CPUM_LIFETIME_EN				BIT(5)

#define BIT_SHIFT_MGQ_FIFO_WPTR			0
#define BIT_MASK_MGQ_FIFO_WPTR				0x1f
#define BIT_MGQ_FIFO_WPTR(x)				(((x) & BIT_MASK_MGQ_FIFO_WPTR) << BIT_SHIFT_MGQ_FIFO_WPTR)
#define BITS_MGQ_FIFO_WPTR				(BIT_MASK_MGQ_FIFO_WPTR << BIT_SHIFT_MGQ_FIFO_WPTR)
#define BIT_CLEAR_MGQ_FIFO_WPTR(x)			((x) & (~BITS_MGQ_FIFO_WPTR))
#define BIT_GET_MGQ_FIFO_WPTR(x)			(((x) >> BIT_SHIFT_MGQ_FIFO_WPTR) & BIT_MASK_MGQ_FIFO_WPTR)
#define BIT_SET_MGQ_FIFO_WPTR(x, v)			(BIT_CLEAR_MGQ_FIFO_WPTR(x) | BIT_MGQ_FIFO_WPTR(v))

/* 2 REG_MGQ_FIFO_RELEASE_INT		(Offset 0x1474) */

#define BIT_SHIFT_MGQ_FIFO_INT_FLAG			16
#define BIT_MASK_MGQ_FIFO_INT_FLAG			0xffff
#define BIT_MGQ_FIFO_INT_FLAG(x)			(((x) & BIT_MASK_MGQ_FIFO_INT_FLAG) << BIT_SHIFT_MGQ_FIFO_INT_FLAG)
#define BITS_MGQ_FIFO_INT_FLAG				(BIT_MASK_MGQ_FIFO_INT_FLAG << BIT_SHIFT_MGQ_FIFO_INT_FLAG)
#define BIT_CLEAR_MGQ_FIFO_INT_FLAG(x)			((x) & (~BITS_MGQ_FIFO_INT_FLAG))
#define BIT_GET_MGQ_FIFO_INT_FLAG(x)			(((x) >> BIT_SHIFT_MGQ_FIFO_INT_FLAG) & BIT_MASK_MGQ_FIFO_INT_FLAG)
#define BIT_SET_MGQ_FIFO_INT_FLAG(x, v)		(BIT_CLEAR_MGQ_FIFO_INT_FLAG(x) | BIT_MGQ_FIFO_INT_FLAG(v))

#define BIT_SHIFT_MGQ_FIFO_INT_MASK			0
#define BIT_MASK_MGQ_FIFO_INT_MASK			0xffff
#define BIT_MGQ_FIFO_INT_MASK(x)			(((x) & BIT_MASK_MGQ_FIFO_INT_MASK) << BIT_SHIFT_MGQ_FIFO_INT_MASK)
#define BITS_MGQ_FIFO_INT_MASK				(BIT_MASK_MGQ_FIFO_INT_MASK << BIT_SHIFT_MGQ_FIFO_INT_MASK)
#define BIT_CLEAR_MGQ_FIFO_INT_MASK(x)			((x) & (~BITS_MGQ_FIFO_INT_MASK))
#define BIT_GET_MGQ_FIFO_INT_MASK(x)			(((x) >> BIT_SHIFT_MGQ_FIFO_INT_MASK) & BIT_MASK_MGQ_FIFO_INT_MASK)
#define BIT_SET_MGQ_FIFO_INT_MASK(x, v)		(BIT_CLEAR_MGQ_FIFO_INT_MASK(x) | BIT_MGQ_FIFO_INT_MASK(v))

/* 2 REG_MGQ_FIFO_LIFETIME_VALID		(Offset 0x1478) */

#define BIT_SHIFT_MGQ_FIFO_LIFETIME			16
#define BIT_MASK_MGQ_FIFO_LIFETIME			0xffff
#define BIT_MGQ_FIFO_LIFETIME(x)			(((x) & BIT_MASK_MGQ_FIFO_LIFETIME) << BIT_SHIFT_MGQ_FIFO_LIFETIME)
#define BITS_MGQ_FIFO_LIFETIME				(BIT_MASK_MGQ_FIFO_LIFETIME << BIT_SHIFT_MGQ_FIFO_LIFETIME)
#define BIT_CLEAR_MGQ_FIFO_LIFETIME(x)			((x) & (~BITS_MGQ_FIFO_LIFETIME))
#define BIT_GET_MGQ_FIFO_LIFETIME(x)			(((x) >> BIT_SHIFT_MGQ_FIFO_LIFETIME) & BIT_MASK_MGQ_FIFO_LIFETIME)
#define BIT_SET_MGQ_FIFO_LIFETIME(x, v)		(BIT_CLEAR_MGQ_FIFO_LIFETIME(x) | BIT_MGQ_FIFO_LIFETIME(v))

#define BIT_SHIFT_MGQ_FIFO_VALID_CLR_1			8
#define BIT_MASK_MGQ_FIFO_VALID_CLR_1			0xff
#define BIT_MGQ_FIFO_VALID_CLR_1(x)			(((x) & BIT_MASK_MGQ_FIFO_VALID_CLR_1) << BIT_SHIFT_MGQ_FIFO_VALID_CLR_1)
#define BITS_MGQ_FIFO_VALID_CLR_1			(BIT_MASK_MGQ_FIFO_VALID_CLR_1 << BIT_SHIFT_MGQ_FIFO_VALID_CLR_1)
#define BIT_CLEAR_MGQ_FIFO_VALID_CLR_1(x)		((x) & (~BITS_MGQ_FIFO_VALID_CLR_1))
#define BIT_GET_MGQ_FIFO_VALID_CLR_1(x)		(((x) >> BIT_SHIFT_MGQ_FIFO_VALID_CLR_1) & BIT_MASK_MGQ_FIFO_VALID_CLR_1)
#define BIT_SET_MGQ_FIFO_VALID_CLR_1(x, v)		(BIT_CLEAR_MGQ_FIFO_VALID_CLR_1(x) | BIT_MGQ_FIFO_VALID_CLR_1(v))

#define BIT_SHIFT_MGQ_FIFO_VALID_CLR_0			0
#define BIT_MASK_MGQ_FIFO_VALID_CLR_0			0xff
#define BIT_MGQ_FIFO_VALID_CLR_0(x)			(((x) & BIT_MASK_MGQ_FIFO_VALID_CLR_0) << BIT_SHIFT_MGQ_FIFO_VALID_CLR_0)
#define BITS_MGQ_FIFO_VALID_CLR_0			(BIT_MASK_MGQ_FIFO_VALID_CLR_0 << BIT_SHIFT_MGQ_FIFO_VALID_CLR_0)
#define BIT_CLEAR_MGQ_FIFO_VALID_CLR_0(x)		((x) & (~BITS_MGQ_FIFO_VALID_CLR_0))
#define BIT_GET_MGQ_FIFO_VALID_CLR_0(x)		(((x) >> BIT_SHIFT_MGQ_FIFO_VALID_CLR_0) & BIT_MASK_MGQ_FIFO_VALID_CLR_0)
#define BIT_SET_MGQ_FIFO_VALID_CLR_0(x, v)		(BIT_CLEAR_MGQ_FIFO_VALID_CLR_0(x) | BIT_MGQ_FIFO_VALID_CLR_0(v))

/* 2 REG_R_MACID_RELEASE_SUCCESS_CLEAR_OFFSET (Offset 0x147C) */

#define BIT_SHIFT_RRSR_CCK				16
#define BIT_MASK_RRSR_CCK				0xf
#define BIT_RRSR_CCK(x)				(((x) & BIT_MASK_RRSR_CCK) << BIT_SHIFT_RRSR_CCK)
#define BITS_RRSR_CCK					(BIT_MASK_RRSR_CCK << BIT_SHIFT_RRSR_CCK)
#define BIT_CLEAR_RRSR_CCK(x)				((x) & (~BITS_RRSR_CCK))
#define BIT_GET_RRSR_CCK(x)				(((x) >> BIT_SHIFT_RRSR_CCK) & BIT_MASK_RRSR_CCK)
#define BIT_SET_RRSR_CCK(x, v)				(BIT_CLEAR_RRSR_CCK(x) | BIT_RRSR_CCK(v))

#define BIT_SHIFT_RRSR_RATE_EN				8
#define BIT_MASK_RRSR_RATE_EN				0xf
#define BIT_RRSR_RATE_EN(x)				(((x) & BIT_MASK_RRSR_RATE_EN) << BIT_SHIFT_RRSR_RATE_EN)
#define BITS_RRSR_RATE_EN				(BIT_MASK_RRSR_RATE_EN << BIT_SHIFT_RRSR_RATE_EN)
#define BIT_CLEAR_RRSR_RATE_EN(x)			((x) & (~BITS_RRSR_RATE_EN))
#define BIT_GET_RRSR_RATE_EN(x)			(((x) >> BIT_SHIFT_RRSR_RATE_EN) & BIT_MASK_RRSR_RATE_EN)
#define BIT_SET_RRSR_RATE_EN(x, v)			(BIT_CLEAR_RRSR_RATE_EN(x) | BIT_RRSR_RATE_EN(v))

#define BIT_SHIFT_R_MACID_RELEASE_SUCCESS_CLEAR_OFFSET	0
#define BIT_MASK_R_MACID_RELEASE_SUCCESS_CLEAR_OFFSET	0x7f
#define BIT_R_MACID_RELEASE_SUCCESS_CLEAR_OFFSET(x)	(((x) & BIT_MASK_R_MACID_RELEASE_SUCCESS_CLEAR_OFFSET) << BIT_SHIFT_R_MACID_RELEASE_SUCCESS_CLEAR_OFFSET)
#define BITS_R_MACID_RELEASE_SUCCESS_CLEAR_OFFSET	(BIT_MASK_R_MACID_RELEASE_SUCCESS_CLEAR_OFFSET << BIT_SHIFT_R_MACID_RELEASE_SUCCESS_CLEAR_OFFSET)
#define BIT_CLEAR_R_MACID_RELEASE_SUCCESS_CLEAR_OFFSET(x)	((x) & (~BITS_R_MACID_RELEASE_SUCCESS_CLEAR_OFFSET))
#define BIT_GET_R_MACID_RELEASE_SUCCESS_CLEAR_OFFSET(x)	(((x) >> BIT_SHIFT_R_MACID_RELEASE_SUCCESS_CLEAR_OFFSET) & BIT_MASK_R_MACID_RELEASE_SUCCESS_CLEAR_OFFSET)
#define BIT_SET_R_MACID_RELEASE_SUCCESS_CLEAR_OFFSET(x, v)	(BIT_CLEAR_R_MACID_RELEASE_SUCCESS_CLEAR_OFFSET(x) | BIT_R_MACID_RELEASE_SUCCESS_CLEAR_OFFSET(v))

#define BIT_SHIFT_RATE_SEL				0
#define BIT_MASK_RATE_SEL				0x7
#define BIT_RATE_SEL(x)				(((x) & BIT_MASK_RATE_SEL) << BIT_SHIFT_RATE_SEL)
#define BITS_RATE_SEL					(BIT_MASK_RATE_SEL << BIT_SHIFT_RATE_SEL)
#define BIT_CLEAR_RATE_SEL(x)				((x) & (~BITS_RATE_SEL))
#define BIT_GET_RATE_SEL(x)				(((x) >> BIT_SHIFT_RATE_SEL) & BIT_MASK_RATE_SEL)
#define BIT_SET_RATE_SEL(x, v)				(BIT_CLEAR_RATE_SEL(x) | BIT_RATE_SEL(v))

/* 2 REG_AX_ARFR_WEIGHTING_TABLE		(Offset 0x1484) */

#define BIT_SHIFT_RATE7_WEIGHTING			28
#define BIT_MASK_RATE7_WEIGHTING			0xf
#define BIT_RATE7_WEIGHTING(x)				(((x) & BIT_MASK_RATE7_WEIGHTING) << BIT_SHIFT_RATE7_WEIGHTING)
#define BITS_RATE7_WEIGHTING				(BIT_MASK_RATE7_WEIGHTING << BIT_SHIFT_RATE7_WEIGHTING)
#define BIT_CLEAR_RATE7_WEIGHTING(x)			((x) & (~BITS_RATE7_WEIGHTING))
#define BIT_GET_RATE7_WEIGHTING(x)			(((x) >> BIT_SHIFT_RATE7_WEIGHTING) & BIT_MASK_RATE7_WEIGHTING)
#define BIT_SET_RATE7_WEIGHTING(x, v)			(BIT_CLEAR_RATE7_WEIGHTING(x) | BIT_RATE7_WEIGHTING(v))

#define BIT_SHIFT_RATE6_WEIGHTING			24
#define BIT_MASK_RATE6_WEIGHTING			0xf
#define BIT_RATE6_WEIGHTING(x)				(((x) & BIT_MASK_RATE6_WEIGHTING) << BIT_SHIFT_RATE6_WEIGHTING)
#define BITS_RATE6_WEIGHTING				(BIT_MASK_RATE6_WEIGHTING << BIT_SHIFT_RATE6_WEIGHTING)
#define BIT_CLEAR_RATE6_WEIGHTING(x)			((x) & (~BITS_RATE6_WEIGHTING))
#define BIT_GET_RATE6_WEIGHTING(x)			(((x) >> BIT_SHIFT_RATE6_WEIGHTING) & BIT_MASK_RATE6_WEIGHTING)
#define BIT_SET_RATE6_WEIGHTING(x, v)			(BIT_CLEAR_RATE6_WEIGHTING(x) | BIT_RATE6_WEIGHTING(v))

#define BIT_SHIFT_RATE5_WEIGHTING			20
#define BIT_MASK_RATE5_WEIGHTING			0xf
#define BIT_RATE5_WEIGHTING(x)				(((x) & BIT_MASK_RATE5_WEIGHTING) << BIT_SHIFT_RATE5_WEIGHTING)
#define BITS_RATE5_WEIGHTING				(BIT_MASK_RATE5_WEIGHTING << BIT_SHIFT_RATE5_WEIGHTING)
#define BIT_CLEAR_RATE5_WEIGHTING(x)			((x) & (~BITS_RATE5_WEIGHTING))
#define BIT_GET_RATE5_WEIGHTING(x)			(((x) >> BIT_SHIFT_RATE5_WEIGHTING) & BIT_MASK_RATE5_WEIGHTING)
#define BIT_SET_RATE5_WEIGHTING(x, v)			(BIT_CLEAR_RATE5_WEIGHTING(x) | BIT_RATE5_WEIGHTING(v))

#define BIT_SHIFT_RATE4_WEIGHTING			16
#define BIT_MASK_RATE4_WEIGHTING			0xf
#define BIT_RATE4_WEIGHTING(x)				(((x) & BIT_MASK_RATE4_WEIGHTING) << BIT_SHIFT_RATE4_WEIGHTING)
#define BITS_RATE4_WEIGHTING				(BIT_MASK_RATE4_WEIGHTING << BIT_SHIFT_RATE4_WEIGHTING)
#define BIT_CLEAR_RATE4_WEIGHTING(x)			((x) & (~BITS_RATE4_WEIGHTING))
#define BIT_GET_RATE4_WEIGHTING(x)			(((x) >> BIT_SHIFT_RATE4_WEIGHTING) & BIT_MASK_RATE4_WEIGHTING)
#define BIT_SET_RATE4_WEIGHTING(x, v)			(BIT_CLEAR_RATE4_WEIGHTING(x) | BIT_RATE4_WEIGHTING(v))

#define BIT_SHIFT_RATE3_WEIGHTING			12
#define BIT_MASK_RATE3_WEIGHTING			0xf
#define BIT_RATE3_WEIGHTING(x)				(((x) & BIT_MASK_RATE3_WEIGHTING) << BIT_SHIFT_RATE3_WEIGHTING)
#define BITS_RATE3_WEIGHTING				(BIT_MASK_RATE3_WEIGHTING << BIT_SHIFT_RATE3_WEIGHTING)
#define BIT_CLEAR_RATE3_WEIGHTING(x)			((x) & (~BITS_RATE3_WEIGHTING))
#define BIT_GET_RATE3_WEIGHTING(x)			(((x) >> BIT_SHIFT_RATE3_WEIGHTING) & BIT_MASK_RATE3_WEIGHTING)
#define BIT_SET_RATE3_WEIGHTING(x, v)			(BIT_CLEAR_RATE3_WEIGHTING(x) | BIT_RATE3_WEIGHTING(v))

#define BIT_SHIFT_RATE2_WEIGHTING			8
#define BIT_MASK_RATE2_WEIGHTING			0xf
#define BIT_RATE2_WEIGHTING(x)				(((x) & BIT_MASK_RATE2_WEIGHTING) << BIT_SHIFT_RATE2_WEIGHTING)
#define BITS_RATE2_WEIGHTING				(BIT_MASK_RATE2_WEIGHTING << BIT_SHIFT_RATE2_WEIGHTING)
#define BIT_CLEAR_RATE2_WEIGHTING(x)			((x) & (~BITS_RATE2_WEIGHTING))
#define BIT_GET_RATE2_WEIGHTING(x)			(((x) >> BIT_SHIFT_RATE2_WEIGHTING) & BIT_MASK_RATE2_WEIGHTING)
#define BIT_SET_RATE2_WEIGHTING(x, v)			(BIT_CLEAR_RATE2_WEIGHTING(x) | BIT_RATE2_WEIGHTING(v))

#define BIT_SHIFT_RATE1_WEIGHTING			4
#define BIT_MASK_RATE1_WEIGHTING			0xf
#define BIT_RATE1_WEIGHTING(x)				(((x) & BIT_MASK_RATE1_WEIGHTING) << BIT_SHIFT_RATE1_WEIGHTING)
#define BITS_RATE1_WEIGHTING				(BIT_MASK_RATE1_WEIGHTING << BIT_SHIFT_RATE1_WEIGHTING)
#define BIT_CLEAR_RATE1_WEIGHTING(x)			((x) & (~BITS_RATE1_WEIGHTING))
#define BIT_GET_RATE1_WEIGHTING(x)			(((x) >> BIT_SHIFT_RATE1_WEIGHTING) & BIT_MASK_RATE1_WEIGHTING)
#define BIT_SET_RATE1_WEIGHTING(x, v)			(BIT_CLEAR_RATE1_WEIGHTING(x) | BIT_RATE1_WEIGHTING(v))

#define BIT_SHIFT_RATE0_WEIGHTING			0
#define BIT_MASK_RATE0_WEIGHTING			0xf
#define BIT_RATE0_WEIGHTING(x)				(((x) & BIT_MASK_RATE0_WEIGHTING) << BIT_SHIFT_RATE0_WEIGHTING)
#define BITS_RATE0_WEIGHTING				(BIT_MASK_RATE0_WEIGHTING << BIT_SHIFT_RATE0_WEIGHTING)
#define BIT_CLEAR_RATE0_WEIGHTING(x)			((x) & (~BITS_RATE0_WEIGHTING))
#define BIT_GET_RATE0_WEIGHTING(x)			(((x) >> BIT_SHIFT_RATE0_WEIGHTING) & BIT_MASK_RATE0_WEIGHTING)
#define BIT_SET_RATE0_WEIGHTING(x, v)			(BIT_CLEAR_RATE0_WEIGHTING(x) | BIT_RATE0_WEIGHTING(v))

/* 2 REG_DARFRC1_L				(Offset 0x1488) */

#define BIT_SHIFT_DATA_FALLBACK1_RC4			24
#define BIT_MASK_DATA_FALLBACK1_RC4			0x1f
#define BIT_DATA_FALLBACK1_RC4(x)			(((x) & BIT_MASK_DATA_FALLBACK1_RC4) << BIT_SHIFT_DATA_FALLBACK1_RC4)
#define BITS_DATA_FALLBACK1_RC4			(BIT_MASK_DATA_FALLBACK1_RC4 << BIT_SHIFT_DATA_FALLBACK1_RC4)
#define BIT_CLEAR_DATA_FALLBACK1_RC4(x)		((x) & (~BITS_DATA_FALLBACK1_RC4))
#define BIT_GET_DATA_FALLBACK1_RC4(x)			(((x) >> BIT_SHIFT_DATA_FALLBACK1_RC4) & BIT_MASK_DATA_FALLBACK1_RC4)
#define BIT_SET_DATA_FALLBACK1_RC4(x, v)		(BIT_CLEAR_DATA_FALLBACK1_RC4(x) | BIT_DATA_FALLBACK1_RC4(v))

#define BIT_SHIFT_DATA_FALLBACK1_RC3			16
#define BIT_MASK_DATA_FALLBACK1_RC3			0x1f
#define BIT_DATA_FALLBACK1_RC3(x)			(((x) & BIT_MASK_DATA_FALLBACK1_RC3) << BIT_SHIFT_DATA_FALLBACK1_RC3)
#define BITS_DATA_FALLBACK1_RC3			(BIT_MASK_DATA_FALLBACK1_RC3 << BIT_SHIFT_DATA_FALLBACK1_RC3)
#define BIT_CLEAR_DATA_FALLBACK1_RC3(x)		((x) & (~BITS_DATA_FALLBACK1_RC3))
#define BIT_GET_DATA_FALLBACK1_RC3(x)			(((x) >> BIT_SHIFT_DATA_FALLBACK1_RC3) & BIT_MASK_DATA_FALLBACK1_RC3)
#define BIT_SET_DATA_FALLBACK1_RC3(x, v)		(BIT_CLEAR_DATA_FALLBACK1_RC3(x) | BIT_DATA_FALLBACK1_RC3(v))

#define BIT_SHIFT_DATA_FALLBACK1_RC2			8
#define BIT_MASK_DATA_FALLBACK1_RC2			0x1f
#define BIT_DATA_FALLBACK1_RC2(x)			(((x) & BIT_MASK_DATA_FALLBACK1_RC2) << BIT_SHIFT_DATA_FALLBACK1_RC2)
#define BITS_DATA_FALLBACK1_RC2			(BIT_MASK_DATA_FALLBACK1_RC2 << BIT_SHIFT_DATA_FALLBACK1_RC2)
#define BIT_CLEAR_DATA_FALLBACK1_RC2(x)		((x) & (~BITS_DATA_FALLBACK1_RC2))
#define BIT_GET_DATA_FALLBACK1_RC2(x)			(((x) >> BIT_SHIFT_DATA_FALLBACK1_RC2) & BIT_MASK_DATA_FALLBACK1_RC2)
#define BIT_SET_DATA_FALLBACK1_RC2(x, v)		(BIT_CLEAR_DATA_FALLBACK1_RC2(x) | BIT_DATA_FALLBACK1_RC2(v))

#define BIT_SHIFT_DATA_FALLBACK1_RC1			0
#define BIT_MASK_DATA_FALLBACK1_RC1			0x1f
#define BIT_DATA_FALLBACK1_RC1(x)			(((x) & BIT_MASK_DATA_FALLBACK1_RC1) << BIT_SHIFT_DATA_FALLBACK1_RC1)
#define BITS_DATA_FALLBACK1_RC1			(BIT_MASK_DATA_FALLBACK1_RC1 << BIT_SHIFT_DATA_FALLBACK1_RC1)
#define BIT_CLEAR_DATA_FALLBACK1_RC1(x)		((x) & (~BITS_DATA_FALLBACK1_RC1))
#define BIT_GET_DATA_FALLBACK1_RC1(x)			(((x) >> BIT_SHIFT_DATA_FALLBACK1_RC1) & BIT_MASK_DATA_FALLBACK1_RC1)
#define BIT_SET_DATA_FALLBACK1_RC1(x, v)		(BIT_CLEAR_DATA_FALLBACK1_RC1(x) | BIT_DATA_FALLBACK1_RC1(v))

/* 2 REG_DARFRC1_H				(Offset 0x148C) */

#define BIT_SHIFT_DATA_FALLBACK1_RC8			24
#define BIT_MASK_DATA_FALLBACK1_RC8			0x1f
#define BIT_DATA_FALLBACK1_RC8(x)			(((x) & BIT_MASK_DATA_FALLBACK1_RC8) << BIT_SHIFT_DATA_FALLBACK1_RC8)
#define BITS_DATA_FALLBACK1_RC8			(BIT_MASK_DATA_FALLBACK1_RC8 << BIT_SHIFT_DATA_FALLBACK1_RC8)
#define BIT_CLEAR_DATA_FALLBACK1_RC8(x)		((x) & (~BITS_DATA_FALLBACK1_RC8))
#define BIT_GET_DATA_FALLBACK1_RC8(x)			(((x) >> BIT_SHIFT_DATA_FALLBACK1_RC8) & BIT_MASK_DATA_FALLBACK1_RC8)
#define BIT_SET_DATA_FALLBACK1_RC8(x, v)		(BIT_CLEAR_DATA_FALLBACK1_RC8(x) | BIT_DATA_FALLBACK1_RC8(v))

#define BIT_SHIFT_DATA_FALLBACK1_RC7			16
#define BIT_MASK_DATA_FALLBACK1_RC7			0x1f
#define BIT_DATA_FALLBACK1_RC7(x)			(((x) & BIT_MASK_DATA_FALLBACK1_RC7) << BIT_SHIFT_DATA_FALLBACK1_RC7)
#define BITS_DATA_FALLBACK1_RC7			(BIT_MASK_DATA_FALLBACK1_RC7 << BIT_SHIFT_DATA_FALLBACK1_RC7)
#define BIT_CLEAR_DATA_FALLBACK1_RC7(x)		((x) & (~BITS_DATA_FALLBACK1_RC7))
#define BIT_GET_DATA_FALLBACK1_RC7(x)			(((x) >> BIT_SHIFT_DATA_FALLBACK1_RC7) & BIT_MASK_DATA_FALLBACK1_RC7)
#define BIT_SET_DATA_FALLBACK1_RC7(x, v)		(BIT_CLEAR_DATA_FALLBACK1_RC7(x) | BIT_DATA_FALLBACK1_RC7(v))

#define BIT_SHIFT_DATA_FALLBACK1_RC6			8
#define BIT_MASK_DATA_FALLBACK1_RC6			0x1f
#define BIT_DATA_FALLBACK1_RC6(x)			(((x) & BIT_MASK_DATA_FALLBACK1_RC6) << BIT_SHIFT_DATA_FALLBACK1_RC6)
#define BITS_DATA_FALLBACK1_RC6			(BIT_MASK_DATA_FALLBACK1_RC6 << BIT_SHIFT_DATA_FALLBACK1_RC6)
#define BIT_CLEAR_DATA_FALLBACK1_RC6(x)		((x) & (~BITS_DATA_FALLBACK1_RC6))
#define BIT_GET_DATA_FALLBACK1_RC6(x)			(((x) >> BIT_SHIFT_DATA_FALLBACK1_RC6) & BIT_MASK_DATA_FALLBACK1_RC6)
#define BIT_SET_DATA_FALLBACK1_RC6(x, v)		(BIT_CLEAR_DATA_FALLBACK1_RC6(x) | BIT_DATA_FALLBACK1_RC6(v))

#define BIT_SHIFT_DATA_FALLBACK1_RC5			0
#define BIT_MASK_DATA_FALLBACK1_RC5			0x1f
#define BIT_DATA_FALLBACK1_RC5(x)			(((x) & BIT_MASK_DATA_FALLBACK1_RC5) << BIT_SHIFT_DATA_FALLBACK1_RC5)
#define BITS_DATA_FALLBACK1_RC5			(BIT_MASK_DATA_FALLBACK1_RC5 << BIT_SHIFT_DATA_FALLBACK1_RC5)
#define BIT_CLEAR_DATA_FALLBACK1_RC5(x)		((x) & (~BITS_DATA_FALLBACK1_RC5))
#define BIT_GET_DATA_FALLBACK1_RC5(x)			(((x) >> BIT_SHIFT_DATA_FALLBACK1_RC5) & BIT_MASK_DATA_FALLBACK1_RC5)
#define BIT_SET_DATA_FALLBACK1_RC5(x, v)		(BIT_CLEAR_DATA_FALLBACK1_RC5(x) | BIT_DATA_FALLBACK1_RC5(v))

/* 2 REG_TB_CTRL				(Offset 0x1490) */

#define BIT_EN_TB_TXRPT				BIT(24)
#define BIT_DIS_CHK_TB_AC				BIT(23)
#define BIT_EN_TB_PRETX				BIT(22)
#define BIT_EN_UPD_TB_RETRY				BIT(21)
#define BIT_EN_TB_SIFS_BK				BIT(20)
#define BIT_HW_SSN_EN_TB				BIT(19)
#define BIT_TB_BYPASS_TXPOWER				BIT(18)
#define BIT_TB_DEL_EN					BIT(17)
#define BIT_TB_EN_LIFETIME				BIT(16)

#define BIT_SHIFT_TB_PKT_LIFE_TIME			0
#define BIT_MASK_TB_PKT_LIFE_TIME			0xffff
#define BIT_TB_PKT_LIFE_TIME(x)			(((x) & BIT_MASK_TB_PKT_LIFE_TIME) << BIT_SHIFT_TB_PKT_LIFE_TIME)
#define BITS_TB_PKT_LIFE_TIME				(BIT_MASK_TB_PKT_LIFE_TIME << BIT_SHIFT_TB_PKT_LIFE_TIME)
#define BIT_CLEAR_TB_PKT_LIFE_TIME(x)			((x) & (~BITS_TB_PKT_LIFE_TIME))
#define BIT_GET_TB_PKT_LIFE_TIME(x)			(((x) >> BIT_SHIFT_TB_PKT_LIFE_TIME) & BIT_MASK_TB_PKT_LIFE_TIME)
#define BIT_SET_TB_PKT_LIFE_TIME(x, v)			(BIT_CLEAR_TB_PKT_LIFE_TIME(x) | BIT_TB_PKT_LIFE_TIME(v))

/* 2 REG_OTHER_CFG				(Offset 0x1494) */

#define BIT_GI_LTF_FB_SEL				BIT(31)

#define BIT_SHIFT_NDPA_RATE				22
#define BIT_MASK_NDPA_RATE				0x1ff
#define BIT_NDPA_RATE(x)				(((x) & BIT_MASK_NDPA_RATE) << BIT_SHIFT_NDPA_RATE)
#define BITS_NDPA_RATE					(BIT_MASK_NDPA_RATE << BIT_SHIFT_NDPA_RATE)
#define BIT_CLEAR_NDPA_RATE(x)				((x) & (~BITS_NDPA_RATE))
#define BIT_GET_NDPA_RATE(x)				(((x) >> BIT_SHIFT_NDPA_RATE) & BIT_MASK_NDPA_RATE)
#define BIT_SET_NDPA_RATE(x, v)			(BIT_CLEAR_NDPA_RATE(x) | BIT_NDPA_RATE(v))

#define BIT_EN_A_CTRL_BREAK				BIT(21)

#define BIT_SHIFT_RTS_TXOP_THRS			3
#define BIT_MASK_RTS_TXOP_THRS				0x3ff
#define BIT_RTS_TXOP_THRS(x)				(((x) & BIT_MASK_RTS_TXOP_THRS) << BIT_SHIFT_RTS_TXOP_THRS)
#define BITS_RTS_TXOP_THRS				(BIT_MASK_RTS_TXOP_THRS << BIT_SHIFT_RTS_TXOP_THRS)
#define BIT_CLEAR_RTS_TXOP_THRS(x)			((x) & (~BITS_RTS_TXOP_THRS))
#define BIT_GET_RTS_TXOP_THRS(x)			(((x) >> BIT_SHIFT_RTS_TXOP_THRS) & BIT_MASK_RTS_TXOP_THRS)
#define BIT_SET_RTS_TXOP_THRS(x, v)			(BIT_CLEAR_RTS_TXOP_THRS(x) | BIT_RTS_TXOP_THRS(v))

#define BIT_EN_TXOP_BASE_RTS				BIT(2)
#define BIT_EN_BT_POLLUTE_RX				BIT(1)
#define BIT_EN_SR_CTS2S				BIT(0)

/* 2 REG_RRSR_RATE_CFG			(Offset 0x1498) */

#define BIT_SHIFT_RRSR_HE				24
#define BIT_MASK_RRSR_HE				0xff
#define BIT_RRSR_HE(x)					(((x) & BIT_MASK_RRSR_HE) << BIT_SHIFT_RRSR_HE)
#define BITS_RRSR_HE					(BIT_MASK_RRSR_HE << BIT_SHIFT_RRSR_HE)
#define BIT_CLEAR_RRSR_HE(x)				((x) & (~BITS_RRSR_HE))
#define BIT_GET_RRSR_HE(x)				(((x) >> BIT_SHIFT_RRSR_HE) & BIT_MASK_RRSR_HE)
#define BIT_SET_RRSR_HE(x, v)				(BIT_CLEAR_RRSR_HE(x) | BIT_RRSR_HE(v))

#define BIT_SHIFT_RRSR_VHT				16
#define BIT_MASK_RRSR_VHT				0xff
#define BIT_RRSR_VHT(x)				(((x) & BIT_MASK_RRSR_VHT) << BIT_SHIFT_RRSR_VHT)
#define BITS_RRSR_VHT					(BIT_MASK_RRSR_VHT << BIT_SHIFT_RRSR_VHT)
#define BIT_CLEAR_RRSR_VHT(x)				((x) & (~BITS_RRSR_VHT))
#define BIT_GET_RRSR_VHT(x)				(((x) >> BIT_SHIFT_RRSR_VHT) & BIT_MASK_RRSR_VHT)
#define BIT_SET_RRSR_VHT(x, v)				(BIT_CLEAR_RRSR_VHT(x) | BIT_RRSR_VHT(v))

#define BIT_SHIFT_RRSR_HT				8
#define BIT_MASK_RRSR_HT				0xff
#define BIT_RRSR_HT(x)					(((x) & BIT_MASK_RRSR_HT) << BIT_SHIFT_RRSR_HT)
#define BITS_RRSR_HT					(BIT_MASK_RRSR_HT << BIT_SHIFT_RRSR_HT)
#define BIT_CLEAR_RRSR_HT(x)				((x) & (~BITS_RRSR_HT))
#define BIT_GET_RRSR_HT(x)				(((x) >> BIT_SHIFT_RRSR_HT) & BIT_MASK_RRSR_HT)
#define BIT_SET_RRSR_HT(x, v)				(BIT_CLEAR_RRSR_HT(x) | BIT_RRSR_HT(v))

#define BIT_SHIFT_RRSR_OFDM				0
#define BIT_MASK_RRSR_OFDM				0xff
#define BIT_RRSR_OFDM(x)				(((x) & BIT_MASK_RRSR_OFDM) << BIT_SHIFT_RRSR_OFDM)
#define BITS_RRSR_OFDM					(BIT_MASK_RRSR_OFDM << BIT_SHIFT_RRSR_OFDM)
#define BIT_CLEAR_RRSR_OFDM(x)				((x) & (~BITS_RRSR_OFDM))
#define BIT_GET_RRSR_OFDM(x)				(((x) >> BIT_SHIFT_RRSR_OFDM) & BIT_MASK_RRSR_OFDM)
#define BIT_SET_RRSR_OFDM(x, v)			(BIT_CLEAR_RRSR_OFDM(x) | BIT_RRSR_OFDM(v))

/* 2 REG_NDP_RATE				(Offset 0x149C) */

#define BIT_SHIFT_TXPKT_CNT_SEL			28
#define BIT_MASK_TXPKT_CNT_SEL				0xf
#define BIT_TXPKT_CNT_SEL(x)				(((x) & BIT_MASK_TXPKT_CNT_SEL) << BIT_SHIFT_TXPKT_CNT_SEL)
#define BITS_TXPKT_CNT_SEL				(BIT_MASK_TXPKT_CNT_SEL << BIT_SHIFT_TXPKT_CNT_SEL)
#define BIT_CLEAR_TXPKT_CNT_SEL(x)			((x) & (~BITS_TXPKT_CNT_SEL))
#define BIT_GET_TXPKT_CNT_SEL(x)			(((x) >> BIT_SHIFT_TXPKT_CNT_SEL) & BIT_MASK_TXPKT_CNT_SEL)
#define BIT_SET_TXPKT_CNT_SEL(x, v)			(BIT_CLEAR_TXPKT_CNT_SEL(x) | BIT_TXPKT_CNT_SEL(v))

#define BIT_SHIFT_REF_MACID				24
#define BIT_MASK_REF_MACID				0xf
#define BIT_REF_MACID(x)				(((x) & BIT_MASK_REF_MACID) << BIT_SHIFT_REF_MACID)
#define BITS_REF_MACID					(BIT_MASK_REF_MACID << BIT_SHIFT_REF_MACID)
#define BIT_CLEAR_REF_MACID(x)				((x) & (~BITS_REF_MACID))
#define BIT_GET_REF_MACID(x)				(((x) >> BIT_SHIFT_REF_MACID) & BIT_MASK_REF_MACID)
#define BIT_SET_REF_MACID(x, v)			(BIT_CLEAR_REF_MACID(x) | BIT_REF_MACID(v))

#define BIT_TX_CNT_CLR					BIT(23)
#define BIT_USE_NDP_PARAMETER				BIT(9)

#define BIT_SHIFT_NDP_RATE				0
#define BIT_MASK_NDP_RATE				0x1ff
#define BIT_NDP_RATE(x)				(((x) & BIT_MASK_NDP_RATE) << BIT_SHIFT_NDP_RATE)
#define BITS_NDP_RATE					(BIT_MASK_NDP_RATE << BIT_SHIFT_NDP_RATE)
#define BIT_CLEAR_NDP_RATE(x)				((x) & (~BITS_NDP_RATE))
#define BIT_GET_NDP_RATE(x)				(((x) >> BIT_SHIFT_NDP_RATE) & BIT_MASK_NDP_RATE)
#define BIT_SET_NDP_RATE(x, v)				(BIT_CLEAR_NDP_RATE(x) | BIT_NDP_RATE(v))

/* 2 REG_TXPKT_CNT				(Offset 0x14A0) */

#define BIT_SHIFT_TXPKT_CNT_RPT			0
#define BIT_MASK_TXPKT_CNT_RPT				0xffffffffL
#define BIT_TXPKT_CNT_RPT(x)				(((x) & BIT_MASK_TXPKT_CNT_RPT) << BIT_SHIFT_TXPKT_CNT_RPT)
#define BITS_TXPKT_CNT_RPT				(BIT_MASK_TXPKT_CNT_RPT << BIT_SHIFT_TXPKT_CNT_RPT)
#define BIT_CLEAR_TXPKT_CNT_RPT(x)			((x) & (~BITS_TXPKT_CNT_RPT))
#define BIT_GET_TXPKT_CNT_RPT(x)			(((x) >> BIT_SHIFT_TXPKT_CNT_RPT) & BIT_MASK_TXPKT_CNT_RPT)
#define BIT_SET_TXPKT_CNT_RPT(x, v)			(BIT_CLEAR_TXPKT_CNT_RPT(x) | BIT_TXPKT_CNT_RPT(v))

/* 2 REG_PS_TIMER_A_L			(Offset 0x1500) */

#define BIT_SHIFT_PS_TIMER_A_L				0
#define BIT_MASK_PS_TIMER_A_L				0xffffffffL
#define BIT_PS_TIMER_A_L(x)				(((x) & BIT_MASK_PS_TIMER_A_L) << BIT_SHIFT_PS_TIMER_A_L)
#define BITS_PS_TIMER_A_L				(BIT_MASK_PS_TIMER_A_L << BIT_SHIFT_PS_TIMER_A_L)
#define BIT_CLEAR_PS_TIMER_A_L(x)			((x) & (~BITS_PS_TIMER_A_L))
#define BIT_GET_PS_TIMER_A_L(x)			(((x) >> BIT_SHIFT_PS_TIMER_A_L) & BIT_MASK_PS_TIMER_A_L)
#define BIT_SET_PS_TIMER_A_L(x, v)			(BIT_CLEAR_PS_TIMER_A_L(x) | BIT_PS_TIMER_A_L(v))

/* 2 REG_PS_TIMER_A_H			(Offset 0x1504) */

#define BIT_SHIFT_PS_TIMER_A_H				0
#define BIT_MASK_PS_TIMER_A_H				0xffffffffL
#define BIT_PS_TIMER_A_H(x)				(((x) & BIT_MASK_PS_TIMER_A_H) << BIT_SHIFT_PS_TIMER_A_H)
#define BITS_PS_TIMER_A_H				(BIT_MASK_PS_TIMER_A_H << BIT_SHIFT_PS_TIMER_A_H)
#define BIT_CLEAR_PS_TIMER_A_H(x)			((x) & (~BITS_PS_TIMER_A_H))
#define BIT_GET_PS_TIMER_A_H(x)			(((x) >> BIT_SHIFT_PS_TIMER_A_H) & BIT_MASK_PS_TIMER_A_H)
#define BIT_SET_PS_TIMER_A_H(x, v)			(BIT_CLEAR_PS_TIMER_A_H(x) | BIT_PS_TIMER_A_H(v))

/* 2 REG_PS_TIMER_B_L			(Offset 0x1508) */

#define BIT_SHIFT_PS_TIMER_B_L				0
#define BIT_MASK_PS_TIMER_B_L				0xffffffffL
#define BIT_PS_TIMER_B_L(x)				(((x) & BIT_MASK_PS_TIMER_B_L) << BIT_SHIFT_PS_TIMER_B_L)
#define BITS_PS_TIMER_B_L				(BIT_MASK_PS_TIMER_B_L << BIT_SHIFT_PS_TIMER_B_L)
#define BIT_CLEAR_PS_TIMER_B_L(x)			((x) & (~BITS_PS_TIMER_B_L))
#define BIT_GET_PS_TIMER_B_L(x)			(((x) >> BIT_SHIFT_PS_TIMER_B_L) & BIT_MASK_PS_TIMER_B_L)
#define BIT_SET_PS_TIMER_B_L(x, v)			(BIT_CLEAR_PS_TIMER_B_L(x) | BIT_PS_TIMER_B_L(v))

/* 2 REG_PS_TIMER_B_H			(Offset 0x150C) */

#define BIT_SHIFT_PS_TIMER_B_H				0
#define BIT_MASK_PS_TIMER_B_H				0xffffffffL
#define BIT_PS_TIMER_B_H(x)				(((x) & BIT_MASK_PS_TIMER_B_H) << BIT_SHIFT_PS_TIMER_B_H)
#define BITS_PS_TIMER_B_H				(BIT_MASK_PS_TIMER_B_H << BIT_SHIFT_PS_TIMER_B_H)
#define BIT_CLEAR_PS_TIMER_B_H(x)			((x) & (~BITS_PS_TIMER_B_H))
#define BIT_GET_PS_TIMER_B_H(x)			(((x) >> BIT_SHIFT_PS_TIMER_B_H) & BIT_MASK_PS_TIMER_B_H)
#define BIT_SET_PS_TIMER_B_H(x, v)			(BIT_CLEAR_PS_TIMER_B_H(x) | BIT_PS_TIMER_B_H(v))

/* 2 REG_PS_TIMER_C_L			(Offset 0x1510) */

#define BIT_SHIFT_PS_TIMER_C_L				0
#define BIT_MASK_PS_TIMER_C_L				0xffffffffL
#define BIT_PS_TIMER_C_L(x)				(((x) & BIT_MASK_PS_TIMER_C_L) << BIT_SHIFT_PS_TIMER_C_L)
#define BITS_PS_TIMER_C_L				(BIT_MASK_PS_TIMER_C_L << BIT_SHIFT_PS_TIMER_C_L)
#define BIT_CLEAR_PS_TIMER_C_L(x)			((x) & (~BITS_PS_TIMER_C_L))
#define BIT_GET_PS_TIMER_C_L(x)			(((x) >> BIT_SHIFT_PS_TIMER_C_L) & BIT_MASK_PS_TIMER_C_L)
#define BIT_SET_PS_TIMER_C_L(x, v)			(BIT_CLEAR_PS_TIMER_C_L(x) | BIT_PS_TIMER_C_L(v))

/* 2 REG_PS_TIMER_C_H			(Offset 0x1514) */

#define BIT_SHIFT_PS_TIMER_C_H				0
#define BIT_MASK_PS_TIMER_C_H				0xffffffffL
#define BIT_PS_TIMER_C_H(x)				(((x) & BIT_MASK_PS_TIMER_C_H) << BIT_SHIFT_PS_TIMER_C_H)
#define BITS_PS_TIMER_C_H				(BIT_MASK_PS_TIMER_C_H << BIT_SHIFT_PS_TIMER_C_H)
#define BIT_CLEAR_PS_TIMER_C_H(x)			((x) & (~BITS_PS_TIMER_C_H))
#define BIT_GET_PS_TIMER_C_H(x)			(((x) >> BIT_SHIFT_PS_TIMER_C_H) & BIT_MASK_PS_TIMER_C_H)
#define BIT_SET_PS_TIMER_C_H(x, v)			(BIT_CLEAR_PS_TIMER_C_H(x) | BIT_PS_TIMER_C_H(v))

/* 2 REG_CPUMGQ_PARAMETER			(Offset 0x1518) */

#define BIT_SHIFT_PS_TIMER_E_EARLY			24
#define BIT_MASK_PS_TIMER_E_EARLY			0xff
#define BIT_PS_TIMER_E_EARLY(x)			(((x) & BIT_MASK_PS_TIMER_E_EARLY) << BIT_SHIFT_PS_TIMER_E_EARLY)
#define BITS_PS_TIMER_E_EARLY				(BIT_MASK_PS_TIMER_E_EARLY << BIT_SHIFT_PS_TIMER_E_EARLY)
#define BIT_CLEAR_PS_TIMER_E_EARLY(x)			((x) & (~BITS_PS_TIMER_E_EARLY))
#define BIT_GET_PS_TIMER_E_EARLY(x)			(((x) >> BIT_SHIFT_PS_TIMER_E_EARLY) & BIT_MASK_PS_TIMER_E_EARLY)
#define BIT_SET_PS_TIMER_E_EARLY(x, v)			(BIT_CLEAR_PS_TIMER_E_EARLY(x) | BIT_PS_TIMER_E_EARLY(v))

#define BIT_SHIFT_CW					8
#define BIT_MASK_CW					0xff
#define BIT_CW(x)					(((x) & BIT_MASK_CW) << BIT_SHIFT_CW)
#define BITS_CW					(BIT_MASK_CW << BIT_SHIFT_CW)
#define BIT_CLEAR_CW(x)				((x) & (~BITS_CW))
#define BIT_GET_CW(x)					(((x) >> BIT_SHIFT_CW) & BIT_MASK_CW)
#define BIT_SET_CW(x, v)				(BIT_CLEAR_CW(x) | BIT_CW(v))

#define BIT_SHIFT_AIFS					0
#define BIT_MASK_AIFS					0xff
#define BIT_AIFS(x)					(((x) & BIT_MASK_AIFS) << BIT_SHIFT_AIFS)
#define BITS_AIFS					(BIT_MASK_AIFS << BIT_SHIFT_AIFS)
#define BIT_CLEAR_AIFS(x)				((x) & (~BITS_AIFS))
#define BIT_GET_AIFS(x)				(((x) >> BIT_SHIFT_AIFS) & BIT_MASK_AIFS)
#define BIT_SET_AIFS(x, v)				(BIT_CLEAR_AIFS(x) | BIT_AIFS(v))

/* 2 REG_PS_TIMER_EARLY			(Offset 0x151C) */

#define BIT_SHIFT_PS_TIMER_D_EARLY			24
#define BIT_MASK_PS_TIMER_D_EARLY			0xff
#define BIT_PS_TIMER_D_EARLY(x)			(((x) & BIT_MASK_PS_TIMER_D_EARLY) << BIT_SHIFT_PS_TIMER_D_EARLY)
#define BITS_PS_TIMER_D_EARLY				(BIT_MASK_PS_TIMER_D_EARLY << BIT_SHIFT_PS_TIMER_D_EARLY)
#define BIT_CLEAR_PS_TIMER_D_EARLY(x)			((x) & (~BITS_PS_TIMER_D_EARLY))
#define BIT_GET_PS_TIMER_D_EARLY(x)			(((x) >> BIT_SHIFT_PS_TIMER_D_EARLY) & BIT_MASK_PS_TIMER_D_EARLY)
#define BIT_SET_PS_TIMER_D_EARLY(x, v)			(BIT_CLEAR_PS_TIMER_D_EARLY(x) | BIT_PS_TIMER_D_EARLY(v))

#define BIT_SHIFT_PS_TIMER_C_EARLY			16
#define BIT_MASK_PS_TIMER_C_EARLY			0xff
#define BIT_PS_TIMER_C_EARLY(x)			(((x) & BIT_MASK_PS_TIMER_C_EARLY) << BIT_SHIFT_PS_TIMER_C_EARLY)
#define BITS_PS_TIMER_C_EARLY				(BIT_MASK_PS_TIMER_C_EARLY << BIT_SHIFT_PS_TIMER_C_EARLY)
#define BIT_CLEAR_PS_TIMER_C_EARLY(x)			((x) & (~BITS_PS_TIMER_C_EARLY))
#define BIT_GET_PS_TIMER_C_EARLY(x)			(((x) >> BIT_SHIFT_PS_TIMER_C_EARLY) & BIT_MASK_PS_TIMER_C_EARLY)
#define BIT_SET_PS_TIMER_C_EARLY(x, v)			(BIT_CLEAR_PS_TIMER_C_EARLY(x) | BIT_PS_TIMER_C_EARLY(v))

#define BIT_SHIFT_PS_TIMER_B_EARLY			8
#define BIT_MASK_PS_TIMER_B_EARLY			0xff
#define BIT_PS_TIMER_B_EARLY(x)			(((x) & BIT_MASK_PS_TIMER_B_EARLY) << BIT_SHIFT_PS_TIMER_B_EARLY)
#define BITS_PS_TIMER_B_EARLY				(BIT_MASK_PS_TIMER_B_EARLY << BIT_SHIFT_PS_TIMER_B_EARLY)
#define BIT_CLEAR_PS_TIMER_B_EARLY(x)			((x) & (~BITS_PS_TIMER_B_EARLY))
#define BIT_GET_PS_TIMER_B_EARLY(x)			(((x) >> BIT_SHIFT_PS_TIMER_B_EARLY) & BIT_MASK_PS_TIMER_B_EARLY)
#define BIT_SET_PS_TIMER_B_EARLY(x, v)			(BIT_CLEAR_PS_TIMER_B_EARLY(x) | BIT_PS_TIMER_B_EARLY(v))

#define BIT_SHIFT_PS_TIMER_A_EARLY			0
#define BIT_MASK_PS_TIMER_A_EARLY			0xff
#define BIT_PS_TIMER_A_EARLY(x)			(((x) & BIT_MASK_PS_TIMER_A_EARLY) << BIT_SHIFT_PS_TIMER_A_EARLY)
#define BITS_PS_TIMER_A_EARLY				(BIT_MASK_PS_TIMER_A_EARLY << BIT_SHIFT_PS_TIMER_A_EARLY)
#define BIT_CLEAR_PS_TIMER_A_EARLY(x)			((x) & (~BITS_PS_TIMER_A_EARLY))
#define BIT_GET_PS_TIMER_A_EARLY(x)			(((x) >> BIT_SHIFT_PS_TIMER_A_EARLY) & BIT_MASK_PS_TIMER_A_EARLY)
#define BIT_SET_PS_TIMER_A_EARLY(x, v)			(BIT_CLEAR_PS_TIMER_A_EARLY(x) | BIT_PS_TIMER_A_EARLY(v))

/* 2 REG_PS_TIMER_TWT_CRTL			(Offset 0x1520) */

#define BIT_PS_TIMER_A_EN				BIT(31)

#define BIT_SHIFT_PS_TIMER_A_TSF_SEL			28
#define BIT_MASK_PS_TIMER_A_TSF_SEL			0x3
#define BIT_PS_TIMER_A_TSF_SEL(x)			(((x) & BIT_MASK_PS_TIMER_A_TSF_SEL) << BIT_SHIFT_PS_TIMER_A_TSF_SEL)
#define BITS_PS_TIMER_A_TSF_SEL			(BIT_MASK_PS_TIMER_A_TSF_SEL << BIT_SHIFT_PS_TIMER_A_TSF_SEL)
#define BIT_CLEAR_PS_TIMER_A_TSF_SEL(x)		((x) & (~BITS_PS_TIMER_A_TSF_SEL))
#define BIT_GET_PS_TIMER_A_TSF_SEL(x)			(((x) >> BIT_SHIFT_PS_TIMER_A_TSF_SEL) & BIT_MASK_PS_TIMER_A_TSF_SEL)
#define BIT_SET_PS_TIMER_A_TSF_SEL(x, v)		(BIT_CLEAR_PS_TIMER_A_TSF_SEL(x) | BIT_PS_TIMER_A_TSF_SEL(v))

#define BIT_PS_TIMER_B_EN				BIT(27)

#define BIT_SHIFT_PS_TIMER_B_TSF_SEL			24
#define BIT_MASK_PS_TIMER_B_TSF_SEL			0x3
#define BIT_PS_TIMER_B_TSF_SEL(x)			(((x) & BIT_MASK_PS_TIMER_B_TSF_SEL) << BIT_SHIFT_PS_TIMER_B_TSF_SEL)
#define BITS_PS_TIMER_B_TSF_SEL			(BIT_MASK_PS_TIMER_B_TSF_SEL << BIT_SHIFT_PS_TIMER_B_TSF_SEL)
#define BIT_CLEAR_PS_TIMER_B_TSF_SEL(x)		((x) & (~BITS_PS_TIMER_B_TSF_SEL))
#define BIT_GET_PS_TIMER_B_TSF_SEL(x)			(((x) >> BIT_SHIFT_PS_TIMER_B_TSF_SEL) & BIT_MASK_PS_TIMER_B_TSF_SEL)
#define BIT_SET_PS_TIMER_B_TSF_SEL(x, v)		(BIT_CLEAR_PS_TIMER_B_TSF_SEL(x) | BIT_PS_TIMER_B_TSF_SEL(v))

#define BIT_PS_TIMER_C_EN				BIT(23)

#define BIT_SHIFT_PS_TIMER_C_TSF_SEL			20
#define BIT_MASK_PS_TIMER_C_TSF_SEL			0x3
#define BIT_PS_TIMER_C_TSF_SEL(x)			(((x) & BIT_MASK_PS_TIMER_C_TSF_SEL) << BIT_SHIFT_PS_TIMER_C_TSF_SEL)
#define BITS_PS_TIMER_C_TSF_SEL			(BIT_MASK_PS_TIMER_C_TSF_SEL << BIT_SHIFT_PS_TIMER_C_TSF_SEL)
#define BIT_CLEAR_PS_TIMER_C_TSF_SEL(x)		((x) & (~BITS_PS_TIMER_C_TSF_SEL))
#define BIT_GET_PS_TIMER_C_TSF_SEL(x)			(((x) >> BIT_SHIFT_PS_TIMER_C_TSF_SEL) & BIT_MASK_PS_TIMER_C_TSF_SEL)
#define BIT_SET_PS_TIMER_C_TSF_SEL(x, v)		(BIT_CLEAR_PS_TIMER_C_TSF_SEL(x) | BIT_PS_TIMER_C_TSF_SEL(v))

#define BIT_PS_TIMER_D_EN				BIT(19)

#define BIT_SHIFT_PS_TIMER_D_TSF_SEL			16
#define BIT_MASK_PS_TIMER_D_TSF_SEL			0x3
#define BIT_PS_TIMER_D_TSF_SEL(x)			(((x) & BIT_MASK_PS_TIMER_D_TSF_SEL) << BIT_SHIFT_PS_TIMER_D_TSF_SEL)
#define BITS_PS_TIMER_D_TSF_SEL			(BIT_MASK_PS_TIMER_D_TSF_SEL << BIT_SHIFT_PS_TIMER_D_TSF_SEL)
#define BIT_CLEAR_PS_TIMER_D_TSF_SEL(x)		((x) & (~BITS_PS_TIMER_D_TSF_SEL))
#define BIT_GET_PS_TIMER_D_TSF_SEL(x)			(((x) >> BIT_SHIFT_PS_TIMER_D_TSF_SEL) & BIT_MASK_PS_TIMER_D_TSF_SEL)
#define BIT_SET_PS_TIMER_D_TSF_SEL(x, v)		(BIT_CLEAR_PS_TIMER_D_TSF_SEL(x) | BIT_PS_TIMER_D_TSF_SEL(v))

#define BIT_PS_TIMER_E_EN				BIT(15)

#define BIT_SHIFT_PS_TIMER_E_TSF_SEL			12
#define BIT_MASK_PS_TIMER_E_TSF_SEL			0x3
#define BIT_PS_TIMER_E_TSF_SEL(x)			(((x) & BIT_MASK_PS_TIMER_E_TSF_SEL) << BIT_SHIFT_PS_TIMER_E_TSF_SEL)
#define BITS_PS_TIMER_E_TSF_SEL			(BIT_MASK_PS_TIMER_E_TSF_SEL << BIT_SHIFT_PS_TIMER_E_TSF_SEL)
#define BIT_CLEAR_PS_TIMER_E_TSF_SEL(x)		((x) & (~BITS_PS_TIMER_E_TSF_SEL))
#define BIT_GET_PS_TIMER_E_TSF_SEL(x)			(((x) >> BIT_SHIFT_PS_TIMER_E_TSF_SEL) & BIT_MASK_PS_TIMER_E_TSF_SEL)
#define BIT_SET_PS_TIMER_E_TSF_SEL(x, v)		(BIT_CLEAR_PS_TIMER_E_TSF_SEL(x) | BIT_PS_TIMER_E_TSF_SEL(v))

#define BIT_GET_TSFT_OFFSET_EN				BIT(1)
#define BIT_RXBCN_TIME_PORT				BIT(0)

/* 2 REG_RX_TSFT_DIFF			(Offset 0x1524) */

#define BIT_RXBCN_TIME_VLD				BIT(31)
#define BIT_RXBCN_TIME_DIFF_DIR			BIT(30)

#define BIT_SHIFT_RXBCN_TIME_DIFF			0
#define BIT_MASK_RXBCN_TIME_DIFF			0x3fffffff
#define BIT_RXBCN_TIME_DIFF(x)				(((x) & BIT_MASK_RXBCN_TIME_DIFF) << BIT_SHIFT_RXBCN_TIME_DIFF)
#define BITS_RXBCN_TIME_DIFF				(BIT_MASK_RXBCN_TIME_DIFF << BIT_SHIFT_RXBCN_TIME_DIFF)
#define BIT_CLEAR_RXBCN_TIME_DIFF(x)			((x) & (~BITS_RXBCN_TIME_DIFF))
#define BIT_GET_RXBCN_TIME_DIFF(x)			(((x) >> BIT_SHIFT_RXBCN_TIME_DIFF) & BIT_MASK_RXBCN_TIME_DIFF)
#define BIT_SET_RXBCN_TIME_DIFF(x, v)			(BIT_CLEAR_RXBCN_TIME_DIFF(x) | BIT_RXBCN_TIME_DIFF(v))

/* 2 REG_RXBCN_TSFT_STATISTIC		(Offset 0x1528) */

#define BIT_UPD_TSFT_EARLY				BIT(31)

#define BIT_SHIFT_RXBCN_TSFT_THRES			16
#define BIT_MASK_RXBCN_TSFT_THRES			0x1fff
#define BIT_RXBCN_TSFT_THRES(x)			(((x) & BIT_MASK_RXBCN_TSFT_THRES) << BIT_SHIFT_RXBCN_TSFT_THRES)
#define BITS_RXBCN_TSFT_THRES				(BIT_MASK_RXBCN_TSFT_THRES << BIT_SHIFT_RXBCN_TSFT_THRES)
#define BIT_CLEAR_RXBCN_TSFT_THRES(x)			((x) & (~BITS_RXBCN_TSFT_THRES))
#define BIT_GET_RXBCN_TSFT_THRES(x)			(((x) >> BIT_SHIFT_RXBCN_TSFT_THRES) & BIT_MASK_RXBCN_TSFT_THRES)
#define BIT_SET_RXBCN_TSFT_THRES(x, v)			(BIT_CLEAR_RXBCN_TSFT_THRES(x) | BIT_RXBCN_TSFT_THRES(v))

#define BIT_EN_RXBCN_GT_THRES_CNT			BIT(7)
#define BIT_CLR_RXBCN_GT_THRES_CNT			BIT(6)

#define BIT_SHIFT_RXBCN_GT_THRES_CNT			0
#define BIT_MASK_RXBCN_GT_THRES_CNT			0x3f
#define BIT_RXBCN_GT_THRES_CNT(x)			(((x) & BIT_MASK_RXBCN_GT_THRES_CNT) << BIT_SHIFT_RXBCN_GT_THRES_CNT)
#define BITS_RXBCN_GT_THRES_CNT			(BIT_MASK_RXBCN_GT_THRES_CNT << BIT_SHIFT_RXBCN_GT_THRES_CNT)
#define BIT_CLEAR_RXBCN_GT_THRES_CNT(x)		((x) & (~BITS_RXBCN_GT_THRES_CNT))
#define BIT_GET_RXBCN_GT_THRES_CNT(x)			(((x) >> BIT_SHIFT_RXBCN_GT_THRES_CNT) & BIT_MASK_RXBCN_GT_THRES_CNT)
#define BIT_SET_RXBCN_GT_THRES_CNT(x, v)		(BIT_CLEAR_RXBCN_GT_THRES_CNT(x) | BIT_RXBCN_GT_THRES_CNT(v))

/* 2 REG_P2P_NOA2_CTRL_STATE			(Offset 0x152C) */

#define BIT_POWER_STATE_2				BIT(31)
#define BIT_CTWINDOW_ON_2				BIT(30)
#define BIT_BEACON_AREA_ON_2				BIT(29)
#define BIT_CTWIN_EARLY_DISTX_2			BIT(28)
#define BIT_NOA1_OFF_PERIOD_2				BIT(27)
#define BIT_FORCE_DOZE1_2				BIT(26)
#define BIT_NOA0_OFF_PERIOD_2				BIT(25)
#define BIT_FORCE_DOZE0_2				BIT(24)
#define BIT_SPEC_POWER_STATE_2				BIT(23)
#define BIT_SPEC_CTWINDOW_ON_2				BIT(22)
#define BIT_SPEC_BEACON_AREA_ON_2			BIT(21)
#define BIT_SPEC_CTWIN_EARLY_DISTX_2			BIT(20)
#define BIT_SPEC_NOA1_OFF_PERIOD_2			BIT(19)
#define BIT_SPEC_FORCE_DOZE1_2				BIT(18)
#define BIT_SPEC_NOA0_OFF_PERIOD_2			BIT(17)
#define BIT_SPEC_FORCE_DOZE0_2				BIT(16)
#define BIT_P2P_NOA2_ALLSTASLEEP			BIT(7)
#define BIT_P2P_NOA2_DISTX_EN				BIT(6)
#define BIT_P2P_NOA2_PWR_MGT_EN			BIT(5)

#define BIT_SHIFT_P2P_NOA2_EN				3
#define BIT_MASK_P2P_NOA2_EN				0x3
#define BIT_P2P_NOA2_EN(x)				(((x) & BIT_MASK_P2P_NOA2_EN) << BIT_SHIFT_P2P_NOA2_EN)
#define BITS_P2P_NOA2_EN				(BIT_MASK_P2P_NOA2_EN << BIT_SHIFT_P2P_NOA2_EN)
#define BIT_CLEAR_P2P_NOA2_EN(x)			((x) & (~BITS_P2P_NOA2_EN))
#define BIT_GET_P2P_NOA2_EN(x)				(((x) >> BIT_SHIFT_P2P_NOA2_EN) & BIT_MASK_P2P_NOA2_EN)
#define BIT_SET_P2P_NOA2_EN(x, v)			(BIT_CLEAR_P2P_NOA2_EN(x) | BIT_P2P_NOA2_EN(v))

#define BIT_SHIFT_P2P_NOA2_UNIT_SEL			1
#define BIT_MASK_P2P_NOA2_UNIT_SEL			0x3
#define BIT_P2P_NOA2_UNIT_SEL(x)			(((x) & BIT_MASK_P2P_NOA2_UNIT_SEL) << BIT_SHIFT_P2P_NOA2_UNIT_SEL)
#define BITS_P2P_NOA2_UNIT_SEL				(BIT_MASK_P2P_NOA2_UNIT_SEL << BIT_SHIFT_P2P_NOA2_UNIT_SEL)
#define BIT_CLEAR_P2P_NOA2_UNIT_SEL(x)			((x) & (~BITS_P2P_NOA2_UNIT_SEL))
#define BIT_GET_P2P_NOA2_UNIT_SEL(x)			(((x) >> BIT_SHIFT_P2P_NOA2_UNIT_SEL) & BIT_MASK_P2P_NOA2_UNIT_SEL)
#define BIT_SET_P2P_NOA2_UNIT_SEL(x, v)		(BIT_CLEAR_P2P_NOA2_UNIT_SEL(x) | BIT_P2P_NOA2_UNIT_SEL(v))

#define BIT_EN_TSFBIT32_RST_NOA2			BIT(0)

/* 2 REG_TM_CFG				(Offset 0x1530) */

#define BIT_SHIFT_TM_TSFT_PORT_SEL			3
#define BIT_MASK_TM_TSFT_PORT_SEL			0x3
#define BIT_TM_TSFT_PORT_SEL(x)			(((x) & BIT_MASK_TM_TSFT_PORT_SEL) << BIT_SHIFT_TM_TSFT_PORT_SEL)
#define BITS_TM_TSFT_PORT_SEL				(BIT_MASK_TM_TSFT_PORT_SEL << BIT_SHIFT_TM_TSFT_PORT_SEL)
#define BIT_CLEAR_TM_TSFT_PORT_SEL(x)			((x) & (~BITS_TM_TSFT_PORT_SEL))
#define BIT_GET_TM_TSFT_PORT_SEL(x)			(((x) >> BIT_SHIFT_TM_TSFT_PORT_SEL) & BIT_MASK_TM_TSFT_PORT_SEL)
#define BIT_SET_TM_TSFT_PORT_SEL(x, v)			(BIT_CLEAR_TM_TSFT_PORT_SEL(x) | BIT_TM_TSFT_PORT_SEL(v))

#define BIT_RXTM_EN					BIT(2)
#define BIT_RXTMREQ_EN					BIT(1)
#define BIT_TM_FUNC_EN					BIT(0)

/* 2 REG_TM_TSFT_T1				(Offset 0x1534) */

#define BIT_SHIFT_TM_TSFT_T1				0
#define BIT_MASK_TM_TSFT_T1				0xffffffffL
#define BIT_TM_TSFT_T1(x)				(((x) & BIT_MASK_TM_TSFT_T1) << BIT_SHIFT_TM_TSFT_T1)
#define BITS_TM_TSFT_T1				(BIT_MASK_TM_TSFT_T1 << BIT_SHIFT_TM_TSFT_T1)
#define BIT_CLEAR_TM_TSFT_T1(x)			((x) & (~BITS_TM_TSFT_T1))
#define BIT_GET_TM_TSFT_T1(x)				(((x) >> BIT_SHIFT_TM_TSFT_T1) & BIT_MASK_TM_TSFT_T1)
#define BIT_SET_TM_TSFT_T1(x, v)			(BIT_CLEAR_TM_TSFT_T1(x) | BIT_TM_TSFT_T1(v))

/* 2 REG_TM_TSFT_T2				(Offset 0x1538) */

#define BIT_SHIFT_TM_TSFT_T2				0
#define BIT_MASK_TM_TSFT_T2				0xffffffffL
#define BIT_TM_TSFT_T2(x)				(((x) & BIT_MASK_TM_TSFT_T2) << BIT_SHIFT_TM_TSFT_T2)
#define BITS_TM_TSFT_T2				(BIT_MASK_TM_TSFT_T2 << BIT_SHIFT_TM_TSFT_T2)
#define BIT_CLEAR_TM_TSFT_T2(x)			((x) & (~BITS_TM_TSFT_T2))
#define BIT_GET_TM_TSFT_T2(x)				(((x) >> BIT_SHIFT_TM_TSFT_T2) & BIT_MASK_TM_TSFT_T2)
#define BIT_SET_TM_TSFT_T2(x, v)			(BIT_CLEAR_TM_TSFT_T2(x) | BIT_TM_TSFT_T2(v))

/* 2 REG_TM_TSFT_T3				(Offset 0x153C) */

#define BIT_SHIFT_TM_TSFT_T3				0
#define BIT_MASK_TM_TSFT_T3				0xffffffffL
#define BIT_TM_TSFT_T3(x)				(((x) & BIT_MASK_TM_TSFT_T3) << BIT_SHIFT_TM_TSFT_T3)
#define BITS_TM_TSFT_T3				(BIT_MASK_TM_TSFT_T3 << BIT_SHIFT_TM_TSFT_T3)
#define BIT_CLEAR_TM_TSFT_T3(x)			((x) & (~BITS_TM_TSFT_T3))
#define BIT_GET_TM_TSFT_T3(x)				(((x) >> BIT_SHIFT_TM_TSFT_T3) & BIT_MASK_TM_TSFT_T3)
#define BIT_SET_TM_TSFT_T3(x, v)			(BIT_CLEAR_TM_TSFT_T3(x) | BIT_TM_TSFT_T3(v))

/* 2 REG_TM_TSFT_T4				(Offset 0x1540) */

#define BIT_SHIFT_TM_TSFT_T4				0
#define BIT_MASK_TM_TSFT_T4				0xffffffffL
#define BIT_TM_TSFT_T4(x)				(((x) & BIT_MASK_TM_TSFT_T4) << BIT_SHIFT_TM_TSFT_T4)
#define BITS_TM_TSFT_T4				(BIT_MASK_TM_TSFT_T4 << BIT_SHIFT_TM_TSFT_T4)
#define BIT_CLEAR_TM_TSFT_T4(x)			((x) & (~BITS_TM_TSFT_T4))
#define BIT_GET_TM_TSFT_T4(x)				(((x) >> BIT_SHIFT_TM_TSFT_T4) & BIT_MASK_TM_TSFT_T4)
#define BIT_SET_TM_TSFT_T4(x, v)			(BIT_CLEAR_TM_TSFT_T4(x) | BIT_TM_TSFT_T4(v))

/* 2 REG_TM_TIMER_OFFSET			(Offset 0x1544) */

#define BIT_SHIFT_TM_TX_PATH_TIME_OFFSET		16
#define BIT_MASK_TM_TX_PATH_TIME_OFFSET		0xffff
#define BIT_TM_TX_PATH_TIME_OFFSET(x)			(((x) & BIT_MASK_TM_TX_PATH_TIME_OFFSET) << BIT_SHIFT_TM_TX_PATH_TIME_OFFSET)
#define BITS_TM_TX_PATH_TIME_OFFSET			(BIT_MASK_TM_TX_PATH_TIME_OFFSET << BIT_SHIFT_TM_TX_PATH_TIME_OFFSET)
#define BIT_CLEAR_TM_TX_PATH_TIME_OFFSET(x)		((x) & (~BITS_TM_TX_PATH_TIME_OFFSET))
#define BIT_GET_TM_TX_PATH_TIME_OFFSET(x)		(((x) >> BIT_SHIFT_TM_TX_PATH_TIME_OFFSET) & BIT_MASK_TM_TX_PATH_TIME_OFFSET)
#define BIT_SET_TM_TX_PATH_TIME_OFFSET(x, v)		(BIT_CLEAR_TM_TX_PATH_TIME_OFFSET(x) | BIT_TM_TX_PATH_TIME_OFFSET(v))

#define BIT_SHIFT_TM_RX_PATH_TIME_OFFSET		0
#define BIT_MASK_TM_RX_PATH_TIME_OFFSET		0xffff
#define BIT_TM_RX_PATH_TIME_OFFSET(x)			(((x) & BIT_MASK_TM_RX_PATH_TIME_OFFSET) << BIT_SHIFT_TM_RX_PATH_TIME_OFFSET)
#define BITS_TM_RX_PATH_TIME_OFFSET			(BIT_MASK_TM_RX_PATH_TIME_OFFSET << BIT_SHIFT_TM_RX_PATH_TIME_OFFSET)
#define BIT_CLEAR_TM_RX_PATH_TIME_OFFSET(x)		((x) & (~BITS_TM_RX_PATH_TIME_OFFSET))
#define BIT_GET_TM_RX_PATH_TIME_OFFSET(x)		(((x) >> BIT_SHIFT_TM_RX_PATH_TIME_OFFSET) & BIT_MASK_TM_RX_PATH_TIME_OFFSET)
#define BIT_SET_TM_RX_PATH_TIME_OFFSET(x, v)		(BIT_CLEAR_TM_RX_PATH_TIME_OFFSET(x) | BIT_TM_RX_PATH_TIME_OFFSET(v))

/* 2 REG_BCN_ELY_ADJ				(Offset 0x1548) */

#define BIT_SHIFT_BCN_ELY_ADJ				0
#define BIT_MASK_BCN_ELY_ADJ				0xffff
#define BIT_BCN_ELY_ADJ(x)				(((x) & BIT_MASK_BCN_ELY_ADJ) << BIT_SHIFT_BCN_ELY_ADJ)
#define BITS_BCN_ELY_ADJ				(BIT_MASK_BCN_ELY_ADJ << BIT_SHIFT_BCN_ELY_ADJ)
#define BIT_CLEAR_BCN_ELY_ADJ(x)			((x) & (~BITS_BCN_ELY_ADJ))
#define BIT_GET_BCN_ELY_ADJ(x)				(((x) >> BIT_SHIFT_BCN_ELY_ADJ) & BIT_MASK_BCN_ELY_ADJ)
#define BIT_SET_BCN_ELY_ADJ(x, v)			(BIT_CLEAR_BCN_ELY_ADJ(x) | BIT_BCN_ELY_ADJ(v))

/* 2 REG_PS_TIMER_D_L			(Offset 0x154C) */

#define BIT_SHIFT_PS_TIMER_D_L				0
#define BIT_MASK_PS_TIMER_D_L				0xffffffffL
#define BIT_PS_TIMER_D_L(x)				(((x) & BIT_MASK_PS_TIMER_D_L) << BIT_SHIFT_PS_TIMER_D_L)
#define BITS_PS_TIMER_D_L				(BIT_MASK_PS_TIMER_D_L << BIT_SHIFT_PS_TIMER_D_L)
#define BIT_CLEAR_PS_TIMER_D_L(x)			((x) & (~BITS_PS_TIMER_D_L))
#define BIT_GET_PS_TIMER_D_L(x)			(((x) >> BIT_SHIFT_PS_TIMER_D_L) & BIT_MASK_PS_TIMER_D_L)
#define BIT_SET_PS_TIMER_D_L(x, v)			(BIT_CLEAR_PS_TIMER_D_L(x) | BIT_PS_TIMER_D_L(v))

/* 2 REG_PS_TIMER_D_H			(Offset 0x1550) */

#define BIT_SHIFT_PS_TIMER_D_H				0
#define BIT_MASK_PS_TIMER_D_H				0xffffffffL
#define BIT_PS_TIMER_D_H(x)				(((x) & BIT_MASK_PS_TIMER_D_H) << BIT_SHIFT_PS_TIMER_D_H)
#define BITS_PS_TIMER_D_H				(BIT_MASK_PS_TIMER_D_H << BIT_SHIFT_PS_TIMER_D_H)
#define BIT_CLEAR_PS_TIMER_D_H(x)			((x) & (~BITS_PS_TIMER_D_H))
#define BIT_GET_PS_TIMER_D_H(x)			(((x) >> BIT_SHIFT_PS_TIMER_D_H) & BIT_MASK_PS_TIMER_D_H)
#define BIT_SET_PS_TIMER_D_H(x, v)			(BIT_CLEAR_PS_TIMER_D_H(x) | BIT_PS_TIMER_D_H(v))

/* 2 REG_PS_TIMER_E_L			(Offset 0x1554) */

#define BIT_SHIFT_PS_TIMER_E_L				0
#define BIT_MASK_PS_TIMER_E_L				0xffffffffL
#define BIT_PS_TIMER_E_L(x)				(((x) & BIT_MASK_PS_TIMER_E_L) << BIT_SHIFT_PS_TIMER_E_L)
#define BITS_PS_TIMER_E_L				(BIT_MASK_PS_TIMER_E_L << BIT_SHIFT_PS_TIMER_E_L)
#define BIT_CLEAR_PS_TIMER_E_L(x)			((x) & (~BITS_PS_TIMER_E_L))
#define BIT_GET_PS_TIMER_E_L(x)			(((x) >> BIT_SHIFT_PS_TIMER_E_L) & BIT_MASK_PS_TIMER_E_L)
#define BIT_SET_PS_TIMER_E_L(x, v)			(BIT_CLEAR_PS_TIMER_E_L(x) | BIT_PS_TIMER_E_L(v))

/* 2 REG_PS_TIMER_E_H			(Offset 0x1558) */

#define BIT_SHIFT_PS_TIMER_E_H				0
#define BIT_MASK_PS_TIMER_E_H				0xffffffffL
#define BIT_PS_TIMER_E_H(x)				(((x) & BIT_MASK_PS_TIMER_E_H) << BIT_SHIFT_PS_TIMER_E_H)
#define BITS_PS_TIMER_E_H				(BIT_MASK_PS_TIMER_E_H << BIT_SHIFT_PS_TIMER_E_H)
#define BIT_CLEAR_PS_TIMER_E_H(x)			((x) & (~BITS_PS_TIMER_E_H))
#define BIT_GET_PS_TIMER_E_H(x)			(((x) >> BIT_SHIFT_PS_TIMER_E_H) & BIT_MASK_PS_TIMER_E_H)
#define BIT_SET_PS_TIMER_E_H(x, v)			(BIT_CLEAR_PS_TIMER_E_H(x) | BIT_PS_TIMER_E_H(v))

/* 2 REG_AX_MUEDCA_VO_PARAM			(Offset 0x1580) */

#define BIT_SHIFT_MUEDCA_VO_PARAM_TIMER		16
#define BIT_MASK_MUEDCA_VO_PARAM_TIMER			0xffff
#define BIT_MUEDCA_VO_PARAM_TIMER(x)			(((x) & BIT_MASK_MUEDCA_VO_PARAM_TIMER) << BIT_SHIFT_MUEDCA_VO_PARAM_TIMER)
#define BITS_MUEDCA_VO_PARAM_TIMER			(BIT_MASK_MUEDCA_VO_PARAM_TIMER << BIT_SHIFT_MUEDCA_VO_PARAM_TIMER)
#define BIT_CLEAR_MUEDCA_VO_PARAM_TIMER(x)		((x) & (~BITS_MUEDCA_VO_PARAM_TIMER))
#define BIT_GET_MUEDCA_VO_PARAM_TIMER(x)		(((x) >> BIT_SHIFT_MUEDCA_VO_PARAM_TIMER) & BIT_MASK_MUEDCA_VO_PARAM_TIMER)
#define BIT_SET_MUEDCA_VO_PARAM_TIMER(x, v)		(BIT_CLEAR_MUEDCA_VO_PARAM_TIMER(x) | BIT_MUEDCA_VO_PARAM_TIMER(v))

#define BIT_SHIFT_MUEDCA_VO_PARAM_CW			8
#define BIT_MASK_MUEDCA_VO_PARAM_CW			0xff
#define BIT_MUEDCA_VO_PARAM_CW(x)			(((x) & BIT_MASK_MUEDCA_VO_PARAM_CW) << BIT_SHIFT_MUEDCA_VO_PARAM_CW)
#define BITS_MUEDCA_VO_PARAM_CW			(BIT_MASK_MUEDCA_VO_PARAM_CW << BIT_SHIFT_MUEDCA_VO_PARAM_CW)
#define BIT_CLEAR_MUEDCA_VO_PARAM_CW(x)		((x) & (~BITS_MUEDCA_VO_PARAM_CW))
#define BIT_GET_MUEDCA_VO_PARAM_CW(x)			(((x) >> BIT_SHIFT_MUEDCA_VO_PARAM_CW) & BIT_MASK_MUEDCA_VO_PARAM_CW)
#define BIT_SET_MUEDCA_VO_PARAM_CW(x, v)		(BIT_CLEAR_MUEDCA_VO_PARAM_CW(x) | BIT_MUEDCA_VO_PARAM_CW(v))

#define BIT_SHIFT_MUEDCA_VO_PARAM_AIFS			0
#define BIT_MASK_MUEDCA_VO_PARAM_AIFS			0xff
#define BIT_MUEDCA_VO_PARAM_AIFS(x)			(((x) & BIT_MASK_MUEDCA_VO_PARAM_AIFS) << BIT_SHIFT_MUEDCA_VO_PARAM_AIFS)
#define BITS_MUEDCA_VO_PARAM_AIFS			(BIT_MASK_MUEDCA_VO_PARAM_AIFS << BIT_SHIFT_MUEDCA_VO_PARAM_AIFS)
#define BIT_CLEAR_MUEDCA_VO_PARAM_AIFS(x)		((x) & (~BITS_MUEDCA_VO_PARAM_AIFS))
#define BIT_GET_MUEDCA_VO_PARAM_AIFS(x)		(((x) >> BIT_SHIFT_MUEDCA_VO_PARAM_AIFS) & BIT_MASK_MUEDCA_VO_PARAM_AIFS)
#define BIT_SET_MUEDCA_VO_PARAM_AIFS(x, v)		(BIT_CLEAR_MUEDCA_VO_PARAM_AIFS(x) | BIT_MUEDCA_VO_PARAM_AIFS(v))

/* 2 REG_AX_MUEDCA_VI_PARAM			(Offset 0x1584) */

#define BIT_SHIFT_MUEDCA_VI_PARAM_TIMER		16
#define BIT_MASK_MUEDCA_VI_PARAM_TIMER			0xffff
#define BIT_MUEDCA_VI_PARAM_TIMER(x)			(((x) & BIT_MASK_MUEDCA_VI_PARAM_TIMER) << BIT_SHIFT_MUEDCA_VI_PARAM_TIMER)
#define BITS_MUEDCA_VI_PARAM_TIMER			(BIT_MASK_MUEDCA_VI_PARAM_TIMER << BIT_SHIFT_MUEDCA_VI_PARAM_TIMER)
#define BIT_CLEAR_MUEDCA_VI_PARAM_TIMER(x)		((x) & (~BITS_MUEDCA_VI_PARAM_TIMER))
#define BIT_GET_MUEDCA_VI_PARAM_TIMER(x)		(((x) >> BIT_SHIFT_MUEDCA_VI_PARAM_TIMER) & BIT_MASK_MUEDCA_VI_PARAM_TIMER)
#define BIT_SET_MUEDCA_VI_PARAM_TIMER(x, v)		(BIT_CLEAR_MUEDCA_VI_PARAM_TIMER(x) | BIT_MUEDCA_VI_PARAM_TIMER(v))

#define BIT_SHIFT_MUEDCA_VI_PARAM_CW			8
#define BIT_MASK_MUEDCA_VI_PARAM_CW			0xff
#define BIT_MUEDCA_VI_PARAM_CW(x)			(((x) & BIT_MASK_MUEDCA_VI_PARAM_CW) << BIT_SHIFT_MUEDCA_VI_PARAM_CW)
#define BITS_MUEDCA_VI_PARAM_CW			(BIT_MASK_MUEDCA_VI_PARAM_CW << BIT_SHIFT_MUEDCA_VI_PARAM_CW)
#define BIT_CLEAR_MUEDCA_VI_PARAM_CW(x)		((x) & (~BITS_MUEDCA_VI_PARAM_CW))
#define BIT_GET_MUEDCA_VI_PARAM_CW(x)			(((x) >> BIT_SHIFT_MUEDCA_VI_PARAM_CW) & BIT_MASK_MUEDCA_VI_PARAM_CW)
#define BIT_SET_MUEDCA_VI_PARAM_CW(x, v)		(BIT_CLEAR_MUEDCA_VI_PARAM_CW(x) | BIT_MUEDCA_VI_PARAM_CW(v))

#define BIT_SHIFT_MUEDCA_VI_PARAM_AIFS			0
#define BIT_MASK_MUEDCA_VI_PARAM_AIFS			0xff
#define BIT_MUEDCA_VI_PARAM_AIFS(x)			(((x) & BIT_MASK_MUEDCA_VI_PARAM_AIFS) << BIT_SHIFT_MUEDCA_VI_PARAM_AIFS)
#define BITS_MUEDCA_VI_PARAM_AIFS			(BIT_MASK_MUEDCA_VI_PARAM_AIFS << BIT_SHIFT_MUEDCA_VI_PARAM_AIFS)
#define BIT_CLEAR_MUEDCA_VI_PARAM_AIFS(x)		((x) & (~BITS_MUEDCA_VI_PARAM_AIFS))
#define BIT_GET_MUEDCA_VI_PARAM_AIFS(x)		(((x) >> BIT_SHIFT_MUEDCA_VI_PARAM_AIFS) & BIT_MASK_MUEDCA_VI_PARAM_AIFS)
#define BIT_SET_MUEDCA_VI_PARAM_AIFS(x, v)		(BIT_CLEAR_MUEDCA_VI_PARAM_AIFS(x) | BIT_MUEDCA_VI_PARAM_AIFS(v))

/* 2 REG_AX_MUEDCA_BE_PARAM			(Offset 0x1588) */

#define BIT_SHIFT_MUEDCA_BE_PARAM_TIMER		16
#define BIT_MASK_MUEDCA_BE_PARAM_TIMER			0xffff
#define BIT_MUEDCA_BE_PARAM_TIMER(x)			(((x) & BIT_MASK_MUEDCA_BE_PARAM_TIMER) << BIT_SHIFT_MUEDCA_BE_PARAM_TIMER)
#define BITS_MUEDCA_BE_PARAM_TIMER			(BIT_MASK_MUEDCA_BE_PARAM_TIMER << BIT_SHIFT_MUEDCA_BE_PARAM_TIMER)
#define BIT_CLEAR_MUEDCA_BE_PARAM_TIMER(x)		((x) & (~BITS_MUEDCA_BE_PARAM_TIMER))
#define BIT_GET_MUEDCA_BE_PARAM_TIMER(x)		(((x) >> BIT_SHIFT_MUEDCA_BE_PARAM_TIMER) & BIT_MASK_MUEDCA_BE_PARAM_TIMER)
#define BIT_SET_MUEDCA_BE_PARAM_TIMER(x, v)		(BIT_CLEAR_MUEDCA_BE_PARAM_TIMER(x) | BIT_MUEDCA_BE_PARAM_TIMER(v))

#define BIT_SHIFT_MUEDCA_BE_PARAM_CW			8
#define BIT_MASK_MUEDCA_BE_PARAM_CW			0xff
#define BIT_MUEDCA_BE_PARAM_CW(x)			(((x) & BIT_MASK_MUEDCA_BE_PARAM_CW) << BIT_SHIFT_MUEDCA_BE_PARAM_CW)
#define BITS_MUEDCA_BE_PARAM_CW			(BIT_MASK_MUEDCA_BE_PARAM_CW << BIT_SHIFT_MUEDCA_BE_PARAM_CW)
#define BIT_CLEAR_MUEDCA_BE_PARAM_CW(x)		((x) & (~BITS_MUEDCA_BE_PARAM_CW))
#define BIT_GET_MUEDCA_BE_PARAM_CW(x)			(((x) >> BIT_SHIFT_MUEDCA_BE_PARAM_CW) & BIT_MASK_MUEDCA_BE_PARAM_CW)
#define BIT_SET_MUEDCA_BE_PARAM_CW(x, v)		(BIT_CLEAR_MUEDCA_BE_PARAM_CW(x) | BIT_MUEDCA_BE_PARAM_CW(v))

#define BIT_SHIFT_MUEDCA_BE_PARAM_AIFS			0
#define BIT_MASK_MUEDCA_BE_PARAM_AIFS			0xff
#define BIT_MUEDCA_BE_PARAM_AIFS(x)			(((x) & BIT_MASK_MUEDCA_BE_PARAM_AIFS) << BIT_SHIFT_MUEDCA_BE_PARAM_AIFS)
#define BITS_MUEDCA_BE_PARAM_AIFS			(BIT_MASK_MUEDCA_BE_PARAM_AIFS << BIT_SHIFT_MUEDCA_BE_PARAM_AIFS)
#define BIT_CLEAR_MUEDCA_BE_PARAM_AIFS(x)		((x) & (~BITS_MUEDCA_BE_PARAM_AIFS))
#define BIT_GET_MUEDCA_BE_PARAM_AIFS(x)		(((x) >> BIT_SHIFT_MUEDCA_BE_PARAM_AIFS) & BIT_MASK_MUEDCA_BE_PARAM_AIFS)
#define BIT_SET_MUEDCA_BE_PARAM_AIFS(x, v)		(BIT_CLEAR_MUEDCA_BE_PARAM_AIFS(x) | BIT_MUEDCA_BE_PARAM_AIFS(v))

/* 2 REG_AX_MUEDCA_BK_PARAM			(Offset 0x158C) */

#define BIT_SHIFT_MUEDCA_BK_PARAM_TIMER		16
#define BIT_MASK_MUEDCA_BK_PARAM_TIMER			0xffff
#define BIT_MUEDCA_BK_PARAM_TIMER(x)			(((x) & BIT_MASK_MUEDCA_BK_PARAM_TIMER) << BIT_SHIFT_MUEDCA_BK_PARAM_TIMER)
#define BITS_MUEDCA_BK_PARAM_TIMER			(BIT_MASK_MUEDCA_BK_PARAM_TIMER << BIT_SHIFT_MUEDCA_BK_PARAM_TIMER)
#define BIT_CLEAR_MUEDCA_BK_PARAM_TIMER(x)		((x) & (~BITS_MUEDCA_BK_PARAM_TIMER))
#define BIT_GET_MUEDCA_BK_PARAM_TIMER(x)		(((x) >> BIT_SHIFT_MUEDCA_BK_PARAM_TIMER) & BIT_MASK_MUEDCA_BK_PARAM_TIMER)
#define BIT_SET_MUEDCA_BK_PARAM_TIMER(x, v)		(BIT_CLEAR_MUEDCA_BK_PARAM_TIMER(x) | BIT_MUEDCA_BK_PARAM_TIMER(v))

#define BIT_SHIFT_MUEDCA_BK_PARAM_CW			8
#define BIT_MASK_MUEDCA_BK_PARAM_CW			0xff
#define BIT_MUEDCA_BK_PARAM_CW(x)			(((x) & BIT_MASK_MUEDCA_BK_PARAM_CW) << BIT_SHIFT_MUEDCA_BK_PARAM_CW)
#define BITS_MUEDCA_BK_PARAM_CW			(BIT_MASK_MUEDCA_BK_PARAM_CW << BIT_SHIFT_MUEDCA_BK_PARAM_CW)
#define BIT_CLEAR_MUEDCA_BK_PARAM_CW(x)		((x) & (~BITS_MUEDCA_BK_PARAM_CW))
#define BIT_GET_MUEDCA_BK_PARAM_CW(x)			(((x) >> BIT_SHIFT_MUEDCA_BK_PARAM_CW) & BIT_MASK_MUEDCA_BK_PARAM_CW)
#define BIT_SET_MUEDCA_BK_PARAM_CW(x, v)		(BIT_CLEAR_MUEDCA_BK_PARAM_CW(x) | BIT_MUEDCA_BK_PARAM_CW(v))

#define BIT_SHIFT_MUEDCA_BK_PARAM_AIFS			0
#define BIT_MASK_MUEDCA_BK_PARAM_AIFS			0xff
#define BIT_MUEDCA_BK_PARAM_AIFS(x)			(((x) & BIT_MASK_MUEDCA_BK_PARAM_AIFS) << BIT_SHIFT_MUEDCA_BK_PARAM_AIFS)
#define BITS_MUEDCA_BK_PARAM_AIFS			(BIT_MASK_MUEDCA_BK_PARAM_AIFS << BIT_SHIFT_MUEDCA_BK_PARAM_AIFS)
#define BIT_CLEAR_MUEDCA_BK_PARAM_AIFS(x)		((x) & (~BITS_MUEDCA_BK_PARAM_AIFS))
#define BIT_GET_MUEDCA_BK_PARAM_AIFS(x)		(((x) >> BIT_SHIFT_MUEDCA_BK_PARAM_AIFS) & BIT_MASK_MUEDCA_BK_PARAM_AIFS)
#define BIT_SET_MUEDCA_BK_PARAM_AIFS(x, v)		(BIT_CLEAR_MUEDCA_BK_PARAM_AIFS(x) | BIT_MUEDCA_BK_PARAM_AIFS(v))

/* 2 REG_AX_TB_MUEDCA_CTRL			(Offset 0x1590) */

#define BIT_SHIFT_TB_TIMER_CNT_INT			27
#define BIT_MASK_TB_TIMER_CNT_INT			0x1f
#define BIT_TB_TIMER_CNT_INT(x)			(((x) & BIT_MASK_TB_TIMER_CNT_INT) << BIT_SHIFT_TB_TIMER_CNT_INT)
#define BITS_TB_TIMER_CNT_INT				(BIT_MASK_TB_TIMER_CNT_INT << BIT_SHIFT_TB_TIMER_CNT_INT)
#define BIT_CLEAR_TB_TIMER_CNT_INT(x)			((x) & (~BITS_TB_TIMER_CNT_INT))
#define BIT_GET_TB_TIMER_CNT_INT(x)			(((x) >> BIT_SHIFT_TB_TIMER_CNT_INT) & BIT_MASK_TB_TIMER_CNT_INT)
#define BIT_SET_TB_TIMER_CNT_INT(x, v)			(BIT_CLEAR_TB_TIMER_CNT_INT(x) | BIT_TB_TIMER_CNT_INT(v))

#define BIT_HE_TB_PPSU_ONLY_EN				BIT(26)
#define BIT_TB_TXPAUSE					BIT(25)
#define BIT_TB_CHK_EDCCA_PER20_BITMAP_SIFS		BIT(23)
#define BIT_TB_CHK_BASIC_NAV				BIT(22)
#define BIT_TB_CHK_ZGBTCCA				BIT(21)
#define BIT_TB_CHK_EDCCA				BIT(20)
#define BIT_TB_CHK_CCA_S80				BIT(19)
#define BIT_TB_CHK_CCA_S40				BIT(18)
#define BIT_TB_CHK_CCA_S20				BIT(17)
#define BIT_TB_CHK_CCA_P20				BIT(16)
#define BIT_SR_CTN_CHK__NAV				BIT(12)
#define BIT_SR_CTN_CHK_ZGBTCCA				BIT(11)
#define BIT_SR_CTN_CHK_EDCCA				BIT(10)
#define BIT_SR_CTN_CHK_CCA_S40				BIT(9)
#define BIT_SR_CTN_CHK_CCA_S20				BIT(8)
#define BIT_CTN_CHK_INTRA_NAV				BIT(7)
#define BIT_CTN_CHK_BASIC_NAV				BIT(6)
#define BIT_CTN_CHK_ZGBTCCA				BIT(4)
#define BIT_CTN_CHK_EDCCA				BIT(3)
#define BIT_DIS_UPD_BEAM_CHG				BIT(2)
#define BIT_CTN_CHK_CCA_S40				BIT(2)
#define BIT_SET_MUEDCATIMER_TF				BIT(1)
#define BIT_CTN_CHK_CCA_S20				BIT(1)
#define BIT_MUEDCA_EN					BIT(0)
#define BIT_CTN_CHK_CCA_P20				BIT(0)

/* 2 REG_CCA_NAV_CHK				(Offset 0x1594)*/
#define BIT_CTN_CHK_ZGCCA               BIT(5)
#define BIT_CTN_CHK_BTCCA               BIT(4)

/* 2 REG_TSFT_HIOE_RFON_L			(Offset 0x1598) */

#define BIT_SHIFT_TSFT_AT_HIOE_RFON_L			0
#define BIT_MASK_TSFT_AT_HIOE_RFON_L			0xffffffffL
#define BIT_TSFT_AT_HIOE_RFON_L(x)			(((x) & BIT_MASK_TSFT_AT_HIOE_RFON_L) << BIT_SHIFT_TSFT_AT_HIOE_RFON_L)
#define BITS_TSFT_AT_HIOE_RFON_L			(BIT_MASK_TSFT_AT_HIOE_RFON_L << BIT_SHIFT_TSFT_AT_HIOE_RFON_L)
#define BIT_CLEAR_TSFT_AT_HIOE_RFON_L(x)		((x) & (~BITS_TSFT_AT_HIOE_RFON_L))
#define BIT_GET_TSFT_AT_HIOE_RFON_L(x)			(((x) >> BIT_SHIFT_TSFT_AT_HIOE_RFON_L) & BIT_MASK_TSFT_AT_HIOE_RFON_L)
#define BIT_SET_TSFT_AT_HIOE_RFON_L(x, v)		(BIT_CLEAR_TSFT_AT_HIOE_RFON_L(x) | BIT_TSFT_AT_HIOE_RFON_L(v))

/* 2 REG_TSFT_HIOE_RFON_H			(Offset 0x159C) */

#define BIT_SHIFT_TSFT_AT_HIOE_RFON_H			0
#define BIT_MASK_TSFT_AT_HIOE_RFON_H			0xffffffffL
#define BIT_TSFT_AT_HIOE_RFON_H(x)			(((x) & BIT_MASK_TSFT_AT_HIOE_RFON_H) << BIT_SHIFT_TSFT_AT_HIOE_RFON_H)
#define BITS_TSFT_AT_HIOE_RFON_H			(BIT_MASK_TSFT_AT_HIOE_RFON_H << BIT_SHIFT_TSFT_AT_HIOE_RFON_H)
#define BIT_CLEAR_TSFT_AT_HIOE_RFON_H(x)		((x) & (~BITS_TSFT_AT_HIOE_RFON_H))
#define BIT_GET_TSFT_AT_HIOE_RFON_H(x)			(((x) >> BIT_SHIFT_TSFT_AT_HIOE_RFON_H) & BIT_MASK_TSFT_AT_HIOE_RFON_H)
#define BIT_SET_TSFT_AT_HIOE_RFON_H(x, v)		(BIT_CLEAR_TSFT_AT_HIOE_RFON_H(x) | BIT_TSFT_AT_HIOE_RFON_H(v))

/* 2 REG_TSFT_BCN_CCAUP_L			(Offset 0x15A0) */

#define BIT_SHIFT_TSFT_AT_BCN_CCA_UP_L			0
#define BIT_MASK_TSFT_AT_BCN_CCA_UP_L			0xffffffffL
#define BIT_TSFT_AT_BCN_CCA_UP_L(x)			(((x) & BIT_MASK_TSFT_AT_BCN_CCA_UP_L) << BIT_SHIFT_TSFT_AT_BCN_CCA_UP_L)
#define BITS_TSFT_AT_BCN_CCA_UP_L			(BIT_MASK_TSFT_AT_BCN_CCA_UP_L << BIT_SHIFT_TSFT_AT_BCN_CCA_UP_L)
#define BIT_CLEAR_TSFT_AT_BCN_CCA_UP_L(x)		((x) & (~BITS_TSFT_AT_BCN_CCA_UP_L))
#define BIT_GET_TSFT_AT_BCN_CCA_UP_L(x)		(((x) >> BIT_SHIFT_TSFT_AT_BCN_CCA_UP_L) & BIT_MASK_TSFT_AT_BCN_CCA_UP_L)
#define BIT_SET_TSFT_AT_BCN_CCA_UP_L(x, v)		(BIT_CLEAR_TSFT_AT_BCN_CCA_UP_L(x) | BIT_TSFT_AT_BCN_CCA_UP_L(v))

/* 2 REG_TSFT_BCN_CCAUP_H			(Offset 0x15A4) */

#define BIT_SHIFT_TSFT_AT_BCN_CCA_UP_H			0
#define BIT_MASK_TSFT_AT_BCN_CCA_UP_H			0xffffffffL
#define BIT_TSFT_AT_BCN_CCA_UP_H(x)			(((x) & BIT_MASK_TSFT_AT_BCN_CCA_UP_H) << BIT_SHIFT_TSFT_AT_BCN_CCA_UP_H)
#define BITS_TSFT_AT_BCN_CCA_UP_H			(BIT_MASK_TSFT_AT_BCN_CCA_UP_H << BIT_SHIFT_TSFT_AT_BCN_CCA_UP_H)
#define BIT_CLEAR_TSFT_AT_BCN_CCA_UP_H(x)		((x) & (~BITS_TSFT_AT_BCN_CCA_UP_H))
#define BIT_GET_TSFT_AT_BCN_CCA_UP_H(x)		(((x) >> BIT_SHIFT_TSFT_AT_BCN_CCA_UP_H) & BIT_MASK_TSFT_AT_BCN_CCA_UP_H)
#define BIT_SET_TSFT_AT_BCN_CCA_UP_H(x, v)		(BIT_CLEAR_TSFT_AT_BCN_CCA_UP_H(x) | BIT_TSFT_AT_BCN_CCA_UP_H(v))

/* 2 REG_POF_BCNELY_AGG_TBTT			(Offset 0x15A8) */

#define BIT_EN_P0_TBTT_CNT				BIT(24)

#define BIT_SHIFT_P0_TBTT_CNT_THRS			8
#define BIT_MASK_P0_TBTT_CNT_THRS			0xffff
#define BIT_P0_TBTT_CNT_THRS(x)			(((x) & BIT_MASK_P0_TBTT_CNT_THRS) << BIT_SHIFT_P0_TBTT_CNT_THRS)
#define BITS_P0_TBTT_CNT_THRS				(BIT_MASK_P0_TBTT_CNT_THRS << BIT_SHIFT_P0_TBTT_CNT_THRS)
#define BIT_CLEAR_P0_TBTT_CNT_THRS(x)			((x) & (~BITS_P0_TBTT_CNT_THRS))
#define BIT_GET_P0_TBTT_CNT_THRS(x)			(((x) >> BIT_SHIFT_P0_TBTT_CNT_THRS) & BIT_MASK_P0_TBTT_CNT_THRS)
#define BIT_SET_P0_TBTT_CNT_THRS(x, v)			(BIT_CLEAR_P0_TBTT_CNT_THRS(x) | BIT_P0_TBTT_CNT_THRS(v))

#define BIT_EN_POF_ELY_AGG				BIT(7)

#define BIT_SHIFT_INI_POF_ELY_AGG_CNT			0
#define BIT_MASK_INI_POF_ELY_AGG_CNT			0x7f
#define BIT_INI_POF_ELY_AGG_CNT(x)			(((x) & BIT_MASK_INI_POF_ELY_AGG_CNT) << BIT_SHIFT_INI_POF_ELY_AGG_CNT)
#define BITS_INI_POF_ELY_AGG_CNT			(BIT_MASK_INI_POF_ELY_AGG_CNT << BIT_SHIFT_INI_POF_ELY_AGG_CNT)
#define BIT_CLEAR_INI_POF_ELY_AGG_CNT(x)		((x) & (~BITS_INI_POF_ELY_AGG_CNT))
#define BIT_GET_INI_POF_ELY_AGG_CNT(x)			(((x) >> BIT_SHIFT_INI_POF_ELY_AGG_CNT) & BIT_MASK_INI_POF_ELY_AGG_CNT)
#define BIT_SET_INI_POF_ELY_AGG_CNT(x, v)		(BIT_CLEAR_INI_POF_ELY_AGG_CNT(x) | BIT_INI_POF_ELY_AGG_CNT(v))

/* 2 REG_BCN_PSR_RPT2			(Offset 0x1600) */

#define BIT_SHIFT_DTIM_CNT2				24
#define BIT_MASK_DTIM_CNT2				0xff
#define BIT_DTIM_CNT2(x)				(((x) & BIT_MASK_DTIM_CNT2) << BIT_SHIFT_DTIM_CNT2)
#define BITS_DTIM_CNT2					(BIT_MASK_DTIM_CNT2 << BIT_SHIFT_DTIM_CNT2)
#define BIT_CLEAR_DTIM_CNT2(x)				((x) & (~BITS_DTIM_CNT2))
#define BIT_GET_DTIM_CNT2(x)				(((x) >> BIT_SHIFT_DTIM_CNT2) & BIT_MASK_DTIM_CNT2)
#define BIT_SET_DTIM_CNT2(x, v)			(BIT_CLEAR_DTIM_CNT2(x) | BIT_DTIM_CNT2(v))

#define BIT_SHIFT_DTIM_PERIOD2				16
#define BIT_MASK_DTIM_PERIOD2				0xff
#define BIT_DTIM_PERIOD2(x)				(((x) & BIT_MASK_DTIM_PERIOD2) << BIT_SHIFT_DTIM_PERIOD2)
#define BITS_DTIM_PERIOD2				(BIT_MASK_DTIM_PERIOD2 << BIT_SHIFT_DTIM_PERIOD2)
#define BIT_CLEAR_DTIM_PERIOD2(x)			((x) & (~BITS_DTIM_PERIOD2))
#define BIT_GET_DTIM_PERIOD2(x)			(((x) >> BIT_SHIFT_DTIM_PERIOD2) & BIT_MASK_DTIM_PERIOD2)
#define BIT_SET_DTIM_PERIOD2(x, v)			(BIT_CLEAR_DTIM_PERIOD2(x) | BIT_DTIM_PERIOD2(v))

#define BIT_HAS_MY_BC2					BIT(15)
#define BIT_HAS_MY_BSSID2				BIT(14)
#define BIT_HAS_MYAID2					BIT(13)
#define BIT_RPT_VALID2					BIT(12)

#define BIT_SHIFT_PS_AID_2				0
#define BIT_MASK_PS_AID_2				0x7ff
#define BIT_PS_AID_2(x)				(((x) & BIT_MASK_PS_AID_2) << BIT_SHIFT_PS_AID_2)
#define BITS_PS_AID_2					(BIT_MASK_PS_AID_2 << BIT_SHIFT_PS_AID_2)
#define BIT_CLEAR_PS_AID_2(x)				((x) & (~BITS_PS_AID_2))
#define BIT_GET_PS_AID_2(x)				(((x) >> BIT_SHIFT_PS_AID_2) & BIT_MASK_PS_AID_2)
#define BIT_SET_PS_AID_2(x, v)				(BIT_CLEAR_PS_AID_2(x) | BIT_PS_AID_2(v))

/* 2 REG_BCN_PSR_RPT3			(Offset 0x1604) */

#define BIT_SHIFT_DTIM_CNT3				24
#define BIT_MASK_DTIM_CNT3				0xff
#define BIT_DTIM_CNT3(x)				(((x) & BIT_MASK_DTIM_CNT3) << BIT_SHIFT_DTIM_CNT3)
#define BITS_DTIM_CNT3					(BIT_MASK_DTIM_CNT3 << BIT_SHIFT_DTIM_CNT3)
#define BIT_CLEAR_DTIM_CNT3(x)				((x) & (~BITS_DTIM_CNT3))
#define BIT_GET_DTIM_CNT3(x)				(((x) >> BIT_SHIFT_DTIM_CNT3) & BIT_MASK_DTIM_CNT3)
#define BIT_SET_DTIM_CNT3(x, v)			(BIT_CLEAR_DTIM_CNT3(x) | BIT_DTIM_CNT3(v))

#define BIT_SHIFT_DTIM_PERIOD3				16
#define BIT_MASK_DTIM_PERIOD3				0xff
#define BIT_DTIM_PERIOD3(x)				(((x) & BIT_MASK_DTIM_PERIOD3) << BIT_SHIFT_DTIM_PERIOD3)
#define BITS_DTIM_PERIOD3				(BIT_MASK_DTIM_PERIOD3 << BIT_SHIFT_DTIM_PERIOD3)
#define BIT_CLEAR_DTIM_PERIOD3(x)			((x) & (~BITS_DTIM_PERIOD3))
#define BIT_GET_DTIM_PERIOD3(x)			(((x) >> BIT_SHIFT_DTIM_PERIOD3) & BIT_MASK_DTIM_PERIOD3)
#define BIT_SET_DTIM_PERIOD3(x, v)			(BIT_CLEAR_DTIM_PERIOD3(x) | BIT_DTIM_PERIOD3(v))

#define BIT_HAS_MY_BC3					BIT(15)
#define BIT_HAS_MY_BSSID3				BIT(14)
#define BIT_HAS_MYAID3					BIT(13)
#define BIT_RPT_VALID3					BIT(12)

#define BIT_SHIFT_PS_AID_3				0
#define BIT_MASK_PS_AID_3				0x7ff
#define BIT_PS_AID_3(x)				(((x) & BIT_MASK_PS_AID_3) << BIT_SHIFT_PS_AID_3)
#define BITS_PS_AID_3					(BIT_MASK_PS_AID_3 << BIT_SHIFT_PS_AID_3)
#define BIT_CLEAR_PS_AID_3(x)				((x) & (~BITS_PS_AID_3))
#define BIT_GET_PS_AID_3(x)				(((x) >> BIT_SHIFT_PS_AID_3) & BIT_MASK_PS_AID_3)
#define BIT_SET_PS_AID_3(x, v)				(BIT_CLEAR_PS_AID_3(x) | BIT_PS_AID_3(v))

/* 2 REG_BCN_PSR_RPT4			(Offset 0x1608) */

#define BIT_SHIFT_DTIM_CNT4				24
#define BIT_MASK_DTIM_CNT4				0xff
#define BIT_DTIM_CNT4(x)				(((x) & BIT_MASK_DTIM_CNT4) << BIT_SHIFT_DTIM_CNT4)
#define BITS_DTIM_CNT4					(BIT_MASK_DTIM_CNT4 << BIT_SHIFT_DTIM_CNT4)
#define BIT_CLEAR_DTIM_CNT4(x)				((x) & (~BITS_DTIM_CNT4))
#define BIT_GET_DTIM_CNT4(x)				(((x) >> BIT_SHIFT_DTIM_CNT4) & BIT_MASK_DTIM_CNT4)
#define BIT_SET_DTIM_CNT4(x, v)			(BIT_CLEAR_DTIM_CNT4(x) | BIT_DTIM_CNT4(v))

#define BIT_SHIFT_DTIM_PERIOD4				16
#define BIT_MASK_DTIM_PERIOD4				0xff
#define BIT_DTIM_PERIOD4(x)				(((x) & BIT_MASK_DTIM_PERIOD4) << BIT_SHIFT_DTIM_PERIOD4)
#define BITS_DTIM_PERIOD4				(BIT_MASK_DTIM_PERIOD4 << BIT_SHIFT_DTIM_PERIOD4)
#define BIT_CLEAR_DTIM_PERIOD4(x)			((x) & (~BITS_DTIM_PERIOD4))
#define BIT_GET_DTIM_PERIOD4(x)			(((x) >> BIT_SHIFT_DTIM_PERIOD4) & BIT_MASK_DTIM_PERIOD4)
#define BIT_SET_DTIM_PERIOD4(x, v)			(BIT_CLEAR_DTIM_PERIOD4(x) | BIT_DTIM_PERIOD4(v))

#define BIT_HAS_MY_BC4					BIT(15)
#define BIT_HAS_MY_BSSID4				BIT(14)
#define BIT_HAS_MYAID4					BIT(13)
#define BIT_RPT_VALID4					BIT(12)

#define BIT_SHIFT_PS_AID_4				0
#define BIT_MASK_PS_AID_4				0x7ff
#define BIT_PS_AID_4(x)				(((x) & BIT_MASK_PS_AID_4) << BIT_SHIFT_PS_AID_4)
#define BITS_PS_AID_4					(BIT_MASK_PS_AID_4 << BIT_SHIFT_PS_AID_4)
#define BIT_CLEAR_PS_AID_4(x)				((x) & (~BITS_PS_AID_4))
#define BIT_GET_PS_AID_4(x)				(((x) >> BIT_SHIFT_PS_AID_4) & BIT_MASK_PS_AID_4)
#define BIT_SET_PS_AID_4(x, v)				(BIT_CLEAR_PS_AID_4(x) | BIT_PS_AID_4(v))

/* 2 REG_A1_ADDR_MASK			(Offset 0x160C) */

#define BIT_SHIFT_A1_ADDR_MASK				0
#define BIT_MASK_A1_ADDR_MASK				0xffffffffL
#define BIT_A1_ADDR_MASK(x)				(((x) & BIT_MASK_A1_ADDR_MASK) << BIT_SHIFT_A1_ADDR_MASK)
#define BITS_A1_ADDR_MASK				(BIT_MASK_A1_ADDR_MASK << BIT_SHIFT_A1_ADDR_MASK)
#define BIT_CLEAR_A1_ADDR_MASK(x)			((x) & (~BITS_A1_ADDR_MASK))
#define BIT_GET_A1_ADDR_MASK(x)			(((x) >> BIT_SHIFT_A1_ADDR_MASK) & BIT_MASK_A1_ADDR_MASK)
#define BIT_SET_A1_ADDR_MASK(x, v)			(BIT_CLEAR_A1_ADDR_MASK(x) | BIT_A1_ADDR_MASK(v))

/* 2 REG_RXPSF_CTRL				(Offset 0x1610) */

#define BIT_RXGCK_FIFOTHR_EN				BIT(28)

#define BIT_SHIFT_RXGCK_VHT_FIFOTHR			26
#define BIT_MASK_RXGCK_VHT_FIFOTHR			0x3
#define BIT_RXGCK_VHT_FIFOTHR(x)			(((x) & BIT_MASK_RXGCK_VHT_FIFOTHR) << BIT_SHIFT_RXGCK_VHT_FIFOTHR)
#define BITS_RXGCK_VHT_FIFOTHR				(BIT_MASK_RXGCK_VHT_FIFOTHR << BIT_SHIFT_RXGCK_VHT_FIFOTHR)
#define BIT_CLEAR_RXGCK_VHT_FIFOTHR(x)			((x) & (~BITS_RXGCK_VHT_FIFOTHR))
#define BIT_GET_RXGCK_VHT_FIFOTHR(x)			(((x) >> BIT_SHIFT_RXGCK_VHT_FIFOTHR) & BIT_MASK_RXGCK_VHT_FIFOTHR)
#define BIT_SET_RXGCK_VHT_FIFOTHR(x, v)		(BIT_CLEAR_RXGCK_VHT_FIFOTHR(x) | BIT_RXGCK_VHT_FIFOTHR(v))

#define BIT_SHIFT_RXGCK_HT_FIFOTHR			24
#define BIT_MASK_RXGCK_HT_FIFOTHR			0x3
#define BIT_RXGCK_HT_FIFOTHR(x)			(((x) & BIT_MASK_RXGCK_HT_FIFOTHR) << BIT_SHIFT_RXGCK_HT_FIFOTHR)
#define BITS_RXGCK_HT_FIFOTHR				(BIT_MASK_RXGCK_HT_FIFOTHR << BIT_SHIFT_RXGCK_HT_FIFOTHR)
#define BIT_CLEAR_RXGCK_HT_FIFOTHR(x)			((x) & (~BITS_RXGCK_HT_FIFOTHR))
#define BIT_GET_RXGCK_HT_FIFOTHR(x)			(((x) >> BIT_SHIFT_RXGCK_HT_FIFOTHR) & BIT_MASK_RXGCK_HT_FIFOTHR)
#define BIT_SET_RXGCK_HT_FIFOTHR(x, v)			(BIT_CLEAR_RXGCK_HT_FIFOTHR(x) | BIT_RXGCK_HT_FIFOTHR(v))

#define BIT_SHIFT_RXGCK_OFDM_FIFOTHR			22
#define BIT_MASK_RXGCK_OFDM_FIFOTHR			0x3
#define BIT_RXGCK_OFDM_FIFOTHR(x)			(((x) & BIT_MASK_RXGCK_OFDM_FIFOTHR) << BIT_SHIFT_RXGCK_OFDM_FIFOTHR)
#define BITS_RXGCK_OFDM_FIFOTHR			(BIT_MASK_RXGCK_OFDM_FIFOTHR << BIT_SHIFT_RXGCK_OFDM_FIFOTHR)
#define BIT_CLEAR_RXGCK_OFDM_FIFOTHR(x)		((x) & (~BITS_RXGCK_OFDM_FIFOTHR))
#define BIT_GET_RXGCK_OFDM_FIFOTHR(x)			(((x) >> BIT_SHIFT_RXGCK_OFDM_FIFOTHR) & BIT_MASK_RXGCK_OFDM_FIFOTHR)
#define BIT_SET_RXGCK_OFDM_FIFOTHR(x, v)		(BIT_CLEAR_RXGCK_OFDM_FIFOTHR(x) | BIT_RXGCK_OFDM_FIFOTHR(v))

#define BIT_SHIFT_RXGCK_CCK_FIFOTHR			20
#define BIT_MASK_RXGCK_CCK_FIFOTHR			0x3
#define BIT_RXGCK_CCK_FIFOTHR(x)			(((x) & BIT_MASK_RXGCK_CCK_FIFOTHR) << BIT_SHIFT_RXGCK_CCK_FIFOTHR)
#define BITS_RXGCK_CCK_FIFOTHR				(BIT_MASK_RXGCK_CCK_FIFOTHR << BIT_SHIFT_RXGCK_CCK_FIFOTHR)
#define BIT_CLEAR_RXGCK_CCK_FIFOTHR(x)			((x) & (~BITS_RXGCK_CCK_FIFOTHR))
#define BIT_GET_RXGCK_CCK_FIFOTHR(x)			(((x) >> BIT_SHIFT_RXGCK_CCK_FIFOTHR) & BIT_MASK_RXGCK_CCK_FIFOTHR)
#define BIT_SET_RXGCK_CCK_FIFOTHR(x, v)		(BIT_CLEAR_RXGCK_CCK_FIFOTHR(x) | BIT_RXGCK_CCK_FIFOTHR(v))

#define BIT_SHIFT_RXGCK_ENTRY_DELAY			17
#define BIT_MASK_RXGCK_ENTRY_DELAY			0x7
#define BIT_RXGCK_ENTRY_DELAY(x)			(((x) & BIT_MASK_RXGCK_ENTRY_DELAY) << BIT_SHIFT_RXGCK_ENTRY_DELAY)
#define BITS_RXGCK_ENTRY_DELAY				(BIT_MASK_RXGCK_ENTRY_DELAY << BIT_SHIFT_RXGCK_ENTRY_DELAY)
#define BIT_CLEAR_RXGCK_ENTRY_DELAY(x)			((x) & (~BITS_RXGCK_ENTRY_DELAY))
#define BIT_GET_RXGCK_ENTRY_DELAY(x)			(((x) >> BIT_SHIFT_RXGCK_ENTRY_DELAY) & BIT_MASK_RXGCK_ENTRY_DELAY)
#define BIT_SET_RXGCK_ENTRY_DELAY(x, v)		(BIT_CLEAR_RXGCK_ENTRY_DELAY(x) | BIT_RXGCK_ENTRY_DELAY(v))

#define BIT_RXGCK_OFDMCCA_EN				BIT(16)

#define BIT_SHIFT_RXPSF_PKTLENTHR			13
#define BIT_MASK_RXPSF_PKTLENTHR			0x7
#define BIT_RXPSF_PKTLENTHR(x)				(((x) & BIT_MASK_RXPSF_PKTLENTHR) << BIT_SHIFT_RXPSF_PKTLENTHR)
#define BITS_RXPSF_PKTLENTHR				(BIT_MASK_RXPSF_PKTLENTHR << BIT_SHIFT_RXPSF_PKTLENTHR)
#define BIT_CLEAR_RXPSF_PKTLENTHR(x)			((x) & (~BITS_RXPSF_PKTLENTHR))
#define BIT_GET_RXPSF_PKTLENTHR(x)			(((x) >> BIT_SHIFT_RXPSF_PKTLENTHR) & BIT_MASK_RXPSF_PKTLENTHR)
#define BIT_SET_RXPSF_PKTLENTHR(x, v)			(BIT_CLEAR_RXPSF_PKTLENTHR(x) | BIT_RXPSF_PKTLENTHR(v))

#define BIT_RXPSF_CTRLEN				BIT(12)
#define BIT_RXPSF_VHTCHKEN				BIT(11)
#define BIT_RXPSF_HTCHKEN				BIT(10)
#define BIT_RXPSF_OFDMCHKEN				BIT(9)
#define BIT_RXPSF_CCKCHKEN				BIT(8)
#define BIT_RXPSF_OFDMRST				BIT(7)
#define BIT_RXPSF_CCKRST				BIT(6)
#define BIT_RXPSF_MHCHKEN				BIT(5)
#define BIT_RXPSF_CONT_ERRCHKEN			BIT(4)
#define BIT_RXPSF_ALL_ERRCHKEN				BIT(3)

#define BIT_SHIFT_RXPSF_ERRTHR				0
#define BIT_MASK_RXPSF_ERRTHR				0x7
#define BIT_RXPSF_ERRTHR(x)				(((x) & BIT_MASK_RXPSF_ERRTHR) << BIT_SHIFT_RXPSF_ERRTHR)
#define BITS_RXPSF_ERRTHR				(BIT_MASK_RXPSF_ERRTHR << BIT_SHIFT_RXPSF_ERRTHR)
#define BIT_CLEAR_RXPSF_ERRTHR(x)			((x) & (~BITS_RXPSF_ERRTHR))
#define BIT_GET_RXPSF_ERRTHR(x)			(((x) >> BIT_SHIFT_RXPSF_ERRTHR) & BIT_MASK_RXPSF_ERRTHR)
#define BIT_SET_RXPSF_ERRTHR(x, v)			(BIT_CLEAR_RXPSF_ERRTHR(x) | BIT_RXPSF_ERRTHR(v))

/* 2 REG_RXPSF_TYPE_CTRL			(Offset 0x1614) */

#define BIT_RXPSF_DATA15EN				BIT(31)
#define BIT_RXPSF_DATA14EN				BIT(30)
#define BIT_RXPSF_DATA13EN				BIT(29)
#define BIT_RXPSF_DATA12EN				BIT(28)
#define BIT_RXPSF_DATA11EN				BIT(27)
#define BIT_RXPSF_DATA10EN				BIT(26)
#define BIT_RXPSF_DATA9EN				BIT(25)
#define BIT_RXPSF_DATA8EN				BIT(24)
#define BIT_RXPSF_DATA7EN				BIT(23)
#define BIT_RXPSF_DATA6EN				BIT(22)
#define BIT_RXPSF_DATA5EN				BIT(21)
#define BIT_RXPSF_DATA4EN				BIT(20)
#define BIT_RXPSF_DATA3EN				BIT(19)
#define BIT_RXPSF_DATA2EN				BIT(18)
#define BIT_RXPSF_DATA1EN				BIT(17)
#define BIT_RXPSF_DATA0EN				BIT(16)
#define BIT_RXPSF_MGT15EN				BIT(15)
#define BIT_RXPSF_MGT14EN				BIT(14)
#define BIT_RXPSF_MGT13EN				BIT(13)
#define BIT_RXPSF_MGT12EN				BIT(12)
#define BIT_RXPSF_MGT11EN				BIT(11)
#define BIT_RXPSF_MGT10EN				BIT(10)
#define BIT_RXPSF_MGT9EN				BIT(9)
#define BIT_RXPSF_MGT8EN				BIT(8)
#define BIT_RXPSF_MGT7EN				BIT(7)
#define BIT_RXPSF_MGT6EN				BIT(6)
#define BIT_RXPSF_MGT5EN				BIT(5)
#define BIT_RXPSF_MGT4EN				BIT(4)
#define BIT_RXPSF_MGT3EN				BIT(3)
#define BIT_RXPSF_MGT2EN				BIT(2)
#define BIT_RXPSF_MGT1EN				BIT(1)
#define BIT_RXPSF_MGT0EN				BIT(0)

/* 2 REG_WAIT_PHYSTS_CTL			(Offset 0x1618) */

#define BIT_BB_RST_RESP				BIT(7)
#define BIT_CCA_SPOOFING_EN				BIT(6)
#define BIT_RDRDY_NUM_CHK_EN				BIT(5)
#define BIT_WAIT_PHYSTS_EN				BIT(4)

#define BIT_SHIFT_WAIT_PHYSTS_TIME			0
#define BIT_MASK_WAIT_PHYSTS_TIME			0xf
#define BIT_WAIT_PHYSTS_TIME(x)			(((x) & BIT_MASK_WAIT_PHYSTS_TIME) << BIT_SHIFT_WAIT_PHYSTS_TIME)
#define BITS_WAIT_PHYSTS_TIME				(BIT_MASK_WAIT_PHYSTS_TIME << BIT_SHIFT_WAIT_PHYSTS_TIME)
#define BIT_CLEAR_WAIT_PHYSTS_TIME(x)			((x) & (~BITS_WAIT_PHYSTS_TIME))
#define BIT_GET_WAIT_PHYSTS_TIME(x)			(((x) >> BIT_SHIFT_WAIT_PHYSTS_TIME) & BIT_MASK_WAIT_PHYSTS_TIME)
#define BIT_SET_WAIT_PHYSTS_TIME(x, v)			(BIT_CLEAR_WAIT_PHYSTS_TIME(x) | BIT_WAIT_PHYSTS_TIME(v))

/* 2 REG_MACID2				(Offset 0x1620) */

#define BIT_SHIFT_MACID2_V1				0
#define BIT_MASK_MACID2_V1				0xffffffffL
#define BIT_MACID2_V1(x)				(((x) & BIT_MASK_MACID2_V1) << BIT_SHIFT_MACID2_V1)
#define BITS_MACID2_V1					(BIT_MASK_MACID2_V1 << BIT_SHIFT_MACID2_V1)
#define BIT_CLEAR_MACID2_V1(x)				((x) & (~BITS_MACID2_V1))
#define BIT_GET_MACID2_V1(x)				(((x) >> BIT_SHIFT_MACID2_V1) & BIT_MASK_MACID2_V1)
#define BIT_SET_MACID2_V1(x, v)			(BIT_CLEAR_MACID2_V1(x) | BIT_MACID2_V1(v))

/* 2 REG_MACID2_H				(Offset 0x1624) */

#define BIT_SHIFT_MACID2_H_V1				0
#define BIT_MASK_MACID2_H_V1				0xffff
#define BIT_MACID2_H_V1(x)				(((x) & BIT_MASK_MACID2_H_V1) << BIT_SHIFT_MACID2_H_V1)
#define BITS_MACID2_H_V1				(BIT_MASK_MACID2_H_V1 << BIT_SHIFT_MACID2_H_V1)
#define BIT_CLEAR_MACID2_H_V1(x)			((x) & (~BITS_MACID2_H_V1))
#define BIT_GET_MACID2_H_V1(x)				(((x) >> BIT_SHIFT_MACID2_H_V1) & BIT_MASK_MACID2_H_V1)
#define BIT_SET_MACID2_H_V1(x, v)			(BIT_CLEAR_MACID2_H_V1(x) | BIT_MACID2_H_V1(v))

/* 2 REG_BSSID2				(Offset 0x1628) */

#define BIT_SHIFT_BSSID2_V1				0
#define BIT_MASK_BSSID2_V1				0xffffffffL
#define BIT_BSSID2_V1(x)				(((x) & BIT_MASK_BSSID2_V1) << BIT_SHIFT_BSSID2_V1)
#define BITS_BSSID2_V1					(BIT_MASK_BSSID2_V1 << BIT_SHIFT_BSSID2_V1)
#define BIT_CLEAR_BSSID2_V1(x)				((x) & (~BITS_BSSID2_V1))
#define BIT_GET_BSSID2_V1(x)				(((x) >> BIT_SHIFT_BSSID2_V1) & BIT_MASK_BSSID2_V1)
#define BIT_SET_BSSID2_V1(x, v)			(BIT_CLEAR_BSSID2_V1(x) | BIT_BSSID2_V1(v))

/* 2 REG_BSSID2_H				(Offset 0x162C) */

#define BIT_SHIFT_BSSID2_H_V1				0
#define BIT_MASK_BSSID2_H_V1				0xffff
#define BIT_BSSID2_H_V1(x)				(((x) & BIT_MASK_BSSID2_H_V1) << BIT_SHIFT_BSSID2_H_V1)
#define BITS_BSSID2_H_V1				(BIT_MASK_BSSID2_H_V1 << BIT_SHIFT_BSSID2_H_V1)
#define BIT_CLEAR_BSSID2_H_V1(x)			((x) & (~BITS_BSSID2_H_V1))
#define BIT_GET_BSSID2_H_V1(x)				(((x) >> BIT_SHIFT_BSSID2_H_V1) & BIT_MASK_BSSID2_H_V1)
#define BIT_SET_BSSID2_H_V1(x, v)			(BIT_CLEAR_BSSID2_H_V1(x) | BIT_BSSID2_H_V1(v))

/* 2 REG_MACID3				(Offset 0x1630) */

#define BIT_SHIFT_MACID3_V1				0
#define BIT_MASK_MACID3_V1				0xffffffffL
#define BIT_MACID3_V1(x)				(((x) & BIT_MASK_MACID3_V1) << BIT_SHIFT_MACID3_V1)
#define BITS_MACID3_V1					(BIT_MASK_MACID3_V1 << BIT_SHIFT_MACID3_V1)
#define BIT_CLEAR_MACID3_V1(x)				((x) & (~BITS_MACID3_V1))
#define BIT_GET_MACID3_V1(x)				(((x) >> BIT_SHIFT_MACID3_V1) & BIT_MASK_MACID3_V1)
#define BIT_SET_MACID3_V1(x, v)			(BIT_CLEAR_MACID3_V1(x) | BIT_MACID3_V1(v))

/* 2 REG_MACID3_H				(Offset 0x1634) */

#define BIT_SHIFT_MACID3_H_V1				0
#define BIT_MASK_MACID3_H_V1				0xffff
#define BIT_MACID3_H_V1(x)				(((x) & BIT_MASK_MACID3_H_V1) << BIT_SHIFT_MACID3_H_V1)
#define BITS_MACID3_H_V1				(BIT_MASK_MACID3_H_V1 << BIT_SHIFT_MACID3_H_V1)
#define BIT_CLEAR_MACID3_H_V1(x)			((x) & (~BITS_MACID3_H_V1))
#define BIT_GET_MACID3_H_V1(x)				(((x) >> BIT_SHIFT_MACID3_H_V1) & BIT_MASK_MACID3_H_V1)
#define BIT_SET_MACID3_H_V1(x, v)			(BIT_CLEAR_MACID3_H_V1(x) | BIT_MACID3_H_V1(v))

/* 2 REG_BSSID3				(Offset 0x1638) */

#define BIT_SHIFT_BSSID3_V1				0
#define BIT_MASK_BSSID3_V1				0xffffffffL
#define BIT_BSSID3_V1(x)				(((x) & BIT_MASK_BSSID3_V1) << BIT_SHIFT_BSSID3_V1)
#define BITS_BSSID3_V1					(BIT_MASK_BSSID3_V1 << BIT_SHIFT_BSSID3_V1)
#define BIT_CLEAR_BSSID3_V1(x)				((x) & (~BITS_BSSID3_V1))
#define BIT_GET_BSSID3_V1(x)				(((x) >> BIT_SHIFT_BSSID3_V1) & BIT_MASK_BSSID3_V1)
#define BIT_SET_BSSID3_V1(x, v)			(BIT_CLEAR_BSSID3_V1(x) | BIT_BSSID3_V1(v))

/* 2 REG_BSSID3_H				(Offset 0x163C) */

#define BIT_SHIFT_BSSID3_H_V1				0
#define BIT_MASK_BSSID3_H_V1				0xffff
#define BIT_BSSID3_H_V1(x)				(((x) & BIT_MASK_BSSID3_H_V1) << BIT_SHIFT_BSSID3_H_V1)
#define BITS_BSSID3_H_V1				(BIT_MASK_BSSID3_H_V1 << BIT_SHIFT_BSSID3_H_V1)
#define BIT_CLEAR_BSSID3_H_V1(x)			((x) & (~BITS_BSSID3_H_V1))
#define BIT_GET_BSSID3_H_V1(x)				(((x) >> BIT_SHIFT_BSSID3_H_V1) & BIT_MASK_BSSID3_H_V1)
#define BIT_SET_BSSID3_H_V1(x, v)			(BIT_CLEAR_BSSID3_H_V1(x) | BIT_BSSID3_H_V1(v))

/* 2 REG_MACID4				(Offset 0x1640) */

#define BIT_SHIFT_MACID4_V1				0
#define BIT_MASK_MACID4_V1				0xffffffffL
#define BIT_MACID4_V1(x)				(((x) & BIT_MASK_MACID4_V1) << BIT_SHIFT_MACID4_V1)
#define BITS_MACID4_V1					(BIT_MASK_MACID4_V1 << BIT_SHIFT_MACID4_V1)
#define BIT_CLEAR_MACID4_V1(x)				((x) & (~BITS_MACID4_V1))
#define BIT_GET_MACID4_V1(x)				(((x) >> BIT_SHIFT_MACID4_V1) & BIT_MASK_MACID4_V1)
#define BIT_SET_MACID4_V1(x, v)			(BIT_CLEAR_MACID4_V1(x) | BIT_MACID4_V1(v))

/* 2 REG_MACID4_H				(Offset 0x1644) */

#define BIT_SHIFT_MACID4_H_V1				0
#define BIT_MASK_MACID4_H_V1				0xffff
#define BIT_MACID4_H_V1(x)				(((x) & BIT_MASK_MACID4_H_V1) << BIT_SHIFT_MACID4_H_V1)
#define BITS_MACID4_H_V1				(BIT_MASK_MACID4_H_V1 << BIT_SHIFT_MACID4_H_V1)
#define BIT_CLEAR_MACID4_H_V1(x)			((x) & (~BITS_MACID4_H_V1))
#define BIT_GET_MACID4_H_V1(x)				(((x) >> BIT_SHIFT_MACID4_H_V1) & BIT_MASK_MACID4_H_V1)
#define BIT_SET_MACID4_H_V1(x, v)			(BIT_CLEAR_MACID4_H_V1(x) | BIT_MACID4_H_V1(v))

/* 2 REG_BSSID4				(Offset 0x1648) */

#define BIT_SHIFT_BSSID4_V1				0
#define BIT_MASK_BSSID4_V1				0xffffffffL
#define BIT_BSSID4_V1(x)				(((x) & BIT_MASK_BSSID4_V1) << BIT_SHIFT_BSSID4_V1)
#define BITS_BSSID4_V1					(BIT_MASK_BSSID4_V1 << BIT_SHIFT_BSSID4_V1)
#define BIT_CLEAR_BSSID4_V1(x)				((x) & (~BITS_BSSID4_V1))
#define BIT_GET_BSSID4_V1(x)				(((x) >> BIT_SHIFT_BSSID4_V1) & BIT_MASK_BSSID4_V1)
#define BIT_SET_BSSID4_V1(x, v)			(BIT_CLEAR_BSSID4_V1(x) | BIT_BSSID4_V1(v))

/* 2 REG_BSSID4_H				(Offset 0x164C) */

#define BIT_SHIFT_BSSID4_H_V1				0
#define BIT_MASK_BSSID4_H_V1				0xffff
#define BIT_BSSID4_H_V1(x)				(((x) & BIT_MASK_BSSID4_H_V1) << BIT_SHIFT_BSSID4_H_V1)
#define BITS_BSSID4_H_V1				(BIT_MASK_BSSID4_H_V1 << BIT_SHIFT_BSSID4_H_V1)
#define BIT_CLEAR_BSSID4_H_V1(x)			((x) & (~BITS_BSSID4_H_V1))
#define BIT_GET_BSSID4_H_V1(x)				(((x) >> BIT_SHIFT_BSSID4_H_V1) & BIT_MASK_BSSID4_H_V1)
#define BIT_SET_BSSID4_H_V1(x, v)			(BIT_CLEAR_BSSID4_H_V1(x) | BIT_BSSID4_H_V1(v))

/* 2 REG_NOA_REPORT				(Offset 0x1650) */

#define BIT_SHIFT_NOA_RPT				0
#define BIT_MASK_NOA_RPT				0xffffffffL
#define BIT_NOA_RPT(x)					(((x) & BIT_MASK_NOA_RPT) << BIT_SHIFT_NOA_RPT)
#define BITS_NOA_RPT					(BIT_MASK_NOA_RPT << BIT_SHIFT_NOA_RPT)
#define BIT_CLEAR_NOA_RPT(x)				((x) & (~BITS_NOA_RPT))
#define BIT_GET_NOA_RPT(x)				(((x) >> BIT_SHIFT_NOA_RPT) & BIT_MASK_NOA_RPT)
#define BIT_SET_NOA_RPT(x, v)				(BIT_CLEAR_NOA_RPT(x) | BIT_NOA_RPT(v))

/* 2 REG_NOA_REPORT_1			(Offset 0x1654) */

#define BIT_SHIFT_NOA_RPT_1				0
#define BIT_MASK_NOA_RPT_1				0xffffffffL
#define BIT_NOA_RPT_1(x)				(((x) & BIT_MASK_NOA_RPT_1) << BIT_SHIFT_NOA_RPT_1)
#define BITS_NOA_RPT_1					(BIT_MASK_NOA_RPT_1 << BIT_SHIFT_NOA_RPT_1)
#define BIT_CLEAR_NOA_RPT_1(x)				((x) & (~BITS_NOA_RPT_1))
#define BIT_GET_NOA_RPT_1(x)				(((x) >> BIT_SHIFT_NOA_RPT_1) & BIT_MASK_NOA_RPT_1)
#define BIT_SET_NOA_RPT_1(x, v)			(BIT_CLEAR_NOA_RPT_1(x) | BIT_NOA_RPT_1(v))

/* 2 REG_NOA_REPORT_2			(Offset 0x1658) */

#define BIT_SHIFT_NOA_RPT_2				0
#define BIT_MASK_NOA_RPT_2				0xffffffffL
#define BIT_NOA_RPT_2(x)				(((x) & BIT_MASK_NOA_RPT_2) << BIT_SHIFT_NOA_RPT_2)
#define BITS_NOA_RPT_2					(BIT_MASK_NOA_RPT_2 << BIT_SHIFT_NOA_RPT_2)
#define BIT_CLEAR_NOA_RPT_2(x)				((x) & (~BITS_NOA_RPT_2))
#define BIT_GET_NOA_RPT_2(x)				(((x) >> BIT_SHIFT_NOA_RPT_2) & BIT_MASK_NOA_RPT_2)
#define BIT_SET_NOA_RPT_2(x, v)			(BIT_CLEAR_NOA_RPT_2(x) | BIT_NOA_RPT_2(v))

/* 2 REG_NOA_REPORT_3			(Offset 0x165C) */

#define BIT_SHIFT_NOA_RPT_3				0
#define BIT_MASK_NOA_RPT_3				0xff
#define BIT_NOA_RPT_3(x)				(((x) & BIT_MASK_NOA_RPT_3) << BIT_SHIFT_NOA_RPT_3)
#define BITS_NOA_RPT_3					(BIT_MASK_NOA_RPT_3 << BIT_SHIFT_NOA_RPT_3)
#define BIT_CLEAR_NOA_RPT_3(x)				((x) & (~BITS_NOA_RPT_3))
#define BIT_GET_NOA_RPT_3(x)				(((x) >> BIT_SHIFT_NOA_RPT_3) & BIT_MASK_NOA_RPT_3)
#define BIT_SET_NOA_RPT_3(x, v)			(BIT_CLEAR_NOA_RPT_3(x) | BIT_NOA_RPT_3(v))

/* 2 REG_PWRBIT_SETTING			(Offset 0x1660) */

#define BIT_CLI3_PWRBIT_OW_EN				BIT(7)
#define BIT_CLI3_PWR_ST				BIT(6)
#define BIT_CLI2_PWRBIT_OW_EN				BIT(5)
#define BIT_CLI2_PWR_ST				BIT(4)
#define BIT_CLI1_PWRBIT_OW_EN				BIT(3)
#define BIT_CLI1_PWR_ST				BIT(2)
#define BIT_CLI0_PWRBIT_OW_EN				BIT(1)
#define BIT_CLI0_PWR_ST				BIT(0)

/* 2 REG_GENERAL_OPTION			(Offset 0x1664) */

#define BIT_EXT_DBGSEL					BIT(6)
#define BIT_TXSERV_FIELD_SEL				BIT(2)

/* 2 REG_RXAI_CTRL				(Offset 0x1668) */

#define BIT_RXAI_PRTCT_REL				BIT(6)
#define BIT_RXAI_PRTCT_VIO				BIT(5)
#define BIT_RXAI_PRTCT_SEL				BIT(2)
#define BIT_RXAI_AGG_CHKEN				BIT(1)
#define BIT_RXAI_ADDR_CHKEN				BIT(0)

/* 2 REG_RX_BCN_TM				(Offset 0x166C) */

#define BIT_SHIFT_RX_BCN_TIMER				0
#define BIT_MASK_RX_BCN_TIMER				0xffff
#define BIT_RX_BCN_TIMER(x)				(((x) & BIT_MASK_RX_BCN_TIMER) << BIT_SHIFT_RX_BCN_TIMER)
#define BITS_RX_BCN_TIMER				(BIT_MASK_RX_BCN_TIMER << BIT_SHIFT_RX_BCN_TIMER)
#define BIT_CLEAR_RX_BCN_TIMER(x)			((x) & (~BITS_RX_BCN_TIMER))
#define BIT_GET_RX_BCN_TIMER(x)			(((x) >> BIT_SHIFT_RX_BCN_TIMER) & BIT_MASK_RX_BCN_TIMER)
#define BIT_SET_RX_BCN_TIMER(x, v)			(BIT_CLEAR_RX_BCN_TIMER(x) | BIT_RX_BCN_TIMER(v))

/* 2 REG_CSI_RRSR				(Offset 0x1678) */

#define BIT_CSI_LDPC_EN				BIT(29)
#define BIT_CSI_STBC_EN				BIT(28)

#define BIT_SHIFT_CSI_RRSC_BITMAP			4
#define BIT_MASK_CSI_RRSC_BITMAP			0xffffff
#define BIT_CSI_RRSC_BITMAP(x)				(((x) & BIT_MASK_CSI_RRSC_BITMAP) << BIT_SHIFT_CSI_RRSC_BITMAP)
#define BITS_CSI_RRSC_BITMAP				(BIT_MASK_CSI_RRSC_BITMAP << BIT_SHIFT_CSI_RRSC_BITMAP)
#define BIT_CLEAR_CSI_RRSC_BITMAP(x)			((x) & (~BITS_CSI_RRSC_BITMAP))
#define BIT_GET_CSI_RRSC_BITMAP(x)			(((x) >> BIT_SHIFT_CSI_RRSC_BITMAP) & BIT_MASK_CSI_RRSC_BITMAP)
#define BIT_SET_CSI_RRSC_BITMAP(x, v)			(BIT_CLEAR_CSI_RRSC_BITMAP(x) | BIT_CSI_RRSC_BITMAP(v))

#define BIT_SHIFT_OFDM_LEN_TH				0
#define BIT_MASK_OFDM_LEN_TH				0xf
#define BIT_OFDM_LEN_TH(x)				(((x) & BIT_MASK_OFDM_LEN_TH) << BIT_SHIFT_OFDM_LEN_TH)
#define BITS_OFDM_LEN_TH				(BIT_MASK_OFDM_LEN_TH << BIT_SHIFT_OFDM_LEN_TH)
#define BIT_CLEAR_OFDM_LEN_TH(x)			((x) & (~BITS_OFDM_LEN_TH))
#define BIT_GET_OFDM_LEN_TH(x)				(((x) >> BIT_SHIFT_OFDM_LEN_TH) & BIT_MASK_OFDM_LEN_TH)
#define BIT_SET_OFDM_LEN_TH(x, v)			(BIT_CLEAR_OFDM_LEN_TH(x) | BIT_OFDM_LEN_TH(v))

/* 2 REG_MU_BF_OPTION			(Offset 0x167C) */

#define BIT_WMAC_NOCHK_BFPOLL_BMP			BIT(31)

#define BIT_SHIFT_WMAC_CSI_PARA_RDY_DLYCNT		24
#define BIT_MASK_WMAC_CSI_PARA_RDY_DLYCNT		0x1f
#define BIT_WMAC_CSI_PARA_RDY_DLYCNT(x)		(((x) & BIT_MASK_WMAC_CSI_PARA_RDY_DLYCNT) << BIT_SHIFT_WMAC_CSI_PARA_RDY_DLYCNT)
#define BITS_WMAC_CSI_PARA_RDY_DLYCNT			(BIT_MASK_WMAC_CSI_PARA_RDY_DLYCNT << BIT_SHIFT_WMAC_CSI_PARA_RDY_DLYCNT)
#define BIT_CLEAR_WMAC_CSI_PARA_RDY_DLYCNT(x)		((x) & (~BITS_WMAC_CSI_PARA_RDY_DLYCNT))
#define BIT_GET_WMAC_CSI_PARA_RDY_DLYCNT(x)		(((x) >> BIT_SHIFT_WMAC_CSI_PARA_RDY_DLYCNT) & BIT_MASK_WMAC_CSI_PARA_RDY_DLYCNT)
#define BIT_SET_WMAC_CSI_PARA_RDY_DLYCNT(x, v)	(BIT_CLEAR_WMAC_CSI_PARA_RDY_DLYCNT(x) | BIT_WMAC_CSI_PARA_RDY_DLYCNT(v))

#define BIT_ARB_HW_ADAPT_EN				BIT(23)
#define BIT_ARB_SW_EN					BIT(22)

#define BIT_SHIFT_ARB_SW_STATE				16
#define BIT_MASK_ARB_SW_STATE				0x3f
#define BIT_ARB_SW_STATE(x)				(((x) & BIT_MASK_ARB_SW_STATE) << BIT_SHIFT_ARB_SW_STATE)
#define BITS_ARB_SW_STATE				(BIT_MASK_ARB_SW_STATE << BIT_SHIFT_ARB_SW_STATE)
#define BIT_CLEAR_ARB_SW_STATE(x)			((x) & (~BITS_ARB_SW_STATE))
#define BIT_GET_ARB_SW_STATE(x)			(((x) >> BIT_SHIFT_ARB_SW_STATE) & BIT_MASK_ARB_SW_STATE)
#define BIT_SET_ARB_SW_STATE(x, v)			(BIT_CLEAR_ARB_SW_STATE(x) | BIT_ARB_SW_STATE(v))

#define BIT_SHIFT_WMAC_PAUSE_BB_CLR_TH			8
#define BIT_MASK_WMAC_PAUSE_BB_CLR_TH			0xff
#define BIT_WMAC_PAUSE_BB_CLR_TH(x)			(((x) & BIT_MASK_WMAC_PAUSE_BB_CLR_TH) << BIT_SHIFT_WMAC_PAUSE_BB_CLR_TH)
#define BITS_WMAC_PAUSE_BB_CLR_TH			(BIT_MASK_WMAC_PAUSE_BB_CLR_TH << BIT_SHIFT_WMAC_PAUSE_BB_CLR_TH)
#define BIT_CLEAR_WMAC_PAUSE_BB_CLR_TH(x)		((x) & (~BITS_WMAC_PAUSE_BB_CLR_TH))
#define BIT_GET_WMAC_PAUSE_BB_CLR_TH(x)		(((x) >> BIT_SHIFT_WMAC_PAUSE_BB_CLR_TH) & BIT_MASK_WMAC_PAUSE_BB_CLR_TH)
#define BIT_SET_WMAC_PAUSE_BB_CLR_TH(x, v)		(BIT_CLEAR_WMAC_PAUSE_BB_CLR_TH(x) | BIT_WMAC_PAUSE_BB_CLR_TH(v))

#define BIT_WMAC_RESP_NONSTA1_DIS			BIT(7)

#define BIT_SHIFT_WMAC_MU_BFEE_PORT_SEL		1
#define BIT_MASK_WMAC_MU_BFEE_PORT_SEL			0x7
#define BIT_WMAC_MU_BFEE_PORT_SEL(x)			(((x) & BIT_MASK_WMAC_MU_BFEE_PORT_SEL) << BIT_SHIFT_WMAC_MU_BFEE_PORT_SEL)
#define BITS_WMAC_MU_BFEE_PORT_SEL			(BIT_MASK_WMAC_MU_BFEE_PORT_SEL << BIT_SHIFT_WMAC_MU_BFEE_PORT_SEL)
#define BIT_CLEAR_WMAC_MU_BFEE_PORT_SEL(x)		((x) & (~BITS_WMAC_MU_BFEE_PORT_SEL))
#define BIT_GET_WMAC_MU_BFEE_PORT_SEL(x)		(((x) >> BIT_SHIFT_WMAC_MU_BFEE_PORT_SEL) & BIT_MASK_WMAC_MU_BFEE_PORT_SEL)
#define BIT_SET_WMAC_MU_BFEE_PORT_SEL(x, v)		(BIT_CLEAR_WMAC_MU_BFEE_PORT_SEL(x) | BIT_WMAC_MU_BFEE_PORT_SEL(v))

#define BIT_WMAC_MU_BFEE_DIS				BIT(0)

/* 2 REG_WMAC_MU_BF_CTL			(Offset 0x1680) */

#define BIT_SHIFT_BFRPT_PARA_USERID_SEL_V1		29
#define BIT_MASK_BFRPT_PARA_USERID_SEL_V1		0x7
#define BIT_BFRPT_PARA_USERID_SEL_V1(x)		(((x) & BIT_MASK_BFRPT_PARA_USERID_SEL_V1) << BIT_SHIFT_BFRPT_PARA_USERID_SEL_V1)
#define BITS_BFRPT_PARA_USERID_SEL_V1			(BIT_MASK_BFRPT_PARA_USERID_SEL_V1 << BIT_SHIFT_BFRPT_PARA_USERID_SEL_V1)
#define BIT_CLEAR_BFRPT_PARA_USERID_SEL_V1(x)		((x) & (~BITS_BFRPT_PARA_USERID_SEL_V1))
#define BIT_GET_BFRPT_PARA_USERID_SEL_V1(x)		(((x) >> BIT_SHIFT_BFRPT_PARA_USERID_SEL_V1) & BIT_MASK_BFRPT_PARA_USERID_SEL_V1)
#define BIT_SET_BFRPT_PARA_USERID_SEL_V1(x, v)	(BIT_CLEAR_BFRPT_PARA_USERID_SEL_V1(x) | BIT_BFRPT_PARA_USERID_SEL_V1(v))

#define BIT_SHIFT_BFRPT_PARA_V1			16
#define BIT_MASK_BFRPT_PARA_V1				0x1fff
#define BIT_BFRPT_PARA_V1(x)				(((x) & BIT_MASK_BFRPT_PARA_V1) << BIT_SHIFT_BFRPT_PARA_V1)
#define BITS_BFRPT_PARA_V1				(BIT_MASK_BFRPT_PARA_V1 << BIT_SHIFT_BFRPT_PARA_V1)
#define BIT_CLEAR_BFRPT_PARA_V1(x)			((x) & (~BITS_BFRPT_PARA_V1))
#define BIT_GET_BFRPT_PARA_V1(x)			(((x) >> BIT_SHIFT_BFRPT_PARA_V1) & BIT_MASK_BFRPT_PARA_V1)
#define BIT_SET_BFRPT_PARA_V1(x, v)			(BIT_CLEAR_BFRPT_PARA_V1(x) | BIT_BFRPT_PARA_V1(v))

#define BIT_WMAC_INVLD_BFPRT_CHK			BIT(15)
#define BIT_WMAC_RETXBFRPTSEQ_UPD			BIT(14)

#define BIT_SHIFT_WMAC_MU_BFRPTSEG_SEL			12
#define BIT_MASK_WMAC_MU_BFRPTSEG_SEL			0x3
#define BIT_WMAC_MU_BFRPTSEG_SEL(x)			(((x) & BIT_MASK_WMAC_MU_BFRPTSEG_SEL) << BIT_SHIFT_WMAC_MU_BFRPTSEG_SEL)
#define BITS_WMAC_MU_BFRPTSEG_SEL			(BIT_MASK_WMAC_MU_BFRPTSEG_SEL << BIT_SHIFT_WMAC_MU_BFRPTSEG_SEL)
#define BIT_CLEAR_WMAC_MU_BFRPTSEG_SEL(x)		((x) & (~BITS_WMAC_MU_BFRPTSEG_SEL))
#define BIT_GET_WMAC_MU_BFRPTSEG_SEL(x)		(((x) >> BIT_SHIFT_WMAC_MU_BFRPTSEG_SEL) & BIT_MASK_WMAC_MU_BFRPTSEG_SEL)
#define BIT_SET_WMAC_MU_BFRPTSEG_SEL(x, v)		(BIT_CLEAR_WMAC_MU_BFRPTSEG_SEL(x) | BIT_WMAC_MU_BFRPTSEG_SEL(v))

#define BIT_SHIFT_WMAC_MU_BF_MYAID			0
#define BIT_MASK_WMAC_MU_BF_MYAID			0xfff
#define BIT_WMAC_MU_BF_MYAID(x)			(((x) & BIT_MASK_WMAC_MU_BF_MYAID) << BIT_SHIFT_WMAC_MU_BF_MYAID)
#define BITS_WMAC_MU_BF_MYAID				(BIT_MASK_WMAC_MU_BF_MYAID << BIT_SHIFT_WMAC_MU_BF_MYAID)
#define BIT_CLEAR_WMAC_MU_BF_MYAID(x)			((x) & (~BITS_WMAC_MU_BF_MYAID))
#define BIT_GET_WMAC_MU_BF_MYAID(x)			(((x) >> BIT_SHIFT_WMAC_MU_BF_MYAID) & BIT_MASK_WMAC_MU_BF_MYAID)
#define BIT_SET_WMAC_MU_BF_MYAID(x, v)			(BIT_CLEAR_WMAC_MU_BF_MYAID(x) | BIT_WMAC_MU_BF_MYAID(v))

/* 2 REG_WMAC_ASSOCIATED_MU_BFMEE2		(Offset 0x1684) */

#define BIT_STATUS_BFEE3				BIT(26)
#define BIT_WMAC_MU_BFEE3_EN				BIT(25)

#define BIT_SHIFT_WMAC_MU_BFEE3_AID			16
#define BIT_MASK_WMAC_MU_BFEE3_AID			0x1ff
#define BIT_WMAC_MU_BFEE3_AID(x)			(((x) & BIT_MASK_WMAC_MU_BFEE3_AID) << BIT_SHIFT_WMAC_MU_BFEE3_AID)
#define BITS_WMAC_MU_BFEE3_AID				(BIT_MASK_WMAC_MU_BFEE3_AID << BIT_SHIFT_WMAC_MU_BFEE3_AID)
#define BIT_CLEAR_WMAC_MU_BFEE3_AID(x)			((x) & (~BITS_WMAC_MU_BFEE3_AID))
#define BIT_GET_WMAC_MU_BFEE3_AID(x)			(((x) >> BIT_SHIFT_WMAC_MU_BFEE3_AID) & BIT_MASK_WMAC_MU_BFEE3_AID)
#define BIT_SET_WMAC_MU_BFEE3_AID(x, v)		(BIT_CLEAR_WMAC_MU_BFEE3_AID(x) | BIT_WMAC_MU_BFEE3_AID(v))

#define BIT_STATUS_BFEE2				BIT(10)
#define BIT_WMAC_MU_BFEE2_EN				BIT(9)

#define BIT_SHIFT_WMAC_MU_BFEE2_AID			0
#define BIT_MASK_WMAC_MU_BFEE2_AID			0x1ff
#define BIT_WMAC_MU_BFEE2_AID(x)			(((x) & BIT_MASK_WMAC_MU_BFEE2_AID) << BIT_SHIFT_WMAC_MU_BFEE2_AID)
#define BITS_WMAC_MU_BFEE2_AID				(BIT_MASK_WMAC_MU_BFEE2_AID << BIT_SHIFT_WMAC_MU_BFEE2_AID)
#define BIT_CLEAR_WMAC_MU_BFEE2_AID(x)			((x) & (~BITS_WMAC_MU_BFEE2_AID))
#define BIT_GET_WMAC_MU_BFEE2_AID(x)			(((x) >> BIT_SHIFT_WMAC_MU_BFEE2_AID) & BIT_MASK_WMAC_MU_BFEE2_AID)
#define BIT_SET_WMAC_MU_BFEE2_AID(x, v)		(BIT_CLEAR_WMAC_MU_BFEE2_AID(x) | BIT_WMAC_MU_BFEE2_AID(v))

/* 2 REG_WMAC_ASSOCIATED_MU_BFMEE4		(Offset 0x1688) */

#define BIT_WMAC_MU_BFEE5_EN				BIT(25)

#define BIT_SHIFT_WMAC_MU_BFEE5_AID			16
#define BIT_MASK_WMAC_MU_BFEE5_AID			0x1ff
#define BIT_WMAC_MU_BFEE5_AID(x)			(((x) & BIT_MASK_WMAC_MU_BFEE5_AID) << BIT_SHIFT_WMAC_MU_BFEE5_AID)
#define BITS_WMAC_MU_BFEE5_AID				(BIT_MASK_WMAC_MU_BFEE5_AID << BIT_SHIFT_WMAC_MU_BFEE5_AID)
#define BIT_CLEAR_WMAC_MU_BFEE5_AID(x)			((x) & (~BITS_WMAC_MU_BFEE5_AID))
#define BIT_GET_WMAC_MU_BFEE5_AID(x)			(((x) >> BIT_SHIFT_WMAC_MU_BFEE5_AID) & BIT_MASK_WMAC_MU_BFEE5_AID)
#define BIT_SET_WMAC_MU_BFEE5_AID(x, v)		(BIT_CLEAR_WMAC_MU_BFEE5_AID(x) | BIT_WMAC_MU_BFEE5_AID(v))

#define BIT_WMAC_MU_BFEE4_EN				BIT(9)

#define BIT_SHIFT_WMAC_MU_BFEE4_AID			0
#define BIT_MASK_WMAC_MU_BFEE4_AID			0x1ff
#define BIT_WMAC_MU_BFEE4_AID(x)			(((x) & BIT_MASK_WMAC_MU_BFEE4_AID) << BIT_SHIFT_WMAC_MU_BFEE4_AID)
#define BITS_WMAC_MU_BFEE4_AID				(BIT_MASK_WMAC_MU_BFEE4_AID << BIT_SHIFT_WMAC_MU_BFEE4_AID)
#define BIT_CLEAR_WMAC_MU_BFEE4_AID(x)			((x) & (~BITS_WMAC_MU_BFEE4_AID))
#define BIT_GET_WMAC_MU_BFEE4_AID(x)			(((x) >> BIT_SHIFT_WMAC_MU_BFEE4_AID) & BIT_MASK_WMAC_MU_BFEE4_AID)
#define BIT_SET_WMAC_MU_BFEE4_AID(x, v)		(BIT_CLEAR_WMAC_MU_BFEE4_AID(x) | BIT_WMAC_MU_BFEE4_AID(v))

/* 2 REG_WMAC_ASSOCIATED_MU_BFMEE6		(Offset 0x168C) */

#define BIT_WMAC_MU_BFEE7_EN				BIT(25)

#define BIT_SHIFT_WMAC_MU_BFEE7_AID			16
#define BIT_MASK_WMAC_MU_BFEE7_AID			0x1ff
#define BIT_WMAC_MU_BFEE7_AID(x)			(((x) & BIT_MASK_WMAC_MU_BFEE7_AID) << BIT_SHIFT_WMAC_MU_BFEE7_AID)
#define BITS_WMAC_MU_BFEE7_AID				(BIT_MASK_WMAC_MU_BFEE7_AID << BIT_SHIFT_WMAC_MU_BFEE7_AID)
#define BIT_CLEAR_WMAC_MU_BFEE7_AID(x)			((x) & (~BITS_WMAC_MU_BFEE7_AID))
#define BIT_GET_WMAC_MU_BFEE7_AID(x)			(((x) >> BIT_SHIFT_WMAC_MU_BFEE7_AID) & BIT_MASK_WMAC_MU_BFEE7_AID)
#define BIT_SET_WMAC_MU_BFEE7_AID(x, v)		(BIT_CLEAR_WMAC_MU_BFEE7_AID(x) | BIT_WMAC_MU_BFEE7_AID(v))

#define BIT_WMAC_MU_BFEE6_EN				BIT(9)

#define BIT_SHIFT_WMAC_MU_BFEE6_AID			0
#define BIT_MASK_WMAC_MU_BFEE6_AID			0x1ff
#define BIT_WMAC_MU_BFEE6_AID(x)			(((x) & BIT_MASK_WMAC_MU_BFEE6_AID) << BIT_SHIFT_WMAC_MU_BFEE6_AID)
#define BITS_WMAC_MU_BFEE6_AID				(BIT_MASK_WMAC_MU_BFEE6_AID << BIT_SHIFT_WMAC_MU_BFEE6_AID)
#define BIT_CLEAR_WMAC_MU_BFEE6_AID(x)			((x) & (~BITS_WMAC_MU_BFEE6_AID))
#define BIT_GET_WMAC_MU_BFEE6_AID(x)			(((x) >> BIT_SHIFT_WMAC_MU_BFEE6_AID) & BIT_MASK_WMAC_MU_BFEE6_AID)
#define BIT_SET_WMAC_MU_BFEE6_AID(x, v)		(BIT_CLEAR_WMAC_MU_BFEE6_AID(x) | BIT_WMAC_MU_BFEE6_AID(v))

/* 2 REG_WMAC_BB_STOP_RX_COUNTER		(Offset 0x1690) */

#define BIT_RST_ALL_COUNTER				BIT(31)

#define BIT_SHIFT_ABORT_RX_VBON_COUNTER		16
#define BIT_MASK_ABORT_RX_VBON_COUNTER			0xff
#define BIT_ABORT_RX_VBON_COUNTER(x)			(((x) & BIT_MASK_ABORT_RX_VBON_COUNTER) << BIT_SHIFT_ABORT_RX_VBON_COUNTER)
#define BITS_ABORT_RX_VBON_COUNTER			(BIT_MASK_ABORT_RX_VBON_COUNTER << BIT_SHIFT_ABORT_RX_VBON_COUNTER)
#define BIT_CLEAR_ABORT_RX_VBON_COUNTER(x)		((x) & (~BITS_ABORT_RX_VBON_COUNTER))
#define BIT_GET_ABORT_RX_VBON_COUNTER(x)		(((x) >> BIT_SHIFT_ABORT_RX_VBON_COUNTER) & BIT_MASK_ABORT_RX_VBON_COUNTER)
#define BIT_SET_ABORT_RX_VBON_COUNTER(x, v)		(BIT_CLEAR_ABORT_RX_VBON_COUNTER(x) | BIT_ABORT_RX_VBON_COUNTER(v))

#define BIT_SHIFT_ABORT_RX_RDRDY_COUNTER		8
#define BIT_MASK_ABORT_RX_RDRDY_COUNTER		0xff
#define BIT_ABORT_RX_RDRDY_COUNTER(x)			(((x) & BIT_MASK_ABORT_RX_RDRDY_COUNTER) << BIT_SHIFT_ABORT_RX_RDRDY_COUNTER)
#define BITS_ABORT_RX_RDRDY_COUNTER			(BIT_MASK_ABORT_RX_RDRDY_COUNTER << BIT_SHIFT_ABORT_RX_RDRDY_COUNTER)
#define BIT_CLEAR_ABORT_RX_RDRDY_COUNTER(x)		((x) & (~BITS_ABORT_RX_RDRDY_COUNTER))
#define BIT_GET_ABORT_RX_RDRDY_COUNTER(x)		(((x) >> BIT_SHIFT_ABORT_RX_RDRDY_COUNTER) & BIT_MASK_ABORT_RX_RDRDY_COUNTER)
#define BIT_SET_ABORT_RX_RDRDY_COUNTER(x, v)		(BIT_CLEAR_ABORT_RX_RDRDY_COUNTER(x) | BIT_ABORT_RX_RDRDY_COUNTER(v))

#define BIT_SHIFT_VBON_EARLY_FALLING_COUNTER		0
#define BIT_MASK_VBON_EARLY_FALLING_COUNTER		0xff
#define BIT_VBON_EARLY_FALLING_COUNTER(x)		(((x) & BIT_MASK_VBON_EARLY_FALLING_COUNTER) << BIT_SHIFT_VBON_EARLY_FALLING_COUNTER)
#define BITS_VBON_EARLY_FALLING_COUNTER		(BIT_MASK_VBON_EARLY_FALLING_COUNTER << BIT_SHIFT_VBON_EARLY_FALLING_COUNTER)
#define BIT_CLEAR_VBON_EARLY_FALLING_COUNTER(x)	((x) & (~BITS_VBON_EARLY_FALLING_COUNTER))
#define BIT_GET_VBON_EARLY_FALLING_COUNTER(x)		(((x) >> BIT_SHIFT_VBON_EARLY_FALLING_COUNTER) & BIT_MASK_VBON_EARLY_FALLING_COUNTER)
#define BIT_SET_VBON_EARLY_FALLING_COUNTER(x, v)	(BIT_CLEAR_VBON_EARLY_FALLING_COUNTER(x) | BIT_VBON_EARLY_FALLING_COUNTER(v))

/* 2 REG_WMAC_PLCP_MONITOR			(Offset 0x1694) */

#define BIT_WMAC_PLCP_TRX_SEL				BIT(31)

#define BIT_SHIFT_WMAC_PLCP_RDSIG_SEL			28
#define BIT_MASK_WMAC_PLCP_RDSIG_SEL			0x7
#define BIT_WMAC_PLCP_RDSIG_SEL(x)			(((x) & BIT_MASK_WMAC_PLCP_RDSIG_SEL) << BIT_SHIFT_WMAC_PLCP_RDSIG_SEL)
#define BITS_WMAC_PLCP_RDSIG_SEL			(BIT_MASK_WMAC_PLCP_RDSIG_SEL << BIT_SHIFT_WMAC_PLCP_RDSIG_SEL)
#define BIT_CLEAR_WMAC_PLCP_RDSIG_SEL(x)		((x) & (~BITS_WMAC_PLCP_RDSIG_SEL))
#define BIT_GET_WMAC_PLCP_RDSIG_SEL(x)			(((x) >> BIT_SHIFT_WMAC_PLCP_RDSIG_SEL) & BIT_MASK_WMAC_PLCP_RDSIG_SEL)
#define BIT_SET_WMAC_PLCP_RDSIG_SEL(x, v)		(BIT_CLEAR_WMAC_PLCP_RDSIG_SEL(x) | BIT_WMAC_PLCP_RDSIG_SEL(v))

#define BIT_SHIFT_WMAC_RATE_IDX			24
#define BIT_MASK_WMAC_RATE_IDX				0xf
#define BIT_WMAC_RATE_IDX(x)				(((x) & BIT_MASK_WMAC_RATE_IDX) << BIT_SHIFT_WMAC_RATE_IDX)
#define BITS_WMAC_RATE_IDX				(BIT_MASK_WMAC_RATE_IDX << BIT_SHIFT_WMAC_RATE_IDX)
#define BIT_CLEAR_WMAC_RATE_IDX(x)			((x) & (~BITS_WMAC_RATE_IDX))
#define BIT_GET_WMAC_RATE_IDX(x)			(((x) >> BIT_SHIFT_WMAC_RATE_IDX) & BIT_MASK_WMAC_RATE_IDX)
#define BIT_SET_WMAC_RATE_IDX(x, v)			(BIT_CLEAR_WMAC_RATE_IDX(x) | BIT_WMAC_RATE_IDX(v))

#define BIT_SHIFT_WMAC_PLCP_RDSIG			0
#define BIT_MASK_WMAC_PLCP_RDSIG			0xffffff
#define BIT_WMAC_PLCP_RDSIG(x)				(((x) & BIT_MASK_WMAC_PLCP_RDSIG) << BIT_SHIFT_WMAC_PLCP_RDSIG)
#define BITS_WMAC_PLCP_RDSIG				(BIT_MASK_WMAC_PLCP_RDSIG << BIT_SHIFT_WMAC_PLCP_RDSIG)
#define BIT_CLEAR_WMAC_PLCP_RDSIG(x)			((x) & (~BITS_WMAC_PLCP_RDSIG))
#define BIT_GET_WMAC_PLCP_RDSIG(x)			(((x) >> BIT_SHIFT_WMAC_PLCP_RDSIG) & BIT_MASK_WMAC_PLCP_RDSIG)
#define BIT_SET_WMAC_PLCP_RDSIG(x, v)			(BIT_CLEAR_WMAC_PLCP_RDSIG(x) | BIT_WMAC_PLCP_RDSIG(v))

/* 2 REG_WMAC_CSIDMA_CFG			(Offset 0x169C) */

#define BIT_SHIFT_CSI_SEG_SIZE				16
#define BIT_MASK_CSI_SEG_SIZE				0xfff
#define BIT_CSI_SEG_SIZE(x)				(((x) & BIT_MASK_CSI_SEG_SIZE) << BIT_SHIFT_CSI_SEG_SIZE)
#define BITS_CSI_SEG_SIZE				(BIT_MASK_CSI_SEG_SIZE << BIT_SHIFT_CSI_SEG_SIZE)
#define BIT_CLEAR_CSI_SEG_SIZE(x)			((x) & (~BITS_CSI_SEG_SIZE))
#define BIT_GET_CSI_SEG_SIZE(x)			(((x) >> BIT_SHIFT_CSI_SEG_SIZE) & BIT_MASK_CSI_SEG_SIZE)
#define BIT_SET_CSI_SEG_SIZE(x, v)			(BIT_CLEAR_CSI_SEG_SIZE(x) | BIT_CSI_SEG_SIZE(v))

#define BIT_SHIFT_CSI_START_PAGE			0
#define BIT_MASK_CSI_START_PAGE			0xfff
#define BIT_CSI_START_PAGE(x)				(((x) & BIT_MASK_CSI_START_PAGE) << BIT_SHIFT_CSI_START_PAGE)
#define BITS_CSI_START_PAGE				(BIT_MASK_CSI_START_PAGE << BIT_SHIFT_CSI_START_PAGE)
#define BIT_CLEAR_CSI_START_PAGE(x)			((x) & (~BITS_CSI_START_PAGE))
#define BIT_GET_CSI_START_PAGE(x)			(((x) >> BIT_SHIFT_CSI_START_PAGE) & BIT_MASK_CSI_START_PAGE)
#define BIT_SET_CSI_START_PAGE(x, v)			(BIT_CLEAR_CSI_START_PAGE(x) | BIT_CSI_START_PAGE(v))

/* 2 REG_TRANSMIT_ADDRSS_0			(Offset 0x16A0) */

#define BIT_SHIFT_TA0_V1				0
#define BIT_MASK_TA0_V1				0xffffffffL
#define BIT_TA0_V1(x)					(((x) & BIT_MASK_TA0_V1) << BIT_SHIFT_TA0_V1)
#define BITS_TA0_V1					(BIT_MASK_TA0_V1 << BIT_SHIFT_TA0_V1)
#define BIT_CLEAR_TA0_V1(x)				((x) & (~BITS_TA0_V1))
#define BIT_GET_TA0_V1(x)				(((x) >> BIT_SHIFT_TA0_V1) & BIT_MASK_TA0_V1)
#define BIT_SET_TA0_V1(x, v)				(BIT_CLEAR_TA0_V1(x) | BIT_TA0_V1(v))

/* 2 REG_TRANSMIT_ADDRSS_0_H			(Offset 0x16A4) */

#define BIT_SHIFT_TA0_H_V1				0
#define BIT_MASK_TA0_H_V1				0xffff
#define BIT_TA0_H_V1(x)				(((x) & BIT_MASK_TA0_H_V1) << BIT_SHIFT_TA0_H_V1)
#define BITS_TA0_H_V1					(BIT_MASK_TA0_H_V1 << BIT_SHIFT_TA0_H_V1)
#define BIT_CLEAR_TA0_H_V1(x)				((x) & (~BITS_TA0_H_V1))
#define BIT_GET_TA0_H_V1(x)				(((x) >> BIT_SHIFT_TA0_H_V1) & BIT_MASK_TA0_H_V1)
#define BIT_SET_TA0_H_V1(x, v)				(BIT_CLEAR_TA0_H_V1(x) | BIT_TA0_H_V1(v))

/* 2 REG_TRANSMIT_ADDRSS_1			(Offset 0x16A8) */

#define BIT_SHIFT_TA1_V1				0
#define BIT_MASK_TA1_V1				0xffffffffL
#define BIT_TA1_V1(x)					(((x) & BIT_MASK_TA1_V1) << BIT_SHIFT_TA1_V1)
#define BITS_TA1_V1					(BIT_MASK_TA1_V1 << BIT_SHIFT_TA1_V1)
#define BIT_CLEAR_TA1_V1(x)				((x) & (~BITS_TA1_V1))
#define BIT_GET_TA1_V1(x)				(((x) >> BIT_SHIFT_TA1_V1) & BIT_MASK_TA1_V1)
#define BIT_SET_TA1_V1(x, v)				(BIT_CLEAR_TA1_V1(x) | BIT_TA1_V1(v))

/* 2 REG_TRANSMIT_ADDRSS_1_H			(Offset 0x16AC) */

#define BIT_SHIFT_TA1_H_V1				0
#define BIT_MASK_TA1_H_V1				0xffff
#define BIT_TA1_H_V1(x)				(((x) & BIT_MASK_TA1_H_V1) << BIT_SHIFT_TA1_H_V1)
#define BITS_TA1_H_V1					(BIT_MASK_TA1_H_V1 << BIT_SHIFT_TA1_H_V1)
#define BIT_CLEAR_TA1_H_V1(x)				((x) & (~BITS_TA1_H_V1))
#define BIT_GET_TA1_H_V1(x)				(((x) >> BIT_SHIFT_TA1_H_V1) & BIT_MASK_TA1_H_V1)
#define BIT_SET_TA1_H_V1(x, v)				(BIT_CLEAR_TA1_H_V1(x) | BIT_TA1_H_V1(v))

/* 2 REG_TRANSMIT_ADDRSS_2			(Offset 0x16B0) */

#define BIT_SHIFT_TA2_V1				0
#define BIT_MASK_TA2_V1				0xffffffffL
#define BIT_TA2_V1(x)					(((x) & BIT_MASK_TA2_V1) << BIT_SHIFT_TA2_V1)
#define BITS_TA2_V1					(BIT_MASK_TA2_V1 << BIT_SHIFT_TA2_V1)
#define BIT_CLEAR_TA2_V1(x)				((x) & (~BITS_TA2_V1))
#define BIT_GET_TA2_V1(x)				(((x) >> BIT_SHIFT_TA2_V1) & BIT_MASK_TA2_V1)
#define BIT_SET_TA2_V1(x, v)				(BIT_CLEAR_TA2_V1(x) | BIT_TA2_V1(v))

/* 2 REG_TRANSMIT_ADDRSS_2_H			(Offset 0x16B4) */

#define BIT_SHIFT_TA2_H_V1				0
#define BIT_MASK_TA2_H_V1				0xffff
#define BIT_TA2_H_V1(x)				(((x) & BIT_MASK_TA2_H_V1) << BIT_SHIFT_TA2_H_V1)
#define BITS_TA2_H_V1					(BIT_MASK_TA2_H_V1 << BIT_SHIFT_TA2_H_V1)
#define BIT_CLEAR_TA2_H_V1(x)				((x) & (~BITS_TA2_H_V1))
#define BIT_GET_TA2_H_V1(x)				(((x) >> BIT_SHIFT_TA2_H_V1) & BIT_MASK_TA2_H_V1)
#define BIT_SET_TA2_H_V1(x, v)				(BIT_CLEAR_TA2_H_V1(x) | BIT_TA2_H_V1(v))

/* 2 REG_TRANSMIT_ADDRSS_3			(Offset 0x16B8) */

#define BIT_SHIFT_TA3_V1				0
#define BIT_MASK_TA3_V1				0xffffffffL
#define BIT_TA3_V1(x)					(((x) & BIT_MASK_TA3_V1) << BIT_SHIFT_TA3_V1)
#define BITS_TA3_V1					(BIT_MASK_TA3_V1 << BIT_SHIFT_TA3_V1)
#define BIT_CLEAR_TA3_V1(x)				((x) & (~BITS_TA3_V1))
#define BIT_GET_TA3_V1(x)				(((x) >> BIT_SHIFT_TA3_V1) & BIT_MASK_TA3_V1)
#define BIT_SET_TA3_V1(x, v)				(BIT_CLEAR_TA3_V1(x) | BIT_TA3_V1(v))

/* 2 REG_TRANSMIT_ADDRSS_3_H			(Offset 0x16BC) */

#define BIT_SHIFT_TA3_H_V1				0
#define BIT_MASK_TA3_H_V1				0xffff
#define BIT_TA3_H_V1(x)				(((x) & BIT_MASK_TA3_H_V1) << BIT_SHIFT_TA3_H_V1)
#define BITS_TA3_H_V1					(BIT_MASK_TA3_H_V1 << BIT_SHIFT_TA3_H_V1)
#define BIT_CLEAR_TA3_H_V1(x)				((x) & (~BITS_TA3_H_V1))
#define BIT_GET_TA3_H_V1(x)				(((x) >> BIT_SHIFT_TA3_H_V1) & BIT_MASK_TA3_H_V1)
#define BIT_SET_TA3_H_V1(x, v)				(BIT_CLEAR_TA3_H_V1(x) | BIT_TA3_H_V1(v))

/* 2 REG_TRANSMIT_ADDRSS_4			(Offset 0x16C0) */

#define BIT_SHIFT_TA4_V1				0
#define BIT_MASK_TA4_V1				0xffffffffL
#define BIT_TA4_V1(x)					(((x) & BIT_MASK_TA4_V1) << BIT_SHIFT_TA4_V1)
#define BITS_TA4_V1					(BIT_MASK_TA4_V1 << BIT_SHIFT_TA4_V1)
#define BIT_CLEAR_TA4_V1(x)				((x) & (~BITS_TA4_V1))
#define BIT_GET_TA4_V1(x)				(((x) >> BIT_SHIFT_TA4_V1) & BIT_MASK_TA4_V1)
#define BIT_SET_TA4_V1(x, v)				(BIT_CLEAR_TA4_V1(x) | BIT_TA4_V1(v))

/* 2 REG_TRANSMIT_ADDRSS_4_H			(Offset 0x16C4) */

#define BIT_SHIFT_TA4_H_V1				0
#define BIT_MASK_TA4_H_V1				0xffff
#define BIT_TA4_H_V1(x)				(((x) & BIT_MASK_TA4_H_V1) << BIT_SHIFT_TA4_H_V1)
#define BITS_TA4_H_V1					(BIT_MASK_TA4_H_V1 << BIT_SHIFT_TA4_H_V1)
#define BIT_CLEAR_TA4_H_V1(x)				((x) & (~BITS_TA4_H_V1))
#define BIT_GET_TA4_H_V1(x)				(((x) >> BIT_SHIFT_TA4_H_V1) & BIT_MASK_TA4_H_V1)
#define BIT_SET_TA4_H_V1(x, v)				(BIT_CLEAR_TA4_H_V1(x) | BIT_TA4_H_V1(v))

/* 2 REG_NAN_FUN				(Offset 0x16C8) */

#define BIT_SHIFT_R_WMAC_ATTRI_ID1			24
#define BIT_MASK_R_WMAC_ATTRI_ID1			0xff
#define BIT_R_WMAC_ATTRI_ID1(x)			(((x) & BIT_MASK_R_WMAC_ATTRI_ID1) << BIT_SHIFT_R_WMAC_ATTRI_ID1)
#define BITS_R_WMAC_ATTRI_ID1				(BIT_MASK_R_WMAC_ATTRI_ID1 << BIT_SHIFT_R_WMAC_ATTRI_ID1)
#define BIT_CLEAR_R_WMAC_ATTRI_ID1(x)			((x) & (~BITS_R_WMAC_ATTRI_ID1))
#define BIT_GET_R_WMAC_ATTRI_ID1(x)			(((x) >> BIT_SHIFT_R_WMAC_ATTRI_ID1) & BIT_MASK_R_WMAC_ATTRI_ID1)
#define BIT_SET_R_WMAC_ATTRI_ID1(x, v)			(BIT_CLEAR_R_WMAC_ATTRI_ID1(x) | BIT_R_WMAC_ATTRI_ID1(v))

#define BIT_SHIFT_R_WMAC_ATTRI_ID0			16
#define BIT_MASK_R_WMAC_ATTRI_ID0			0xff
#define BIT_R_WMAC_ATTRI_ID0(x)			(((x) & BIT_MASK_R_WMAC_ATTRI_ID0) << BIT_SHIFT_R_WMAC_ATTRI_ID0)
#define BITS_R_WMAC_ATTRI_ID0				(BIT_MASK_R_WMAC_ATTRI_ID0 << BIT_SHIFT_R_WMAC_ATTRI_ID0)
#define BIT_CLEAR_R_WMAC_ATTRI_ID0(x)			((x) & (~BITS_R_WMAC_ATTRI_ID0))
#define BIT_GET_R_WMAC_ATTRI_ID0(x)			(((x) >> BIT_SHIFT_R_WMAC_ATTRI_ID0) & BIT_MASK_R_WMAC_ATTRI_ID0)
#define BIT_SET_R_WMAC_ATTRI_ID0(x, v)			(BIT_CLEAR_R_WMAC_ATTRI_ID0(x) | BIT_R_WMAC_ATTRI_ID0(v))

#define BIT_SHIFT_R_WMAC_ATTRI_IDI_VLD			8
#define BIT_MASK_R_WMAC_ATTRI_IDI_VLD			0x1f
#define BIT_R_WMAC_ATTRI_IDI_VLD(x)			(((x) & BIT_MASK_R_WMAC_ATTRI_IDI_VLD) << BIT_SHIFT_R_WMAC_ATTRI_IDI_VLD)
#define BITS_R_WMAC_ATTRI_IDI_VLD			(BIT_MASK_R_WMAC_ATTRI_IDI_VLD << BIT_SHIFT_R_WMAC_ATTRI_IDI_VLD)
#define BIT_CLEAR_R_WMAC_ATTRI_IDI_VLD(x)		((x) & (~BITS_R_WMAC_ATTRI_IDI_VLD))
#define BIT_GET_R_WMAC_ATTRI_IDI_VLD(x)		(((x) >> BIT_SHIFT_R_WMAC_ATTRI_IDI_VLD) & BIT_MASK_R_WMAC_ATTRI_IDI_VLD)
#define BIT_SET_R_WMAC_ATTRI_IDI_VLD(x, v)		(BIT_CLEAR_R_WMAC_ATTRI_IDI_VLD(x) | BIT_R_WMAC_ATTRI_IDI_VLD(v))

#define BIT_SHIFT_R_TXRPT_NAN_ENTRY_NUM		4
#define BIT_MASK_R_TXRPT_NAN_ENTRY_NUM			0x7
#define BIT_R_TXRPT_NAN_ENTRY_NUM(x)			(((x) & BIT_MASK_R_TXRPT_NAN_ENTRY_NUM) << BIT_SHIFT_R_TXRPT_NAN_ENTRY_NUM)
#define BITS_R_TXRPT_NAN_ENTRY_NUM			(BIT_MASK_R_TXRPT_NAN_ENTRY_NUM << BIT_SHIFT_R_TXRPT_NAN_ENTRY_NUM)
#define BIT_CLEAR_R_TXRPT_NAN_ENTRY_NUM(x)		((x) & (~BITS_R_TXRPT_NAN_ENTRY_NUM))
#define BIT_GET_R_TXRPT_NAN_ENTRY_NUM(x)		(((x) >> BIT_SHIFT_R_TXRPT_NAN_ENTRY_NUM) & BIT_MASK_R_TXRPT_NAN_ENTRY_NUM)
#define BIT_SET_R_TXRPT_NAN_ENTRY_NUM(x, v)		(BIT_CLEAR_R_TXRPT_NAN_ENTRY_NUM(x) | BIT_R_TXRPT_NAN_ENTRY_NUM(v))

#define BIT_SHIFT_R_NAN_ENTRY_SIZE			1
#define BIT_MASK_R_NAN_ENTRY_SIZE			0x7
#define BIT_R_NAN_ENTRY_SIZE(x)			(((x) & BIT_MASK_R_NAN_ENTRY_SIZE) << BIT_SHIFT_R_NAN_ENTRY_SIZE)
#define BITS_R_NAN_ENTRY_SIZE				(BIT_MASK_R_NAN_ENTRY_SIZE << BIT_SHIFT_R_NAN_ENTRY_SIZE)
#define BIT_CLEAR_R_NAN_ENTRY_SIZE(x)			((x) & (~BITS_R_NAN_ENTRY_SIZE))
#define BIT_GET_R_NAN_ENTRY_SIZE(x)			(((x) >> BIT_SHIFT_R_NAN_ENTRY_SIZE) & BIT_MASK_R_NAN_ENTRY_SIZE)
#define BIT_SET_R_NAN_ENTRY_SIZE(x, v)			(BIT_CLEAR_R_NAN_ENTRY_SIZE(x) | BIT_R_NAN_ENTRY_SIZE(v))

#define BIT_R_WMAC_RXNANPSR_EN				BIT(0)

/* 2 REG_NAN_CTL				(Offset 0x16CC) */

#define BIT_SHIFT_R_TXRPT_NAN_ENTRY_FLAG		24
#define BIT_MASK_R_TXRPT_NAN_ENTRY_FLAG		0xff
#define BIT_R_TXRPT_NAN_ENTRY_FLAG(x)			(((x) & BIT_MASK_R_TXRPT_NAN_ENTRY_FLAG) << BIT_SHIFT_R_TXRPT_NAN_ENTRY_FLAG)
#define BITS_R_TXRPT_NAN_ENTRY_FLAG			(BIT_MASK_R_TXRPT_NAN_ENTRY_FLAG << BIT_SHIFT_R_TXRPT_NAN_ENTRY_FLAG)
#define BIT_CLEAR_R_TXRPT_NAN_ENTRY_FLAG(x)		((x) & (~BITS_R_TXRPT_NAN_ENTRY_FLAG))
#define BIT_GET_R_TXRPT_NAN_ENTRY_FLAG(x)		(((x) >> BIT_SHIFT_R_TXRPT_NAN_ENTRY_FLAG) & BIT_MASK_R_TXRPT_NAN_ENTRY_FLAG)
#define BIT_SET_R_TXRPT_NAN_ENTRY_FLAG(x, v)		(BIT_CLEAR_R_TXRPT_NAN_ENTRY_FLAG(x) | BIT_R_TXRPT_NAN_ENTRY_FLAG(v))

#define BIT_SHIFT_R_WMAC_ATTRI_ID4			16
#define BIT_MASK_R_WMAC_ATTRI_ID4			0xff
#define BIT_R_WMAC_ATTRI_ID4(x)			(((x) & BIT_MASK_R_WMAC_ATTRI_ID4) << BIT_SHIFT_R_WMAC_ATTRI_ID4)
#define BITS_R_WMAC_ATTRI_ID4				(BIT_MASK_R_WMAC_ATTRI_ID4 << BIT_SHIFT_R_WMAC_ATTRI_ID4)
#define BIT_CLEAR_R_WMAC_ATTRI_ID4(x)			((x) & (~BITS_R_WMAC_ATTRI_ID4))
#define BIT_GET_R_WMAC_ATTRI_ID4(x)			(((x) >> BIT_SHIFT_R_WMAC_ATTRI_ID4) & BIT_MASK_R_WMAC_ATTRI_ID4)
#define BIT_SET_R_WMAC_ATTRI_ID4(x, v)			(BIT_CLEAR_R_WMAC_ATTRI_ID4(x) | BIT_R_WMAC_ATTRI_ID4(v))

#define BIT_SHIFT_R_WMAC_ATTRI_ID3			8
#define BIT_MASK_R_WMAC_ATTRI_ID3			0xff
#define BIT_R_WMAC_ATTRI_ID3(x)			(((x) & BIT_MASK_R_WMAC_ATTRI_ID3) << BIT_SHIFT_R_WMAC_ATTRI_ID3)
#define BITS_R_WMAC_ATTRI_ID3				(BIT_MASK_R_WMAC_ATTRI_ID3 << BIT_SHIFT_R_WMAC_ATTRI_ID3)
#define BIT_CLEAR_R_WMAC_ATTRI_ID3(x)			((x) & (~BITS_R_WMAC_ATTRI_ID3))
#define BIT_GET_R_WMAC_ATTRI_ID3(x)			(((x) >> BIT_SHIFT_R_WMAC_ATTRI_ID3) & BIT_MASK_R_WMAC_ATTRI_ID3)
#define BIT_SET_R_WMAC_ATTRI_ID3(x, v)			(BIT_CLEAR_R_WMAC_ATTRI_ID3(x) | BIT_R_WMAC_ATTRI_ID3(v))

#define BIT_SHIFT_R_WMAC_ATTRI_ID2			0
#define BIT_MASK_R_WMAC_ATTRI_ID2			0xff
#define BIT_R_WMAC_ATTRI_ID2(x)			(((x) & BIT_MASK_R_WMAC_ATTRI_ID2) << BIT_SHIFT_R_WMAC_ATTRI_ID2)
#define BITS_R_WMAC_ATTRI_ID2				(BIT_MASK_R_WMAC_ATTRI_ID2 << BIT_SHIFT_R_WMAC_ATTRI_ID2)
#define BIT_CLEAR_R_WMAC_ATTRI_ID2(x)			((x) & (~BITS_R_WMAC_ATTRI_ID2))
#define BIT_GET_R_WMAC_ATTRI_ID2(x)			(((x) >> BIT_SHIFT_R_WMAC_ATTRI_ID2) & BIT_MASK_R_WMAC_ATTRI_ID2)
#define BIT_SET_R_WMAC_ATTRI_ID2(x, v)			(BIT_CLEAR_R_WMAC_ATTRI_ID2(x) | BIT_R_WMAC_ATTRI_ID2(v))

/* 2 REG_NAN_ADDR				(Offset 0x16D0) */

#define BIT_R_RX_NAN_ADDR_FILTER_EN			BIT(13)

#define BIT_SHIFT_R_NAN_START_ADDR_OFFSET		0
#define BIT_MASK_R_NAN_START_ADDR_OFFSET		0x1fff
#define BIT_R_NAN_START_ADDR_OFFSET(x)			(((x) & BIT_MASK_R_NAN_START_ADDR_OFFSET) << BIT_SHIFT_R_NAN_START_ADDR_OFFSET)
#define BITS_R_NAN_START_ADDR_OFFSET			(BIT_MASK_R_NAN_START_ADDR_OFFSET << BIT_SHIFT_R_NAN_START_ADDR_OFFSET)
#define BIT_CLEAR_R_NAN_START_ADDR_OFFSET(x)		((x) & (~BITS_R_NAN_START_ADDR_OFFSET))
#define BIT_GET_R_NAN_START_ADDR_OFFSET(x)		(((x) >> BIT_SHIFT_R_NAN_START_ADDR_OFFSET) & BIT_MASK_R_NAN_START_ADDR_OFFSET)
#define BIT_SET_R_NAN_START_ADDR_OFFSET(x, v)		(BIT_CLEAR_R_NAN_START_ADDR_OFFSET(x) | BIT_R_NAN_START_ADDR_OFFSET(v))

/* 2 REG_NAN_ADDR_FLITER			(Offset 0x16D4) */

#define BIT_SHIFT_R_RX_NAN_ADDR_FILTER			0
#define BIT_MASK_R_RX_NAN_ADDR_FILTER			0xffffffffL
#define BIT_R_RX_NAN_ADDR_FILTER(x)			(((x) & BIT_MASK_R_RX_NAN_ADDR_FILTER) << BIT_SHIFT_R_RX_NAN_ADDR_FILTER)
#define BITS_R_RX_NAN_ADDR_FILTER			(BIT_MASK_R_RX_NAN_ADDR_FILTER << BIT_SHIFT_R_RX_NAN_ADDR_FILTER)
#define BIT_CLEAR_R_RX_NAN_ADDR_FILTER(x)		((x) & (~BITS_R_RX_NAN_ADDR_FILTER))
#define BIT_GET_R_RX_NAN_ADDR_FILTER(x)		(((x) >> BIT_SHIFT_R_RX_NAN_ADDR_FILTER) & BIT_MASK_R_RX_NAN_ADDR_FILTER)
#define BIT_SET_R_RX_NAN_ADDR_FILTER(x, v)		(BIT_CLEAR_R_RX_NAN_ADDR_FILTER(x) | BIT_R_RX_NAN_ADDR_FILTER(v))

/* 2 REG_BCN_IEPSR0				(Offset 0x16D8) */

#define BIT_R_WMAC_BCN_MBSSID_MASK			BIT(31)
#define BIT_R_WMAC_BCN_CLR_N				BIT(30)
#define BIT_R_WMAC_BCN_IE1_PSR				BIT(29)
#define BIT_R_WMAC_BCN_IE0_PSR				BIT(28)
#define BIT_R_WMAC_BCN_MBSSID_PSR			BIT(27)
#define BIT_R_WMAC_BCN_SW_MBSSID			BIT(26)

#define BIT_SHIFT_R_WMAC_BCN_MBSSID_N			18
#define BIT_MASK_R_WMAC_BCN_MBSSID_N			0xff
#define BIT_R_WMAC_BCN_MBSSID_N(x)			(((x) & BIT_MASK_R_WMAC_BCN_MBSSID_N) << BIT_SHIFT_R_WMAC_BCN_MBSSID_N)
#define BITS_R_WMAC_BCN_MBSSID_N			(BIT_MASK_R_WMAC_BCN_MBSSID_N << BIT_SHIFT_R_WMAC_BCN_MBSSID_N)
#define BIT_CLEAR_R_WMAC_BCN_MBSSID_N(x)		((x) & (~BITS_R_WMAC_BCN_MBSSID_N))
#define BIT_GET_R_WMAC_BCN_MBSSID_N(x)			(((x) >> BIT_SHIFT_R_WMAC_BCN_MBSSID_N) & BIT_MASK_R_WMAC_BCN_MBSSID_N)
#define BIT_SET_R_WMAC_BCN_MBSSID_N(x, v)		(BIT_CLEAR_R_WMAC_BCN_MBSSID_N(x) | BIT_R_WMAC_BCN_MBSSID_N(v))

#define BIT_R_WMAC_BCN_ID1_EXT				BIT(17)

#define BIT_SHIFT_R_WMAC_BCN_IE_ID1			9
#define BIT_MASK_R_WMAC_BCN_IE_ID1			0xff
#define BIT_R_WMAC_BCN_IE_ID1(x)			(((x) & BIT_MASK_R_WMAC_BCN_IE_ID1) << BIT_SHIFT_R_WMAC_BCN_IE_ID1)
#define BITS_R_WMAC_BCN_IE_ID1				(BIT_MASK_R_WMAC_BCN_IE_ID1 << BIT_SHIFT_R_WMAC_BCN_IE_ID1)
#define BIT_CLEAR_R_WMAC_BCN_IE_ID1(x)			((x) & (~BITS_R_WMAC_BCN_IE_ID1))
#define BIT_GET_R_WMAC_BCN_IE_ID1(x)			(((x) >> BIT_SHIFT_R_WMAC_BCN_IE_ID1) & BIT_MASK_R_WMAC_BCN_IE_ID1)
#define BIT_SET_R_WMAC_BCN_IE_ID1(x, v)		(BIT_CLEAR_R_WMAC_BCN_IE_ID1(x) | BIT_R_WMAC_BCN_IE_ID1(v))

#define BIT_R_WMAC_BCN_ID0_EXT				BIT(8)

#define BIT_SHIFT_R_WMAC_BCN_IE_ID0			0
#define BIT_MASK_R_WMAC_BCN_IE_ID0			0xff
#define BIT_R_WMAC_BCN_IE_ID0(x)			(((x) & BIT_MASK_R_WMAC_BCN_IE_ID0) << BIT_SHIFT_R_WMAC_BCN_IE_ID0)
#define BITS_R_WMAC_BCN_IE_ID0				(BIT_MASK_R_WMAC_BCN_IE_ID0 << BIT_SHIFT_R_WMAC_BCN_IE_ID0)
#define BIT_CLEAR_R_WMAC_BCN_IE_ID0(x)			((x) & (~BITS_R_WMAC_BCN_IE_ID0))
#define BIT_GET_R_WMAC_BCN_IE_ID0(x)			(((x) >> BIT_SHIFT_R_WMAC_BCN_IE_ID0) & BIT_MASK_R_WMAC_BCN_IE_ID0)
#define BIT_SET_R_WMAC_BCN_IE_ID0(x, v)		(BIT_CLEAR_R_WMAC_BCN_IE_ID0(x) | BIT_R_WMAC_BCN_IE_ID0(v))

/* 2 REG_BCN_IEPSR1				(Offset 0x16DC) */

#define BIT_SHIFT_R_WMAC_BCN_MBSSID_OFS		16
#define BIT_MASK_R_WMAC_BCN_MBSSID_OFS			0xffff
#define BIT_R_WMAC_BCN_MBSSID_OFS(x)			(((x) & BIT_MASK_R_WMAC_BCN_MBSSID_OFS) << BIT_SHIFT_R_WMAC_BCN_MBSSID_OFS)
#define BITS_R_WMAC_BCN_MBSSID_OFS			(BIT_MASK_R_WMAC_BCN_MBSSID_OFS << BIT_SHIFT_R_WMAC_BCN_MBSSID_OFS)
#define BIT_CLEAR_R_WMAC_BCN_MBSSID_OFS(x)		((x) & (~BITS_R_WMAC_BCN_MBSSID_OFS))
#define BIT_GET_R_WMAC_BCN_MBSSID_OFS(x)		(((x) >> BIT_SHIFT_R_WMAC_BCN_MBSSID_OFS) & BIT_MASK_R_WMAC_BCN_MBSSID_OFS)
#define BIT_SET_R_WMAC_BCN_MBSSID_OFS(x, v)		(BIT_CLEAR_R_WMAC_BCN_MBSSID_OFS(x) | BIT_R_WMAC_BCN_MBSSID_OFS(v))

#define BIT_R_WMAC_BCN_N0_CHG				BIT(15)
#define BIT_R_WMAC_BCN_MBSSID_VAL			BIT(14)
#define BIT_R_WMAC_OPS_PSR_EN				BIT(10)
#define BIT_R_WMAC_TIM_TIMPSR_EN			BIT(9)
#define BIT_R_WMAC_BCN_BMC_MASK			BIT(8)

#define BIT_SHIFT_R_WMAC_BCN_MBSSID_IDX		0
#define BIT_MASK_R_WMAC_BCN_MBSSID_IDX			0xff
#define BIT_R_WMAC_BCN_MBSSID_IDX(x)			(((x) & BIT_MASK_R_WMAC_BCN_MBSSID_IDX) << BIT_SHIFT_R_WMAC_BCN_MBSSID_IDX)
#define BITS_R_WMAC_BCN_MBSSID_IDX			(BIT_MASK_R_WMAC_BCN_MBSSID_IDX << BIT_SHIFT_R_WMAC_BCN_MBSSID_IDX)
#define BIT_CLEAR_R_WMAC_BCN_MBSSID_IDX(x)		((x) & (~BITS_R_WMAC_BCN_MBSSID_IDX))
#define BIT_GET_R_WMAC_BCN_MBSSID_IDX(x)		(((x) >> BIT_SHIFT_R_WMAC_BCN_MBSSID_IDX) & BIT_MASK_R_WMAC_BCN_MBSSID_IDX)
#define BIT_SET_R_WMAC_BCN_MBSSID_IDX(x, v)		(BIT_CLEAR_R_WMAC_BCN_MBSSID_IDX(x) | BIT_R_WMAC_BCN_MBSSID_IDX(v))

/* 2 REG_CHINFO_ADDR				(Offset 0x16E0) */

#define BIT_SHIFT_R_CHINFO_TX_ADDR_L			0
#define BIT_MASK_R_CHINFO_TX_ADDR_L			0xffffffffL
#define BIT_R_CHINFO_TX_ADDR_L(x)			(((x) & BIT_MASK_R_CHINFO_TX_ADDR_L) << BIT_SHIFT_R_CHINFO_TX_ADDR_L)
#define BITS_R_CHINFO_TX_ADDR_L			(BIT_MASK_R_CHINFO_TX_ADDR_L << BIT_SHIFT_R_CHINFO_TX_ADDR_L)
#define BIT_CLEAR_R_CHINFO_TX_ADDR_L(x)		((x) & (~BITS_R_CHINFO_TX_ADDR_L))
#define BIT_GET_R_CHINFO_TX_ADDR_L(x)			(((x) >> BIT_SHIFT_R_CHINFO_TX_ADDR_L) & BIT_MASK_R_CHINFO_TX_ADDR_L)
#define BIT_SET_R_CHINFO_TX_ADDR_L(x, v)		(BIT_CLEAR_R_CHINFO_TX_ADDR_L(x) | BIT_R_CHINFO_TX_ADDR_L(v))

/* 2 REG_CHINFO_CFG				(Offset 0x16E4) */

#define BIT_R_CHINFO_FCS				BIT(28)
#define BIT_R_CHINFO_WTM_OUT				BIT(27)
#define BIT_R_CHINFO_TIME_OUT				BIT(26)
#define BIT_R_CSI_BUFF_FULL				BIT(25)

#define BIT_SHIFT_R_CHINFO_TIMER			22
#define BIT_MASK_R_CHINFO_TIMER			0x7
#define BIT_R_CHINFO_TIMER(x)				(((x) & BIT_MASK_R_CHINFO_TIMER) << BIT_SHIFT_R_CHINFO_TIMER)
#define BITS_R_CHINFO_TIMER				(BIT_MASK_R_CHINFO_TIMER << BIT_SHIFT_R_CHINFO_TIMER)
#define BIT_CLEAR_R_CHINFO_TIMER(x)			((x) & (~BITS_R_CHINFO_TIMER))
#define BIT_GET_R_CHINFO_TIMER(x)			(((x) >> BIT_SHIFT_R_CHINFO_TIMER) & BIT_MASK_R_CHINFO_TIMER)
#define BIT_SET_R_CHINFO_TIMER(x, v)			(BIT_CLEAR_R_CHINFO_TIMER(x) | BIT_R_CHINFO_TIMER(v))

#define BIT_SHIFT_R_CHINFO_MODE			17
#define BIT_MASK_R_CHINFO_MODE				0x3
#define BIT_R_CHINFO_MODE(x)				(((x) & BIT_MASK_R_CHINFO_MODE) << BIT_SHIFT_R_CHINFO_MODE)
#define BITS_R_CHINFO_MODE				(BIT_MASK_R_CHINFO_MODE << BIT_SHIFT_R_CHINFO_MODE)
#define BIT_CLEAR_R_CHINFO_MODE(x)			((x) & (~BITS_R_CHINFO_MODE))
#define BIT_GET_R_CHINFO_MODE(x)			(((x) >> BIT_SHIFT_R_CHINFO_MODE) & BIT_MASK_R_CHINFO_MODE)
#define BIT_SET_R_CHINFO_MODE(x, v)			(BIT_CLEAR_R_CHINFO_MODE(x) | BIT_R_CHINFO_MODE(v))

#define BIT_R_CHINFO_EN				BIT(16)

#define BIT_SHIFT_R_CHINFO_TX_ADDR_H			0
#define BIT_MASK_R_CHINFO_TX_ADDR_H			0xffff
#define BIT_R_CHINFO_TX_ADDR_H(x)			(((x) & BIT_MASK_R_CHINFO_TX_ADDR_H) << BIT_SHIFT_R_CHINFO_TX_ADDR_H)
#define BITS_R_CHINFO_TX_ADDR_H			(BIT_MASK_R_CHINFO_TX_ADDR_H << BIT_SHIFT_R_CHINFO_TX_ADDR_H)
#define BIT_CLEAR_R_CHINFO_TX_ADDR_H(x)		((x) & (~BITS_R_CHINFO_TX_ADDR_H))
#define BIT_GET_R_CHINFO_TX_ADDR_H(x)			(((x) >> BIT_SHIFT_R_CHINFO_TX_ADDR_H) & BIT_MASK_R_CHINFO_TX_ADDR_H)
#define BIT_SET_R_CHINFO_TX_ADDR_H(x, v)		(BIT_CLEAR_R_CHINFO_TX_ADDR_H(x) | BIT_R_CHINFO_TX_ADDR_H(v))

/* 2 REG_RXCSIBUF_CFG			(Offset 0x16E8) */

#define BIT_SHIFT_R_CHINFO_REQ_SIZE			16
#define BIT_MASK_R_CHINFO_REQ_SIZE			0x3f
#define BIT_R_CHINFO_REQ_SIZE(x)			(((x) & BIT_MASK_R_CHINFO_REQ_SIZE) << BIT_SHIFT_R_CHINFO_REQ_SIZE)
#define BITS_R_CHINFO_REQ_SIZE				(BIT_MASK_R_CHINFO_REQ_SIZE << BIT_SHIFT_R_CHINFO_REQ_SIZE)
#define BIT_CLEAR_R_CHINFO_REQ_SIZE(x)			((x) & (~BITS_R_CHINFO_REQ_SIZE))
#define BIT_GET_R_CHINFO_REQ_SIZE(x)			(((x) >> BIT_SHIFT_R_CHINFO_REQ_SIZE) & BIT_MASK_R_CHINFO_REQ_SIZE)
#define BIT_SET_R_CHINFO_REQ_SIZE(x, v)		(BIT_CLEAR_R_CHINFO_REQ_SIZE(x) | BIT_R_CHINFO_REQ_SIZE(v))

#define BIT_SHIFT_R_CHINFO_WDFS_TIME			12
#define BIT_MASK_R_CHINFO_WDFS_TIME			0xf
#define BIT_R_CHINFO_WDFS_TIME(x)			(((x) & BIT_MASK_R_CHINFO_WDFS_TIME) << BIT_SHIFT_R_CHINFO_WDFS_TIME)
#define BITS_R_CHINFO_WDFS_TIME			(BIT_MASK_R_CHINFO_WDFS_TIME << BIT_SHIFT_R_CHINFO_WDFS_TIME)
#define BIT_CLEAR_R_CHINFO_WDFS_TIME(x)		((x) & (~BITS_R_CHINFO_WDFS_TIME))
#define BIT_GET_R_CHINFO_WDFS_TIME(x)			(((x) >> BIT_SHIFT_R_CHINFO_WDFS_TIME) & BIT_MASK_R_CHINFO_WDFS_TIME)
#define BIT_SET_R_CHINFO_WDFS_TIME(x, v)		(BIT_CLEAR_R_CHINFO_WDFS_TIME(x) | BIT_R_CHINFO_WDFS_TIME(v))

#define BIT_SHIFT_R_CSIBUF_THRESHOD			8
#define BIT_MASK_R_CSIBUF_THRESHOD			0xf
#define BIT_R_CSIBUF_THRESHOD(x)			(((x) & BIT_MASK_R_CSIBUF_THRESHOD) << BIT_SHIFT_R_CSIBUF_THRESHOD)
#define BITS_R_CSIBUF_THRESHOD				(BIT_MASK_R_CSIBUF_THRESHOD << BIT_SHIFT_R_CSIBUF_THRESHOD)
#define BIT_CLEAR_R_CSIBUF_THRESHOD(x)			((x) & (~BITS_R_CSIBUF_THRESHOD))
#define BIT_GET_R_CSIBUF_THRESHOD(x)			(((x) >> BIT_SHIFT_R_CSIBUF_THRESHOD) & BIT_MASK_R_CSIBUF_THRESHOD)
#define BIT_SET_R_CSIBUF_THRESHOD(x, v)		(BIT_CLEAR_R_CSIBUF_THRESHOD(x) | BIT_R_CSIBUF_THRESHOD(v))

#define BIT_SHIFT_R_CSIBUF_ENDADDR			0
#define BIT_MASK_R_CSIBUF_ENDADDR			0xff
#define BIT_R_CSIBUF_ENDADDR(x)			(((x) & BIT_MASK_R_CSIBUF_ENDADDR) << BIT_SHIFT_R_CSIBUF_ENDADDR)
#define BITS_R_CSIBUF_ENDADDR				(BIT_MASK_R_CSIBUF_ENDADDR << BIT_SHIFT_R_CSIBUF_ENDADDR)
#define BIT_CLEAR_R_CSIBUF_ENDADDR(x)			((x) & (~BITS_R_CSIBUF_ENDADDR))
#define BIT_GET_R_CSIBUF_ENDADDR(x)			(((x) >> BIT_SHIFT_R_CSIBUF_ENDADDR) & BIT_MASK_R_CSIBUF_ENDADDR)
#define BIT_SET_R_CSIBUF_ENDADDR(x, v)			(BIT_CLEAR_R_CSIBUF_ENDADDR(x) | BIT_R_CSIBUF_ENDADDR(v))

/* 2 REG_BT_ZB_COEX_TB			(Offset 0x16EC) */

#define BIT_SHIFT_R_BT_ZB_COEX_TABLE			0
#define BIT_MASK_R_BT_ZB_COEX_TABLE			0xffffffffL
#define BIT_R_BT_ZB_COEX_TABLE(x)			(((x) & BIT_MASK_R_BT_ZB_COEX_TABLE) << BIT_SHIFT_R_BT_ZB_COEX_TABLE)
#define BITS_R_BT_ZB_COEX_TABLE			(BIT_MASK_R_BT_ZB_COEX_TABLE << BIT_SHIFT_R_BT_ZB_COEX_TABLE)
#define BIT_CLEAR_R_BT_ZB_COEX_TABLE(x)		((x) & (~BITS_R_BT_ZB_COEX_TABLE))
#define BIT_GET_R_BT_ZB_COEX_TABLE(x)			(((x) >> BIT_SHIFT_R_BT_ZB_COEX_TABLE) & BIT_MASK_R_BT_ZB_COEX_TABLE)
#define BIT_SET_R_BT_ZB_COEX_TABLE(x, v)		(BIT_CLEAR_R_BT_ZB_COEX_TABLE(x) | BIT_R_BT_ZB_COEX_TABLE(v))

/* 2 REG_CHINFO_TRIG_TYPE0			(Offset 0x16F0) */

#define BIT_CTL_TRG_15EN				BIT(31)
#define BIT_CTL_TRG_14EN				BIT(30)
#define BIT_CTL_TRG_13EN				BIT(29)
#define BIT_CTL_TRG_12EN				BIT(28)
#define BIT_CTL_TRG_11EN				BIT(27)
#define BIT_CTL_TRG_10EN				BIT(26)
#define BIT_CTL_TRG_9EN				BIT(25)
#define BIT_CTL_TRG_8EN				BIT(24)
#define BIT_CTL_TRG_7EN				BIT(23)
#define BIT_CTL_TRG_6EN				BIT(22)
#define BIT_CTL_TRG_5EN				BIT(21)
#define BIT_CTL_TRG_4EN				BIT(20)
#define BIT_CTL_TRG_3EN				BIT(19)
#define BIT_CTL_TRG_2EN				BIT(18)
#define BIT_CTL_TRG_1EN				BIT(17)
#define BIT_CTL_TRG_0EN				BIT(16)
#define BIT_MGT_TRG_15EN				BIT(15)
#define BIT_MGT_TRG_14EN				BIT(14)
#define BIT_MGT_TRG_13EN				BIT(13)
#define BIT_MGT_TRG_12EN				BIT(12)
#define BIT_MGT_TRG_11EN				BIT(11)
#define BIT_MGT_TRG_10EN				BIT(10)
#define BIT_MGT_TRG_9EN				BIT(9)
#define BIT_MGT_TRG_8EN				BIT(8)
#define BIT_MGT_TRG_7EN				BIT(7)
#define BIT_MGT_TRG_6EN				BIT(6)
#define BIT_MGT_TRG_5EN				BIT(5)
#define BIT_MGT_TRG_4EN				BIT(4)
#define BIT_MGT_TRG_3EN				BIT(3)
#define BIT_MGT_TRG_2EN				BIT(2)
#define BIT_MGT_TRG_1EN				BIT(1)
#define BIT_MGT_TRG_0EN				BIT(0)

/* 2 REG_CHINFO_TRIG_TYPE1			(Offset 0x16F4) */

#define BIT_SHIFT_R_TXTRIG_STOP_SEL			24
#define BIT_MASK_R_TXTRIG_STOP_SEL			0x1f
#define BIT_R_TXTRIG_STOP_SEL(x)			(((x) & BIT_MASK_R_TXTRIG_STOP_SEL) << BIT_SHIFT_R_TXTRIG_STOP_SEL)
#define BITS_R_TXTRIG_STOP_SEL				(BIT_MASK_R_TXTRIG_STOP_SEL << BIT_SHIFT_R_TXTRIG_STOP_SEL)
#define BIT_CLEAR_R_TXTRIG_STOP_SEL(x)			((x) & (~BITS_R_TXTRIG_STOP_SEL))
#define BIT_GET_R_TXTRIG_STOP_SEL(x)			(((x) >> BIT_SHIFT_R_TXTRIG_STOP_SEL) & BIT_MASK_R_TXTRIG_STOP_SEL)
#define BIT_SET_R_TXTRIG_STOP_SEL(x, v)		(BIT_CLEAR_R_TXTRIG_STOP_SEL(x) | BIT_R_TXTRIG_STOP_SEL(v))

#define BIT_SHIFT_R_RXTRIG_STOP_SEL			19
#define BIT_MASK_R_RXTRIG_STOP_SEL			0x1f
#define BIT_R_RXTRIG_STOP_SEL(x)			(((x) & BIT_MASK_R_RXTRIG_STOP_SEL) << BIT_SHIFT_R_RXTRIG_STOP_SEL)
#define BITS_R_RXTRIG_STOP_SEL				(BIT_MASK_R_RXTRIG_STOP_SEL << BIT_SHIFT_R_RXTRIG_STOP_SEL)
#define BIT_CLEAR_R_RXTRIG_STOP_SEL(x)			((x) & (~BITS_R_RXTRIG_STOP_SEL))
#define BIT_GET_R_RXTRIG_STOP_SEL(x)			(((x) >> BIT_SHIFT_R_RXTRIG_STOP_SEL) & BIT_MASK_R_RXTRIG_STOP_SEL)
#define BIT_SET_R_RXTRIG_STOP_SEL(x, v)		(BIT_CLEAR_R_RXTRIG_STOP_SEL(x) | BIT_R_RXTRIG_STOP_SEL(v))

#define BIT_R_NEW_RX_RST_EN				BIT(18)

#define BIT_SHIFT_R_RXD_OFFSET_SEL			16
#define BIT_MASK_R_RXD_OFFSET_SEL			0x3
#define BIT_R_RXD_OFFSET_SEL(x)			(((x) & BIT_MASK_R_RXD_OFFSET_SEL) << BIT_SHIFT_R_RXD_OFFSET_SEL)
#define BITS_R_RXD_OFFSET_SEL				(BIT_MASK_R_RXD_OFFSET_SEL << BIT_SHIFT_R_RXD_OFFSET_SEL)
#define BIT_CLEAR_R_RXD_OFFSET_SEL(x)			((x) & (~BITS_R_RXD_OFFSET_SEL))
#define BIT_GET_R_RXD_OFFSET_SEL(x)			(((x) >> BIT_SHIFT_R_RXD_OFFSET_SEL) & BIT_MASK_R_RXD_OFFSET_SEL)
#define BIT_SET_R_RXD_OFFSET_SEL(x, v)			(BIT_CLEAR_R_RXD_OFFSET_SEL(x) | BIT_R_RXD_OFFSET_SEL(v))

#define BIT_DATA_TRG_15EN				BIT(15)
#define BIT_DATA_TRG_14EN				BIT(14)
#define BIT_DATA_TRG_13EN				BIT(13)
#define BIT_DATA_TRG_12EN				BIT(12)
#define BIT_DATA_TRG_11EN				BIT(11)
#define BIT_DATA_TRG_10EN				BIT(10)
#define BIT_DATA_TRG_9EN				BIT(9)
#define BIT_DATA_TRG_8EN				BIT(8)
#define BIT_DATA_TRG_7EN				BIT(7)
#define BIT_DATA_TRG_6EN				BIT(6)
#define BIT_DATA_TRG_5EN				BIT(5)
#define BIT_DATA_TRG_4EN				BIT(4)
#define BIT_DATA_TRG_3EN				BIT(3)
#define BIT_DATA_TRG_2EN				BIT(2)
#define BIT_DATA_TRG_1EN				BIT(1)
#define BIT_DATA_TRG_0EN				BIT(0)

/* 2 REG_DFS_CFG				(Offset 0x16F8) */

#define BIT_SHIFT_R_DFS_DROP_CNT			23
#define BIT_MASK_R_DFS_DROP_CNT			0x1ff
#define BIT_R_DFS_DROP_CNT(x)				(((x) & BIT_MASK_R_DFS_DROP_CNT) << BIT_SHIFT_R_DFS_DROP_CNT)
#define BITS_R_DFS_DROP_CNT				(BIT_MASK_R_DFS_DROP_CNT << BIT_SHIFT_R_DFS_DROP_CNT)
#define BIT_CLEAR_R_DFS_DROP_CNT(x)			((x) & (~BITS_R_DFS_DROP_CNT))
#define BIT_GET_R_DFS_DROP_CNT(x)			(((x) >> BIT_SHIFT_R_DFS_DROP_CNT) & BIT_MASK_R_DFS_DROP_CNT)
#define BIT_SET_R_DFS_DROP_CNT(x, v)			(BIT_CLEAR_R_DFS_DROP_CNT(x) | BIT_R_DFS_DROP_CNT(v))

#define BIT_DFS_BUFF_FULL				BIT(18)
#define BIT_DFS_EN_INTRPT				BIT(17)
#define BIT_R_DFS_EN_INTRPT				BIT(16)

#define BIT_SHIFT_R_DFS_PKT_LEN			6
#define BIT_MASK_R_DFS_PKT_LEN				0x3ff
#define BIT_R_DFS_PKT_LEN(x)				(((x) & BIT_MASK_R_DFS_PKT_LEN) << BIT_SHIFT_R_DFS_PKT_LEN)
#define BITS_R_DFS_PKT_LEN				(BIT_MASK_R_DFS_PKT_LEN << BIT_SHIFT_R_DFS_PKT_LEN)
#define BIT_CLEAR_R_DFS_PKT_LEN(x)			((x) & (~BITS_R_DFS_PKT_LEN))
#define BIT_GET_R_DFS_PKT_LEN(x)			(((x) >> BIT_SHIFT_R_DFS_PKT_LEN) & BIT_MASK_R_DFS_PKT_LEN)
#define BIT_SET_R_DFS_PKT_LEN(x, v)			(BIT_CLEAR_R_DFS_PKT_LEN(x) | BIT_R_DFS_PKT_LEN(v))

#define BIT_R_DFS_RST_DROP_CNT				BIT(5)
#define BIT_R_DFS_READ_MODE				BIT(1)
#define BIT_R_DFS_STOP					BIT(0)

/* 2 REG_DFS_AGG_TIME			(Offset 0x16FC) */

#define BIT_SHIFT_R_TXTRIG_TYPE			23
#define BIT_MASK_R_TXTRIG_TYPE				0x3f
#define BIT_R_TXTRIG_TYPE(x)				(((x) & BIT_MASK_R_TXTRIG_TYPE) << BIT_SHIFT_R_TXTRIG_TYPE)
#define BITS_R_TXTRIG_TYPE				(BIT_MASK_R_TXTRIG_TYPE << BIT_SHIFT_R_TXTRIG_TYPE)
#define BIT_CLEAR_R_TXTRIG_TYPE(x)			((x) & (~BITS_R_TXTRIG_TYPE))
#define BIT_GET_R_TXTRIG_TYPE(x)			(((x) >> BIT_SHIFT_R_TXTRIG_TYPE) & BIT_MASK_R_TXTRIG_TYPE)
#define BIT_SET_R_TXTRIG_TYPE(x, v)			(BIT_CLEAR_R_TXTRIG_TYPE(x) | BIT_R_TXTRIG_TYPE(v))

#define BIT_SHIFT_R_RXTRIG_TYPE			17
#define BIT_MASK_R_RXTRIG_TYPE				0x3f
#define BIT_R_RXTRIG_TYPE(x)				(((x) & BIT_MASK_R_RXTRIG_TYPE) << BIT_SHIFT_R_RXTRIG_TYPE)
#define BITS_R_RXTRIG_TYPE				(BIT_MASK_R_RXTRIG_TYPE << BIT_SHIFT_R_RXTRIG_TYPE)
#define BIT_CLEAR_R_RXTRIG_TYPE(x)			((x) & (~BITS_R_RXTRIG_TYPE))
#define BIT_GET_R_RXTRIG_TYPE(x)			(((x) >> BIT_SHIFT_R_RXTRIG_TYPE) & BIT_MASK_R_RXTRIG_TYPE)
#define BIT_SET_R_RXTRIG_TYPE(x, v)			(BIT_CLEAR_R_RXTRIG_TYPE(x) | BIT_R_RXTRIG_TYPE(v))

#define BIT_SHIFT_R_DFS_AGG_TIME			9
#define BIT_MASK_R_DFS_AGG_TIME			0xff
#define BIT_R_DFS_AGG_TIME(x)				(((x) & BIT_MASK_R_DFS_AGG_TIME) << BIT_SHIFT_R_DFS_AGG_TIME)
#define BITS_R_DFS_AGG_TIME				(BIT_MASK_R_DFS_AGG_TIME << BIT_SHIFT_R_DFS_AGG_TIME)
#define BIT_CLEAR_R_DFS_AGG_TIME(x)			((x) & (~BITS_R_DFS_AGG_TIME))
#define BIT_GET_R_DFS_AGG_TIME(x)			(((x) >> BIT_SHIFT_R_DFS_AGG_TIME) & BIT_MASK_R_DFS_AGG_TIME)
#define BIT_SET_R_DFS_AGG_TIME(x, v)			(BIT_CLEAR_R_DFS_AGG_TIME(x) | BIT_R_DFS_AGG_TIME(v))

#define BIT_SHIFT_R_DFS_AGG_NUM			0
#define BIT_MASK_R_DFS_AGG_NUM				0x1ff
#define BIT_R_DFS_AGG_NUM(x)				(((x) & BIT_MASK_R_DFS_AGG_NUM) << BIT_SHIFT_R_DFS_AGG_NUM)
#define BITS_R_DFS_AGG_NUM				(BIT_MASK_R_DFS_AGG_NUM << BIT_SHIFT_R_DFS_AGG_NUM)
#define BIT_CLEAR_R_DFS_AGG_NUM(x)			((x) & (~BITS_R_DFS_AGG_NUM))
#define BIT_GET_R_DFS_AGG_NUM(x)			(((x) >> BIT_SHIFT_R_DFS_AGG_NUM) & BIT_MASK_R_DFS_AGG_NUM)
#define BIT_SET_R_DFS_AGG_NUM(x, v)			(BIT_CLEAR_R_DFS_AGG_NUM(x) | BIT_R_DFS_AGG_NUM(v))

/* 2 REG_RX_CFG				(Offset 0x1710) */

#define BIT_R_VHTNDPA_SUAID_0_EN			BIT(31)
#define BIT_R_DIS_HE_SIGB_CHK				BIT(30)
#define BIT_R_MBA_RSVD_AID_EN				BIT(29)
#define BIT_R_RXBCN_TIM_NO_HIT_EN			BIT(28)
#define BIT_R_TIM_NO_HIT_REJECT			BIT(27)
#define BIT_R_DIS_CHK_HENDP_LEN			BIT(26)
#define BIT_R_CHK_MGNT_BSSID				BIT(25)
#define BIT_R_CHK_CTL_BSSID				BIT(24)
#define BIT_R_DIS_STS_GCLK				BIT(23)

#define BIT_SHIFT_R_STS_CHKRX_COND			19
#define BIT_MASK_R_STS_CHKRX_COND			0xf
#define BIT_R_STS_CHKRX_COND(x)			(((x) & BIT_MASK_R_STS_CHKRX_COND) << BIT_SHIFT_R_STS_CHKRX_COND)
#define BITS_R_STS_CHKRX_COND				(BIT_MASK_R_STS_CHKRX_COND << BIT_SHIFT_R_STS_CHKRX_COND)
#define BIT_CLEAR_R_STS_CHKRX_COND(x)			((x) & (~BITS_R_STS_CHKRX_COND))
#define BIT_GET_R_STS_CHKRX_COND(x)			(((x) >> BIT_SHIFT_R_STS_CHKRX_COND) & BIT_MASK_R_STS_CHKRX_COND)
#define BIT_SET_R_STS_CHKRX_COND(x, v)			(BIT_CLEAR_R_STS_CHKRX_COND(x) | BIT_R_STS_CHKRX_COND(v))

#define BIT_R_INTER_PPDU_REJECT			BIT(18)
#define BIT_R_EN_MACH_UPD_LEN				BIT(17)
#define BIT_R_SNIFFER_TB				BIT(16)
#define BIT_R_RXPSF_INTER_PLCP				BIT(6)
#define BIT_R_RXPSF_INTER_MPDU				BIT(5)
#define BIT_R_RXPSF_HE_MU_CHKEN			BIT(4)
#define BIT_R_RXPSF_HE_ERSU_CHKEN			BIT(3)
#define BIT_R_RXPSF_HE_SU_CHKEN			BIT(2)
#define BIT_R_RXPSF_VHT_MU_CHKEN			BIT(1)
#define BIT_R_RXPSF_VHT_SU_CHKEN			BIT(0)

/* 2 REG_RPL_CFG				(Offset 0x1714) */

#define BIT_SHIFT_R_RPLCFG_UPPER_DBM			11
#define BIT_MASK_R_RPLCFG_UPPER_DBM			0x1ff
#define BIT_R_RPLCFG_UPPER_DBM(x)			(((x) & BIT_MASK_R_RPLCFG_UPPER_DBM) << BIT_SHIFT_R_RPLCFG_UPPER_DBM)
#define BITS_R_RPLCFG_UPPER_DBM			(BIT_MASK_R_RPLCFG_UPPER_DBM << BIT_SHIFT_R_RPLCFG_UPPER_DBM)
#define BIT_CLEAR_R_RPLCFG_UPPER_DBM(x)		((x) & (~BITS_R_RPLCFG_UPPER_DBM))
#define BIT_GET_R_RPLCFG_UPPER_DBM(x)			(((x) >> BIT_SHIFT_R_RPLCFG_UPPER_DBM) & BIT_MASK_R_RPLCFG_UPPER_DBM)
#define BIT_SET_R_RPLCFG_UPPER_DBM(x, v)		(BIT_CLEAR_R_RPLCFG_UPPER_DBM(x) | BIT_R_RPLCFG_UPPER_DBM(v))

#define BIT_R_RPLCFG_UPPER_EN				BIT(10)

#define BIT_SHIFT_R_RPLCFG_DBM				1
#define BIT_MASK_R_RPLCFG_DBM				0x1ff
#define BIT_R_RPLCFG_DBM(x)				(((x) & BIT_MASK_R_RPLCFG_DBM) << BIT_SHIFT_R_RPLCFG_DBM)
#define BITS_R_RPLCFG_DBM				(BIT_MASK_R_RPLCFG_DBM << BIT_SHIFT_R_RPLCFG_DBM)
#define BIT_CLEAR_R_RPLCFG_DBM(x)			((x) & (~BITS_R_RPLCFG_DBM))
#define BIT_GET_R_RPLCFG_DBM(x)			(((x) >> BIT_SHIFT_R_RPLCFG_DBM) & BIT_MASK_R_RPLCFG_DBM)
#define BIT_SET_R_RPLCFG_DBM(x, v)			(BIT_CLEAR_R_RPLCFG_DBM(x) | BIT_R_RPLCFG_DBM(v))

#define BIT_R_RPLCFG_EN				BIT(0)

/* 2 REG_AID					(Offset 0x1718) */

#define BIT_SHIFT_R_MAC_AID12_1			12
#define BIT_MASK_R_MAC_AID12_1				0xfff
#define BIT_R_MAC_AID12_1(x)				(((x) & BIT_MASK_R_MAC_AID12_1) << BIT_SHIFT_R_MAC_AID12_1)
#define BITS_R_MAC_AID12_1				(BIT_MASK_R_MAC_AID12_1 << BIT_SHIFT_R_MAC_AID12_1)
#define BIT_CLEAR_R_MAC_AID12_1(x)			((x) & (~BITS_R_MAC_AID12_1))
#define BIT_GET_R_MAC_AID12_1(x)			(((x) >> BIT_SHIFT_R_MAC_AID12_1) & BIT_MASK_R_MAC_AID12_1)
#define BIT_SET_R_MAC_AID12_1(x, v)			(BIT_CLEAR_R_MAC_AID12_1(x) | BIT_R_MAC_AID12_1(v))

#define BIT_SHIFT_R_MAC_AID12_0			0
#define BIT_MASK_R_MAC_AID12_0				0xfff
#define BIT_R_MAC_AID12_0(x)				(((x) & BIT_MASK_R_MAC_AID12_0) << BIT_SHIFT_R_MAC_AID12_0)
#define BITS_R_MAC_AID12_0				(BIT_MASK_R_MAC_AID12_0 << BIT_SHIFT_R_MAC_AID12_0)
#define BIT_CLEAR_R_MAC_AID12_0(x)			((x) & (~BITS_R_MAC_AID12_0))
#define BIT_GET_R_MAC_AID12_0(x)			(((x) >> BIT_SHIFT_R_MAC_AID12_0) & BIT_MASK_R_MAC_AID12_0)
#define BIT_SET_R_MAC_AID12_0(x, v)			(BIT_CLEAR_R_MAC_AID12_0(x) | BIT_R_MAC_AID12_0(v))

/* 2 REG_TRAN_BSSID0_L			(Offset 0x171C) */

#define BIT_SHIFT_R_WMAC_TRANSBSSID0_L			0
#define BIT_MASK_R_WMAC_TRANSBSSID0_L			0xffffffffL
#define BIT_R_WMAC_TRANSBSSID0_L(x)			(((x) & BIT_MASK_R_WMAC_TRANSBSSID0_L) << BIT_SHIFT_R_WMAC_TRANSBSSID0_L)
#define BITS_R_WMAC_TRANSBSSID0_L			(BIT_MASK_R_WMAC_TRANSBSSID0_L << BIT_SHIFT_R_WMAC_TRANSBSSID0_L)
#define BIT_CLEAR_R_WMAC_TRANSBSSID0_L(x)		((x) & (~BITS_R_WMAC_TRANSBSSID0_L))
#define BIT_GET_R_WMAC_TRANSBSSID0_L(x)		(((x) >> BIT_SHIFT_R_WMAC_TRANSBSSID0_L) & BIT_MASK_R_WMAC_TRANSBSSID0_L)
#define BIT_SET_R_WMAC_TRANSBSSID0_L(x, v)		(BIT_CLEAR_R_WMAC_TRANSBSSID0_L(x) | BIT_R_WMAC_TRANSBSSID0_L(v))

/* 2 REG_TRAN_BSSID0_H			(Offset 0x1720) */

#define BIT_R_MBSSID_CTLINFO_SRCH_EN			BIT(24)
#define BIT_R_EN_PARTAID				BIT(23)
#define BIT_R_EN_MBSSID				BIT(22)

#define BIT_SHIFT_R_BSS_COLOR0				16
#define BIT_MASK_R_BSS_COLOR0				0x3f
#define BIT_R_BSS_COLOR0(x)				(((x) & BIT_MASK_R_BSS_COLOR0) << BIT_SHIFT_R_BSS_COLOR0)
#define BITS_R_BSS_COLOR0				(BIT_MASK_R_BSS_COLOR0 << BIT_SHIFT_R_BSS_COLOR0)
#define BIT_CLEAR_R_BSS_COLOR0(x)			((x) & (~BITS_R_BSS_COLOR0))
#define BIT_GET_R_BSS_COLOR0(x)			(((x) >> BIT_SHIFT_R_BSS_COLOR0) & BIT_MASK_R_BSS_COLOR0)
#define BIT_SET_R_BSS_COLOR0(x, v)			(BIT_CLEAR_R_BSS_COLOR0(x) | BIT_R_BSS_COLOR0(v))

#define BIT_SHIFT_R_WMAC_TRANSBSSID0_H			0
#define BIT_MASK_R_WMAC_TRANSBSSID0_H			0xffff
#define BIT_R_WMAC_TRANSBSSID0_H(x)			(((x) & BIT_MASK_R_WMAC_TRANSBSSID0_H) << BIT_SHIFT_R_WMAC_TRANSBSSID0_H)
#define BITS_R_WMAC_TRANSBSSID0_H			(BIT_MASK_R_WMAC_TRANSBSSID0_H << BIT_SHIFT_R_WMAC_TRANSBSSID0_H)
#define BIT_CLEAR_R_WMAC_TRANSBSSID0_H(x)		((x) & (~BITS_R_WMAC_TRANSBSSID0_H))
#define BIT_GET_R_WMAC_TRANSBSSID0_H(x)		(((x) >> BIT_SHIFT_R_WMAC_TRANSBSSID0_H) & BIT_MASK_R_WMAC_TRANSBSSID0_H)
#define BIT_SET_R_WMAC_TRANSBSSID0_H(x, v)		(BIT_CLEAR_R_WMAC_TRANSBSSID0_H(x) | BIT_R_WMAC_TRANSBSSID0_H(v))

/* 2 REG_TRAN_BSSID1_L			(Offset 0x1724) */

#define BIT_SHIFT_R_WMAC_TRANSBSSID1_L			0
#define BIT_MASK_R_WMAC_TRANSBSSID1_L			0xffffffffL
#define BIT_R_WMAC_TRANSBSSID1_L(x)			(((x) & BIT_MASK_R_WMAC_TRANSBSSID1_L) << BIT_SHIFT_R_WMAC_TRANSBSSID1_L)
#define BITS_R_WMAC_TRANSBSSID1_L			(BIT_MASK_R_WMAC_TRANSBSSID1_L << BIT_SHIFT_R_WMAC_TRANSBSSID1_L)
#define BIT_CLEAR_R_WMAC_TRANSBSSID1_L(x)		((x) & (~BITS_R_WMAC_TRANSBSSID1_L))
#define BIT_GET_R_WMAC_TRANSBSSID1_L(x)		(((x) >> BIT_SHIFT_R_WMAC_TRANSBSSID1_L) & BIT_MASK_R_WMAC_TRANSBSSID1_L)
#define BIT_SET_R_WMAC_TRANSBSSID1_L(x, v)		(BIT_CLEAR_R_WMAC_TRANSBSSID1_L(x) | BIT_R_WMAC_TRANSBSSID1_L(v))

/* 2 REG_TRAN_BSSID1_H			(Offset 0x1728) */

#define BIT_SHIFT_R_BSS_COLOR1				16
#define BIT_MASK_R_BSS_COLOR1				0x3f
#define BIT_R_BSS_COLOR1(x)				(((x) & BIT_MASK_R_BSS_COLOR1) << BIT_SHIFT_R_BSS_COLOR1)
#define BITS_R_BSS_COLOR1				(BIT_MASK_R_BSS_COLOR1 << BIT_SHIFT_R_BSS_COLOR1)
#define BIT_CLEAR_R_BSS_COLOR1(x)			((x) & (~BITS_R_BSS_COLOR1))
#define BIT_GET_R_BSS_COLOR1(x)			(((x) >> BIT_SHIFT_R_BSS_COLOR1) & BIT_MASK_R_BSS_COLOR1)
#define BIT_SET_R_BSS_COLOR1(x, v)			(BIT_CLEAR_R_BSS_COLOR1(x) | BIT_R_BSS_COLOR1(v))

#define BIT_SHIFT_R_WMAC_TRANSBSSID1_H			0
#define BIT_MASK_R_WMAC_TRANSBSSID1_H			0xffff
#define BIT_R_WMAC_TRANSBSSID1_H(x)			(((x) & BIT_MASK_R_WMAC_TRANSBSSID1_H) << BIT_SHIFT_R_WMAC_TRANSBSSID1_H)
#define BITS_R_WMAC_TRANSBSSID1_H			(BIT_MASK_R_WMAC_TRANSBSSID1_H << BIT_SHIFT_R_WMAC_TRANSBSSID1_H)
#define BIT_CLEAR_R_WMAC_TRANSBSSID1_H(x)		((x) & (~BITS_R_WMAC_TRANSBSSID1_H))
#define BIT_GET_R_WMAC_TRANSBSSID1_H(x)		(((x) >> BIT_SHIFT_R_WMAC_TRANSBSSID1_H) & BIT_MASK_R_WMAC_TRANSBSSID1_H)
#define BIT_SET_R_WMAC_TRANSBSSID1_H(x, v)		(BIT_CLEAR_R_WMAC_TRANSBSSID1_H(x) | BIT_R_WMAC_TRANSBSSID1_H(v))

/* 2 REG_GID_POS_EN_L			(Offset 0x172C) */

#define BIT_SHIFT_R_GID_POSITION_EN_L			0
#define BIT_MASK_R_GID_POSITION_EN_L			0xffffffffL
#define BIT_R_GID_POSITION_EN_L(x)			(((x) & BIT_MASK_R_GID_POSITION_EN_L) << BIT_SHIFT_R_GID_POSITION_EN_L)
#define BITS_R_GID_POSITION_EN_L			(BIT_MASK_R_GID_POSITION_EN_L << BIT_SHIFT_R_GID_POSITION_EN_L)
#define BIT_CLEAR_R_GID_POSITION_EN_L(x)		((x) & (~BITS_R_GID_POSITION_EN_L))
#define BIT_GET_R_GID_POSITION_EN_L(x)			(((x) >> BIT_SHIFT_R_GID_POSITION_EN_L) & BIT_MASK_R_GID_POSITION_EN_L)
#define BIT_SET_R_GID_POSITION_EN_L(x, v)		(BIT_CLEAR_R_GID_POSITION_EN_L(x) | BIT_R_GID_POSITION_EN_L(v))

/* 2 REG_GID_POS0				(Offset 0x1730) */

#define BIT_SHIFT_R_GID_POSITION0			0
#define BIT_MASK_R_GID_POSITION0			0xffffffffL
#define BIT_R_GID_POSITION0(x)				(((x) & BIT_MASK_R_GID_POSITION0) << BIT_SHIFT_R_GID_POSITION0)
#define BITS_R_GID_POSITION0				(BIT_MASK_R_GID_POSITION0 << BIT_SHIFT_R_GID_POSITION0)
#define BIT_CLEAR_R_GID_POSITION0(x)			((x) & (~BITS_R_GID_POSITION0))
#define BIT_GET_R_GID_POSITION0(x)			(((x) >> BIT_SHIFT_R_GID_POSITION0) & BIT_MASK_R_GID_POSITION0)
#define BIT_SET_R_GID_POSITION0(x, v)			(BIT_CLEAR_R_GID_POSITION0(x) | BIT_R_GID_POSITION0(v))

/* 2 REG_GID_POS1				(Offset 0x1734) */

#define BIT_SHIFT_R_GID_POSITION1			0
#define BIT_MASK_R_GID_POSITION1			0xffffffffL
#define BIT_R_GID_POSITION1(x)				(((x) & BIT_MASK_R_GID_POSITION1) << BIT_SHIFT_R_GID_POSITION1)
#define BITS_R_GID_POSITION1				(BIT_MASK_R_GID_POSITION1 << BIT_SHIFT_R_GID_POSITION1)
#define BIT_CLEAR_R_GID_POSITION1(x)			((x) & (~BITS_R_GID_POSITION1))
#define BIT_GET_R_GID_POSITION1(x)			(((x) >> BIT_SHIFT_R_GID_POSITION1) & BIT_MASK_R_GID_POSITION1)
#define BIT_SET_R_GID_POSITION1(x, v)			(BIT_CLEAR_R_GID_POSITION1(x) | BIT_R_GID_POSITION1(v))

/* 2 REG_GID_POS2				(Offset 0x1738) */

#define BIT_SHIFT_R_GID_POSITION2			0
#define BIT_MASK_R_GID_POSITION2			0xffffffffL
#define BIT_R_GID_POSITION2(x)				(((x) & BIT_MASK_R_GID_POSITION2) << BIT_SHIFT_R_GID_POSITION2)
#define BITS_R_GID_POSITION2				(BIT_MASK_R_GID_POSITION2 << BIT_SHIFT_R_GID_POSITION2)
#define BIT_CLEAR_R_GID_POSITION2(x)			((x) & (~BITS_R_GID_POSITION2))
#define BIT_GET_R_GID_POSITION2(x)			(((x) >> BIT_SHIFT_R_GID_POSITION2) & BIT_MASK_R_GID_POSITION2)
#define BIT_SET_R_GID_POSITION2(x, v)			(BIT_CLEAR_R_GID_POSITION2(x) | BIT_R_GID_POSITION2(v))

/* 2 REG_GID_POS3				(Offset 0x173C) */

#define BIT_SHIFT_R_GID_POSITION3			0
#define BIT_MASK_R_GID_POSITION3			0xffffffffL
#define BIT_R_GID_POSITION3(x)				(((x) & BIT_MASK_R_GID_POSITION3) << BIT_SHIFT_R_GID_POSITION3)
#define BITS_R_GID_POSITION3				(BIT_MASK_R_GID_POSITION3 << BIT_SHIFT_R_GID_POSITION3)
#define BIT_CLEAR_R_GID_POSITION3(x)			((x) & (~BITS_R_GID_POSITION3))
#define BIT_GET_R_GID_POSITION3(x)			(((x) >> BIT_SHIFT_R_GID_POSITION3) & BIT_MASK_R_GID_POSITION3)
#define BIT_SET_R_GID_POSITION3(x, v)			(BIT_CLEAR_R_GID_POSITION3(x) | BIT_R_GID_POSITION3(v))

/* 2 REG_BSSCOLOR_BITMAP_L			(Offset 0x1740) */

#define BIT_SHIFT_R_BSSCOLOR_BITMAP_L			0
#define BIT_MASK_R_BSSCOLOR_BITMAP_L			0xffffffffL
#define BIT_R_BSSCOLOR_BITMAP_L(x)			(((x) & BIT_MASK_R_BSSCOLOR_BITMAP_L) << BIT_SHIFT_R_BSSCOLOR_BITMAP_L)
#define BITS_R_BSSCOLOR_BITMAP_L			(BIT_MASK_R_BSSCOLOR_BITMAP_L << BIT_SHIFT_R_BSSCOLOR_BITMAP_L)
#define BIT_CLEAR_R_BSSCOLOR_BITMAP_L(x)		((x) & (~BITS_R_BSSCOLOR_BITMAP_L))
#define BIT_GET_R_BSSCOLOR_BITMAP_L(x)			(((x) >> BIT_SHIFT_R_BSSCOLOR_BITMAP_L) & BIT_MASK_R_BSSCOLOR_BITMAP_L)
#define BIT_SET_R_BSSCOLOR_BITMAP_L(x, v)		(BIT_CLEAR_R_BSSCOLOR_BITMAP_L(x) | BIT_R_BSSCOLOR_BITMAP_L(v))

/* 2 REG_BSSCOLOR_BITMAP_H			(Offset 0x1744) */

#define BIT_SHIFT_R_BSSCOLOR_BITMAP_H			0
#define BIT_MASK_R_BSSCOLOR_BITMAP_H			0xffffffffL
#define BIT_R_BSSCOLOR_BITMAP_H(x)			(((x) & BIT_MASK_R_BSSCOLOR_BITMAP_H) << BIT_SHIFT_R_BSSCOLOR_BITMAP_H)
#define BITS_R_BSSCOLOR_BITMAP_H			(BIT_MASK_R_BSSCOLOR_BITMAP_H << BIT_SHIFT_R_BSSCOLOR_BITMAP_H)
#define BIT_CLEAR_R_BSSCOLOR_BITMAP_H(x)		((x) & (~BITS_R_BSSCOLOR_BITMAP_H))
#define BIT_GET_R_BSSCOLOR_BITMAP_H(x)			(((x) >> BIT_SHIFT_R_BSSCOLOR_BITMAP_H) & BIT_MASK_R_BSSCOLOR_BITMAP_H)
#define BIT_SET_R_BSSCOLOR_BITMAP_H(x, v)		(BIT_CLEAR_R_BSSCOLOR_BITMAP_H(x) | BIT_R_BSSCOLOR_BITMAP_H(v))

/* 2 REG_PBSSID_BITMAP_L			(Offset 0x1748) */

#define BIT_SHIFT_R_PARTIAL_BSSID_BITMAP_L		0
#define BIT_MASK_R_PARTIAL_BSSID_BITMAP_L		0xffffffffL
#define BIT_R_PARTIAL_BSSID_BITMAP_L(x)		(((x) & BIT_MASK_R_PARTIAL_BSSID_BITMAP_L) << BIT_SHIFT_R_PARTIAL_BSSID_BITMAP_L)
#define BITS_R_PARTIAL_BSSID_BITMAP_L			(BIT_MASK_R_PARTIAL_BSSID_BITMAP_L << BIT_SHIFT_R_PARTIAL_BSSID_BITMAP_L)
#define BIT_CLEAR_R_PARTIAL_BSSID_BITMAP_L(x)		((x) & (~BITS_R_PARTIAL_BSSID_BITMAP_L))
#define BIT_GET_R_PARTIAL_BSSID_BITMAP_L(x)		(((x) >> BIT_SHIFT_R_PARTIAL_BSSID_BITMAP_L) & BIT_MASK_R_PARTIAL_BSSID_BITMAP_L)
#define BIT_SET_R_PARTIAL_BSSID_BITMAP_L(x, v)	(BIT_CLEAR_R_PARTIAL_BSSID_BITMAP_L(x) | BIT_R_PARTIAL_BSSID_BITMAP_L(v))

/* 2 REG_PBSSID_BITMAP_H			(Offset 0x174C) */

#define BIT_SHIFT_R_PARTIAL_BSSID_BITMAP_H		0
#define BIT_MASK_R_PARTIAL_BSSID_BITMAP_H		0xffffffffL
#define BIT_R_PARTIAL_BSSID_BITMAP_H(x)		(((x) & BIT_MASK_R_PARTIAL_BSSID_BITMAP_H) << BIT_SHIFT_R_PARTIAL_BSSID_BITMAP_H)
#define BITS_R_PARTIAL_BSSID_BITMAP_H			(BIT_MASK_R_PARTIAL_BSSID_BITMAP_H << BIT_SHIFT_R_PARTIAL_BSSID_BITMAP_H)
#define BIT_CLEAR_R_PARTIAL_BSSID_BITMAP_H(x)		((x) & (~BITS_R_PARTIAL_BSSID_BITMAP_H))
#define BIT_GET_R_PARTIAL_BSSID_BITMAP_H(x)		(((x) >> BIT_SHIFT_R_PARTIAL_BSSID_BITMAP_H) & BIT_MASK_R_PARTIAL_BSSID_BITMAP_H)
#define BIT_SET_R_PARTIAL_BSSID_BITMAP_H(x, v)	(BIT_CLEAR_R_PARTIAL_BSSID_BITMAP_H(x) | BIT_R_PARTIAL_BSSID_BITMAP_H(v))

/* 2 REG_SR_CFG0				(Offset 0x1750) */

#define BIT_R_SPRUSE_RSVD_EN				BIT(3)
#define BIT_R_CTL_SRG_CHECK_EN				BIT(2)
#define BIT_R_SRG_CHECK_EN				BIT(1)
#define BIT_R_SR_EN					BIT(0)

/* 2 REG_SR_CFG1				(Offset 0x1754) */

#define BIT_SHIFT_R_NONSRG_OBSS_PD_MAX			24
#define BIT_MASK_R_NONSRG_OBSS_PD_MAX			0xff
#define BIT_R_NONSRG_OBSS_PD_MAX(x)			(((x) & BIT_MASK_R_NONSRG_OBSS_PD_MAX) << BIT_SHIFT_R_NONSRG_OBSS_PD_MAX)
#define BITS_R_NONSRG_OBSS_PD_MAX			(BIT_MASK_R_NONSRG_OBSS_PD_MAX << BIT_SHIFT_R_NONSRG_OBSS_PD_MAX)
#define BIT_CLEAR_R_NONSRG_OBSS_PD_MAX(x)		((x) & (~BITS_R_NONSRG_OBSS_PD_MAX))
#define BIT_GET_R_NONSRG_OBSS_PD_MAX(x)		(((x) >> BIT_SHIFT_R_NONSRG_OBSS_PD_MAX) & BIT_MASK_R_NONSRG_OBSS_PD_MAX)
#define BIT_SET_R_NONSRG_OBSS_PD_MAX(x, v)		(BIT_CLEAR_R_NONSRG_OBSS_PD_MAX(x) | BIT_R_NONSRG_OBSS_PD_MAX(v))

#define BIT_SHIFT_R_NONSRG_OBSS_PD_MIN			16
#define BIT_MASK_R_NONSRG_OBSS_PD_MIN			0xff
#define BIT_R_NONSRG_OBSS_PD_MIN(x)			(((x) & BIT_MASK_R_NONSRG_OBSS_PD_MIN) << BIT_SHIFT_R_NONSRG_OBSS_PD_MIN)
#define BITS_R_NONSRG_OBSS_PD_MIN			(BIT_MASK_R_NONSRG_OBSS_PD_MIN << BIT_SHIFT_R_NONSRG_OBSS_PD_MIN)
#define BIT_CLEAR_R_NONSRG_OBSS_PD_MIN(x)		((x) & (~BITS_R_NONSRG_OBSS_PD_MIN))
#define BIT_GET_R_NONSRG_OBSS_PD_MIN(x)		(((x) >> BIT_SHIFT_R_NONSRG_OBSS_PD_MIN) & BIT_MASK_R_NONSRG_OBSS_PD_MIN)
#define BIT_SET_R_NONSRG_OBSS_PD_MIN(x, v)		(BIT_CLEAR_R_NONSRG_OBSS_PD_MIN(x) | BIT_R_NONSRG_OBSS_PD_MIN(v))

#define BIT_SHIFT_R_SRG_OBSS_PD_MAX			8
#define BIT_MASK_R_SRG_OBSS_PD_MAX			0xff
#define BIT_R_SRG_OBSS_PD_MAX(x)			(((x) & BIT_MASK_R_SRG_OBSS_PD_MAX) << BIT_SHIFT_R_SRG_OBSS_PD_MAX)
#define BITS_R_SRG_OBSS_PD_MAX				(BIT_MASK_R_SRG_OBSS_PD_MAX << BIT_SHIFT_R_SRG_OBSS_PD_MAX)
#define BIT_CLEAR_R_SRG_OBSS_PD_MAX(x)			((x) & (~BITS_R_SRG_OBSS_PD_MAX))
#define BIT_GET_R_SRG_OBSS_PD_MAX(x)			(((x) >> BIT_SHIFT_R_SRG_OBSS_PD_MAX) & BIT_MASK_R_SRG_OBSS_PD_MAX)
#define BIT_SET_R_SRG_OBSS_PD_MAX(x, v)		(BIT_CLEAR_R_SRG_OBSS_PD_MAX(x) | BIT_R_SRG_OBSS_PD_MAX(v))

#define BIT_SHIFT_R_SRG_OBSS_PD_MIN			0
#define BIT_MASK_R_SRG_OBSS_PD_MIN			0xff
#define BIT_R_SRG_OBSS_PD_MIN(x)			(((x) & BIT_MASK_R_SRG_OBSS_PD_MIN) << BIT_SHIFT_R_SRG_OBSS_PD_MIN)
#define BITS_R_SRG_OBSS_PD_MIN				(BIT_MASK_R_SRG_OBSS_PD_MIN << BIT_SHIFT_R_SRG_OBSS_PD_MIN)
#define BIT_CLEAR_R_SRG_OBSS_PD_MIN(x)			((x) & (~BITS_R_SRG_OBSS_PD_MIN))
#define BIT_GET_R_SRG_OBSS_PD_MIN(x)			(((x) >> BIT_SHIFT_R_SRG_OBSS_PD_MIN) & BIT_MASK_R_SRG_OBSS_PD_MIN)
#define BIT_SET_R_SRG_OBSS_PD_MIN(x, v)		(BIT_CLEAR_R_SRG_OBSS_PD_MIN(x) | BIT_R_SRG_OBSS_PD_MIN(v))

/* 2 REG_MACTX_SR				(Offset 0x1758) */

#define BIT_SHIFT_R_WMAC_WAIT_PHY_REF			18
#define BIT_MASK_R_WMAC_WAIT_PHY_REF			0x3f
#define BIT_R_WMAC_WAIT_PHY_REF(x)			(((x) & BIT_MASK_R_WMAC_WAIT_PHY_REF) << BIT_SHIFT_R_WMAC_WAIT_PHY_REF)
#define BITS_R_WMAC_WAIT_PHY_REF			(BIT_MASK_R_WMAC_WAIT_PHY_REF << BIT_SHIFT_R_WMAC_WAIT_PHY_REF)
#define BIT_CLEAR_R_WMAC_WAIT_PHY_REF(x)		((x) & (~BITS_R_WMAC_WAIT_PHY_REF))
#define BIT_GET_R_WMAC_WAIT_PHY_REF(x)			(((x) >> BIT_SHIFT_R_WMAC_WAIT_PHY_REF) & BIT_MASK_R_WMAC_WAIT_PHY_REF)
#define BIT_SET_R_WMAC_WAIT_PHY_REF(x, v)		(BIT_CLEAR_R_WMAC_WAIT_PHY_REF(x) | BIT_R_WMAC_WAIT_PHY_REF(v))

#define BIT_R_WMAC_SR_FIELD_EN				BIT(17)
#define BIT_R_WMAC_SR_VAL15_ALLOW			BIT(16)

#define BIT_SHIFT_R_WMAC_PLCP_SR_FIELD			0
#define BIT_MASK_R_WMAC_PLCP_SR_FIELD			0xffff
#define BIT_R_WMAC_PLCP_SR_FIELD(x)			(((x) & BIT_MASK_R_WMAC_PLCP_SR_FIELD) << BIT_SHIFT_R_WMAC_PLCP_SR_FIELD)
#define BITS_R_WMAC_PLCP_SR_FIELD			(BIT_MASK_R_WMAC_PLCP_SR_FIELD << BIT_SHIFT_R_WMAC_PLCP_SR_FIELD)
#define BIT_CLEAR_R_WMAC_PLCP_SR_FIELD(x)		((x) & (~BITS_R_WMAC_PLCP_SR_FIELD))
#define BIT_GET_R_WMAC_PLCP_SR_FIELD(x)		(((x) >> BIT_SHIFT_R_WMAC_PLCP_SR_FIELD) & BIT_MASK_R_WMAC_PLCP_SR_FIELD)
#define BIT_SET_R_WMAC_PLCP_SR_FIELD(x, v)		(BIT_CLEAR_R_WMAC_PLCP_SR_FIELD(x) | BIT_R_WMAC_PLCP_SR_FIELD(v))

/* 2 REG_MACTX_MISC				(Offset 0x175C) */

#define BIT_R_TXTIME_CAL_DISGCLK			BIT(30)
#define BIT_R_WMAC_CCK_LOCKED_CLK			BIT(29)

#define BIT_SHIFT_R_WMAC_RST_BB_CNT			26
#define BIT_MASK_R_WMAC_RST_BB_CNT			0x7
#define BIT_R_WMAC_RST_BB_CNT(x)			(((x) & BIT_MASK_R_WMAC_RST_BB_CNT) << BIT_SHIFT_R_WMAC_RST_BB_CNT)
#define BITS_R_WMAC_RST_BB_CNT				(BIT_MASK_R_WMAC_RST_BB_CNT << BIT_SHIFT_R_WMAC_RST_BB_CNT)
#define BIT_CLEAR_R_WMAC_RST_BB_CNT(x)			((x) & (~BITS_R_WMAC_RST_BB_CNT))
#define BIT_GET_R_WMAC_RST_BB_CNT(x)			(((x) >> BIT_SHIFT_R_WMAC_RST_BB_CNT) & BIT_MASK_R_WMAC_RST_BB_CNT)
#define BIT_SET_R_WMAC_RST_BB_CNT(x, v)		(BIT_CLEAR_R_WMAC_RST_BB_CNT(x) | BIT_R_WMAC_RST_BB_CNT(v))

#define BIT_SHIFT_R_TXDFIFO_INTERVAL_THRE		12
#define BIT_MASK_R_TXDFIFO_INTERVAL_THRE		0x3fff
#define BIT_R_TXDFIFO_INTERVAL_THRE(x)			(((x) & BIT_MASK_R_TXDFIFO_INTERVAL_THRE) << BIT_SHIFT_R_TXDFIFO_INTERVAL_THRE)
#define BITS_R_TXDFIFO_INTERVAL_THRE			(BIT_MASK_R_TXDFIFO_INTERVAL_THRE << BIT_SHIFT_R_TXDFIFO_INTERVAL_THRE)
#define BIT_CLEAR_R_TXDFIFO_INTERVAL_THRE(x)		((x) & (~BITS_R_TXDFIFO_INTERVAL_THRE))
#define BIT_GET_R_TXDFIFO_INTERVAL_THRE(x)		(((x) >> BIT_SHIFT_R_TXDFIFO_INTERVAL_THRE) & BIT_MASK_R_TXDFIFO_INTERVAL_THRE)
#define BIT_SET_R_TXDFIFO_INTERVAL_THRE(x, v)		(BIT_CLEAR_R_TXDFIFO_INTERVAL_THRE(x) | BIT_R_TXDFIFO_INTERVAL_THRE(v))

#define BIT_SW_TXDFIFO_RDY				BIT(11)

#define BIT_SHIFT_SW_TXDFIFO_ADDR			4
#define BIT_MASK_SW_TXDFIFO_ADDR			0x7f
#define BIT_SW_TXDFIFO_ADDR(x)				(((x) & BIT_MASK_SW_TXDFIFO_ADDR) << BIT_SHIFT_SW_TXDFIFO_ADDR)
#define BITS_SW_TXDFIFO_ADDR				(BIT_MASK_SW_TXDFIFO_ADDR << BIT_SHIFT_SW_TXDFIFO_ADDR)
#define BIT_CLEAR_SW_TXDFIFO_ADDR(x)			((x) & (~BITS_SW_TXDFIFO_ADDR))
#define BIT_GET_SW_TXDFIFO_ADDR(x)			(((x) >> BIT_SHIFT_SW_TXDFIFO_ADDR) & BIT_MASK_SW_TXDFIFO_ADDR)
#define BIT_SET_SW_TXDFIFO_ADDR(x, v)			(BIT_CLEAR_SW_TXDFIFO_ADDR(x) | BIT_SW_TXDFIFO_ADDR(v))

#define BIT_R_WMAC_FORCE_READ_TXDFIFO			BIT(3)
#define BIT_R_WMAC_SW_RD				BIT(2)
#define BIT_R_WMAC_MPDU_PADEN				BIT(1)
#define BIT_R_EOFPAD_EN				BIT(0)

/* 2 REG_MACTX_MHDR0				(Offset 0x1760) */

#define BIT_R_QNULL_ACK_POL_VAL			BIT(30)
#define BIT_R_WMAC_EN_HW_SSN				BIT(29)
#define BIT_R_TB_QOSNULL_PWRMGT_VAL			BIT(28)
#define BIT_R_WMAC_MHDR_UPH_EN				BIT(27)
#define BIT_R_TCR_BA_RSVD_VAL				BIT(26)

#define BIT_SHIFT_R_QOS_NULL_TID_VAL			22
#define BIT_MASK_R_QOS_NULL_TID_VAL			0xf
#define BIT_R_QOS_NULL_TID_VAL(x)			(((x) & BIT_MASK_R_QOS_NULL_TID_VAL) << BIT_SHIFT_R_QOS_NULL_TID_VAL)
#define BITS_R_QOS_NULL_TID_VAL			(BIT_MASK_R_QOS_NULL_TID_VAL << BIT_SHIFT_R_QOS_NULL_TID_VAL)
#define BIT_CLEAR_R_QOS_NULL_TID_VAL(x)		((x) & (~BITS_R_QOS_NULL_TID_VAL))
#define BIT_GET_R_QOS_NULL_TID_VAL(x)			(((x) >> BIT_SHIFT_R_QOS_NULL_TID_VAL) & BIT_MASK_R_QOS_NULL_TID_VAL)
#define BIT_SET_R_QOS_NULL_TID_VAL(x, v)		(BIT_CLEAR_R_QOS_NULL_TID_VAL(x) | BIT_R_QOS_NULL_TID_VAL(v))

#define BIT_SHIFT_R_WMAC_LEGACY_USTIMER		17
#define BIT_MASK_R_WMAC_LEGACY_USTIMER			0x1f
#define BIT_R_WMAC_LEGACY_USTIMER(x)			(((x) & BIT_MASK_R_WMAC_LEGACY_USTIMER) << BIT_SHIFT_R_WMAC_LEGACY_USTIMER)
#define BITS_R_WMAC_LEGACY_USTIMER			(BIT_MASK_R_WMAC_LEGACY_USTIMER << BIT_SHIFT_R_WMAC_LEGACY_USTIMER)
#define BIT_CLEAR_R_WMAC_LEGACY_USTIMER(x)		((x) & (~BITS_R_WMAC_LEGACY_USTIMER))
#define BIT_GET_R_WMAC_LEGACY_USTIMER(x)		(((x) >> BIT_SHIFT_R_WMAC_LEGACY_USTIMER) & BIT_MASK_R_WMAC_LEGACY_USTIMER)
#define BIT_SET_R_WMAC_LEGACY_USTIMER(x, v)		(BIT_CLEAR_R_WMAC_LEGACY_USTIMER(x) | BIT_R_WMAC_LEGACY_USTIMER(v))

#define BIT_SHIFT_R_WMAC_NON_LEGACY_USTIMER		12
#define BIT_MASK_R_WMAC_NON_LEGACY_USTIMER		0x1f
#define BIT_R_WMAC_NON_LEGACY_USTIMER(x)		(((x) & BIT_MASK_R_WMAC_NON_LEGACY_USTIMER) << BIT_SHIFT_R_WMAC_NON_LEGACY_USTIMER)
#define BITS_R_WMAC_NON_LEGACY_USTIMER			(BIT_MASK_R_WMAC_NON_LEGACY_USTIMER << BIT_SHIFT_R_WMAC_NON_LEGACY_USTIMER)
#define BIT_CLEAR_R_WMAC_NON_LEGACY_USTIMER(x)	((x) & (~BITS_R_WMAC_NON_LEGACY_USTIMER))
#define BIT_GET_R_WMAC_NON_LEGACY_USTIMER(x)		(((x) >> BIT_SHIFT_R_WMAC_NON_LEGACY_USTIMER) & BIT_MASK_R_WMAC_NON_LEGACY_USTIMER)
#define BIT_SET_R_WMAC_NON_LEGACY_USTIMER(x, v)	(BIT_CLEAR_R_WMAC_NON_LEGACY_USTIMER(x) | BIT_R_WMAC_NON_LEGACY_USTIMER(v))

#define BIT_SHIFT_R_BQR_PRIMCH				9
#define BIT_MASK_R_BQR_PRIMCH				0x7
#define BIT_R_BQR_PRIMCH(x)				(((x) & BIT_MASK_R_BQR_PRIMCH) << BIT_SHIFT_R_BQR_PRIMCH)
#define BITS_R_BQR_PRIMCH				(BIT_MASK_R_BQR_PRIMCH << BIT_SHIFT_R_BQR_PRIMCH)
#define BIT_CLEAR_R_BQR_PRIMCH(x)			((x) & (~BITS_R_BQR_PRIMCH))
#define BIT_GET_R_BQR_PRIMCH(x)			(((x) >> BIT_SHIFT_R_BQR_PRIMCH) & BIT_MASK_R_BQR_PRIMCH)
#define BIT_SET_R_BQR_PRIMCH(x, v)			(BIT_CLEAR_R_BQR_PRIMCH(x) | BIT_R_BQR_PRIMCH(v))

#define BIT_SHIFT_R_BQR_TID_VAL			5
#define BIT_MASK_R_BQR_TID_VAL				0xf
#define BIT_R_BQR_TID_VAL(x)				(((x) & BIT_MASK_R_BQR_TID_VAL) << BIT_SHIFT_R_BQR_TID_VAL)
#define BITS_R_BQR_TID_VAL				(BIT_MASK_R_BQR_TID_VAL << BIT_SHIFT_R_BQR_TID_VAL)
#define BIT_CLEAR_R_BQR_TID_VAL(x)			((x) & (~BITS_R_BQR_TID_VAL))
#define BIT_GET_R_BQR_TID_VAL(x)			(((x) >> BIT_SHIFT_R_BQR_TID_VAL) & BIT_MASK_R_BQR_TID_VAL)
#define BIT_SET_R_BQR_TID_VAL(x, v)			(BIT_CLEAR_R_BQR_TID_VAL(x) | BIT_R_BQR_TID_VAL(v))

#define BIT_R_BSR_QOS_SEL				BIT(4)
#define BIT_R_BSR_VO_TID_SEL				BIT(3)
#define BIT_R_BSR_VI_TID_SEL				BIT(2)
#define BIT_R_BSR_BE_TID_SEL				BIT(1)
#define BIT_R_BSR_BK_TID_SEL				BIT(0)

/* 2 REG_MACTX_MHDR1				(Offset 0x1764) */

#define BIT_SHIFT_R_WMAC_NHDR_HTC			0
#define BIT_MASK_R_WMAC_NHDR_HTC			0xffffffffL
#define BIT_R_WMAC_NHDR_HTC(x)				(((x) & BIT_MASK_R_WMAC_NHDR_HTC) << BIT_SHIFT_R_WMAC_NHDR_HTC)
#define BITS_R_WMAC_NHDR_HTC				(BIT_MASK_R_WMAC_NHDR_HTC << BIT_SHIFT_R_WMAC_NHDR_HTC)
#define BIT_CLEAR_R_WMAC_NHDR_HTC(x)			((x) & (~BITS_R_WMAC_NHDR_HTC))
#define BIT_GET_R_WMAC_NHDR_HTC(x)			(((x) >> BIT_SHIFT_R_WMAC_NHDR_HTC) & BIT_MASK_R_WMAC_NHDR_HTC)
#define BIT_SET_R_WMAC_NHDR_HTC(x, v)			(BIT_CLEAR_R_WMAC_NHDR_HTC(x) | BIT_R_WMAC_NHDR_HTC(v))

/* 2 REG_MACTX_TXD_FIFO			(Offset 0x1768) */

#define BIT_SHIFT_RXTRIG_BSS_COLOR			26
#define BIT_MASK_RXTRIG_BSS_COLOR			0x3f
#define BIT_RXTRIG_BSS_COLOR(x)			(((x) & BIT_MASK_RXTRIG_BSS_COLOR) << BIT_SHIFT_RXTRIG_BSS_COLOR)
#define BITS_RXTRIG_BSS_COLOR				(BIT_MASK_RXTRIG_BSS_COLOR << BIT_SHIFT_RXTRIG_BSS_COLOR)
#define BIT_CLEAR_RXTRIG_BSS_COLOR(x)			((x) & (~BITS_RXTRIG_BSS_COLOR))
#define BIT_GET_RXTRIG_BSS_COLOR(x)			(((x) >> BIT_SHIFT_RXTRIG_BSS_COLOR) & BIT_MASK_RXTRIG_BSS_COLOR)
#define BIT_SET_RXTRIG_BSS_COLOR(x, v)			(BIT_CLEAR_RXTRIG_BSS_COLOR(x) | BIT_RXTRIG_BSS_COLOR(v))

#define BIT_SHIFT_RXTRIG_MACID				19
#define BIT_MASK_RXTRIG_MACID				0x7f
#define BIT_RXTRIG_MACID(x)				(((x) & BIT_MASK_RXTRIG_MACID) << BIT_SHIFT_RXTRIG_MACID)
#define BITS_RXTRIG_MACID				(BIT_MASK_RXTRIG_MACID << BIT_SHIFT_RXTRIG_MACID)
#define BIT_CLEAR_RXTRIG_MACID(x)			((x) & (~BITS_RXTRIG_MACID))
#define BIT_GET_RXTRIG_MACID(x)			(((x) >> BIT_SHIFT_RXTRIG_MACID) & BIT_MASK_RXTRIG_MACID)
#define BIT_SET_RXTRIG_MACID(x, v)			(BIT_CLEAR_RXTRIG_MACID(x) | BIT_RXTRIG_MACID(v))

#define BIT_RXTRIG_FCSCHK_EN				BIT(18)
#define BIT_RXTRIG_PORT_SEL				BIT(17)
#define BIT_RXTRIG_EN					BIT(16)
#define BIT_RXTRIG_RU26_DIS				BIT(7)
#define BIT_CSI_LEN_ERR_FLAG				BIT(6)
#define BIT_CLR_CSI_ERR_FLAG				BIT(5)
#define BIT_WMAC_RXTB_IGNOREA2				BIT(4)

#define BIT_SHIFT_UL_MU_DIS				2
#define BIT_MASK_UL_MU_DIS				0x3
#define BIT_UL_MU_DIS(x)				(((x) & BIT_MASK_UL_MU_DIS) << BIT_SHIFT_UL_MU_DIS)
#define BITS_UL_MU_DIS					(BIT_MASK_UL_MU_DIS << BIT_SHIFT_UL_MU_DIS)
#define BIT_CLEAR_UL_MU_DIS(x)				((x) & (~BITS_UL_MU_DIS))
#define BIT_GET_UL_MU_DIS(x)				(((x) >> BIT_SHIFT_UL_MU_DIS) & BIT_MASK_UL_MU_DIS)
#define BIT_SET_UL_MU_DIS(x, v)			(BIT_CLEAR_UL_MU_DIS(x) | BIT_UL_MU_DIS(v))

#define BIT_SHIFT_SW_TXDFIFO_DOUT			0
#define BIT_MASK_SW_TXDFIFO_DOUT			0xffffffffL
#define BIT_SW_TXDFIFO_DOUT(x)				(((x) & BIT_MASK_SW_TXDFIFO_DOUT) << BIT_SHIFT_SW_TXDFIFO_DOUT)
#define BITS_SW_TXDFIFO_DOUT				(BIT_MASK_SW_TXDFIFO_DOUT << BIT_SHIFT_SW_TXDFIFO_DOUT)
#define BIT_CLEAR_SW_TXDFIFO_DOUT(x)			((x) & (~BITS_SW_TXDFIFO_DOUT))
#define BIT_GET_SW_TXDFIFO_DOUT(x)			(((x) >> BIT_SHIFT_SW_TXDFIFO_DOUT) & BIT_MASK_SW_TXDFIFO_DOUT)
#define BIT_SET_SW_TXDFIFO_DOUT(x, v)			(BIT_CLEAR_SW_TXDFIFO_DOUT(x) | BIT_SW_TXDFIFO_DOUT(v))

#define BIT_SHIFT_RXTRIG_COMMON_0			0
#define BIT_MASK_RXTRIG_COMMON_0			0xffffffffL
#define BIT_RXTRIG_COMMON_0(x)				(((x) & BIT_MASK_RXTRIG_COMMON_0) << BIT_SHIFT_RXTRIG_COMMON_0)
#define BITS_RXTRIG_COMMON_0				(BIT_MASK_RXTRIG_COMMON_0 << BIT_SHIFT_RXTRIG_COMMON_0)
#define BIT_CLEAR_RXTRIG_COMMON_0(x)			((x) & (~BITS_RXTRIG_COMMON_0))
#define BIT_GET_RXTRIG_COMMON_0(x)			(((x) >> BIT_SHIFT_RXTRIG_COMMON_0) & BIT_MASK_RXTRIG_COMMON_0)
#define BIT_SET_RXTRIG_COMMON_0(x, v)			(BIT_CLEAR_RXTRIG_COMMON_0(x) | BIT_RXTRIG_COMMON_0(v))

#define BIT_SHIFT_RXTRIG_COMMON_1			0
#define BIT_MASK_RXTRIG_COMMON_1			0xffffffffL
#define BIT_RXTRIG_COMMON_1(x)				(((x) & BIT_MASK_RXTRIG_COMMON_1) << BIT_SHIFT_RXTRIG_COMMON_1)
#define BITS_RXTRIG_COMMON_1				(BIT_MASK_RXTRIG_COMMON_1 << BIT_SHIFT_RXTRIG_COMMON_1)
#define BIT_CLEAR_RXTRIG_COMMON_1(x)			((x) & (~BITS_RXTRIG_COMMON_1))
#define BIT_GET_RXTRIG_COMMON_1(x)			(((x) >> BIT_SHIFT_RXTRIG_COMMON_1) & BIT_MASK_RXTRIG_COMMON_1)
#define BIT_SET_RXTRIG_COMMON_1(x, v)			(BIT_CLEAR_RXTRIG_COMMON_1(x) | BIT_RXTRIG_COMMON_1(v))

#define BIT_SHIFT_RXTRIG_USERINFO_0			0
#define BIT_MASK_RXTRIG_USERINFO_0			0xffffffffL
#define BIT_RXTRIG_USERINFO_0(x)			(((x) & BIT_MASK_RXTRIG_USERINFO_0) << BIT_SHIFT_RXTRIG_USERINFO_0)
#define BITS_RXTRIG_USERINFO_0				(BIT_MASK_RXTRIG_USERINFO_0 << BIT_SHIFT_RXTRIG_USERINFO_0)
#define BIT_CLEAR_RXTRIG_USERINFO_0(x)			((x) & (~BITS_RXTRIG_USERINFO_0))
#define BIT_GET_RXTRIG_USERINFO_0(x)			(((x) >> BIT_SHIFT_RXTRIG_USERINFO_0) & BIT_MASK_RXTRIG_USERINFO_0)
#define BIT_SET_RXTRIG_USERINFO_0(x, v)		(BIT_CLEAR_RXTRIG_USERINFO_0(x) | BIT_RXTRIG_USERINFO_0(v))

#define BIT_SHIFT_RXTRIG_USERINFO_1			0
#define BIT_MASK_RXTRIG_USERINFO_1			0xffffffffL
#define BIT_RXTRIG_USERINFO_1(x)			(((x) & BIT_MASK_RXTRIG_USERINFO_1) << BIT_SHIFT_RXTRIG_USERINFO_1)
#define BITS_RXTRIG_USERINFO_1				(BIT_MASK_RXTRIG_USERINFO_1 << BIT_SHIFT_RXTRIG_USERINFO_1)
#define BIT_CLEAR_RXTRIG_USERINFO_1(x)			((x) & (~BITS_RXTRIG_USERINFO_1))
#define BIT_GET_RXTRIG_USERINFO_1(x)			(((x) >> BIT_SHIFT_RXTRIG_USERINFO_1) & BIT_MASK_RXTRIG_USERINFO_1)
#define BIT_SET_RXTRIG_USERINFO_1(x, v)		(BIT_CLEAR_RXTRIG_USERINFO_1(x) | BIT_RXTRIG_USERINFO_1(v))

#define BIT_SHIFT_RXTRIG_USERINFO_2			0
#define BIT_MASK_RXTRIG_USERINFO_2			0xff
#define BIT_RXTRIG_USERINFO_2(x)			(((x) & BIT_MASK_RXTRIG_USERINFO_2) << BIT_SHIFT_RXTRIG_USERINFO_2)
#define BITS_RXTRIG_USERINFO_2				(BIT_MASK_RXTRIG_USERINFO_2 << BIT_SHIFT_RXTRIG_USERINFO_2)
#define BIT_CLEAR_RXTRIG_USERINFO_2(x)			((x) & (~BITS_RXTRIG_USERINFO_2))
#define BIT_GET_RXTRIG_USERINFO_2(x)			(((x) >> BIT_SHIFT_RXTRIG_USERINFO_2) & BIT_MASK_RXTRIG_USERINFO_2)
#define BIT_SET_RXTRIG_USERINFO_2(x, v)		(BIT_CLEAR_RXTRIG_USERINFO_2(x) | BIT_RXTRIG_USERINFO_2(v))

#define BIT_SHIFT_RXTRIG_STATUS			0
#define BIT_MASK_RXTRIG_STATUS				0xff
#define BIT_RXTRIG_STATUS(x)				(((x) & BIT_MASK_RXTRIG_STATUS) << BIT_SHIFT_RXTRIG_STATUS)
#define BITS_RXTRIG_STATUS				(BIT_MASK_RXTRIG_STATUS << BIT_SHIFT_RXTRIG_STATUS)
#define BIT_CLEAR_RXTRIG_STATUS(x)			((x) & (~BITS_RXTRIG_STATUS))
#define BIT_GET_RXTRIG_STATUS(x)			(((x) >> BIT_SHIFT_RXTRIG_STATUS) & BIT_MASK_RXTRIG_STATUS)
#define BIT_SET_RXTRIG_STATUS(x, v)			(BIT_CLEAR_RXTRIG_STATUS(x) | BIT_RXTRIG_STATUS(v))

#define BIT_SHIFT_RXTRIG_DURATION			0
#define BIT_MASK_RXTRIG_DURATION			0xffff
#define BIT_RXTRIG_DURATION(x)				(((x) & BIT_MASK_RXTRIG_DURATION) << BIT_SHIFT_RXTRIG_DURATION)
#define BITS_RXTRIG_DURATION				(BIT_MASK_RXTRIG_DURATION << BIT_SHIFT_RXTRIG_DURATION)
#define BIT_CLEAR_RXTRIG_DURATION(x)			((x) & (~BITS_RXTRIG_DURATION))
#define BIT_GET_RXTRIG_DURATION(x)			(((x) >> BIT_SHIFT_RXTRIG_DURATION) & BIT_MASK_RXTRIG_DURATION)
#define BIT_SET_RXTRIG_DURATION(x, v)			(BIT_CLEAR_RXTRIG_DURATION(x) | BIT_RXTRIG_DURATION(v))

#define BIT_SHIFT_UL_MU_DATA_DIS			0
#define BIT_MASK_UL_MU_DATA_DIS			0x3
#define BIT_UL_MU_DATA_DIS(x)				(((x) & BIT_MASK_UL_MU_DATA_DIS) << BIT_SHIFT_UL_MU_DATA_DIS)
#define BITS_UL_MU_DATA_DIS				(BIT_MASK_UL_MU_DATA_DIS << BIT_SHIFT_UL_MU_DATA_DIS)
#define BIT_CLEAR_UL_MU_DATA_DIS(x)			((x) & (~BITS_UL_MU_DATA_DIS))
#define BIT_GET_UL_MU_DATA_DIS(x)			(((x) >> BIT_SHIFT_UL_MU_DATA_DIS) & BIT_MASK_UL_MU_DATA_DIS)
#define BIT_SET_UL_MU_DATA_DIS(x, v)			(BIT_CLEAR_UL_MU_DATA_DIS(x) | BIT_UL_MU_DATA_DIS(v))

/* 2 REG_SIFS_TIMING_CTRL_CCK		(Offset 0x1798) */

#define BIT_SHIFT_WMAC_100NS_TIME			24
#define BIT_MASK_WMAC_100NS_TIME			0xff
#define BIT_WMAC_100NS_TIME(x)				(((x) & BIT_MASK_WMAC_100NS_TIME) << BIT_SHIFT_WMAC_100NS_TIME)
#define BITS_WMAC_100NS_TIME				(BIT_MASK_WMAC_100NS_TIME << BIT_SHIFT_WMAC_100NS_TIME)
#define BIT_CLEAR_WMAC_100NS_TIME(x)			((x) & (~BITS_WMAC_100NS_TIME))
#define BIT_GET_WMAC_100NS_TIME(x)			(((x) >> BIT_SHIFT_WMAC_100NS_TIME) & BIT_MASK_WMAC_100NS_TIME)
#define BIT_SET_WMAC_100NS_TIME(x, v)			(BIT_CLEAR_WMAC_100NS_TIME(x) | BIT_WMAC_100NS_TIME(v))

#define BIT_SHIFT_R2T_SIFS_CCK				12
#define BIT_MASK_R2T_SIFS_CCK				0xfff
#define BIT_R2T_SIFS_CCK(x)				(((x) & BIT_MASK_R2T_SIFS_CCK) << BIT_SHIFT_R2T_SIFS_CCK)
#define BITS_R2T_SIFS_CCK				(BIT_MASK_R2T_SIFS_CCK << BIT_SHIFT_R2T_SIFS_CCK)
#define BIT_CLEAR_R2T_SIFS_CCK(x)			((x) & (~BITS_R2T_SIFS_CCK))
#define BIT_GET_R2T_SIFS_CCK(x)			(((x) >> BIT_SHIFT_R2T_SIFS_CCK) & BIT_MASK_R2T_SIFS_CCK)
#define BIT_SET_R2T_SIFS_CCK(x, v)			(BIT_CLEAR_R2T_SIFS_CCK(x) | BIT_R2T_SIFS_CCK(v))

#define BIT_SHIFT_T2T_SIFS_CCK				0
#define BIT_MASK_T2T_SIFS_CCK				0xfff
#define BIT_T2T_SIFS_CCK(x)				(((x) & BIT_MASK_T2T_SIFS_CCK) << BIT_SHIFT_T2T_SIFS_CCK)
#define BITS_T2T_SIFS_CCK				(BIT_MASK_T2T_SIFS_CCK << BIT_SHIFT_T2T_SIFS_CCK)
#define BIT_CLEAR_T2T_SIFS_CCK(x)			((x) & (~BITS_T2T_SIFS_CCK))
#define BIT_GET_T2T_SIFS_CCK(x)			(((x) >> BIT_SHIFT_T2T_SIFS_CCK) & BIT_MASK_T2T_SIFS_CCK)
#define BIT_SET_T2T_SIFS_CCK(x, v)			(BIT_CLEAR_T2T_SIFS_CCK(x) | BIT_T2T_SIFS_CCK(v))

/* 2 REG_SIFS_TIMING_CTRL_OFDM		(Offset 0x179C) */

#define BIT_SHIFT_RX_AIR_END_TIME			24
#define BIT_MASK_RX_AIR_END_TIME			0xff
#define BIT_RX_AIR_END_TIME(x)				(((x) & BIT_MASK_RX_AIR_END_TIME) << BIT_SHIFT_RX_AIR_END_TIME)
#define BITS_RX_AIR_END_TIME				(BIT_MASK_RX_AIR_END_TIME << BIT_SHIFT_RX_AIR_END_TIME)
#define BIT_CLEAR_RX_AIR_END_TIME(x)			((x) & (~BITS_RX_AIR_END_TIME))
#define BIT_GET_RX_AIR_END_TIME(x)			(((x) >> BIT_SHIFT_RX_AIR_END_TIME) & BIT_MASK_RX_AIR_END_TIME)
#define BIT_SET_RX_AIR_END_TIME(x, v)			(BIT_CLEAR_RX_AIR_END_TIME(x) | BIT_RX_AIR_END_TIME(v))

#define BIT_SHIFT_R2T_SIFS_OFDM			12
#define BIT_MASK_R2T_SIFS_OFDM				0xfff
#define BIT_R2T_SIFS_OFDM(x)				(((x) & BIT_MASK_R2T_SIFS_OFDM) << BIT_SHIFT_R2T_SIFS_OFDM)
#define BITS_R2T_SIFS_OFDM				(BIT_MASK_R2T_SIFS_OFDM << BIT_SHIFT_R2T_SIFS_OFDM)
#define BIT_CLEAR_R2T_SIFS_OFDM(x)			((x) & (~BITS_R2T_SIFS_OFDM))
#define BIT_GET_R2T_SIFS_OFDM(x)			(((x) >> BIT_SHIFT_R2T_SIFS_OFDM) & BIT_MASK_R2T_SIFS_OFDM)
#define BIT_SET_R2T_SIFS_OFDM(x, v)			(BIT_CLEAR_R2T_SIFS_OFDM(x) | BIT_R2T_SIFS_OFDM(v))

#define BIT_SHIFT_T2T_SIFS_OFDM			0
#define BIT_MASK_T2T_SIFS_OFDM				0xfff
#define BIT_T2T_SIFS_OFDM(x)				(((x) & BIT_MASK_T2T_SIFS_OFDM) << BIT_SHIFT_T2T_SIFS_OFDM)
#define BITS_T2T_SIFS_OFDM				(BIT_MASK_T2T_SIFS_OFDM << BIT_SHIFT_T2T_SIFS_OFDM)
#define BIT_CLEAR_T2T_SIFS_OFDM(x)			((x) & (~BITS_T2T_SIFS_OFDM))
#define BIT_GET_T2T_SIFS_OFDM(x)			(((x) >> BIT_SHIFT_T2T_SIFS_OFDM) & BIT_MASK_T2T_SIFS_OFDM)
#define BIT_SET_T2T_SIFS_OFDM(x, v)			(BIT_CLEAR_T2T_SIFS_OFDM(x) | BIT_T2T_SIFS_OFDM(v))

/* 2 REG_AX_TB_TIMING_CTRL			(Offset 0x17A0) */

#define BIT_RXPPDU_SRG					BIT(27)
#define BIT_SR_UPD_EN					BIT(26)
#define BIT_SR_RESTRICTED				BIT(25)

#define BIT_SHIFT_SR_PD_TX				16
#define BIT_MASK_SR_PD_TX				0x1ff
#define BIT_SR_PD_TX(x)				(((x) & BIT_MASK_SR_PD_TX) << BIT_SHIFT_SR_PD_TX)
#define BITS_SR_PD_TX					(BIT_MASK_SR_PD_TX << BIT_SHIFT_SR_PD_TX)
#define BIT_CLEAR_SR_PD_TX(x)				((x) & (~BITS_SR_PD_TX))
#define BIT_GET_SR_PD_TX(x)				(((x) >> BIT_SHIFT_SR_PD_TX) & BIT_MASK_SR_PD_TX)
#define BIT_SET_SR_PD_TX(x, v)				(BIT_CLEAR_SR_PD_TX(x) | BIT_SR_PD_TX(v))

#define BIT_SHIFT_TB_TIMEOUT_REF			0
#define BIT_MASK_TB_TIMEOUT_REF			0xfff
#define BIT_TB_TIMEOUT_REF(x)				(((x) & BIT_MASK_TB_TIMEOUT_REF) << BIT_SHIFT_TB_TIMEOUT_REF)
#define BITS_TB_TIMEOUT_REF				(BIT_MASK_TB_TIMEOUT_REF << BIT_SHIFT_TB_TIMEOUT_REF)
#define BIT_CLEAR_TB_TIMEOUT_REF(x)			((x) & (~BITS_TB_TIMEOUT_REF))
#define BIT_GET_TB_TIMEOUT_REF(x)			(((x) >> BIT_SHIFT_TB_TIMEOUT_REF) & BIT_MASK_TB_TIMEOUT_REF)
#define BIT_SET_TB_TIMEOUT_REF(x, v)			(BIT_CLEAR_TB_TIMEOUT_REF(x) | BIT_TB_TIMEOUT_REF(v))

#define BIT_SHIFT_SR_TIMER_TX				0
#define BIT_MASK_SR_TIMER_TX				0xffff
#define BIT_SR_TIMER_TX(x)				(((x) & BIT_MASK_SR_TIMER_TX) << BIT_SHIFT_SR_TIMER_TX)
#define BITS_SR_TIMER_TX				(BIT_MASK_SR_TIMER_TX << BIT_SHIFT_SR_TIMER_TX)
#define BIT_CLEAR_SR_TIMER_TX(x)			((x) & (~BITS_SR_TIMER_TX))
#define BIT_GET_SR_TIMER_TX(x)				(((x) >> BIT_SHIFT_SR_TIMER_TX) & BIT_MASK_SR_TIMER_TX)
#define BIT_SET_SR_TIMER_TX(x, v)			(BIT_CLEAR_SR_TIMER_TX(x) | BIT_SR_TIMER_TX(v))

/* 2 REG_SR_CONTROL_DBG1			(Offset 0x17A8) */

#define BIT_SHIFT_SR_USABLE_TIMER_THRES		0
#define BIT_MASK_SR_USABLE_TIMER_THRES			0xff
#define BIT_SR_USABLE_TIMER_THRES(x)			(((x) & BIT_MASK_SR_USABLE_TIMER_THRES) << BIT_SHIFT_SR_USABLE_TIMER_THRES)
#define BITS_SR_USABLE_TIMER_THRES			(BIT_MASK_SR_USABLE_TIMER_THRES << BIT_SHIFT_SR_USABLE_TIMER_THRES)
#define BIT_CLEAR_SR_USABLE_TIMER_THRES(x)		((x) & (~BITS_SR_USABLE_TIMER_THRES))
#define BIT_GET_SR_USABLE_TIMER_THRES(x)		(((x) >> BIT_SHIFT_SR_USABLE_TIMER_THRES) & BIT_MASK_SR_USABLE_TIMER_THRES)
#define BIT_SET_SR_USABLE_TIMER_THRES(x, v)		(BIT_CLEAR_SR_USABLE_TIMER_THRES(x) | BIT_SR_USABLE_TIMER_THRES(v))

/* 2 REG_RX_NAV_CTRL				(Offset 0x17A9) */

#define BIT_WMAC_PLCP_UP_NAV_EN			BIT(4)
#define BIT_WMAC_TF_UP_NAV_EN				BIT(3)
#define BIT_SRCTRL_PLCP_EN				BIT(2)
#define BIT_WMAC_INTRANAV_INTXOP			BIT(1)
#define BIT_WMAC_BASICNAV_INTXOP			BIT(0)

/* 2 REG_NAV_STATUS				(Offset 0x17B0) */

#define BIT_SHIFT_WMAC_INTRA_NAV_UPD			30
#define BIT_MASK_WMAC_INTRA_NAV_UPD			0x3
#define BIT_WMAC_INTRA_NAV_UPD(x)			(((x) & BIT_MASK_WMAC_INTRA_NAV_UPD) << BIT_SHIFT_WMAC_INTRA_NAV_UPD)
#define BITS_WMAC_INTRA_NAV_UPD			(BIT_MASK_WMAC_INTRA_NAV_UPD << BIT_SHIFT_WMAC_INTRA_NAV_UPD)
#define BIT_CLEAR_WMAC_INTRA_NAV_UPD(x)		((x) & (~BITS_WMAC_INTRA_NAV_UPD))
#define BIT_GET_WMAC_INTRA_NAV_UPD(x)			(((x) >> BIT_SHIFT_WMAC_INTRA_NAV_UPD) & BIT_MASK_WMAC_INTRA_NAV_UPD)
#define BIT_SET_WMAC_INTRA_NAV_UPD(x, v)		(BIT_CLEAR_WMAC_INTRA_NAV_UPD(x) | BIT_WMAC_INTRA_NAV_UPD(v))

#define BIT_SHIFT_WMAC_INTRA_NAV_DUR			16
#define BIT_MASK_WMAC_INTRA_NAV_DUR			0x3fff
#define BIT_WMAC_INTRA_NAV_DUR(x)			(((x) & BIT_MASK_WMAC_INTRA_NAV_DUR) << BIT_SHIFT_WMAC_INTRA_NAV_DUR)
#define BITS_WMAC_INTRA_NAV_DUR			(BIT_MASK_WMAC_INTRA_NAV_DUR << BIT_SHIFT_WMAC_INTRA_NAV_DUR)
#define BIT_CLEAR_WMAC_INTRA_NAV_DUR(x)		((x) & (~BITS_WMAC_INTRA_NAV_DUR))
#define BIT_GET_WMAC_INTRA_NAV_DUR(x)			(((x) >> BIT_SHIFT_WMAC_INTRA_NAV_DUR) & BIT_MASK_WMAC_INTRA_NAV_DUR)
#define BIT_SET_WMAC_INTRA_NAV_DUR(x, v)		(BIT_CLEAR_WMAC_INTRA_NAV_DUR(x) | BIT_WMAC_INTRA_NAV_DUR(v))

#define BIT_SHIFT_WMAC_BASIC_NAV_UPD			14
#define BIT_MASK_WMAC_BASIC_NAV_UPD			0x3
#define BIT_WMAC_BASIC_NAV_UPD(x)			(((x) & BIT_MASK_WMAC_BASIC_NAV_UPD) << BIT_SHIFT_WMAC_BASIC_NAV_UPD)
#define BITS_WMAC_BASIC_NAV_UPD			(BIT_MASK_WMAC_BASIC_NAV_UPD << BIT_SHIFT_WMAC_BASIC_NAV_UPD)
#define BIT_CLEAR_WMAC_BASIC_NAV_UPD(x)		((x) & (~BITS_WMAC_BASIC_NAV_UPD))
#define BIT_GET_WMAC_BASIC_NAV_UPD(x)			(((x) >> BIT_SHIFT_WMAC_BASIC_NAV_UPD) & BIT_MASK_WMAC_BASIC_NAV_UPD)
#define BIT_SET_WMAC_BASIC_NAV_UPD(x, v)		(BIT_CLEAR_WMAC_BASIC_NAV_UPD(x) | BIT_WMAC_BASIC_NAV_UPD(v))

#define BIT_SHIFT_WMAC_BASIC_NAV_DUR			0
#define BIT_MASK_WMAC_BASIC_NAV_DUR			0x3fff
#define BIT_WMAC_BASIC_NAV_DUR(x)			(((x) & BIT_MASK_WMAC_BASIC_NAV_DUR) << BIT_SHIFT_WMAC_BASIC_NAV_DUR)
#define BITS_WMAC_BASIC_NAV_DUR			(BIT_MASK_WMAC_BASIC_NAV_DUR << BIT_SHIFT_WMAC_BASIC_NAV_DUR)
#define BIT_CLEAR_WMAC_BASIC_NAV_DUR(x)		((x) & (~BITS_WMAC_BASIC_NAV_DUR))
#define BIT_GET_WMAC_BASIC_NAV_DUR(x)			(((x) >> BIT_SHIFT_WMAC_BASIC_NAV_DUR) & BIT_MASK_WMAC_BASIC_NAV_DUR)
#define BIT_SET_WMAC_BASIC_NAV_DUR(x, v)		(BIT_CLEAR_WMAC_BASIC_NAV_DUR(x) | BIT_WMAC_BASIC_NAV_DUR(v))

/* 2 REG_RESP_CONTROL			(Offset 0x17B4) */

#define BIT_RESP_CHK_TXNAV				BIT(31)
#define BIT_RESP_CHK_INTRA_NAV				BIT(30)
#define BIT_RESP_CHK_BASIC_NAV				BIT(29)
#define BIT_RESP_STBC_EN				BIT(28)
#define BIT_RESP_HTC_EN				BIT(27)
#define BIT_RESP_RATE_DOWNGRADE			BIT(26)
#define BIT_RESP_DCM_EN				BIT(25)
#define BIT_RESP_TBPPDU_CHK_PWR			BIT(23)
#define BIT_RESP_RXTRIG_CHK_INSIFS			BIT(22)
#define BIT_RESP_CHK_EDCCA				BIT(21)
#define BIT_RESP_CHK_BTCCA				BIT(20)
#define BIT_RESP_CHK_SEC_CCA20				BIT(19)
#define BIT_RESP_CHK_SEC_CCA40				BIT(18)
#define BIT_RESP_CHK_SEC_CCA80				BIT(17)
#define BIT_RESP_EARLY_LEG_SEC				BIT(16)

#define BIT_SHIFT_RESP_GI_LTF				13
#define BIT_MASK_RESP_GI_LTF				0x7
#define BIT_RESP_GI_LTF(x)				(((x) & BIT_MASK_RESP_GI_LTF) << BIT_SHIFT_RESP_GI_LTF)
#define BITS_RESP_GI_LTF				(BIT_MASK_RESP_GI_LTF << BIT_SHIFT_RESP_GI_LTF)
#define BIT_CLEAR_RESP_GI_LTF(x)			((x) & (~BITS_RESP_GI_LTF))
#define BIT_GET_RESP_GI_LTF(x)				(((x) >> BIT_SHIFT_RESP_GI_LTF) & BIT_MASK_RESP_GI_LTF)
#define BIT_SET_RESP_GI_LTF(x, v)			(BIT_CLEAR_RESP_GI_LTF(x) | BIT_RESP_GI_LTF(v))

#define BIT_RESP_CHK_ZBCCA				BIT(12)
#define BIT_RESP_CHK_EDCCA_PER20			BIT(11)

#define BIT_SHIFT_RESP_TXRATE1				0
#define BIT_MASK_RESP_TXRATE1				0x3ff
#define BIT_RESP_TXRATE1(x)				(((x) & BIT_MASK_RESP_TXRATE1) << BIT_SHIFT_RESP_TXRATE1)
#define BITS_RESP_TXRATE1				(BIT_MASK_RESP_TXRATE1 << BIT_SHIFT_RESP_TXRATE1)
#define BIT_CLEAR_RESP_TXRATE1(x)			((x) & (~BITS_RESP_TXRATE1))
#define BIT_GET_RESP_TXRATE1(x)			(((x) >> BIT_SHIFT_RESP_TXRATE1) & BIT_MASK_RESP_TXRATE1)
#define BIT_SET_RESP_TXRATE1(x, v)			(BIT_CLEAR_RESP_TXRATE1(x) | BIT_RESP_TXRATE1(v))

/* 2 REG_RESP_RATE_RRSR			(Offset 0x17B8) */

#define BIT_SHIFT_RESP_RRSR_HE				24
#define BIT_MASK_RESP_RRSR_HE				0xff
#define BIT_RESP_RRSR_HE(x)				(((x) & BIT_MASK_RESP_RRSR_HE) << BIT_SHIFT_RESP_RRSR_HE)
#define BITS_RESP_RRSR_HE				(BIT_MASK_RESP_RRSR_HE << BIT_SHIFT_RESP_RRSR_HE)
#define BIT_CLEAR_RESP_RRSR_HE(x)			((x) & (~BITS_RESP_RRSR_HE))
#define BIT_GET_RESP_RRSR_HE(x)			(((x) >> BIT_SHIFT_RESP_RRSR_HE) & BIT_MASK_RESP_RRSR_HE)
#define BIT_SET_RESP_RRSR_HE(x, v)			(BIT_CLEAR_RESP_RRSR_HE(x) | BIT_RESP_RRSR_HE(v))

#define BIT_SHIFT_RESP_RRSR_VHT			16
#define BIT_MASK_RESP_RRSR_VHT				0xff
#define BIT_RESP_RRSR_VHT(x)				(((x) & BIT_MASK_RESP_RRSR_VHT) << BIT_SHIFT_RESP_RRSR_VHT)
#define BITS_RESP_RRSR_VHT				(BIT_MASK_RESP_RRSR_VHT << BIT_SHIFT_RESP_RRSR_VHT)
#define BIT_CLEAR_RESP_RRSR_VHT(x)			((x) & (~BITS_RESP_RRSR_VHT))
#define BIT_GET_RESP_RRSR_VHT(x)			(((x) >> BIT_SHIFT_RESP_RRSR_VHT) & BIT_MASK_RESP_RRSR_VHT)
#define BIT_SET_RESP_RRSR_VHT(x, v)			(BIT_CLEAR_RESP_RRSR_VHT(x) | BIT_RESP_RRSR_VHT(v))

#define BIT_SHIFT_RESP_RRSR_HT				8
#define BIT_MASK_RESP_RRSR_HT				0xff
#define BIT_RESP_RRSR_HT(x)				(((x) & BIT_MASK_RESP_RRSR_HT) << BIT_SHIFT_RESP_RRSR_HT)
#define BITS_RESP_RRSR_HT				(BIT_MASK_RESP_RRSR_HT << BIT_SHIFT_RESP_RRSR_HT)
#define BIT_CLEAR_RESP_RRSR_HT(x)			((x) & (~BITS_RESP_RRSR_HT))
#define BIT_GET_RESP_RRSR_HT(x)			(((x) >> BIT_SHIFT_RESP_RRSR_HT) & BIT_MASK_RESP_RRSR_HT)
#define BIT_SET_RESP_RRSR_HT(x, v)			(BIT_CLEAR_RESP_RRSR_HT(x) | BIT_RESP_RRSR_HT(v))

#define BIT_SHIFT_RESP_RRSR_OFDM			0
#define BIT_MASK_RESP_RRSR_OFDM			0xff
#define BIT_RESP_RRSR_OFDM(x)				(((x) & BIT_MASK_RESP_RRSR_OFDM) << BIT_SHIFT_RESP_RRSR_OFDM)
#define BITS_RESP_RRSR_OFDM				(BIT_MASK_RESP_RRSR_OFDM << BIT_SHIFT_RESP_RRSR_OFDM)
#define BIT_CLEAR_RESP_RRSR_OFDM(x)			((x) & (~BITS_RESP_RRSR_OFDM))
#define BIT_GET_RESP_RRSR_OFDM(x)			(((x) >> BIT_SHIFT_RESP_RRSR_OFDM) & BIT_MASK_RESP_RRSR_OFDM)
#define BIT_SET_RESP_RRSR_OFDM(x, v)			(BIT_CLEAR_RESP_RRSR_OFDM(x) | BIT_RESP_RRSR_OFDM(v))

/* 2 REG_RESP_RATE_RRSR_1			(Offset 0x17BC) */

#define BIT_SHIFT_RESP_RRSR_CCK			4
#define BIT_MASK_RESP_RRSR_CCK				0xf
#define BIT_RESP_RRSR_CCK(x)				(((x) & BIT_MASK_RESP_RRSR_CCK) << BIT_SHIFT_RESP_RRSR_CCK)
#define BITS_RESP_RRSR_CCK				(BIT_MASK_RESP_RRSR_CCK << BIT_SHIFT_RESP_RRSR_CCK)
#define BIT_CLEAR_RESP_RRSR_CCK(x)			((x) & (~BITS_RESP_RRSR_CCK))
#define BIT_GET_RESP_RRSR_CCK(x)			(((x) >> BIT_SHIFT_RESP_RRSR_CCK) & BIT_MASK_RESP_RRSR_CCK)
#define BIT_SET_RESP_RRSR_CCK(x, v)			(BIT_CLEAR_RESP_RRSR_CCK(x) | BIT_RESP_RRSR_CCK(v))

#define BIT_SHIFT_RESP_RATE_EN				0
#define BIT_MASK_RESP_RATE_EN				0xf
#define BIT_RESP_RATE_EN(x)				(((x) & BIT_MASK_RESP_RATE_EN) << BIT_SHIFT_RESP_RATE_EN)
#define BITS_RESP_RATE_EN				(BIT_MASK_RESP_RATE_EN << BIT_SHIFT_RESP_RATE_EN)
#define BIT_CLEAR_RESP_RATE_EN(x)			((x) & (~BITS_RESP_RATE_EN))
#define BIT_GET_RESP_RATE_EN(x)			(((x) >> BIT_SHIFT_RESP_RATE_EN) & BIT_MASK_RESP_RATE_EN)
#define BIT_SET_RESP_RATE_EN(x, v)			(BIT_CLEAR_RESP_RATE_EN(x) | BIT_RESP_RATE_EN(v))

/* 2 REG_BEAMFORMING_CTRL			(Offset 0x17C0) */

#define BIT_SHIFT_WMAC_HE_CSI_RATE			23
#define BIT_MASK_WMAC_HE_CSI_RATE			0x1ff
#define BIT_WMAC_HE_CSI_RATE(x)			(((x) & BIT_MASK_WMAC_HE_CSI_RATE) << BIT_SHIFT_WMAC_HE_CSI_RATE)
#define BITS_WMAC_HE_CSI_RATE				(BIT_MASK_WMAC_HE_CSI_RATE << BIT_SHIFT_WMAC_HE_CSI_RATE)
#define BIT_CLEAR_WMAC_HE_CSI_RATE(x)			((x) & (~BITS_WMAC_HE_CSI_RATE))
#define BIT_GET_WMAC_HE_CSI_RATE(x)			(((x) >> BIT_SHIFT_WMAC_HE_CSI_RATE) & BIT_MASK_WMAC_HE_CSI_RATE)
#define BIT_SET_WMAC_HE_CSI_RATE(x, v)			(BIT_CLEAR_WMAC_HE_CSI_RATE(x) | BIT_WMAC_HE_CSI_RATE(v))

#define BIT_SHIFT_WMAC_VHT_CSI_RATE			14
#define BIT_MASK_WMAC_VHT_CSI_RATE			0x1ff
#define BIT_WMAC_VHT_CSI_RATE(x)			(((x) & BIT_MASK_WMAC_VHT_CSI_RATE) << BIT_SHIFT_WMAC_VHT_CSI_RATE)
#define BITS_WMAC_VHT_CSI_RATE				(BIT_MASK_WMAC_VHT_CSI_RATE << BIT_SHIFT_WMAC_VHT_CSI_RATE)
#define BIT_CLEAR_WMAC_VHT_CSI_RATE(x)			((x) & (~BITS_WMAC_VHT_CSI_RATE))
#define BIT_GET_WMAC_VHT_CSI_RATE(x)			(((x) >> BIT_SHIFT_WMAC_VHT_CSI_RATE) & BIT_MASK_WMAC_VHT_CSI_RATE)
#define BIT_SET_WMAC_VHT_CSI_RATE(x, v)		(BIT_CLEAR_WMAC_VHT_CSI_RATE(x) | BIT_WMAC_VHT_CSI_RATE(v))

#define BIT_SHIFT_WMAC_HT_CSI_RATE			5
#define BIT_MASK_WMAC_HT_CSI_RATE			0x1ff
#define BIT_WMAC_HT_CSI_RATE(x)			(((x) & BIT_MASK_WMAC_HT_CSI_RATE) << BIT_SHIFT_WMAC_HT_CSI_RATE)
#define BITS_WMAC_HT_CSI_RATE				(BIT_MASK_WMAC_HT_CSI_RATE << BIT_SHIFT_WMAC_HT_CSI_RATE)
#define BIT_CLEAR_WMAC_HT_CSI_RATE(x)			((x) & (~BITS_WMAC_HT_CSI_RATE))
#define BIT_GET_WMAC_HT_CSI_RATE(x)			(((x) >> BIT_SHIFT_WMAC_HT_CSI_RATE) & BIT_MASK_WMAC_HT_CSI_RATE)
#define BIT_SET_WMAC_HT_CSI_RATE(x, v)			(BIT_CLEAR_WMAC_HT_CSI_RATE(x) | BIT_WMAC_HT_CSI_RATE(v))

#define BIT_SHIFT_WMAC_MIMO_PARA_CNT			2
#define BIT_MASK_WMAC_MIMO_PARA_CNT			0x7
#define BIT_WMAC_MIMO_PARA_CNT(x)			(((x) & BIT_MASK_WMAC_MIMO_PARA_CNT) << BIT_SHIFT_WMAC_MIMO_PARA_CNT)
#define BITS_WMAC_MIMO_PARA_CNT			(BIT_MASK_WMAC_MIMO_PARA_CNT << BIT_SHIFT_WMAC_MIMO_PARA_CNT)
#define BIT_CLEAR_WMAC_MIMO_PARA_CNT(x)		((x) & (~BITS_WMAC_MIMO_PARA_CNT))
#define BIT_GET_WMAC_MIMO_PARA_CNT(x)			(((x) >> BIT_SHIFT_WMAC_MIMO_PARA_CNT) & BIT_MASK_WMAC_MIMO_PARA_CNT)
#define BIT_SET_WMAC_MIMO_PARA_CNT(x, v)		(BIT_CLEAR_WMAC_MIMO_PARA_CNT(x) | BIT_WMAC_MIMO_PARA_CNT(v))

#define BIT_WMAC_CSI_BFRP_STOPTX			BIT(1)
#define BIT_WMAC_HE_NDPA_EN				BIT(0)

/* 2 REG_CSI_RRSR_BITMAP			(Offset 0x17C4) */

#define BIT_SHIFT_WMAC_CSI_RRSR_BITMAP			0
#define BIT_MASK_WMAC_CSI_RRSR_BITMAP			0xffffffffL
#define BIT_WMAC_CSI_RRSR_BITMAP(x)			(((x) & BIT_MASK_WMAC_CSI_RRSR_BITMAP) << BIT_SHIFT_WMAC_CSI_RRSR_BITMAP)
#define BITS_WMAC_CSI_RRSR_BITMAP			(BIT_MASK_WMAC_CSI_RRSR_BITMAP << BIT_SHIFT_WMAC_CSI_RRSR_BITMAP)
#define BIT_CLEAR_WMAC_CSI_RRSR_BITMAP(x)		((x) & (~BITS_WMAC_CSI_RRSR_BITMAP))
#define BIT_GET_WMAC_CSI_RRSR_BITMAP(x)		(((x) >> BIT_SHIFT_WMAC_CSI_RRSR_BITMAP) & BIT_MASK_WMAC_CSI_RRSR_BITMAP)
#define BIT_SET_WMAC_CSI_RRSR_BITMAP(x, v)		(BIT_CLEAR_WMAC_CSI_RRSR_BITMAP(x) | BIT_WMAC_CSI_RRSR_BITMAP(v))

/* 2 REG_LBK_CFG				(Offset 0x17C8) */

#define BIT_SHIFT_R_MACLBK_RDY_PERIOD			0
#define BIT_MASK_R_MACLBK_RDY_PERIOD			0xfff
#define BIT_R_MACLBK_RDY_PERIOD(x)			(((x) & BIT_MASK_R_MACLBK_RDY_PERIOD) << BIT_SHIFT_R_MACLBK_RDY_PERIOD)
#define BITS_R_MACLBK_RDY_PERIOD			(BIT_MASK_R_MACLBK_RDY_PERIOD << BIT_SHIFT_R_MACLBK_RDY_PERIOD)
#define BIT_CLEAR_R_MACLBK_RDY_PERIOD(x)		((x) & (~BITS_R_MACLBK_RDY_PERIOD))
#define BIT_GET_R_MACLBK_RDY_PERIOD(x)			(((x) >> BIT_SHIFT_R_MACLBK_RDY_PERIOD) & BIT_MASK_R_MACLBK_RDY_PERIOD)
#define BIT_SET_R_MACLBK_RDY_PERIOD(x, v)		(BIT_CLEAR_R_MACLBK_RDY_PERIOD(x) | BIT_R_MACLBK_RDY_PERIOD(v))

/* 2 REG_GID_POS_EN_H			(Offset 0x17CC) */

#define BIT_SHIFT_R_GID_POSITION_EN_H			0
#define BIT_MASK_R_GID_POSITION_EN_H			0xffffffffL
#define BIT_R_GID_POSITION_EN_H(x)			(((x) & BIT_MASK_R_GID_POSITION_EN_H) << BIT_SHIFT_R_GID_POSITION_EN_H)
#define BITS_R_GID_POSITION_EN_H			(BIT_MASK_R_GID_POSITION_EN_H << BIT_SHIFT_R_GID_POSITION_EN_H)
#define BIT_CLEAR_R_GID_POSITION_EN_H(x)		((x) & (~BITS_R_GID_POSITION_EN_H))
#define BIT_GET_R_GID_POSITION_EN_H(x)			(((x) >> BIT_SHIFT_R_GID_POSITION_EN_H) & BIT_MASK_R_GID_POSITION_EN_H)
#define BIT_SET_R_GID_POSITION_EN_H(x, v)		(BIT_CLEAR_R_GID_POSITION_EN_H(x) | BIT_R_GID_POSITION_EN_H(v))

/* 2 REG_TRX_PKTCNT_CTRL			(Offset 0x17D0) */

#define BIT_R_TXPKTCNT_RST				BIT(11)
#define BIT_R_TX_UDPKTCNT_SET				BIT(10)

#define BIT_SHIFT_R_WMAC_TXPKTCNT_SEL			6
#define BIT_MASK_R_WMAC_TXPKTCNT_SEL			0xf
#define BIT_R_WMAC_TXPKTCNT_SEL(x)			(((x) & BIT_MASK_R_WMAC_TXPKTCNT_SEL) << BIT_SHIFT_R_WMAC_TXPKTCNT_SEL)
#define BITS_R_WMAC_TXPKTCNT_SEL			(BIT_MASK_R_WMAC_TXPKTCNT_SEL << BIT_SHIFT_R_WMAC_TXPKTCNT_SEL)
#define BIT_CLEAR_R_WMAC_TXPKTCNT_SEL(x)		((x) & (~BITS_R_WMAC_TXPKTCNT_SEL))
#define BIT_GET_R_WMAC_TXPKTCNT_SEL(x)			(((x) >> BIT_SHIFT_R_WMAC_TXPKTCNT_SEL) & BIT_MASK_R_WMAC_TXPKTCNT_SEL)
#define BIT_SET_R_WMAC_TXPKTCNT_SEL(x, v)		(BIT_CLEAR_R_WMAC_TXPKTCNT_SEL(x) | BIT_R_WMAC_TXPKTCNT_SEL(v))

#define BIT_SHIFT_R_WMAC_TXPKTCNT_CFG			0
#define BIT_MASK_R_WMAC_TXPKTCNT_CFG			0x3f
#define BIT_R_WMAC_TXPKTCNT_CFG(x)			(((x) & BIT_MASK_R_WMAC_TXPKTCNT_CFG) << BIT_SHIFT_R_WMAC_TXPKTCNT_CFG)
#define BITS_R_WMAC_TXPKTCNT_CFG			(BIT_MASK_R_WMAC_TXPKTCNT_CFG << BIT_SHIFT_R_WMAC_TXPKTCNT_CFG)
#define BIT_CLEAR_R_WMAC_TXPKTCNT_CFG(x)		((x) & (~BITS_R_WMAC_TXPKTCNT_CFG))
#define BIT_GET_R_WMAC_TXPKTCNT_CFG(x)			(((x) >> BIT_SHIFT_R_WMAC_TXPKTCNT_CFG) & BIT_MASK_R_WMAC_TXPKTCNT_CFG)
#define BIT_SET_R_WMAC_TXPKTCNT_CFG(x, v)		(BIT_CLEAR_R_WMAC_TXPKTCNT_CFG(x) | BIT_R_WMAC_TXPKTCNT_CFG(v))

/* 2 REG_TRX_PKTCNT_RPT			(Offset 0x17D4) */

#define BIT_SHIFT_RO_WMAC_TXPKTCNT_RPT			0
#define BIT_MASK_RO_WMAC_TXPKTCNT_RPT			0x3ffffff
#define BIT_RO_WMAC_TXPKTCNT_RPT(x)			(((x) & BIT_MASK_RO_WMAC_TXPKTCNT_RPT) << BIT_SHIFT_RO_WMAC_TXPKTCNT_RPT)
#define BITS_RO_WMAC_TXPKTCNT_RPT			(BIT_MASK_RO_WMAC_TXPKTCNT_RPT << BIT_SHIFT_RO_WMAC_TXPKTCNT_RPT)
#define BIT_CLEAR_RO_WMAC_TXPKTCNT_RPT(x)		((x) & (~BITS_RO_WMAC_TXPKTCNT_RPT))
#define BIT_GET_RO_WMAC_TXPKTCNT_RPT(x)		(((x) >> BIT_SHIFT_RO_WMAC_TXPKTCNT_RPT) & BIT_MASK_RO_WMAC_TXPKTCNT_RPT)
#define BIT_SET_RO_WMAC_TXPKTCNT_RPT(x, v)		(BIT_CLEAR_RO_WMAC_TXPKTCNT_RPT(x) | BIT_RO_WMAC_TXPKTCNT_RPT(v))

/* 2 REG_BEAMFORMING_MIMO_STATUS		(Offset 0x17D8) */

#define BIT_SHIFT_RO_WMAC_HE_CSI_MIMO_H		0
#define BIT_MASK_RO_WMAC_HE_CSI_MIMO_H			0xffffff
#define BIT_RO_WMAC_HE_CSI_MIMO_H(x)			(((x) & BIT_MASK_RO_WMAC_HE_CSI_MIMO_H) << BIT_SHIFT_RO_WMAC_HE_CSI_MIMO_H)
#define BITS_RO_WMAC_HE_CSI_MIMO_H			(BIT_MASK_RO_WMAC_HE_CSI_MIMO_H << BIT_SHIFT_RO_WMAC_HE_CSI_MIMO_H)
#define BIT_CLEAR_RO_WMAC_HE_CSI_MIMO_H(x)		((x) & (~BITS_RO_WMAC_HE_CSI_MIMO_H))
#define BIT_GET_RO_WMAC_HE_CSI_MIMO_H(x)		(((x) >> BIT_SHIFT_RO_WMAC_HE_CSI_MIMO_H) & BIT_MASK_RO_WMAC_HE_CSI_MIMO_H)
#define BIT_SET_RO_WMAC_HE_CSI_MIMO_H(x, v)		(BIT_CLEAR_RO_WMAC_HE_CSI_MIMO_H(x) | BIT_RO_WMAC_HE_CSI_MIMO_H(v))

/* 2 REG_PPDU_STATUS_CFG			(Offset 0x17DC) */

#define BIT_SHIFT_R_STSBUF_ENDADDR			4
#define BIT_MASK_R_STSBUF_ENDADDR			0xff
#define BIT_R_STSBUF_ENDADDR(x)			(((x) & BIT_MASK_R_STSBUF_ENDADDR) << BIT_SHIFT_R_STSBUF_ENDADDR)
#define BITS_R_STSBUF_ENDADDR				(BIT_MASK_R_STSBUF_ENDADDR << BIT_SHIFT_R_STSBUF_ENDADDR)
#define BIT_CLEAR_R_STSBUF_ENDADDR(x)			((x) & (~BITS_R_STSBUF_ENDADDR))
#define BIT_GET_R_STSBUF_ENDADDR(x)			(((x) >> BIT_SHIFT_R_STSBUF_ENDADDR) & BIT_MASK_R_STSBUF_ENDADDR)
#define BIT_SET_R_STSBUF_ENDADDR(x, v)			(BIT_CLEAR_R_STSBUF_ENDADDR(x) | BIT_R_STSBUF_ENDADDR(v))

#define BIT_SHIFT_R_STSBUF_THRESHOD			0
#define BIT_MASK_R_STSBUF_THRESHOD			0xf
#define BIT_R_STSBUF_THRESHOD(x)			(((x) & BIT_MASK_R_STSBUF_THRESHOD) << BIT_SHIFT_R_STSBUF_THRESHOD)
#define BITS_R_STSBUF_THRESHOD				(BIT_MASK_R_STSBUF_THRESHOD << BIT_SHIFT_R_STSBUF_THRESHOD)
#define BIT_CLEAR_R_STSBUF_THRESHOD(x)			((x) & (~BITS_R_STSBUF_THRESHOD))
#define BIT_GET_R_STSBUF_THRESHOD(x)			(((x) >> BIT_SHIFT_R_STSBUF_THRESHOD) & BIT_MASK_R_STSBUF_THRESHOD)
#define BIT_SET_R_STSBUF_THRESHOD(x, v)		(BIT_CLEAR_R_STSBUF_THRESHOD(x) | BIT_R_STSBUF_THRESHOD(v))

/* 2 REG_RESP_CONTROL_1			(Offset 0x17E0) */

#define BIT_WMAC_TXRAW_IGNOREA1			BIT(17)
#define BIT_RESP_ACTRL_BQR_EN				BIT(16)
#define BIT_RESP_ACTRL_UPH_EN				BIT(15)
#define BIT_RESP_ACTRL_BSR_EN				BIT(14)
#define BIT_RESP_ACTRL_CAS_EN				BIT(13)
#define BIT_RESP_LDPC_SEL				BIT(12)
#define BIT_RESP_GID_SEL				BIT(11)

#define BIT_SHIFT_RESP_DOPPLER_CTRL			9
#define BIT_MASK_RESP_DOPPLER_CTRL			0x3
#define BIT_RESP_DOPPLER_CTRL(x)			(((x) & BIT_MASK_RESP_DOPPLER_CTRL) << BIT_SHIFT_RESP_DOPPLER_CTRL)
#define BITS_RESP_DOPPLER_CTRL				(BIT_MASK_RESP_DOPPLER_CTRL << BIT_SHIFT_RESP_DOPPLER_CTRL)
#define BIT_CLEAR_RESP_DOPPLER_CTRL(x)			((x) & (~BITS_RESP_DOPPLER_CTRL))
#define BIT_GET_RESP_DOPPLER_CTRL(x)			(((x) >> BIT_SHIFT_RESP_DOPPLER_CTRL) & BIT_MASK_RESP_DOPPLER_CTRL)
#define BIT_SET_RESP_DOPPLER_CTRL(x, v)		(BIT_CLEAR_RESP_DOPPLER_CTRL(x) | BIT_RESP_DOPPLER_CTRL(v))

#define BIT_RESP_DOPPLER_SEL				BIT(8)
#define BIT_RESP_DCM_SEL				BIT(7)
#define BIT_RESP_BSR_FORMAT				BIT(6)

#define BIT_SHIFT_RESP_NOMINAL_PAD			4
#define BIT_MASK_RESP_NOMINAL_PAD			0x3
#define BIT_RESP_NOMINAL_PAD(x)			(((x) & BIT_MASK_RESP_NOMINAL_PAD) << BIT_SHIFT_RESP_NOMINAL_PAD)
#define BITS_RESP_NOMINAL_PAD				(BIT_MASK_RESP_NOMINAL_PAD << BIT_SHIFT_RESP_NOMINAL_PAD)
#define BIT_CLEAR_RESP_NOMINAL_PAD(x)			((x) & (~BITS_RESP_NOMINAL_PAD))
#define BIT_GET_RESP_NOMINAL_PAD(x)			(((x) >> BIT_SHIFT_RESP_NOMINAL_PAD) & BIT_MASK_RESP_NOMINAL_PAD)
#define BIT_SET_RESP_NOMINAL_PAD(x, v)			(BIT_CLEAR_RESP_NOMINAL_PAD(x) | BIT_RESP_NOMINAL_PAD(v))

#define BIT_RESP_EARLY_START				BIT(3)
#define BIT_RESP_USE_EARLY_FCS				BIT(2)
#define BIT_RESP_ALLACK_EN				BIT(1)

/* 2 REG_SPATIAL_REUSE_CONTROL		(Offset 0x17E4) */

#define BIT_SHIFT_TXPWR_CH20_DATA			1
#define BIT_MASK_TXPWR_CH20_DATA			0xff
#define BIT_TXPWR_CH20_DATA(x)				(((x) & BIT_MASK_TXPWR_CH20_DATA) << BIT_SHIFT_TXPWR_CH20_DATA)
#define BITS_TXPWR_CH20_DATA				(BIT_MASK_TXPWR_CH20_DATA << BIT_SHIFT_TXPWR_CH20_DATA)
#define BIT_CLEAR_TXPWR_CH20_DATA(x)			((x) & (~BITS_TXPWR_CH20_DATA))
#define BIT_GET_TXPWR_CH20_DATA(x)			(((x) >> BIT_SHIFT_TXPWR_CH20_DATA) & BIT_MASK_TXPWR_CH20_DATA)
#define BIT_SET_TXPWR_CH20_DATA(x, v)			(BIT_CLEAR_TXPWR_CH20_DATA(x) | BIT_TXPWR_CH20_DATA(v))

#define BIT_TXPWR_FAST_MODE_EN				BIT(0)

/* 2 REG_RX_SUPPER_ADDRESS3_L		(Offset 0x17E8) */

#define BIT_SHIFT_R_SUP_ADDR3_L			0
#define BIT_MASK_R_SUP_ADDR3_L				0xffffffffL
#define BIT_R_SUP_ADDR3_L(x)				(((x) & BIT_MASK_R_SUP_ADDR3_L) << BIT_SHIFT_R_SUP_ADDR3_L)
#define BITS_R_SUP_ADDR3_L				(BIT_MASK_R_SUP_ADDR3_L << BIT_SHIFT_R_SUP_ADDR3_L)
#define BIT_CLEAR_R_SUP_ADDR3_L(x)			((x) & (~BITS_R_SUP_ADDR3_L))
#define BIT_GET_R_SUP_ADDR3_L(x)			(((x) >> BIT_SHIFT_R_SUP_ADDR3_L) & BIT_MASK_R_SUP_ADDR3_L)
#define BIT_SET_R_SUP_ADDR3_L(x, v)			(BIT_CLEAR_R_SUP_ADDR3_L(x) | BIT_R_SUP_ADDR3_L(v))

/* 2 REG_RX_SUPPER_ADDRESS3_H		(Offset 0x17EC) */

#define BIT_R_SUP_ADDR3_EN				BIT(16)

#define BIT_SHIFT_R_SUP_ADDR3_H			0
#define BIT_MASK_R_SUP_ADDR3_H				0xffff
#define BIT_R_SUP_ADDR3_H(x)				(((x) & BIT_MASK_R_SUP_ADDR3_H) << BIT_SHIFT_R_SUP_ADDR3_H)
#define BITS_R_SUP_ADDR3_H				(BIT_MASK_R_SUP_ADDR3_H << BIT_SHIFT_R_SUP_ADDR3_H)
#define BIT_CLEAR_R_SUP_ADDR3_H(x)			((x) & (~BITS_R_SUP_ADDR3_H))
#define BIT_GET_R_SUP_ADDR3_H(x)			(((x) >> BIT_SHIFT_R_SUP_ADDR3_H) & BIT_MASK_R_SUP_ADDR3_H)
#define BIT_SET_R_SUP_ADDR3_H(x, v)			(BIT_CLEAR_R_SUP_ADDR3_H(x) | BIT_R_SUP_ADDR3_H(v))

/* 2 REG_MASK_LA_TRX_DBG_L			(Offset 0x17F0) */

#define BIT_SHIFT_LA_TRX_PATTERN_MASK_L		0
#define BIT_MASK_LA_TRX_PATTERN_MASK_L			0xffffffffL
#define BIT_LA_TRX_PATTERN_MASK_L(x)			(((x) & BIT_MASK_LA_TRX_PATTERN_MASK_L) << BIT_SHIFT_LA_TRX_PATTERN_MASK_L)
#define BITS_LA_TRX_PATTERN_MASK_L			(BIT_MASK_LA_TRX_PATTERN_MASK_L << BIT_SHIFT_LA_TRX_PATTERN_MASK_L)
#define BIT_CLEAR_LA_TRX_PATTERN_MASK_L(x)		((x) & (~BITS_LA_TRX_PATTERN_MASK_L))
#define BIT_GET_LA_TRX_PATTERN_MASK_L(x)		(((x) >> BIT_SHIFT_LA_TRX_PATTERN_MASK_L) & BIT_MASK_LA_TRX_PATTERN_MASK_L)
#define BIT_SET_LA_TRX_PATTERN_MASK_L(x, v)		(BIT_CLEAR_LA_TRX_PATTERN_MASK_L(x) | BIT_LA_TRX_PATTERN_MASK_L(v))

/* 2 REG_MASK_LA_TRX_DBG_H			(Offset 0x17F4) */

#define BIT_SHIFT_LA_TRX_PATTERN_MASK_H		0
#define BIT_MASK_LA_TRX_PATTERN_MASK_H			0xffffffffL
#define BIT_LA_TRX_PATTERN_MASK_H(x)			(((x) & BIT_MASK_LA_TRX_PATTERN_MASK_H) << BIT_SHIFT_LA_TRX_PATTERN_MASK_H)
#define BITS_LA_TRX_PATTERN_MASK_H			(BIT_MASK_LA_TRX_PATTERN_MASK_H << BIT_SHIFT_LA_TRX_PATTERN_MASK_H)
#define BIT_CLEAR_LA_TRX_PATTERN_MASK_H(x)		((x) & (~BITS_LA_TRX_PATTERN_MASK_H))
#define BIT_GET_LA_TRX_PATTERN_MASK_H(x)		(((x) >> BIT_SHIFT_LA_TRX_PATTERN_MASK_H) & BIT_MASK_LA_TRX_PATTERN_MASK_H)
#define BIT_SET_LA_TRX_PATTERN_MASK_H(x, v)		(BIT_CLEAR_LA_TRX_PATTERN_MASK_H(x) | BIT_LA_TRX_PATTERN_MASK_H(v))

/* 2 REG_REF_LA_TRX_DBG_L			(Offset 0x17F8) */

#define BIT_SHIFT_LA_TRX_PATTERN_REF_L			0
#define BIT_MASK_LA_TRX_PATTERN_REF_L			0xffffffffL
#define BIT_LA_TRX_PATTERN_REF_L(x)			(((x) & BIT_MASK_LA_TRX_PATTERN_REF_L) << BIT_SHIFT_LA_TRX_PATTERN_REF_L)
#define BITS_LA_TRX_PATTERN_REF_L			(BIT_MASK_LA_TRX_PATTERN_REF_L << BIT_SHIFT_LA_TRX_PATTERN_REF_L)
#define BIT_CLEAR_LA_TRX_PATTERN_REF_L(x)		((x) & (~BITS_LA_TRX_PATTERN_REF_L))
#define BIT_GET_LA_TRX_PATTERN_REF_L(x)		(((x) >> BIT_SHIFT_LA_TRX_PATTERN_REF_L) & BIT_MASK_LA_TRX_PATTERN_REF_L)
#define BIT_SET_LA_TRX_PATTERN_REF_L(x, v)		(BIT_CLEAR_LA_TRX_PATTERN_REF_L(x) | BIT_LA_TRX_PATTERN_REF_L(v))

/* 2 REG_REF_LA_TRX_DBG_H			(Offset 0x17FC) */

#define BIT_SHIFT_LA_TRX_PATTERN_REF_H			0
#define BIT_MASK_LA_TRX_PATTERN_REF_H			0xffffffffL
#define BIT_LA_TRX_PATTERN_REF_H(x)			(((x) & BIT_MASK_LA_TRX_PATTERN_REF_H) << BIT_SHIFT_LA_TRX_PATTERN_REF_H)
#define BITS_LA_TRX_PATTERN_REF_H			(BIT_MASK_LA_TRX_PATTERN_REF_H << BIT_SHIFT_LA_TRX_PATTERN_REF_H)
#define BIT_CLEAR_LA_TRX_PATTERN_REF_H(x)		((x) & (~BITS_LA_TRX_PATTERN_REF_H))
#define BIT_GET_LA_TRX_PATTERN_REF_H(x)		(((x) >> BIT_SHIFT_LA_TRX_PATTERN_REF_H) & BIT_MASK_LA_TRX_PATTERN_REF_H)
#define BIT_SET_LA_TRX_PATTERN_REF_H(x, v)		(BIT_CLEAR_LA_TRX_PATTERN_REF_H(x) | BIT_LA_TRX_PATTERN_REF_H(v))

#endif

#endif/* __RTL_WLAN_BITDEF_H__ */
